action: replace_file
content: "\"\"\"Settings for the application.\"\"\"\n\nfrom functools import lru_cache\n\
  from typing import Optional\n\nfrom pydantic import BaseSettings, Field\n\n\nclass\
  \ Settings(BaseSettings):\n    \"\"\"Application settings.\"\"\"\n\n    # API settings\n\
  \    api_host: str = Field(\"0.0.0.0\", env=\"API_HOST\")\n    api_port: int = Field(8000,\
  \ env=\"API_PORT\")\n    api_prefix: str = Field(\"/api/v1\", env=\"API_PREFIX\"\
  )\n    debug: bool = Field(False, env=\"DEBUG\")\n    cors_origins: list[str] =\
  \ Field([\"*\"], env=\"CORS_ORIGINS\")\n\n    # Database settings\n    database_url:\
  \ str = Field(..., env=\"DATABASE_URL\")\n    database_test_url: Optional[str] =\
  \ Field(None, env=\"DATABASE_TEST_URL\")\n\n    # JWT settings\n    jwt_secret_key:\
  \ str = Field(..., env=\"JWT_SECRET_KEY\")\n    jwt_algorithm: str = Field(\"HS256\"\
  , env=\"JWT_ALGORITHM\")\n    jwt_access_token_expire_minutes: int = Field(\n  \
  \      30, env=\"JWT_ACCESS_TOKEN_EXPIRE_MINUTES\"\n    )\n\n    # Security settings\n\
  \    bcrypt_rounds: int = Field(12, env=\"BCRYPT_ROUNDS\")\n\n    # LLM Client settings\n\
  \    openai_api_key: str = Field(..., env=\"OPENAI_API_KEY\")\n    openai_model_name:\
  \ str = Field(\"gpt-4\", env=\"OPENAI_MODEL_NAME\")\n    openai_max_tokens: int\
  \ = Field(1000, env=\"OPENAI_MAX_TOKENS\")\n    openai_temperature: float = Field(0.7,\
  \ env=\"OPENAI_TEMPERATURE\")\n\n    class Config:\n        \"\"\"Pydantic config.\"\
  \"\"\n\n        env_file = \".env\"\n        case_sensitive = False\n\n\n@lru_cache()\n\
  def get_settings() -> Settings:\n    \"\"\"Get cached settings instance.\"\"\"\n\
  \    return Settings()"
justification: Remove BaseLLMClient configuration settings to complete the cleanup
  of obsolete client code
target_path: src/config/settings.py
