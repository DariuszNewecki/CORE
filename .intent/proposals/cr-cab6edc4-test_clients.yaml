action: replace_file
content: "```python\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom src.core.clients\
  \ import CognitiveService\nfrom src.core.schemas import ChatRequest, ChatResponse\n\
  \n\nclass TestCognitiveService:\n    \"\"\"Test suite for CognitiveService client\"\
  \"\"\n\n    @pytest.fixture\n    def mock_config(self):\n        \"\"\"Mock configuration\
  \ for CognitiveService\"\"\"\n        return {\n            \"api_key\": \"test_api_key\"\
  ,\n            \"endpoint\": \"https://test-endpoint.com\",\n            \"model\"\
  : \"test-model\"\n        }\n\n    @pytest.fixture\n    def cognitive_service(self,\
  \ mock_config):\n        \"\"\"Create a CognitiveService instance with mock config\"\
  \"\"\n        return CognitiveService(mock_config)\n\n    def test_init_with_valid_config(self,\
  \ cognitive_service, mock_config):\n        \"\"\"Test that CognitiveService initializes\
  \ with valid config\"\"\"\n        assert cognitive_service.api_key == mock_config[\"\
  api_key\"]\n        assert cognitive_service.endpoint == mock_config[\"endpoint\"\
  ]\n        assert cognitive_service.model == mock_config[\"model\"]\n\n    def test_init_missing_required_config(self):\n\
  \        \"\"\"Test that CognitiveService raises error with missing required config\"\
  \"\"\n        with pytest.raises(ValueError):\n            CognitiveService({\"\
  api_key\": \"test\"})  # Missing endpoint and model\n\n    @patch('src.core.clients.requests.Session')\n\
  \    def test_chat_success(self, mock_session, cognitive_service):\n        \"\"\
  \"Test successful chat completion\"\"\"\n        # Mock response\n        mock_response\
  \ = Mock()\n        mock_response.status_code = 200\n        mock_response.json.return_value\
  \ = {\n            \"choices\": [{\"message\": {\"content\": \"Test response\"}}]\n\
  \        }\n        mock_session.return_value.post.return_value = mock_response\n\
  \n        # Create chat request\n        chat_request = ChatRequest(messages=[{\"\
  role\": \"user\", \"content\": \"Hello\"}])\n        \n        # Call chat method\n\
  \        response = cognitive_service.chat(chat_request)\n        \n        # Assertions\n\
  \        assert isinstance(response, ChatResponse)\n        assert response.content\
  \ == \"Test response\"\n        mock_session.return_value.post.assert_called_once()\n\
  \n    @patch('src.core.clients.requests.Session')\n    def test_chat_api_error(self,\
  \ mock_session, cognitive_service):\n        \"\"\"Test chat completion with API\
  \ error\"\"\"\n        # Mock error response\n        mock_response = Mock()\n \
  \       mock_response.status_code = 400\n        mock_response.text = \"Bad Request\"\
  \n        mock_session.return_value.post.return_value = mock_response\n\n      \
  \  chat_request = ChatRequest(messages=[{\"role\": \"user\", \"content\": \"Hello\"\
  }])\n        \n        with pytest.raises(Exception) as exc_info:\n            cognitive_service.chat(chat_request)\n\
  \        \n        assert \"API request failed\" in str(exc_info.value)\n\n    def\
  \ test_chat_invalid_request(self, cognitive_service):\n        \"\"\"Test chat completion\
  \ with invalid request\"\"\"\n        with pytest.raises(ValueError):\n        \
  \    cognitive_service.chat(\"invalid_request\")\n\n    @patch('src.core.clients.requests.Session')\n\
  \    def test_chat_with_custom_parameters(self, mock_session, cognitive_service):\n\
  \        \"\"\"Test chat completion with custom parameters\"\"\"\n        # Mock\
  \ response\n        mock_response = Mock()\n        mock_response.status_code =\
  \ 200\n        mock_response.json.return_value = {\n            \"choices\": [{\"\
  message\": {\"content\": \"Custom response\"}}]\n        }\n        mock_session.return_value.post.return_value\
  \ = mock_response\n\n        chat_request = ChatRequest(\n            messages=[{\"\
  role\": \"user\", \"content\": \"Hello\"}],\n            temperature=0.7,\n    \
  \        max_tokens=100\n        )\n        \n        response = cognitive_service.chat(chat_request)\n\
  \        \n        assert response.content == \"Custom response\"\n        call_args\
  \ = mock_session.return_value.post.call_args\n        assert \"temperature\" in\
  \ call_args[1]['json']\n        assert \"max_tokens\" in call_args[1]['json']\n\n\
  \    def test_str_representation(self, cognitive_service):\n        \"\"\"Test string\
  \ representation of CognitiveService\"\"\"\n        assert \"CognitiveService\"\
  \ in str(cognitive_service)\n        assert \"test-model\" in str(cognitive_service)\n\
  ```"
justification: Update test imports and test cases to use CognitiveService instead
  of BaseLLMClient to maintain test coverage after the migration
target_path: tests/test_clients.py
