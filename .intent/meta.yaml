version: "0.1.0"

# PURPOSE: canonical index of constitutional & governance files (.intent is the constitution)
constitution:
  approvers: "constitution/approvers.yaml"
  operator_lifecycle: "constitution/operator_lifecycle.md"

mission:
  northstar: "mission/northstar.yaml"
  manifesto: "mission/manifesto.md"
  principles: "mission/principles.yaml"

policies:
  intent_guard: "policies/intent_guard.yaml"
  safety_policies: "policies/safety_policies.yaml"
  security_intents: "policies/security_intents.yaml"
  code_health_policy: "policies/code_health_policy.yaml"
  enforcement_model: "policies/enforcement_model.yaml"
  secrets_management: "policies/secrets_management.yaml"
  dependency_management: "policies/dependency_management.yaml"
  incident_response: "policies/incident_response.yaml"

prompts:
  constitutional_review: "prompts/constitutional_review.prompt"

knowledge:
  # Source-of-truth domain map (File 3 updated this to `domains:` format)
  source_structure: "knowledge/source_structure.yaml"
  # Optional knowledge graph artifact used by some tools
  codegraph: "knowledge/knowledge_graph.json"
  capability_tags: "knowledge/capability_tags.yaml"
  agent_roles: "knowledge/agent_roles.yaml"
  entry_point_patterns: "knowledge/entry_point_patterns.yaml"
  file_handlers: "knowledge/file_handlers.yaml"

evaluation:
  score_policy: "evaluation/score_policy.yaml"
  audit_checklist: "evaluation/audit_checklist.yaml"

config:
  local_mode: "config/local_mode.yaml"
  runtime_requirements: "config/runtime_requirements.yaml"

schemas:
  # NEW: manifest schema used by manifest_migrator.py (File 1)
  manifest: "schemas/manifest.schema.json"
  # Existing
  config: "schemas/config_schema.yaml"
  knowledge_graph_entry: "schemas/knowledge_graph_entry.schema.json"

# NEW: explicit manifests directory for domain manifests (used by manifest_migrator.py)
manifests:
  dir: "manifests"

# NEW: top-level reports path for tools that write drift evidence (File 4 uses this)
reports:
  drift: "reports/drift_report.json"

# Operator UX defaults for guard commands (keep as-is; CLI reads these)
operator_experience:
  guard:
    drift:
      default_format: pretty
      default_fail_on: any
      evidence_path: reports/drift_report.json
      labels:
        none: "NONE"
        success: "âœ… No capability drift"
        failure: "ðŸš¨ Drift detected"
