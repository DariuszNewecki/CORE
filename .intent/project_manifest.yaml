# .intent/project_manifest.yaml
#
# This is the single, canonical source of truth for the CORE project's
# high-level intent, capabilities, and configuration.
# All other manifests (e.g., function_manifest.json, codegraph.json) are
# derived from the information here and the source code itself.

name: "CORE"
version: "0.6.0" # Using the more recent version from the .json file
intent: "Build a self-improving AI coding assistant that can evolve itself through prompts, code, and validation."

# A comprehensive list of all capabilities the system is expected to have.
# This is the master list for all governance and validation checks.
required_capabilities:
  - prompt_interpretation
  - code_generation
  - syntax_validation
  - test_execution
  - introspection
  - alignment_checking
  - manifest_updating
  - self_correction
  - change_safety_enforcement
  - llm_orchestration
  - intent_guarding
  - semantic_validation
  - code_quality_analysis
  - system_logging
  - add_missing_docstrings
  - audit.check.required_files
  - audit.check.secrets 
  - audit.check.syntax
  - audit.check.project_manifest
  - audit.check.capability_coverage
  - audit.check.capability_definitions
  - audit.check.knowledge_graph_schema
  - audit.check.domain_integrity
  - audit.check.docstrings
  - audit.check.dead_code
  - audit.check.orphaned_intent_files
  - audit.check.environment
  - audit.check.proposals_schema
  - audit.check.proposals_drift
  - audit.check.proposals_list

# Defines the primary agents responsible for executing CORE's logic.
active_agents:
  - planner_agent
  - test_runner
  - validator_agent # Added for clarity

# Defines high-level roles for key directories.
folder_roles:
  "src/core": "Core logic and FastAPI services"
  "src/system": "Governance, introspection, and lifecycle tools"
  "src/agents": "Specialized AI actors (planners, reviewers, suggesters)"
  "tests": "Pytest-based validation for core behaviors"
  ".intent": "The 'brain' of the system: declarations, policies, and knowledge"

# Top-level configuration flags for system behavior.
configuration:
  allow_self_rewrites: true
  execution_mode: "auto" # 'auto' or 'manual_review'

# Metadata about the manifest file itself.
meta:
  created_by: "CORE v0.1 bootstrap"
  created_at: "2025-07-23T00:00:00Z"
  last_updated: "2025-08-05T12:00:00Z" # Using a placeholder for today

# --- Operator UX policy -------------------------------------------------------
operator_experience:
  guard:
    drift:
      # Default presentation when the operator runs the command with no flags:
      default_format: pretty        # options: pretty | table | json
      default_fail_on: any          # options: any | missing | undeclared
      strict_default: true          # require KG/artifact by default
      evidence_json: true           # always write JSON evidence to disk
      evidence_path: reports/drift_report.json
      labels:
        none: "NONE"                # how to label empty sections
        success: "âœ… No capability drift"
        failure: "ðŸš¨ Drift detected"  