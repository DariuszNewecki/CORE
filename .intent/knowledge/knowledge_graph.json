{
  "schema_version": "2.0.0",
  "metadata": {
    "files_scanned": 49,
    "total_symbols": 234,
    "timestamp_utc": "2025-08-11T17:48:38.729218+00:00"
  },
  "symbols": {
    "src/core/clients.py::BaseLLMClient": {
      "key": "src/core/clients.py::BaseLLMClient",
      "name": "BaseLLMClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Base class for LLM clients, handling common request logic for Chat APIs.",
      "docstring": "Base class for LLM clients, handling common request logic for Chat APIs.\nProvides shared initialization and error handling for all LLM clients.",
      "calls": [
        "AsyncClient",
        "ValueError",
        "debug",
        "endswith",
        "error",
        "json",
        "post",
        "raise_for_status",
        "rstrip"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "base_class",
      "last_updated": "2025-08-11T17:48:38.222120+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "framework_base_class",
      "structural_hash": "6ebc9f3fe58beda2f728125c9c709c18659ffe22b472f12b4bbda935855521cc"
    },
    "src/core/clients.py::__init__": {
      "key": "src/core/clients.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize the LLM client with API URL, key, and model name, setting up headers and async client.",
      "docstring": "Initialize the LLM client with API URL, key, and model name, setting up headers and async client.",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "line_number": 111,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.231616+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/clients.py::GeneratorClient",
      "structural_hash": "f263dd3b032d716198f799d5f7c7418c4ca46c174978f0faa35da0d1ac898ce1"
    },
    "src/core/clients.py::make_request": {
      "key": "src/core/clients.py::make_request",
      "name": "make_request",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt to the configured Chat Completions API. (Synchronous)",
      "docstring": "Sends a prompt to the configured Chat Completions API. (Synchronous)",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.225635+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "db6a3c19bcc087cf1580cbd8a5a5e5d14fceb57641eeb5f27f3c0a8963240dd9"
    },
    "src/core/clients.py::make_request_async": {
      "key": "src/core/clients.py::make_request_async",
      "name": "make_request_async",
      "type": "AsyncFunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt asynchronously to the configured Chat Completions API.",
      "docstring": "Sends a prompt asynchronously to the configured Chat Completions API.",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "line_number": 70,
      "is_async": true,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.228169+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "98c49e780fa5ae0371d459f230b9b7abeba4316a45fcad7652f3edca27fe83e6"
    },
    "src/core/clients.py::OrchestratorClient": {
      "key": "src/core/clients.py::OrchestratorClient",
      "name": "OrchestratorClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Client for the Orchestrator LLM (e.g., GPT-4, Claude 3).",
      "docstring": "Client for the Orchestrator LLM (e.g., GPT-4, Claude 3).\nResponsible for high-level planning and intent interpretation.",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "line_number": 93,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.229297+00:00",
      "is_class": true,
      "base_classes": [
        "BaseLLMClient"
      ],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "29a94da6ed639ce032676e4ee04047d9675813359a676e98e1eb463ebcd25e3c"
    },
    "src/core/clients.py::GeneratorClient": {
      "key": "src/core/clients.py::GeneratorClient",
      "name": "GeneratorClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Client for the Generator LLM (e.g., a specialized coding model).",
      "docstring": "Client for the Generator LLM (e.g., a specialized coding model).\nResponsible for code generation and detailed implementation.",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "line_number": 106,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.230877+00:00",
      "is_class": true,
      "base_classes": [
        "BaseLLMClient"
      ],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "2a43d65ec498bbafe6314a942478e57e49694578e3fb86d29ad6cc447705b60d"
    },
    "src/core/validation_pipeline.py::_load_safety_policies": {
      "key": "src/core/validation_pipeline.py::_load_safety_policies",
      "name": "_load_safety_policies",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and caches the safety policies from the .intent directory.",
      "docstring": "Loads and caches the safety policies from the .intent directory.",
      "calls": [
        "get",
        "get_repo_root",
        "load_config"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.236191+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "0736888d998ff773d207c79a3b34f0926bc9bb9439474d5a3d7b146ab0fec7ad"
    },
    "src/core/validation_pipeline.py::_get_full_attribute_name": {
      "key": "src/core/validation_pipeline.py::_get_full_attribute_name",
      "name": "_get_full_attribute_name",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "docstring": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "calls": [
        "insert",
        "isinstance",
        "join"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.237156+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "5f5a1af65af3fe0d7367a16ecf13b95c818fbbe4ba21999798c8de70809235d8"
    },
    "src/core/validation_pipeline.py::_find_dangerous_patterns": {
      "key": "src/core/validation_pipeline.py::_find_dangerous_patterns",
      "name": "_find_dangerous_patterns",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans the AST for calls and imports forbidden by safety policies.",
      "docstring": "Scans the AST for calls and imports forbidden by safety policies.",
      "calls": [
        "Path",
        "_get_full_attribute_name",
        "_load_safety_policies",
        "any",
        "append",
        "get",
        "isinstance",
        "match",
        "replace",
        "set",
        "split",
        "update",
        "walk"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "tree",
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.240785+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "7b41b31db2cbf4832239a322f7b6601cf8d3e38ab3dd27a56c127241904b8ec2"
    },
    "src/core/validation_pipeline.py::_check_for_todo_comments": {
      "key": "src/core/validation_pipeline.py::_check_for_todo_comments",
      "name": "_check_for_todo_comments",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans source code for TODO/FIXME comments and returns them as violations.",
      "docstring": "Scans source code for TODO/FIXME comments and returns them as violations.",
      "calls": [
        "append",
        "enumerate",
        "split",
        "splitlines",
        "strip"
      ],
      "line_number": 103,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.242620+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "34c7c62a42f9186c3149022eb6eaf6f9d5b4ac93b4ec1bfd497d53b8683712ea"
    },
    "src/core/validation_pipeline.py::_check_semantics": {
      "key": "src/core/validation_pipeline.py::_check_semantics",
      "name": "_check_semantics",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "semantic_validation",
      "intent": "Runs all policy-aware semantic checks on a string of Python code.",
      "docstring": "Runs all policy-aware semantic checks on a string of Python code.",
      "calls": [
        "_find_dangerous_patterns",
        "parse"
      ],
      "line_number": 119,
      "is_async": false,
      "parameters": [
        "code",
        "file_path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.243468+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "ece39488d6b3609566d4f20ff02c786df62f4ff875186071eec67a74bf757fde"
    },
    "src/core/validation_pipeline.py::_validate_python_code": {
      "key": "src/core/validation_pipeline.py::_validate_python_code",
      "name": "_validate_python_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Internal pipeline for Python code validation.",
      "docstring": "Internal pipeline for Python code validation.\nReturns the final code and a list of all found violations.",
      "calls": [
        "_check_for_todo_comments",
        "_check_semantics",
        "any",
        "append",
        "check_syntax",
        "extend",
        "fix_and_lint_code_with_ruff",
        "format_code_with_black",
        "str"
      ],
      "line_number": 128,
      "is_async": false,
      "parameters": [
        "path_hint",
        "code"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.245069+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "d073d1a6569d001b85857fece67ef49fa49a8338aeec6fa70f65e07827671ffd"
    },
    "src/core/validation_pipeline.py::_validate_yaml": {
      "key": "src/core/validation_pipeline.py::_validate_yaml",
      "name": "_validate_yaml",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Internal pipeline for YAML validation.",
      "docstring": "Internal pipeline for YAML validation.",
      "calls": [
        "append",
        "safe_load"
      ],
      "line_number": 161,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.246322+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "d898124cd4f9896ce3ac4882fef8bf678ddc03a78cba380d7d49d8d4c9436174"
    },
    "src/core/validation_pipeline.py::_get_file_classification": {
      "key": "src/core/validation_pipeline.py::_get_file_classification",
      "name": "_get_file_classification",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Determines the file type based on its extension.",
      "docstring": "Determines the file type based on its extension.",
      "calls": [
        "Path",
        "lower"
      ],
      "line_number": 175,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.247274+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "e19906999900626b56fdd8f4f99e738f7eba4902463206d542d1b14e594f3eee"
    },
    "src/core/validation_pipeline.py::validate_code": {
      "key": "src/core/validation_pipeline.py::validate_code",
      "name": "validate_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "code_quality_analysis",
      "intent": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type, returning a standardized dictionary with status, violations, and processed code.",
      "docstring": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type, returning a standardized dictionary with status, violations, and processed code.",
      "calls": [
        "_get_file_classification",
        "_validate_python_code",
        "_validate_yaml",
        "any",
        "debug",
        "get"
      ],
      "line_number": 184,
      "is_async": false,
      "parameters": [
        "file_path",
        "code",
        "quiet"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.248953+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "c08839228c63a9b5971aae49298220bfa2a5722b52ec4bc0ed6520cf99121584"
    },
    "src/core/git_service.py::GitService": {
      "key": "src/core/git_service.py::GitService",
      "name": "GitService",
      "type": "ClassDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Encapsulates Git operations for the CORE system.",
      "docstring": "Encapsulates Git operations for the CORE system.\nEnsures all file changes are committed with traceable messages.",
      "calls": [
        "Path",
        "RuntimeError",
        "ValueError",
        "_run_command",
        "debug",
        "error",
        "info",
        "is_dir",
        "is_git_repo",
        "join",
        "lower",
        "resolve",
        "run",
        "str",
        "strip",
        "warning"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.254272+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "354d269bf8dce8b7fd8702e7c1829f9d6a2b70abb51de4edc9437b1f8950ba79"
    },
    "src/core/git_service.py::__init__": {
      "key": "src/core/git_service.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize GitService with the resolved absolute path to the Git repository; raises ValueError if path is not a valid Git repo.",
      "docstring": "Initialize GitService with the resolved absolute path to the Git repository; raises ValueError if path is not a valid Git repo.",
      "calls": [
        "Path",
        "ValueError",
        "info",
        "is_git_repo",
        "resolve"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.255193+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "ef32ae74dfb49ea27846ae880fe6519f7cb0c1d10c79cbbbcc36f23a1e88171d"
    },
    "src/core/git_service.py::_run_command": {
      "key": "src/core/git_service.py::_run_command",
      "name": "_run_command",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "change_safety_enforcement",
      "intent": "Run a Git command and return stdout.",
      "docstring": "Run a Git command and return stdout.\n\nArgs:\n    command (list): Git command as a list (e.g., ['git', 'status']).\n\nReturns:\n    str: Command output, or raises RuntimeError on failure.",
      "calls": [
        "RuntimeError",
        "debug",
        "error",
        "join",
        "run",
        "strip"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "self",
        "command"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.256489+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "e2cb9747f42458c7cb0017ff424868af56a19a25b6ca2a5e514aab86387e73d2"
    },
    "src/core/git_service.py::add": {
      "key": "src/core/git_service.py::add",
      "name": "add",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stage a file or directory for commit.",
      "docstring": "Stage a file or directory for commit.\n\nArgs:\n    file_path (str): Path to stage. Defaults to '.' (all changes).",
      "calls": [
        "ValueError",
        "_run_command",
        "resolve"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.257555+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "4324b2b36783dbddd72723e1459732a9a493140953a791673ab12cd70e75d480"
    },
    "src/core/git_service.py::commit": {
      "key": "src/core/git_service.py::commit",
      "name": "commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Commit staged changes with a message.",
      "docstring": "Commit staged changes with a message.\nIf there are no changes to commit, this operation is a no-op and will not raise an error.\n\nArgs:\n    message (str): Commit message explaining the change.",
      "calls": [
        "_run_command",
        "info",
        "lower",
        "str"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [
        "self",
        "message"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.258800+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "5ea6f473bf196feb192fc8cfb2f8cdc3d502247ab8abb250de852f643bf5923d"
    },
    "src/core/git_service.py::is_git_repo": {
      "key": "src/core/git_service.py::is_git_repo",
      "name": "is_git_repo",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Check if the configured path is a valid Git repository.",
      "docstring": "Check if the configured path is a valid Git repository.\n\nReturns:\n    bool: True if it's a Git repo, False otherwise.",
      "calls": [
        "is_dir"
      ],
      "line_number": 96,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.259523+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "bb78f9e2f12bb6726d8f52e1699af9136d078d50eb79b14dff9abfdaffdf8880"
    },
    "src/core/git_service.py::get_current_commit": {
      "key": "src/core/git_service.py::get_current_commit",
      "name": "get_current_commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Gets the full SHA hash of the current commit (HEAD).",
      "docstring": "Gets the full SHA hash of the current commit (HEAD).",
      "calls": [
        "_run_command"
      ],
      "line_number": 106,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.260071+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "652a9292b257d0b11a698f85a9de723470f646f308259fbfcf0fbf91d571ac4a"
    },
    "src/core/git_service.py::reset_to_commit": {
      "key": "src/core/git_service.py::reset_to_commit",
      "name": "reset_to_commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Performs a hard reset to a specific commit hash.",
      "docstring": "Performs a hard reset to a specific commit hash.\nThis will discard all current changes.",
      "calls": [
        "_run_command",
        "info",
        "warning"
      ],
      "line_number": 112,
      "is_async": false,
      "parameters": [
        "self",
        "commit_hash"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.260940+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "8bec1d271f714ef832c3138d5031875d3c156d2c8cc02261ecaa4e76506639d3"
    },
    "src/core/syntax_checker.py::check_syntax": {
      "key": "src/core/syntax_checker.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/core/syntax_checker.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "syntax_validation",
      "intent": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "docstring": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "calls": [
        "endswith",
        "parse",
        "strip"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [
        "file_path",
        "code"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.262584+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "7333fe5bb50162c650fd9ca4c22379352d1fb0441833d9c02317b2094363b44b"
    },
    "src/core/black_formatter.py::format_code_with_black": {
      "key": "src/core/black_formatter.py::format_code_with_black",
      "name": "format_code_with_black",
      "type": "FunctionDef",
      "file": "src/core/black_formatter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "docstring": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "calls": [
        "Exception",
        "FileMode",
        "InvalidInput",
        "format_str"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.263972+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "15e647987d94914b55a1897be6e1c47df7f6840ebeaca3408e2719752a9e9fa1"
    },
    "src/core/test_runner.py::run_tests": {
      "key": "src/core/test_runner.py::run_tests",
      "name": "run_tests",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "test_execution",
      "intent": "Executes pytest on the tests/ directory, capturing stdout, stderr, exit code, and a summary, returning results as a structured dict.",
      "docstring": "Executes pytest on the tests/ directory, capturing stdout, stderr, exit code, and a summary, returning results as a structured dict.",
      "calls": [
        "Path",
        "_log_test_result",
        "_store_failure_if_any",
        "_summarize",
        "error",
        "getenv",
        "info",
        "int",
        "isoformat",
        "resolve",
        "run",
        "str",
        "strip",
        "utcnow",
        "warning"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "silent"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.268878+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "d3a32185efaa1749bc3b105509e7af1baadb1f4340c3efb532da6ebf67a86c79"
    },
    "src/core/test_runner.py::_summarize": {
      "key": "src/core/test_runner.py::_summarize",
      "name": "_summarize",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Error: Could not connect to LLM endpoint. Details: HTTPSConnectionPool(host='api.deepseek.com', port=443): Read timed out. (read timeout=180)",
      "docstring": "Error: Could not connect to LLM endpoint. Details: HTTPSConnectionPool(host='api.deepseek.com', port=443): Read timed out. (read timeout=180)",
      "calls": [
        "reversed",
        "splitlines",
        "strip"
      ],
      "line_number": 86,
      "is_async": false,
      "parameters": [
        "output"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.270163+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "8c0d11c470b2f2e028e8c955ab9369e0e41946c7fbd2c243fdf0140337c2ae84"
    },
    "src/core/test_runner.py::_log_test_result": {
      "key": "src/core/test_runner.py::_log_test_result",
      "name": "_log_test_result",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Appends a JSON record of a test run to the persistent log file.",
      "docstring": "Appends a JSON record of a test run to the persistent log file.",
      "calls": [
        "dumps",
        "open",
        "warning",
        "write"
      ],
      "line_number": 95,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.271144+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "83804f96879e56dce3b4fbe29258c654f55dd95d39ad71b6fe27178263fcebf9"
    },
    "src/core/test_runner.py::_store_failure_if_any": {
      "key": "src/core/test_runner.py::_store_failure_if_any",
      "name": "_store_failure_if_any",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Saves the details of a failed test run to a dedicated file for easy access.",
      "docstring": "Saves the details of a failed test run to a dedicated file for easy access.",
      "calls": [
        "dump",
        "exists",
        "get",
        "open",
        "remove",
        "warning"
      ],
      "line_number": 104,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.272472+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "95d784ba1e5795ba6547f6e35c2c45e51d373ff17ad289cd0bd53e773c7ed76b"
    },
    "src/core/main.py::lifespan": {
      "key": "src/core/main.py::lifespan",
      "name": "lifespan",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "docstring": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "calls": [
        "GeneratorClient",
        "GitService",
        "IntentGuard",
        "OrchestratorClient",
        "Path",
        "info",
        "introspection",
        "warning"
      ],
      "line_number": 33,
      "is_async": true,
      "parameters": [
        "app"
      ],
      "entry_point_type": "context_manager",
      "last_updated": "2025-08-11T17:48:38.274964+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e9b68e117b6519ebf97416f533f3cb98765c0a714753f184f70b9a282a78b366"
    },
    "src/core/main.py::GoalRequest": {
      "key": "src/core/main.py::GoalRequest",
      "name": "GoalRequest",
      "type": "ClassDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Defines the request body for the /execute_goal endpoint.",
      "docstring": "Defines the request body for the /execute_goal endpoint.",
      "calls": [],
      "line_number": 55,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.275550+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "08ef688f6285fa8d432bd6d7a0a1a10fb5383d96f9810676542b6e060d519a13"
    },
    "src/core/main.py::execute_goal": {
      "key": "src/core/main.py::execute_goal",
      "name": "execute_goal",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Execute a high-level goal by planning and generating code.",
      "docstring": "Execute a high-level goal by planning and generating code.",
      "calls": [
        "FileHandler",
        "HTTPException",
        "JSONResponse",
        "PlannerAgent",
        "error",
        "execute_plan",
        "info",
        "post",
        "str"
      ],
      "line_number": 60,
      "is_async": true,
      "parameters": [
        "request_data",
        "request"
      ],
      "entry_point_type": "fastapi_route_post",
      "last_updated": "2025-08-11T17:48:38.277433+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d40b3c03d802ecadf894643e5b8975f2648c0e2738264a0ab56def172cd205a5"
    },
    "src/core/main.py::root": {
      "key": "src/core/main.py::root",
      "name": "root",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Root endpoint \u2014 returns system status.",
      "docstring": "Root endpoint \u2014 returns system status.",
      "calls": [
        "get"
      ],
      "line_number": 95,
      "is_async": true,
      "parameters": [],
      "entry_point_type": "fastapi_route_get",
      "last_updated": "2025-08-11T17:48:38.278161+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "2d3272d333883f1d08138369625bda6d9ac3c0f2a3d7f83921bfaf0cc31faa25"
    },
    "src/core/prompt_pipeline.py::PromptPipeline": {
      "key": "src/core/prompt_pipeline.py::PromptPipeline",
      "name": "PromptPipeline",
      "type": "ClassDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].",
      "docstring": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].\nEnsures the LLM receives full context before generating code.",
      "calls": [
        "Path",
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest",
        "compile",
        "dump",
        "exists",
        "get",
        "group",
        "is_file",
        "isinstance",
        "read_text",
        "resolve",
        "safe_load",
        "split",
        "stat",
        "str",
        "strip",
        "sub"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.285807+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "08c6c20fe4e1adac3fbff62081bc117b96e3101be4a1f6518898f7f54f21eb90"
    },
    "src/core/prompt_pipeline.py::__init__": {
      "key": "src/core/prompt_pipeline.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize PromptPipeline with repository root.",
      "docstring": "Initialize PromptPipeline with repository root.\n\nArgs:\n    repo_path (Path): Root path of the repository.",
      "calls": [
        "Path",
        "compile",
        "resolve"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.286682+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "1b22cb99e2b51b97bb2a3791bf287bc677d7be076f9fee4c1185b5726b37add2"
    },
    "src/core/prompt_pipeline.py::_replace_context_match": {
      "key": "src/core/prompt_pipeline.py::_replace_context_match",
      "name": "_replace_context_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "docstring": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.288259+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "122b32086c2192f7026b3ab0c51b65bf63920a9bdbe09b92bf96fa15c148f211"
    },
    "src/core/prompt_pipeline.py::_inject_context": {
      "key": "src/core/prompt_pipeline.py::_inject_context",
      "name": "_inject_context",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[context:file.py]] directives with actual file content.",
      "docstring": "Replaces [[context:file.py]] directives with actual file content.",
      "calls": [
        "sub"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.288979+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "9dec30584551481830534026f4fdf8bc575f62facc5cd0ced5edf03b7f3c13e0"
    },
    "src/core/prompt_pipeline.py::_replace_include_match": {
      "key": "src/core/prompt_pipeline.py::_replace_include_match",
      "name": "_replace_include_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "docstring": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "line_number": 64,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.290687+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "84acb1cf0d90f434564302921b718ac1c44a7c77a0115343f19f93ca6ce136d7"
    },
    "src/core/prompt_pipeline.py::_inject_includes": {
      "key": "src/core/prompt_pipeline.py::_inject_includes",
      "name": "_inject_includes",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[include:file.py]] directives with file content.",
      "docstring": "Replaces [[include:file.py]] directives with file content.",
      "calls": [
        "sub"
      ],
      "line_number": 78,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.291417+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "1d837d4a2171fc0769a798a0805570b2a8bfe53f803d4ff04ccdbf159e85de71"
    },
    "src/core/prompt_pipeline.py::_replace_analysis_match": {
      "key": "src/core/prompt_pipeline.py::_replace_analysis_match",
      "name": "_replace_analysis_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "docstring": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "calls": [
        "group",
        "strip"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.292236+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "52f7dcc034d6c1182006fc20f0428fd0881ef029aea36cb6f681b940b53716d9"
    },
    "src/core/prompt_pipeline.py::_inject_analysis": {
      "key": "src/core/prompt_pipeline.py::_inject_analysis",
      "name": "_inject_analysis",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[analysis:file.py]] directives with code analysis.",
      "docstring": "Replaces [[analysis:file.py]] directives with code analysis.",
      "calls": [
        "sub"
      ],
      "line_number": 89,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.292849+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "5f1731cbe73a16bb16a2d776db8805687765bf160e638d9446d52c06178e59eb"
    },
    "src/core/prompt_pipeline.py::_replace_manifest_match": {
      "key": "src/core/prompt_pipeline.py::_replace_manifest_match",
      "name": "_replace_manifest_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "docstring": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "calls": [
        "dump",
        "exists",
        "get",
        "group",
        "isinstance",
        "read_text",
        "safe_load",
        "split",
        "str",
        "strip"
      ],
      "line_number": 93,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.294897+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "47ea4a80ad4c399fcb390b78921c240be52e076b8d3c958e4db2cbea6a76f5f0"
    },
    "src/core/prompt_pipeline.py::_inject_manifest": {
      "key": "src/core/prompt_pipeline.py::_inject_manifest",
      "name": "_inject_manifest",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "docstring": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "calls": [
        "sub"
      ],
      "line_number": 119,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.295704+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "cfb3ae83be6177716797594e17a63015e3f7dae20c8876aa77c3cba7a155a979"
    },
    "src/core/prompt_pipeline.py::process": {
      "key": "src/core/prompt_pipeline.py::process",
      "name": "process",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "prompt_interpretation",
      "intent": "Processes the full prompt by sequentially resolving all directives.",
      "docstring": "Processes the full prompt by sequentially resolving all directives.\nThis is the main entry point for prompt enrichment.",
      "calls": [
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest"
      ],
      "line_number": 124,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.296507+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "321c87aee4a7c73f0b8bf59f79b282006108f7ad11a66127fca9756c1f6a815a"
    },
    "src/core/capabilities.py::introspection": {
      "key": "src/core/capabilities.py::introspection",
      "name": "introspection",
      "type": "FunctionDef",
      "file": "src/core/capabilities.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "introspection",
      "intent": "Runs a full self-analysis cycle to inspect system structure and health.",
      "docstring": "Runs a full self-analysis cycle to inspect system structure and health.\nThis orchestrates the execution of the system's own introspection tools\nas separate, governed processes.",
      "calls": [
        "Path",
        "error",
        "info",
        "print",
        "resolve",
        "run",
        "warning"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-11T17:48:38.300038+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "22cc87e423515fe4db4d16c291f72fd6fff1decda806507620f29d50bb13bacd"
    },
    "src/core/ruff_linter.py::fix_and_lint_code_with_ruff": {
      "key": "src/core/ruff_linter.py::fix_and_lint_code_with_ruff",
      "name": "fix_and_lint_code_with_ruff",
      "type": "FunctionDef",
      "file": "src/core/ruff_linter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Fix and lint the provided Python code using Ruff's JSON output format.",
      "docstring": "Fix and lint the provided Python code using Ruff's JSON output format.\n\nArgs:\n    code (str): Source code to fix and lint.\n    display_filename (str): Optional display name for readable error messages.\n\nReturns:\n    A tuple containing:\n    - The potentially fixed code as a string.\n    - A list of structured violation dictionaries for any remaining issues.",
      "calls": [
        "NamedTemporaryFile",
        "append",
        "error",
        "exists",
        "get",
        "loads",
        "open",
        "read",
        "remove",
        "run",
        "write"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "code",
        "display_filename"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.304016+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "85cd34ffff340724006d2405af636c30782821272c4fbc068894113c6d855bee"
    },
    "src/core/file_handler.py::FileHandler": {
      "key": "src/core/file_handler.py::FileHandler",
      "name": "FileHandler",
      "type": "ClassDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Central class for safe, auditable file operations in CORE.",
      "docstring": "Central class for safe, auditable file operations in CORE.\nAll writes are staged first and require confirmation. Validation is handled\nby the calling agent via the validation_pipeline.",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "as_posix",
        "dumps",
        "exists",
        "info",
        "is_dir",
        "is_relative_to",
        "isoformat",
        "mkdir",
        "now",
        "pop",
        "resolve",
        "str",
        "unlink",
        "uuid4",
        "write_text"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.310042+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "f8b9c192883d652a5686f048f4a02ed2915a0798f3960a7684b1ddf80ff97383"
    },
    "src/core/file_handler.py::__init__": {
      "key": "src/core/file_handler.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize FileHandler with repository root.",
      "docstring": "Initialize FileHandler with repository root.",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "is_dir",
        "mkdir",
        "resolve"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.311442+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "3d94401a42e534ef715742cc343a85d66bed603d62479d4b6a63df2dd77d6e8c"
    },
    "src/core/file_handler.py::add_pending_write": {
      "key": "src/core/file_handler.py::add_pending_write",
      "name": "add_pending_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stages a pending write operation for later confirmation.",
      "docstring": "Stages a pending write operation for later confirmation.",
      "calls": [
        "Path",
        "as_posix",
        "dumps",
        "isoformat",
        "now",
        "str",
        "uuid4",
        "write_text"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "suggested_path",
        "code"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.312854+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "97eb206c07126bfc68d638e0ba15f2cc3b335a88c042e3516da7104fb5b47327"
    },
    "src/core/file_handler.py::confirm_write": {
      "key": "src/core/file_handler.py::confirm_write",
      "name": "confirm_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "docstring": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "calls": [
        "ValueError",
        "dumps",
        "exists",
        "info",
        "is_relative_to",
        "mkdir",
        "pop",
        "resolve",
        "str",
        "unlink",
        "write_text"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "self",
        "pending_id"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.315371+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "f2ed9b1571e9ec2b36d9a7e163b7f48f23ea4d312f29c1ef34e922cdecbc8d4f"
    },
    "src/core/intent_model.py::IntentModel": {
      "key": "src/core/intent_model.py::IntentModel",
      "name": "IntentModel",
      "type": "ClassDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and provides an queryable interface to the source code structure",
      "docstring": "Loads and provides an queryable interface to the source code structure\ndefined in .intent/knowledge/source_structure.yaml.",
      "calls": [
        "FileNotFoundError",
        "Path",
        "ValueError",
        "_load_structure",
        "exists",
        "get",
        "isinstance",
        "items",
        "len",
        "read_text",
        "resolve",
        "safe_load",
        "sorted"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.319987+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "0e6ac01dbeac24d5b49daec6bb2a270c6fa1dd15f2a48c589c32192ba1bbb7fa"
    },
    "src/core/intent_model.py::__init__": {
      "key": "src/core/intent_model.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initializes the model by loading the source structure definition from the repository, inferring the root if not provided.",
      "docstring": "Initializes the model by loading the source structure definition from the repository, inferring the root if not provided.",
      "calls": [
        "Path",
        "_load_structure",
        "resolve"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.321003+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "0b89ffe6785921e01c1f67095e382aaf8252f0ede85e30e4986e25527f54b0d2"
    },
    "src/core/intent_model.py::_load_structure": {
      "key": "src/core/intent_model.py::_load_structure",
      "name": "_load_structure",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load the domain structure from .intent/knowledge/source_structure.yaml.",
      "docstring": "Load the domain structure from .intent/knowledge/source_structure.yaml.\n\nReturns:\n    Dict[str, dict]: Mapping of domain names to metadata (path, permissions, etc.).",
      "calls": [
        "FileNotFoundError",
        "ValueError",
        "exists",
        "isinstance",
        "read_text",
        "safe_load"
      ],
      "line_number": 37,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.322321+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "e118f377f2c68ad9f65d680acb9b56d5d65d6ad80dde399e6b65a846c4baf2ff"
    },
    "src/core/intent_model.py::resolve_domain_for_path": {
      "key": "src/core/intent_model.py::resolve_domain_for_path",
      "name": "resolve_domain_for_path",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Given an absolute or relative path, determine which domain it belongs to.",
      "docstring": "Given an absolute or relative path, determine which domain it belongs to.\nPrefers deeper (more specific) paths over shorter ones.",
      "calls": [
        "items",
        "len",
        "resolve",
        "sorted"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.323756+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "1d8344850ddc5468f935a54669d5b428c5164d0cfec57ecbe7bb7ba72596151a"
    },
    "src/core/intent_model.py::get_domain_permissions": {
      "key": "src/core/intent_model.py::get_domain_permissions",
      "name": "get_domain_permissions",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Return a list of allowed domains that the given domain can import from.",
      "docstring": "Return a list of allowed domains that the given domain can import from.\n\nArgs:\n    domain (str): The domain to query.\n\nReturns:\n    List[str]: List of allowed domain names, or empty list if not defined.",
      "calls": [
        "get",
        "isinstance"
      ],
      "line_number": 77,
      "is_async": false,
      "parameters": [
        "self",
        "domain"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.324721+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "769b64c61696c6d075db8e62123853fe9b5c18e3b1fa7f8d0c7c0680ccea056d"
    },
    "src/core/intent_guard.py::IntentGuard": {
      "key": "src/core/intent_guard.py::IntentGuard",
      "name": "IntentGuard",
      "type": "ClassDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "intent_guarding",
      "intent": "Central enforcement engine for CORE's safety and governance policies.",
      "docstring": "Central enforcement engine for CORE's safety and governance policies.\nEnsures all proposed file changes comply with declared rules and classifications.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "append",
        "exists",
        "extend",
        "get",
        "glob",
        "info",
        "is_dir",
        "isinstance",
        "len",
        "list",
        "load_config",
        "loads",
        "read_text",
        "resolve",
        "sorted",
        "values"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.329697+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "c103b2ac0f63e2775e30f626aee54ea5558ad0f8226ba9c40cb329277244b70f"
    },
    "src/core/intent_guard.py::__init__": {
      "key": "src/core/intent_guard.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize IntentGuard with repository path and load all policies.",
      "docstring": "Initialize IntentGuard with repository path and load all policies.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "info",
        "len",
        "resolve"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.330980+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "e9b6e238e15765dc6a7ecd471c50b2e1aa50859c5f14cf337170baf2b3f866d8"
    },
    "src/core/intent_guard.py::_load_policies": {
      "key": "src/core/intent_guard.py::_load_policies",
      "name": "_load_policies",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "docstring": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "calls": [
        "extend",
        "glob",
        "is_dir",
        "isinstance",
        "load_config"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.332044+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "5328b103e7c818e7ff9526f02e7c83a8ab6c6dc8fce2265b097e41326967b231"
    },
    "src/core/intent_guard.py::_load_source_manifest": {
      "key": "src/core/intent_guard.py::_load_source_manifest",
      "name": "_load_source_manifest",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load the list of all known source files from the knowledge graph.",
      "docstring": "Load the list of all known source files from the knowledge graph.",
      "calls": [
        "exists",
        "get",
        "list",
        "loads",
        "read_text",
        "sorted",
        "values"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.333339+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "208f1dd7f529278788efa3067d8b296561c44c008592416d370a5ef323fc9bed"
    },
    "src/core/intent_guard.py::check_transaction": {
      "key": "src/core/intent_guard.py::check_transaction",
      "name": "check_transaction",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Check if a proposed set of file changes complies with all active rules.",
      "docstring": "Check if a proposed set of file changes complies with all active rules.\nThis is the primary enforcement point for constitutional integrity.",
      "calls": [
        "append",
        "resolve"
      ],
      "line_number": 67,
      "is_async": false,
      "parameters": [
        "self",
        "proposed_paths"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.334781+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "ebd1f6c05def4da80120bbbc4fa2e246dc83fb335490ee72380a6f51b5a7fe8c"
    },
    "src/core/self_correction_engine.py::attempt_correction": {
      "key": "src/core/self_correction_engine.py::attempt_correction",
      "name": "attempt_correction",
      "type": "FunctionDef",
      "file": "src/core/self_correction_engine.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "self_correction",
      "intent": "Attempts to fix a failed validation or test result by generating corrected code via an LLM prompt based on the provided failure context.",
      "docstring": "Attempts to fix a failed validation or test result by generating corrected code via an LLM prompt based on the provided failure context.",
      "calls": [
        "GeneratorClient",
        "add_pending_write",
        "dumps",
        "get",
        "items",
        "list",
        "make_request",
        "parse_write_blocks",
        "process",
        "strip",
        "validate_code"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "failure_context"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.338199+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "3e7e301782c375890781f24e40f1db7ba14720c118c53032b99a70d2193956f0"
    },
    "src/agents/utils.py::CodeEditor": {
      "key": "src/agents/utils.py::CodeEditor",
      "name": "CodeEditor",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Provides capabilities to surgically edit code files.",
      "docstring": "Provides capabilities to surgically edit code files.",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "hasattr",
        "isinstance",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip",
        "walk"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.342687+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "5a5c187e86b7cce86f433bf3a916df579328513edc92e5c1ea412bc873ffd7dd"
    },
    "src/agents/utils.py::_get_symbol_start_end_lines": {
      "key": "src/agents/utils.py::_get_symbol_start_end_lines",
      "name": "_get_symbol_start_end_lines",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the 1-based start and end line numbers of a symbol.",
      "docstring": "Finds the 1-based start and end line numbers of a symbol.",
      "calls": [
        "hasattr",
        "isinstance",
        "walk"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "self",
        "tree",
        "symbol_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.343751+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/utils.py::CodeEditor",
      "structural_hash": "50681b95b789a7eb7618eedfe18a6612b9779a31945f2189ea558ae585e20fcd"
    },
    "src/agents/utils.py::replace_symbol_in_code": {
      "key": "src/agents/utils.py::replace_symbol_in_code",
      "name": "replace_symbol_in_code",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Error: Could not connect to LLM endpoint. Details: HTTPSConnectionPool(host='api.deepseek.com', port=443): Read timed out. (read timeout=180)",
      "docstring": "Error: Could not connect to LLM endpoint. Details: HTTPSConnectionPool(host='api.deepseek.com', port=443): Read timed out. (read timeout=180)",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self",
        "original_code",
        "symbol_name",
        "new_code_str"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.345760+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/utils.py::CodeEditor",
      "structural_hash": "44c865f663f73935a3f4c27e5792add75aa3abedde57b8e0bc3b45eacd89da8e"
    },
    "src/agents/utils.py::SymbolLocator": {
      "key": "src/agents/utils.py::SymbolLocator",
      "name": "SymbolLocator",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Dedicated class for finding symbols in code files.",
      "docstring": "Dedicated class for finding symbols in code files.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 69,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.347475+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "165d63d962637f6f1abae7a11cf3240e7c15cc9fa84409a397b54196f0e3d9db"
    },
    "src/agents/utils.py::find_symbol_line": {
      "key": "src/agents/utils.py::find_symbol_line",
      "name": "find_symbol_line",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the line number of a function, async function, or class definition matching `symbol_name` in the file at `file_path`, or None if not found.",
      "docstring": "Finds the line number of a function, async function, or class definition matching `symbol_name` in the file at `file_path`, or None if not found.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 73,
      "is_async": false,
      "parameters": [
        "file_path",
        "symbol_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.348902+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/utils.py::SymbolLocator",
      "structural_hash": "6f664818dd24e2bf7d088437ea5760a5b20e7852b512f421631dfb41a5d29e90"
    },
    "src/agents/utils.py::PlanExecutionContext": {
      "key": "src/agents/utils.py::PlanExecutionContext",
      "name": "PlanExecutionContext",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Context manager for safe plan execution with rollback.",
      "docstring": "Context manager for safe plan execution with rollback.",
      "calls": [
        "error",
        "get_current_commit",
        "is_git_repo",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 90,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.350554+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "544b8bc58ae62f102d1f0b30081f324a131c262e7ea2646f23c9fa0e354b9b16"
    },
    "src/agents/utils.py::__init__": {
      "key": "src/agents/utils.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the context with a reference to the calling agent.",
      "docstring": "Initializes the context with a reference to the calling agent.",
      "calls": [],
      "line_number": 93,
      "is_async": false,
      "parameters": [
        "self",
        "planner_agent"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.351074+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "4a05911e00cb09254d391a40f2ad6ab724877a959ae2403245276b7aaa2f3b3d"
    },
    "src/agents/utils.py::__enter__": {
      "key": "src/agents/utils.py::__enter__",
      "name": "__enter__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Sets up the execution context, capturing the initial git commit hash.",
      "docstring": "Sets up the execution context, capturing the initial git commit hash.",
      "calls": [
        "get_current_commit",
        "is_git_repo",
        "warning"
      ],
      "line_number": 98,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.351903+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "f0615c8b892d65b0287dbf79cf653bec6c073918f9c99a47683f7434c8194c38"
    },
    "src/agents/utils.py::__exit__": {
      "key": "src/agents/utils.py::__exit__",
      "name": "__exit__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Cleans up and handles rollback on failure.",
      "docstring": "Cleans up and handles rollback on failure.",
      "calls": [
        "error",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 107,
      "is_async": false,
      "parameters": [
        "self",
        "exc_type",
        "exc_val",
        "exc_tb"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.352844+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "be2578060f851135cdfc30be53a4edd2baf4bd4a6cf5548a5983e4b28df2e81c"
    },
    "src/agents/planner_agent.py::PlanExecutionError": {
      "key": "src/agents/planner_agent.py::PlanExecutionError",
      "name": "PlanExecutionError",
      "type": "ClassDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Custom exception for failures during plan creation or execution.",
      "docstring": "Custom exception for failures during plan creation or execution.",
      "calls": [
        "__init__",
        "super"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.359690+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "c490d9d2c28f1d0cf147abfbc874fecc5368a0f232ef44fe0ae86e53c7714d20"
    },
    "src/agents/planner_agent.py::__init__": {
      "key": "src/agents/planner_agent.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Initializes the PlannerAgent with all necessary service dependencies.",
      "docstring": "Initializes the PlannerAgent with all necessary service dependencies.",
      "calls": [
        "CodeEditor",
        "PlannerConfig",
        "PromptPipeline",
        "SymbolLocator",
        "ThreadPoolExecutor",
        "register"
      ],
      "line_number": 48,
      "is_async": false,
      "parameters": [
        "self",
        "orchestrator_client",
        "generator_client",
        "file_handler",
        "git_service",
        "intent_guard",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.379180+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "a7aa18625b8aae9f1d398df6ea8d0641512426b95b892eb16bde1678f38bbd22"
    },
    "src/agents/planner_agent.py::PlannerAgent": {
      "key": "src/agents/planner_agent.py::PlannerAgent",
      "name": "PlannerAgent",
      "type": "ClassDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "code_generation",
      "intent": "The primary agent responsible for decomposing high-level goals into executable plans.",
      "docstring": "The primary agent responsible for decomposing high-level goals into executable plans.\nIt orchestrates the generation, validation, and commitment of code changes.",
      "calls": [
        "CodeEditor",
        "ExecutionProgress",
        "ExecutionTask",
        "FileExistsError",
        "FileNotFoundError",
        "JSONDecoder",
        "PlanExecutionContext",
        "PlanExecutionError",
        "PlannerConfig",
        "PromptPipeline",
        "SymbolLocator",
        "ThreadPoolExecutor",
        "ValueError",
        "_cleanup_resources",
        "_execute_add_tag",
        "_execute_create_file",
        "_execute_edit_function",
        "_execute_task",
        "_execute_task_with_timeout",
        "_extract_json_from_response",
        "_find_symbol_line_async",
        "_generate_code_for_task",
        "_log_plan_summary",
        "_setup_logging_context",
        "_validate_task_params",
        "add",
        "add_pending_write",
        "all",
        "commit",
        "confirm_write",
        "create_execution_plan",
        "dedent",
        "enumerate",
        "error",
        "exists",
        "find",
        "format",
        "get",
        "get_event_loop",
        "group",
        "hasattr",
        "info",
        "insert",
        "is_git_repo",
        "isinstance",
        "isoformat",
        "join",
        "len",
        "loads",
        "lstrip",
        "make_request",
        "now",
        "process",
        "range",
        "raw_decode",
        "read_text",
        "register",
        "replace_symbol_in_code",
        "run_in_executor",
        "search",
        "set",
        "shutdown",
        "splitlines",
        "str",
        "strftime",
        "strip",
        "validate_code",
        "wait_for",
        "warning"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.377778+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "a1215c9e801caa7e3441d0587dcb165deca146fda09d098e9871e8ad87fea05a"
    },
    "src/agents/planner_agent.py::_cleanup_resources": {
      "key": "src/agents/planner_agent.py::_cleanup_resources",
      "name": "_cleanup_resources",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Clean up resources on shutdown.",
      "docstring": "Clean up resources on shutdown.",
      "calls": [
        "hasattr",
        "shutdown"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.379927+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "18a897c023e750b3102e9112cac0481342d69151e8f46df6f31add5133addc8a"
    },
    "src/agents/planner_agent.py::__del__": {
      "key": "src/agents/planner_agent.py::__del__",
      "name": "__del__",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Ensure resources are cleaned up when the agent is garbage collected.",
      "docstring": "Ensure resources are cleaned up when the agent is garbage collected.",
      "calls": [
        "_cleanup_resources"
      ],
      "line_number": 75,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.380440+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "23a9473b605a7ace503e984722b1ea788660e8db0762b63ab752f6683f72deb1"
    },
    "src/agents/planner_agent.py::_setup_logging_context": {
      "key": "src/agents/planner_agent.py::_setup_logging_context",
      "name": "_setup_logging_context",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Setup structured logging context for better observability.",
      "docstring": "Setup structured logging context for better observability.",
      "calls": [
        "isoformat",
        "now",
        "set"
      ],
      "line_number": 79,
      "is_async": false,
      "parameters": [
        "self",
        "goal",
        "plan_id"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.381069+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "80a4b86bed45426c0aec597d5655d0cbbdde478dacfa2315417d27a6af55520c"
    },
    "src/agents/planner_agent.py::_extract_json_from_response": {
      "key": "src/agents/planner_agent.py::_extract_json_from_response",
      "name": "_extract_json_from_response",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Extract JSON with multiple strategies and better error handling.",
      "docstring": "Extract JSON with multiple strategies and better error handling.\nThis version uses safer, non-backtracking regex patterns to prevent ReDoS.",
      "calls": [
        "JSONDecoder",
        "error",
        "find",
        "group",
        "loads",
        "raw_decode",
        "search",
        "warning"
      ],
      "line_number": 87,
      "is_async": false,
      "parameters": [
        "self",
        "text"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.382850+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "8151353f706b7af9e58db0aa21dc27bf0d34916ed2b6a4b5a7f4457881d13cbb"
    },
    "src/agents/planner_agent.py::_log_plan_summary": {
      "key": "src/agents/planner_agent.py::_log_plan_summary",
      "name": "_log_plan_summary",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Log a readable summary of the execution plan.",
      "docstring": "Log a readable summary of the execution plan.",
      "calls": [
        "enumerate",
        "info",
        "len"
      ],
      "line_number": 122,
      "is_async": false,
      "parameters": [
        "self",
        "plan"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.384059+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "93ee204781a94919f60c4e6ec21d16cdee82d40346b6e9c3655a835a6a4dc8ed"
    },
    "src/agents/planner_agent.py::_validate_task_params": {
      "key": "src/agents/planner_agent.py::_validate_task_params",
      "name": "_validate_task_params",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Validates that a task has all the logically required parameters for its action.",
      "docstring": "Validates that a task has all the logically required parameters for its action.",
      "calls": [
        "PlanExecutionError",
        "all"
      ],
      "line_number": 128,
      "is_async": false,
      "parameters": [
        "self",
        "task"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.385526+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "693c6fdba76084568fb72322bb96cd87466bbb70f5cc9ea34818c6caa3249fdc"
    },
    "src/agents/planner_agent.py::create_execution_plan": {
      "key": "src/agents/planner_agent.py::create_execution_plan",
      "name": "create_execution_plan",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "llm_orchestration",
      "intent": "Creates a high-level, code-agnostic execution plan.",
      "docstring": "Creates a high-level, code-agnostic execution plan.",
      "calls": [
        "ExecutionTask",
        "PlanExecutionError",
        "ValueError",
        "_extract_json_from_response",
        "_log_plan_summary",
        "_setup_logging_context",
        "dedent",
        "error",
        "format",
        "info",
        "isinstance",
        "make_request",
        "now",
        "process",
        "range",
        "strftime",
        "strip",
        "warning"
      ],
      "line_number": 142,
      "is_async": false,
      "parameters": [
        "self",
        "high_level_goal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.387832+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "e4844cd8faa79f645cf6905fb41e3a76a222c167a3954dc79f3367bab45d361c"
    },
    "src/agents/planner_agent.py::_generate_code_for_task": {
      "key": "src/agents/planner_agent.py::_generate_code_for_task",
      "name": "_generate_code_for_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Generates the code content for a single task.",
      "docstring": "Generates the code content for a single task.",
      "calls": [
        "dedent",
        "format",
        "info",
        "make_request",
        "process",
        "strip"
      ],
      "line_number": 197,
      "is_async": true,
      "parameters": [
        "self",
        "task",
        "goal"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.389382+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "3c24d679c6223cc3701838351acb89a3281d920122536c00824ee2fc67f580e0"
    },
    "src/agents/planner_agent.py::_find_symbol_line_async": {
      "key": "src/agents/planner_agent.py::_find_symbol_line_async",
      "name": "_find_symbol_line_async",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Async version using shared thread pool for file I/O.",
      "docstring": "Async version using shared thread pool for file I/O.",
      "calls": [
        "get_event_loop",
        "run_in_executor"
      ],
      "line_number": 234,
      "is_async": true,
      "parameters": [
        "self",
        "file_path",
        "symbol_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.390257+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "c5ea7aa92b49213704a2a4e6c1ae6dcff7fb345bb65a9d07d50be4398f67ab8c"
    },
    "src/agents/planner_agent.py::_execute_task_with_timeout": {
      "key": "src/agents/planner_agent.py::_execute_task_with_timeout",
      "name": "_execute_task_with_timeout",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Execute task with timeout protection.",
      "docstring": "Execute task with timeout protection.",
      "calls": [
        "PlanExecutionError",
        "_execute_task",
        "wait_for"
      ],
      "line_number": 242,
      "is_async": true,
      "parameters": [
        "self",
        "task",
        "timeout"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.391250+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "231034b50c47ff8c90de80776ab3359723d7ec24fd1048ec9e496d996d3efc87"
    },
    "src/agents/planner_agent.py::execute_plan": {
      "key": "src/agents/planner_agent.py::execute_plan",
      "name": "execute_plan",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Creates and executes a plan in a two-step (Plan -> Generate -> Execute) process.",
      "docstring": "Creates and executes a plan in a two-step (Plan -> Generate -> Execute) process.",
      "calls": [
        "ExecutionProgress",
        "PlanExecutionContext",
        "PlanExecutionError",
        "_execute_task_with_timeout",
        "_generate_code_for_task",
        "create_execution_plan",
        "enumerate",
        "error",
        "get",
        "hasattr",
        "info",
        "len",
        "str"
      ],
      "line_number": 250,
      "is_async": true,
      "parameters": [
        "self",
        "high_level_goal"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.393992+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "98e9686fc24cdf8b79060ae287992d7c25c3f558c64c75a61955a94af03b352b"
    },
    "src/agents/planner_agent.py::_execute_add_tag": {
      "key": "src/agents/planner_agent.py::_execute_add_tag",
      "name": "_execute_add_tag",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Executes the surgical 'add_capability_tag' action.",
      "docstring": "Executes the surgical 'add_capability_tag' action.",
      "calls": [
        "PlanExecutionError",
        "_find_symbol_line_async",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "info",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "read_text",
        "splitlines",
        "validate_code"
      ],
      "line_number": 284,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.397164+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "aaff0ea00c53c82698278eadeea1af4788cb8ca8c6ce4b291d5457c97666e83e"
    },
    "src/agents/planner_agent.py::_execute_create_file": {
      "key": "src/agents/planner_agent.py::_execute_create_file",
      "name": "_execute_create_file",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Executes the 'create_file' action.",
      "docstring": "Executes the 'create_file' action.",
      "calls": [
        "FileExistsError",
        "PlanExecutionError",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "validate_code"
      ],
      "line_number": 318,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.399148+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "3539a683b04b8e0f8b34e185950bf5f9db11786690d3c51c3f930708771c5551"
    },
    "src/agents/planner_agent.py::_execute_edit_function": {
      "key": "src/agents/planner_agent.py::_execute_edit_function",
      "name": "_execute_edit_function",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Executes the 'edit_function' action using the CodeEditor.",
      "docstring": "Executes the 'edit_function' action using the CodeEditor.",
      "calls": [
        "FileNotFoundError",
        "PlanExecutionError",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "get_event_loop",
        "is_git_repo",
        "replace_symbol_in_code",
        "run_in_executor",
        "validate_code"
      ],
      "line_number": 338,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.401502+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "6d0d8dc32b50ea7c8622ba6aa74c7fb0bc0d5ac148fe6327a3e656c01c29b996"
    },
    "src/agents/planner_agent.py::_execute_task": {
      "key": "src/agents/planner_agent.py::_execute_task",
      "name": "_execute_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Dispatcher that executes a single task from a plan based on its action type.",
      "docstring": "Dispatcher that executes a single task from a plan based on its action type.",
      "calls": [
        "_execute_add_tag",
        "_execute_create_file",
        "_execute_edit_function",
        "_validate_task_params",
        "warning"
      ],
      "line_number": 370,
      "is_async": true,
      "parameters": [
        "self",
        "task"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.402804+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "6bdba87d6693facd69f26785c2d7f0bb5461d892c168fe889424d4396434d6a3"
    },
    "src/agents/models.py::TaskStatus": {
      "key": "src/agents/models.py::TaskStatus",
      "name": "TaskStatus",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Enumeration of possible states for an ExecutionTask.",
      "docstring": "Enumeration of possible states for an ExecutionTask.",
      "calls": [],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-11T17:48:38.404129+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition",
      "structural_hash": "3f35af37e4a402c877e5f20661774fe9ea58219ed768e5c166aa56cca41e769d"
    },
    "src/agents/models.py::ExecutionProgress": {
      "key": "src/agents/models.py::ExecutionProgress",
      "name": "ExecutionProgress",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents the progress of a plan's execution.",
      "docstring": "Represents the progress of a plan's execution.",
      "calls": [],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.405050+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "71d705d70aada6975025e39b5802067af023d53b2b1d9198d0875b530d1b2fc1"
    },
    "src/agents/models.py::completion_percentage": {
      "key": "src/agents/models.py::completion_percentage",
      "name": "completion_percentage",
      "type": "FunctionDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates the completion percentage of the plan as a float, returning 0 if there are no tasks.",
      "docstring": "Calculates the completion percentage of the plan as a float, returning 0 if there are no tasks.",
      "calls": [],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.405732+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/models.py::ExecutionProgress",
      "structural_hash": "2e185879694b400e85ad6ae02559a84632cdd03f58547c2c59f5dd16785826e7"
    },
    "src/agents/models.py::PlannerConfig": {
      "key": "src/agents/models.py::PlannerConfig",
      "name": "PlannerConfig",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Configuration settings for the PlannerAgent's behavior.",
      "docstring": "Configuration settings for the PlannerAgent's behavior.",
      "calls": [],
      "line_number": 33,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.406337+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "6ace4d57fe33bdb00ebaad6b74b2728ee3fce59e3161ae977882986c90520a54"
    },
    "src/agents/models.py::TaskParams": {
      "key": "src/agents/models.py::TaskParams",
      "name": "TaskParams",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for the parameters of a single task in an execution plan.",
      "docstring": "Data model for the parameters of a single task in an execution plan.",
      "calls": [],
      "line_number": 42,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.406979+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "f4aff97a68663aeaf92000a2589554961f3bd1cdec488a231d52b61c9077bdb1"
    },
    "src/agents/models.py::ExecutionTask": {
      "key": "src/agents/models.py::ExecutionTask",
      "name": "ExecutionTask",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for a single, executable step in a plan.",
      "docstring": "Data model for a single, executable step in a plan.",
      "calls": [],
      "line_number": 49,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.407564+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "03e4378512aca46ae0ec1beb9f117c12310ae067b50214c49b492cbde5b1a5d5"
    },
    "src/shared/path_utils.py::get_repo_root": {
      "key": "src/shared/path_utils.py::get_repo_root",
      "name": "get_repo_root",
      "type": "FunctionDef",
      "file": "src/shared/path_utils.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "docstring": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "calls": [
        "Path",
        "RuntimeError",
        "cwd",
        "exists",
        "resolve"
      ],
      "line_number": 6,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.408770+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "2979d82634fc329fbff2dc3800c02fe2a3c14c252bcb4510c436fabaf3aaa03b"
    },
    "src/shared/config_loader.py::load_config": {
      "key": "src/shared/config_loader.py::load_config",
      "name": "load_config",
      "type": "FunctionDef",
      "file": "src/shared/config_loader.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Loads a JSON or YAML file into a dictionary, handling missing files, invalid formats, and parsing errors by returning an empty dict.",
      "docstring": "Loads a JSON or YAML file into a dictionary, handling missing files, invalid formats, and parsing errors by returning an empty dict.",
      "calls": [
        "Path",
        "error",
        "exists",
        "isinstance",
        "load",
        "lower",
        "open",
        "safe_load",
        "warning"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "file_path",
        "file_type"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.411579+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "5adc7503936339da7be5cea6b36673c3993f98880cf6455514a048522d0ba497"
    },
    "src/shared/config.py::Settings": {
      "key": "src/shared/config.py::Settings",
      "name": "Settings",
      "type": "ClassDef",
      "file": "src/shared/config.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "A Pydantic settings model that loads configuration from the environment.",
      "docstring": "A Pydantic settings model that loads configuration from the environment.\nIt provides typed, validated access to all system settings.",
      "calls": [
        "Path",
        "home"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.413125+00:00",
      "is_class": true,
      "base_classes": [
        "BaseSettings"
      ],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "25f4590e5be47c39b2a0418d6185c1cb2df3ac005c287006bfa07a7c135106e6"
    },
    "src/shared/config.py::Config": {
      "key": "src/shared/config.py::Config",
      "name": "Config",
      "type": "ClassDef",
      "file": "src/shared/config.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Defines Pydantic's behavior for the Settings model.",
      "docstring": "Defines Pydantic's behavior for the Settings model.",
      "calls": [],
      "line_number": 36,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.413684+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "e95a02178a8961d1e4c328480cd2f5690da7151f573f5fbc6f0d8ed6e8c1eba4"
    },
    "src/shared/logger.py::getLogger": {
      "key": "src/shared/logger.py::getLogger",
      "name": "getLogger",
      "type": "FunctionDef",
      "file": "src/shared/logger.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "system_logging",
      "intent": "Returns a pre-configured logger instance with the given name.",
      "docstring": "Returns a pre-configured logger instance with the given name.",
      "calls": [
        "getLogger"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "name"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.414795+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "7907d7ea4630bbe78fb56462e21cc38898aeccf14ddf808acee40a3fd5b102c5"
    },
    "src/system/guard/drift_detector.py::CapabilityMeta": {
      "key": "src/system/guard/drift_detector.py::CapabilityMeta",
      "name": "CapabilityMeta",
      "type": "ClassDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Minimal data container for capability metadata used in drift comparison.",
      "docstring": "Intent: Minimal data container for capability metadata used in drift comparison.",
      "calls": [
        "dataclass"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.421033+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "5408b6e0217089527a88993bda9c7375c851b57d5b226aa922a3df57b0bd9dff"
    },
    "src/system/guard/drift_detector.py::_parse_inline_meta": {
      "key": "src/system/guard/drift_detector.py::_parse_inline_meta",
      "name": "_parse_inline_meta",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Parse inline [key=value] metadata from trailing text and return as a dictionary.",
      "docstring": "Parse inline [key=value] metadata from trailing text and return as a dictionary.",
      "calls": [
        "findall",
        "group",
        "search"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "trailing"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.421970+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "a4043f43cef35c754adeb1c83b3c4b1eeaa9959bc4f109249e38b6166a58c5a9"
    },
    "src/system/guard/drift_detector.py::_try_import_kgb": {
      "key": "src/system/guard/drift_detector.py::_try_import_kgb",
      "name": "_try_import_kgb",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Attempt to access KnowledgeGraphBuilder without static cross-domain imports.",
      "docstring": "Intent: Attempt to access KnowledgeGraphBuilder without static cross-domain imports.",
      "calls": [
        "getattr",
        "import_module"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.422730+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "04affff91ef14b2814abe805b97cc81f43072e73ce3761583d98e16b284e36e8"
    },
    "src/system/guard/drift_detector.py::_find_manifest": {
      "key": "src/system/guard/drift_detector.py::_find_manifest",
      "name": "_find_manifest",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Locate the authoritative .intent manifest file.",
      "docstring": "Intent: Locate the authoritative .intent manifest file.",
      "calls": [
        "FileNotFoundError",
        "exists"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "start"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.423565+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "02a690e20b4df9af5e3b91d8ef7066d89ab7a1f12b52024492a60dd0c170969a"
    },
    "src/system/guard/drift_detector.py::_normalize_cap_list": {
      "key": "src/system/guard/drift_detector.py::_normalize_cap_list",
      "name": "_normalize_cap_list",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Normalize many shapes (list[str], list[dict], dict[str,dict]) into {cap: CapabilityMeta}.",
      "docstring": "Intent: Normalize many shapes (list[str], list[dict], dict[str,dict]) into {cap: CapabilityMeta}.",
      "calls": [
        "CapabilityMeta",
        "get",
        "isinstance",
        "items"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "items"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.425398+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "000accec56838a02aee24230dbb06b85894557b24cff9574652e7ae0a8714cd8"
    },
    "src/system/guard/drift_detector.py::_normalize_manifest_caps": {
      "key": "src/system/guard/drift_detector.py::_normalize_manifest_caps",
      "name": "_normalize_manifest_caps",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Normalize different manifest shapes into a {capability: CapabilityMeta} map.",
      "docstring": "Intent: Normalize different manifest shapes into a {capability: CapabilityMeta} map.\nLooks for keys commonly used in CORE manifests:\n  - capabilities\n  - required_capabilities\n  - expected_capabilities\n  - capability_map / capability_registry\n  - components[*].capabilities",
      "calls": [
        "_normalize_cap_list",
        "deque",
        "extend",
        "extract_from_node",
        "get",
        "isinstance",
        "popleft",
        "update",
        "values"
      ],
      "line_number": 81,
      "is_async": false,
      "parameters": [
        "raw"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.427775+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "151161bb55ec76b1d1d424f43a67b32a5de39e66595058274d9faca614cd8d62"
    },
    "src/system/guard/drift_detector.py::extract_from_node": {
      "key": "src/system/guard/drift_detector.py::extract_from_node",
      "name": "extract_from_node",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Extract capabilities from a node by checking common capability-related keys or nested components/modules/services.",
      "docstring": "Extract capabilities from a node by checking common capability-related keys or nested components/modules/services.",
      "calls": [
        "_normalize_cap_list",
        "get",
        "isinstance",
        "update"
      ],
      "line_number": 93,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.429326+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "e70c6aa4452dc8577225242af4a38c3e1efce9205ff77666187eb385a9014528"
    },
    "src/system/guard/drift_detector.py::load_manifest": {
      "key": "src/system/guard/drift_detector.py::load_manifest",
      "name": "load_manifest",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Load and parse the .intent manifest with PyYAML.",
      "docstring": "Intent: Load and parse the .intent manifest with PyYAML.",
      "calls": [
        "RuntimeError",
        "_find_manifest",
        "_normalize_manifest_caps",
        "open",
        "safe_load"
      ],
      "line_number": 124,
      "is_async": false,
      "parameters": [
        "root",
        "explicit_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.430580+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "f5f114172590c81ba4721a36562240bbc8ea21f094f179c237e6265c64f68e60"
    },
    "src/system/guard/drift_detector.py::_extract_cap_meta_from_node": {
      "key": "src/system/guard/drift_detector.py::_extract_cap_meta_from_node",
      "name": "_extract_cap_meta_from_node",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Extract capability/domain/owner from a variety of KG node shapes.",
      "docstring": "Intent: Extract capability/domain/owner from a variety of KG node shapes.",
      "calls": [
        "CapabilityMeta",
        "get",
        "group",
        "isinstance",
        "match",
        "str"
      ],
      "line_number": 133,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.432556+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "22a481b469db7b2e6ad4dcbe49ea14eb3ed0b6ebe9ff9c5b5514a4233d1111de"
    },
    "src/system/guard/drift_detector.py::_load_json_file": {
      "key": "src/system/guard/drift_detector.py::_load_json_file",
      "name": "_load_json_file",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads and parses a JSON file from the given path, returning its contents on success or None on failure.",
      "docstring": "Loads and parses a JSON file from the given path, returning its contents on success or None on failure.",
      "calls": [
        "loads",
        "read_text"
      ],
      "line_number": 157,
      "is_async": false,
      "parameters": [
        "path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.433520+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "e5b8dc6446d1af1f315425e62a0623a574872effad31ddb4031906ef31e69198"
    },
    "src/system/guard/drift_detector.py::_load_ndjson_file": {
      "key": "src/system/guard/drift_detector.py::_load_ndjson_file",
      "name": "_load_ndjson_file",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads and parses each non-empty line of an NDJSON file into a list of objects, skipping invalid lines and returning an empty list on file read errors.",
      "docstring": "Loads and parses each non-empty line of an NDJSON file into a list of objects, skipping invalid lines and returning an empty list on file read errors.",
      "calls": [
        "append",
        "loads",
        "read_text",
        "splitlines",
        "strip"
      ],
      "line_number": 164,
      "is_async": false,
      "parameters": [
        "path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.434534+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "6c3686fc95f810deedd4a59bf66fa5e1feba0be91ec17ba717cfc5d32c3bc40d"
    },
    "src/system/guard/drift_detector.py::_collect_from_kgb_artifact": {
      "key": "src/system/guard/drift_detector.py::_collect_from_kgb_artifact",
      "name": "_collect_from_kgb_artifact",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Read a previously emitted knowledge graph artifact from disk.",
      "docstring": "Intent: Read a previously emitted knowledge graph artifact from disk.\nAccepts common file names and shapes, returning a capability map.",
      "calls": [
        "_extract_cap_meta_from_node",
        "_load_json_file",
        "_load_ndjson_file",
        "exists",
        "get",
        "isinstance",
        "values"
      ],
      "line_number": 180,
      "is_async": false,
      "parameters": [
        "root"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.436630+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "b8c149e8f412f1d78f6c3275e10988516c909fc26af52f1b30c75f44591b427e"
    },
    "src/system/guard/drift_detector.py::_iter_source_files": {
      "key": "src/system/guard/drift_detector.py::_iter_source_files",
      "name": "_iter_source_files",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Yield repository files considered for direct CAPABILITY tag scanning.",
      "docstring": "Intent: Yield repository files considered for direct CAPABILITY tag scanning.",
      "calls": [
        "any",
        "is_file",
        "list",
        "match",
        "rglob",
        "wanted"
      ],
      "line_number": 218,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.438219+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "bf8906438a6c646d4a52c2baba2c66b6f2c25147ffabb71c57d330bd9c697e9c"
    },
    "src/system/guard/drift_detector.py::wanted": {
      "key": "src/system/guard/drift_detector.py::wanted",
      "name": "wanted",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Filter for include/exclude globs and typical source suffixes.",
      "docstring": "Intent: Filter for include/exclude globs and typical source suffixes.",
      "calls": [
        "any",
        "match"
      ],
      "line_number": 222,
      "is_async": false,
      "parameters": [
        "p"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.439112+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "4220ccd6e39fc1f11ffcf95f1692027fa63a5db31f8ac007644b7c82e168abf0"
    },
    "src/system/guard/drift_detector.py::_collect_from_grep": {
      "key": "src/system/guard/drift_detector.py::_collect_from_grep",
      "name": "_collect_from_grep",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Fallback discovery by scanning for '# CAPABILITY:' tags with optional inline metadata.",
      "docstring": "Intent: Fallback discovery by scanning for '# CAPABILITY:' tags with optional inline metadata.",
      "calls": [
        "CapabilityMeta",
        "_iter_source_files",
        "_parse_inline_meta",
        "get",
        "group",
        "match",
        "read_text",
        "splitlines",
        "strip"
      ],
      "line_number": 233,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.440698+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "88d045a129b2794465293fd74ee6974f55cf52b675067106e36ec20b45171b82"
    },
    "src/system/guard/drift_detector.py::_collect_from_kgb": {
      "key": "src/system/guard/drift_detector.py::_collect_from_kgb",
      "name": "_collect_from_kgb",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Use KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "docstring": "Intent: Use KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "calls": [
        "KGB",
        "_extract_cap_meta_from_node",
        "_try_import_kgb",
        "build",
        "get",
        "getattr",
        "hasattr",
        "isinstance",
        "str",
        "values"
      ],
      "line_number": 252,
      "is_async": false,
      "parameters": [
        "root"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.443067+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "c9d233a6c2aad1205b726312bbcc4a49f34e0f712b212629671de240f7977648"
    },
    "src/system/guard/drift_detector.py::collect_code_capabilities": {
      "key": "src/system/guard/drift_detector.py::collect_code_capabilities",
      "name": "collect_code_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Unified discovery entrypoint respecting strict-intent when required.",
      "docstring": "Intent: Unified discovery entrypoint respecting strict-intent when required.",
      "calls": [
        "RuntimeError",
        "_collect_from_grep",
        "_collect_from_kgb",
        "_collect_from_kgb_artifact"
      ],
      "line_number": 300,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs",
        "require_kgb"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.444550+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "483aa628f2dee2dafe4d5635b2961d044a72d1e9bbf42b1de6984255712ea2e9"
    },
    "src/system/guard/drift_detector.py::DriftReport": {
      "key": "src/system/guard/drift_detector.py::DriftReport",
      "name": "DriftReport",
      "type": "ClassDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Structured result for capability drift suitable for JSON emission and CI gating.",
      "docstring": "Intent: Structured result for capability drift suitable for JSON emission and CI gating.",
      "calls": [
        "sorted"
      ],
      "line_number": 315,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.445615+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "6d1d492460ffa7664cb9c67e0cb5ec92572ef9bd87dc2d02d43e760d45032255"
    },
    "src/system/guard/drift_detector.py::to_dict": {
      "key": "src/system/guard/drift_detector.py::to_dict",
      "name": "to_dict",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Convert the drift report into a stable JSON-serializable dict.",
      "docstring": "Intent: Convert the drift report into a stable JSON-serializable dict.",
      "calls": [
        "sorted"
      ],
      "line_number": 321,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.446273+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/guard/drift_detector.py::DriftReport",
      "structural_hash": "bf7d7caff963731b21d0f4785fe948223c719588267acea8c8e530c4f479a800"
    },
    "src/system/guard/drift_detector.py::detect_capability_drift": {
      "key": "src/system/guard/drift_detector.py::detect_capability_drift",
      "name": "detect_capability_drift",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Compute missing/undeclared/mismatched capability sets between manifest and code.",
      "docstring": "Intent: Compute missing/undeclared/mismatched capability sets between manifest and code.",
      "calls": [
        "DriftReport",
        "append",
        "keys",
        "set",
        "sorted"
      ],
      "line_number": 325,
      "is_async": false,
      "parameters": [
        "manifest_caps",
        "code_caps"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.448061+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "34ea6f8212c054e815fa4ae0416eb44ea9b151883e6ca85c75ecb5b5fd542e8a"
    },
    "src/system/guard/drift_detector.py::write_report": {
      "key": "src/system/guard/drift_detector.py::write_report",
      "name": "write_report",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Persist the drift report to disk under reports/ for evidence and CI.",
      "docstring": "Intent: Persist the drift report to disk under reports/ for evidence and CI.",
      "calls": [
        "dumps",
        "mkdir",
        "to_dict",
        "write_text"
      ],
      "line_number": 339,
      "is_async": false,
      "parameters": [
        "report_path",
        "report"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.449019+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "4036db64cd7bbe47f411d592822def62aa1c1e000240579410a282fd2d06f742"
    },
    "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor": {
      "key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "name": "ConstitutionalAuditor",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "alignment_checking",
      "intent": "Orchestrates the discovery and execution of all constitutional checks.",
      "docstring": "Orchestrates the discovery and execution of all constitutional checks.",
      "calls": [
        "AuditFinding",
        "AuditorContext",
        "Class",
        "Console",
        "IntentModel",
        "Panel",
        "Path",
        "Table",
        "_LoggingBridge",
        "_discover_checks",
        "_report_final_status",
        "add_row",
        "aggregate_manifests",
        "any",
        "append",
        "check_fn",
        "debug",
        "endswith",
        "error",
        "exists",
        "extend",
        "get",
        "get_repo_root",
        "getmembers",
        "glob",
        "import_module",
        "info",
        "len",
        "list",
        "load_config",
        "load_dotenv",
        "print",
        "sort",
        "startswith",
        "strip",
        "values",
        "warning"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.459500+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "d2645eeea8236f69647696b71e555ad61766c1adbdb02d143dd786203c3e1af1"
    },
    "src/system/governance/constitutional_auditor.py::_LoggingBridge": {
      "key": "src/system/governance/constitutional_auditor.py::_LoggingBridge",
      "name": "_LoggingBridge",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "A file-like object that redirects writes to the logger.",
      "docstring": "A file-like object that redirects writes to the logger.",
      "calls": [
        "info",
        "strip"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.460244+00:00",
      "is_class": true,
      "base_classes": [
        "StringIO"
      ],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "376b10bf9c9debcbdde0ec17b29f2be09e11fbe5c2723f3f8cd6e5a75bc01f65"
    },
    "src/system/governance/constitutional_auditor.py::write": {
      "key": "src/system/governance/constitutional_auditor.py::write",
      "name": "write",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Redirects the write to the logger info stream.",
      "docstring": "Redirects the write to the logger info stream.",
      "calls": [
        "info",
        "strip"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "self",
        "s"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.460853+00:00",
      "is_class": false,
      "base_classes": [
        "StringIO",
        "StringIO",
        "StringIO"
      ],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::_LoggingBridge",
      "structural_hash": "44784f80c99de948a843e936c747ab36d54800d3091c6efbb2388a0316cf4919"
    },
    "src/system/governance/constitutional_auditor.py::__init__": {
      "key": "src/system/governance/constitutional_auditor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initializes the shared context for all audit checks.",
      "docstring": "Initializes the shared context for all audit checks.",
      "calls": [
        "IntentModel",
        "aggregate_manifests",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.464597+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::AuditorContext",
      "structural_hash": "abebf93c39a5643b78346a0a6c0f84539693bed2d10372564eecfafb3f82db00"
    },
    "src/system/governance/constitutional_auditor.py::AuditorContext": {
      "key": "src/system/governance/constitutional_auditor.py::AuditorContext",
      "name": "AuditorContext",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "A simple container for shared state that all checks can access.",
      "docstring": "A simple container for shared state that all checks can access.",
      "calls": [
        "IntentModel",
        "aggregate_manifests",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.463523+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "cdffc2a9d14d2a40a39e7d7f1a2427f6263f35daa325786fc9f3ca3b24c31598"
    },
    "src/system/governance/constitutional_auditor.py::_discover_checks": {
      "key": "src/system/governance/constitutional_auditor.py::_discover_checks",
      "name": "_discover_checks",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Dynamically discovers check methods from modules in the 'checks' directory.",
      "docstring": "Dynamically discovers check methods from modules in the 'checks' directory.",
      "calls": [
        "Class",
        "Path",
        "append",
        "debug",
        "endswith",
        "error",
        "get",
        "getmembers",
        "glob",
        "import_module",
        "len",
        "sort",
        "startswith"
      ],
      "line_number": 87,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.467051+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "2c499bc27bff784b41670f456b6f427653a2905d8ceaba92a63d69ba9bd99472"
    },
    "src/system/governance/constitutional_auditor.py::run_full_audit": {
      "key": "src/system/governance/constitutional_auditor.py::run_full_audit",
      "name": "run_full_audit",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Run all discovered validation phases and return overall status.",
      "docstring": "Run all discovered validation phases and return overall status.",
      "calls": [
        "AuditFinding",
        "Panel",
        "_report_final_status",
        "any",
        "append",
        "check_fn",
        "error",
        "extend",
        "info",
        "print",
        "warning"
      ],
      "line_number": 118,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.469522+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "202b834eec644f47db3ebae696cbedf6794b86d6dbbd2eb3e26373618e08020a"
    },
    "src/system/governance/constitutional_auditor.py::_report_final_status": {
      "key": "src/system/governance/constitutional_auditor.py::_report_final_status",
      "name": "_report_final_status",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Prints the final audit summary to the console.",
      "docstring": "Prints the final audit summary to the console.",
      "calls": [
        "Panel",
        "Table",
        "add_row",
        "len",
        "print"
      ],
      "line_number": 140,
      "is_async": false,
      "parameters": [
        "self",
        "passed"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.471677+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "33be600348d1bb13399550f0f0d4828c3f994e7c8061daba8436dfacf4342064"
    },
    "src/system/governance/constitutional_auditor.py::main": {
      "key": "src/system/governance/constitutional_auditor.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "CLI entry point for the Constitutional Auditor.",
      "docstring": "CLI entry point for the Constitutional Auditor.",
      "calls": [
        "ConstitutionalAuditor",
        "error",
        "exit",
        "load_dotenv",
        "run_full_audit"
      ],
      "line_number": 160,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-11T17:48:38.473043+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0512986f38fde3ebe727c4a8040ab129cb043d2cbdc1a6cd78242ecf659b7cd9"
    },
    "src/system/governance/models.py::AuditSeverity": {
      "key": "src/system/governance/models.py::AuditSeverity",
      "name": "AuditSeverity",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Severity levels for audit findings.",
      "docstring": "Severity levels for audit findings.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-11T17:48:38.474043+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition",
      "structural_hash": "4e9c4d1c06d98ad21e0b44b0c5701a5d29a10efc8ffc6c837ff3f3c02a8dc7b5"
    },
    "src/system/governance/models.py::AuditFinding": {
      "key": "src/system/governance/models.py::AuditFinding",
      "name": "AuditFinding",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents a single audit finding.",
      "docstring": "Represents a single audit finding.",
      "calls": [],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.474631+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "eb4ee3ee5de56a07d5d6c239b10bf3601ac8adf55ed605ad9696b345824b38cc"
    },
    "src/system/admin/fixer.py::register": {
      "key": "src/system/admin/fixer.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/fixer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register fixer commands under the admin CLI.",
      "docstring": "Intent: Register fixer commands under the admin CLI.",
      "calls": [
        "Typer",
        "add_typer",
        "command"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.475587+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "d119c5b236f246f150742a03612a188eafab5729006bc730807f45ebeea870dc"
    },
    "src/system/admin/scaffolder.py::new_project": {
      "key": "src/system/admin/scaffolder.py::new_project",
      "name": "new_project",
      "type": "FunctionDef",
      "file": "src/system/admin/scaffolder.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Scaffolds a new, constitutionally-governed \"Mind/Body\" application.",
      "docstring": "Scaffolds a new, constitutionally-governed \"Mind/Body\" application.",
      "calls": [
        "Argument",
        "Exit",
        "Option",
        "copy",
        "dump",
        "echo",
        "error",
        "exists",
        "format",
        "glob",
        "info",
        "is_dir",
        "mkdir",
        "read_text",
        "replace",
        "safe_load",
        "secho",
        "write_text"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "name",
        "profile",
        "dry_run"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.481444+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "6d72efce8e179e81549fd1b44b0da1e33a2341243b77054ea4893be090a77197"
    },
    "src/system/admin/scaffolder.py::register": {
      "key": "src/system/admin/scaffolder.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/scaffolder.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register scaffolding commands under the admin CLI.",
      "docstring": "Intent: Register scaffolding commands under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 108,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.482675+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "98a02f61f0147d221e2de031f8dfbda197edfb760acee3919cfffb0b36db72ed"
    },
    "src/system/admin/migrator.py::register": {
      "key": "src/system/admin/migrator.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/migrator.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register migration commands (manifest-migrator) under the admin CLI.",
      "docstring": "Register migration commands (manifest-migrator) under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.483546+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "ee9a8abfbb298a749103bd155c86721fec7987d013d5becda3e106fb4bade877"
    },
    "src/system/admin/utils.py::should_fail": {
      "key": "src/system/admin/utils.py::should_fail",
      "name": "should_fail",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "docstring": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "calls": [
        "bool",
        "get"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "report",
        "fail_on"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.485830+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "b1c674a58b7314a9b247aa1057a5f0f14300b70dcac27f78d7a51e3b05fab535"
    },
    "src/system/admin/utils.py::load_yaml_file": {
      "key": "src/system/admin/utils.py::load_yaml_file",
      "name": "load_yaml_file",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "docstring": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "calls": [
        "read_text",
        "safe_load"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.486640+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "5a564a8a94624020ca0e40a9a24f12f7ac7d3076a3b58c9e8ebf7dc44de64648"
    },
    "src/system/admin/utils.py::save_yaml_file": {
      "key": "src/system/admin/utils.py::save_yaml_file",
      "name": "save_yaml_file",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Persist YAML with stable ordering disabled to preserve human readability.",
      "docstring": "Intent: Persist YAML with stable ordering disabled to preserve human readability.",
      "calls": [
        "safe_dump",
        "write_text"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "path",
        "data"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.487420+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "396e43a31e3708070b0f283c8fb3a594575339632e811def2c3dd0619e7da1d8"
    },
    "src/system/admin/utils.py::generate_approval_token": {
      "key": "src/system/admin/utils.py::generate_approval_token",
      "name": "generate_approval_token",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Produce a deterministic content-bound token for cryptographic proposal approvals.",
      "docstring": "Intent: Produce a deterministic content-bound token for cryptographic proposal approvals.",
      "calls": [
        "Hash",
        "SHA256",
        "encode",
        "finalize",
        "hex",
        "update"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [
        "proposal_content"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.488309+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "4ee6fd44a30c5160810bdec931534a39a8fa715aaa87c9c2865adf294e2aed6e"
    },
    "src/system/admin/utils.py::load_private_key": {
      "key": "src/system/admin/utils.py::load_private_key",
      "name": "load_private_key",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "docstring": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "calls": [
        "SystemExit",
        "error",
        "exists",
        "load_pem_private_key",
        "read_bytes"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.489191+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "e15a9023fa487ddc0be154c679571342a8e2b9eabb9831769d4e0728d6d8920f"
    },
    "src/system/admin/utils.py::archive_rollback_plan": {
      "key": "src/system/admin/utils.py::archive_rollback_plan",
      "name": "archive_rollback_plan",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Persist a rollback plan snapshot for approved proposals under .intent/constitution/rollbacks/.",
      "docstring": "Intent: Persist a rollback plan snapshot for approved proposals under .intent/constitution/rollbacks/.",
      "calls": [
        "dumps",
        "get",
        "info",
        "mkdir",
        "strftime",
        "utcnow",
        "write_text"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [
        "proposal_name",
        "proposal"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.490784+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "01a6e3cdb18120030b1eb3773ab19be13383b9dad8ef19407044bbb56d658897"
    },
    "src/system/admin/byor.py::initialize_repository": {
      "key": "src/system/admin/byor.py::initialize_repository",
      "name": "initialize_repository",
      "type": "FunctionDef",
      "file": "src/system/admin/byor.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "docstring": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "calls": [
        "Argument",
        "Exit",
        "KnowledgeGraphBuilder",
        "Option",
        "build",
        "dump",
        "echo",
        "error",
        "get",
        "info",
        "isinstance",
        "items",
        "len",
        "list",
        "mkdir",
        "read_text",
        "secho",
        "set",
        "sorted",
        "values",
        "write_text"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "path",
        "dry_run"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.496493+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "fed0aaf58b34f3db6c1ad3b18314c3f09dc21b4912eb0ed822e5e4c9be1cb08e"
    },
    "src/system/admin/byor.py::register": {
      "key": "src/system/admin/byor.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/byor.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "docstring": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 117,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.497652+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "4dbcc180e75c303fa1d712cc87918be27fd25ca3d44f3d970b5d982761a41664"
    },
    "src/system/admin/proposals.py::register": {
      "key": "src/system/admin/proposals.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register proposal lifecycle commands under the admin CLI.",
      "docstring": "Intent: Register proposal lifecycle commands under the admin CLI.",
      "calls": [
        "Argument",
        "ConstitutionalAuditor",
        "Exit",
        "Path",
        "TemporaryDirectory",
        "Typer",
        "add_typer",
        "any",
        "append",
        "archive_rollback_plan",
        "b64decode",
        "b64encode",
        "command",
        "decode",
        "encode",
        "endswith",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "glob",
        "info",
        "isinstance",
        "isoformat",
        "len",
        "load_pem_public_key",
        "load_private_key",
        "load_yaml_file",
        "mkdir",
        "prompt",
        "proposals_approve",
        "proposals_list",
        "proposals_sign",
        "run",
        "run_full_audit",
        "save_yaml_file",
        "setdefault",
        "sign",
        "sorted",
        "str",
        "strip",
        "unlink",
        "utcnow",
        "verify",
        "warning",
        "write_text"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.511189+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "f84277145add2c07d9c4cec1f0a7a08ce04cdc4061185c9c7e9b4e13c4a1f41e"
    },
    "src/system/admin/proposals.py::proposals_list": {
      "key": "src/system/admin/proposals.py::proposals_list",
      "name": "proposals_list",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "List pending constitutional proposals and display their justification, target path, and signature/quorum status.",
      "docstring": "List pending constitutional proposals and display their justification, target path, and signature/quorum status.",
      "calls": [
        "any",
        "command",
        "endswith",
        "get",
        "glob",
        "info",
        "len",
        "load_yaml_file",
        "mkdir",
        "sorted",
        "strip"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.513774+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "3f2580b6fee11b461cb6f0c98a933ada9d8e8674bdb7bf1d2d7efaa65b9fd62b"
    },
    "src/system/admin/proposals.py::proposals_sign": {
      "key": "src/system/admin/proposals.py::proposals_sign",
      "name": "proposals_sign",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Sign a proposal with the operator's private key (content-bound token).",
      "docstring": "Intent: Sign a proposal with the operator's private key (content-bound token).",
      "calls": [
        "Argument",
        "Exit",
        "append",
        "b64encode",
        "command",
        "decode",
        "encode",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "isoformat",
        "load_private_key",
        "load_yaml_file",
        "prompt",
        "save_yaml_file",
        "setdefault",
        "sign",
        "utcnow"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.516183+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "67334960b9b08816bd27fdefea58d69811194ee00fbf399a3e0b56fb05709f9c"
    },
    "src/system/admin/proposals.py::proposals_approve": {
      "key": "src/system/admin/proposals.py::proposals_approve",
      "name": "proposals_approve",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Verify signatures/quorum, run a canary constitutional audit, then apply the proposal if valid.",
      "docstring": "Verify signatures/quorum, run a canary constitutional audit, then apply the proposal if valid.",
      "calls": [
        "Argument",
        "ConstitutionalAuditor",
        "Exit",
        "Path",
        "TemporaryDirectory",
        "any",
        "archive_rollback_plan",
        "b64decode",
        "command",
        "decode",
        "encode",
        "endswith",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "isinstance",
        "load_pem_public_key",
        "load_yaml_file",
        "mkdir",
        "run",
        "run_full_audit",
        "str",
        "unlink",
        "verify",
        "warning",
        "write_text"
      ],
      "line_number": 101,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.522709+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "2f73765018b292716368099487b112640766245bbe1854ec304e57176456f329"
    },
    "src/system/admin/proposals.py::_group_list": {
      "key": "src/system/admin/proposals.py::_group_list",
      "name": "_group_list",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Group alias for proposals-list (namespaced UX).",
      "docstring": "Intent: Group alias for proposals-list (namespaced UX).",
      "calls": [
        "command",
        "proposals_list"
      ],
      "line_number": 204,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.524183+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "be676c7fcb85be2d60e86b995f6927f137c94cd2c49900902a647d9950f793db"
    },
    "src/system/admin/proposals.py::_group_sign": {
      "key": "src/system/admin/proposals.py::_group_sign",
      "name": "_group_sign",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Group alias for proposals-sign (namespaced UX).",
      "docstring": "Intent: Group alias for proposals-sign (namespaced UX).",
      "calls": [
        "command",
        "proposals_sign"
      ],
      "line_number": 209,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.524812+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "1ffed0e089f3ffc1cf72352e27badfd17a24e4cdb2ee12a61dfb1ffeeb850a7b"
    },
    "src/system/admin/proposals.py::_group_approve": {
      "key": "src/system/admin/proposals.py::_group_approve",
      "name": "_group_approve",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Group alias for proposals-approve (namespaced UX).",
      "docstring": "Intent: Group alias for proposals-approve (namespaced UX).",
      "calls": [
        "command",
        "proposals_approve"
      ],
      "line_number": 214,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.525429+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "c59db60b0344cc6dbeeb92a6c56bf5eac3321dddf247399b470e73137a50ea69"
    },
    "src/system/admin/guard.py::_find_manifest_path": {
      "key": "src/system/admin/guard.py::_find_manifest_path",
      "name": "_find_manifest_path",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the system domain.",
      "docstring": "",
      "calls": [
        "FileNotFoundError",
        "exists"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.529972+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "e32348095e5b9828fb3244f44747078fc23b726f680e0eb982fbb0adf6879801"
    },
    "src/system/admin/guard.py::_load_raw_manifest": {
      "key": "src/system/admin/guard.py::_load_raw_manifest",
      "name": "_load_raw_manifest",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads and parses a YAML manifest file from the given root or explicit path, returning its contents as a dictionary.",
      "docstring": "Loads and parses a YAML manifest file from the given root or explicit path, returning its contents as a dictionary.",
      "calls": [
        "_find_manifest_path",
        "read_text",
        "safe_load"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.530835+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "31df9fda9f8e60554f66a24794b202bbd107f66b69ec0c2d8df8879c04336bdb"
    },
    "src/system/admin/guard.py::_ux_defaults": {
      "key": "src/system/admin/guard.py::_ux_defaults",
      "name": "_ux_defaults",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the system domain.",
      "docstring": "",
      "calls": [
        "_load_raw_manifest",
        "bool",
        "get"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.532566+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "4c684bc024b485fc6d927dba5b1556e9d68e864778d620e2ebc746ee6513ec90"
    },
    "src/system/admin/guard.py::_is_clean": {
      "key": "src/system/admin/guard.py::_is_clean",
      "name": "_is_clean",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the system domain.",
      "docstring": "",
      "calls": [
        "get"
      ],
      "line_number": 69,
      "is_async": false,
      "parameters": [
        "report"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.533455+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "af9737740143bfe33d0dab569efc15ac4ba0f7d8ad246ed48a3a5f5d5019d95c"
    },
    "src/system/admin/guard.py::_print_table": {
      "key": "src/system/admin/guard.py::_print_table",
      "name": "_print_table",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the system domain.",
      "docstring": "",
      "calls": [
        "Table",
        "_is_clean",
        "add_column",
        "add_row",
        "append",
        "fit",
        "get",
        "join",
        "row",
        "rprint"
      ],
      "line_number": 72,
      "is_async": false,
      "parameters": [
        "report_dict",
        "labels"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.536483+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "d38946831cbe0f2cd20a014e899d081136ebc7fbd9968d1194211b236341032b"
    },
    "src/system/admin/guard.py::row": {
      "key": "src/system/admin/guard.py::row",
      "name": "row",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Formats and adds a row to a table with a title and a list of items, highlighting empty lists in green and non-empty lists in yellow.",
      "docstring": "Formats and adds a row to a table with a title and a list of items, highlighting empty lists in green and non-empty lists in yellow.",
      "calls": [
        "add_row",
        "join"
      ],
      "line_number": 77,
      "is_async": false,
      "parameters": [
        "title",
        "items"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.537644+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "7a0e48cf5f4810d06c270e8041de6656253dd75bdb15ad03ee3196e0b4b827e6"
    },
    "src/system/admin/guard.py::_print_pretty": {
      "key": "src/system/admin/guard.py::_print_pretty",
      "name": "_print_pretty",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the system domain.",
      "docstring": "",
      "calls": [
        "Panel",
        "_is_clean",
        "_print_table",
        "get",
        "len",
        "rprint"
      ],
      "line_number": 105,
      "is_async": false,
      "parameters": [
        "report_dict",
        "labels"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.539669+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "970c77ce2837555a0d0dfeafe0b7e499116bafb5bc408a8de17ec4275f376193"
    },
    "src/system/admin/guard.py::register": {
      "key": "src/system/admin/guard.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the system domain.",
      "docstring": "",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "Typer",
        "_print_pretty",
        "_print_table",
        "_ux_defaults",
        "add_typer",
        "bool",
        "collect_code_capabilities",
        "command",
        "detect_capability_drift",
        "dumps",
        "echo",
        "items",
        "len",
        "load_manifest",
        "lower",
        "mkdir",
        "rprint",
        "should_fail",
        "sorted",
        "to_dict",
        "write_report",
        "write_text"
      ],
      "line_number": 124,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.544561+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "26a10ce6edad71c2e37d05fc2b536efa6273929692e4e4bc000aa26e4c500a01"
    },
    "src/system/admin/guard.py::drift": {
      "key": "src/system/admin/guard.py::drift",
      "name": "drift",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Compare manifest vs code to detect capability drift; write JSON evidence for CI.",
      "docstring": "Intent: Compare manifest vs code to detect capability drift; write JSON evidence for CI.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "_print_pretty",
        "_print_table",
        "_ux_defaults",
        "bool",
        "collect_code_capabilities",
        "command",
        "detect_capability_drift",
        "dumps",
        "echo",
        "load_manifest",
        "lower",
        "should_fail",
        "to_dict",
        "write_report"
      ],
      "line_number": 129,
      "is_async": false,
      "parameters": [
        "root",
        "manifest_path",
        "output",
        "format",
        "fail_on",
        "include",
        "exclude",
        "strict_intent"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.547403+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "5be8b3155942deb85980ceec498cba2ab51083e40b02995758a3078042aa4f5f"
    },
    "src/system/admin/guard.py::kg_export": {
      "key": "src/system/admin/guard.py::kg_export",
      "name": "kg_export",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Intent: Emit a minimal knowledge-graph artifact with capability nodes.",
      "docstring": "Intent: Emit a minimal knowledge-graph artifact with capability nodes.\nFormat: { \"nodes\": [ {\"capability\": \"...\", \"domain\": \"x\", \"owner\": \"y\"}, ... ] }",
      "calls": [
        "Option",
        "Path",
        "collect_code_capabilities",
        "command",
        "dumps",
        "items",
        "len",
        "lower",
        "mkdir",
        "rprint",
        "sorted",
        "write_text"
      ],
      "line_number": 168,
      "is_async": false,
      "parameters": [
        "root",
        "output",
        "include",
        "exclude",
        "prefer"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.549845+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "094cc19d88b21f43e2f1814ca03e39a2b841f600297c394c65bf131921b11a01"
    },
    "src/system/admin/keys.py::register": {
      "key": "src/system/admin/keys.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/keys.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register key management commands under the admin CLI.",
      "docstring": "Intent: Register key management commands under the admin CLI.",
      "calls": [
        "Argument",
        "NoEncryption",
        "chmod",
        "command",
        "confirm",
        "decode",
        "dump",
        "exists",
        "generate",
        "info",
        "mkdir",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "write_bytes"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.552894+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "45b1bf1d9b8058d6b6d163fbe77f0a3f3247e146b2fda94ec421e4fdb0cd2d64"
    },
    "src/system/admin/keys.py::keygen": {
      "key": "src/system/admin/keys.py::keygen",
      "name": "keygen",
      "type": "FunctionDef",
      "file": "src/system/admin/keys.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Generate a new Ed25519 key pair and print an approver YAML block.",
      "docstring": "Intent: Generate a new Ed25519 key pair and print an approver YAML block.",
      "calls": [
        "Argument",
        "NoEncryption",
        "chmod",
        "command",
        "confirm",
        "decode",
        "dump",
        "exists",
        "generate",
        "info",
        "mkdir",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "write_bytes"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "identity"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.554789+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "14fd3940cd7711b0bced8ef503a8d523385936748d6251684e23a8478149ca90"
    },
    "src/system/tools/change_log_updater.py::load_existing_log": {
      "key": "src/system/tools/change_log_updater.py::load_existing_log",
      "name": "load_existing_log",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads the existing change log from disk or returns a new structure.",
      "docstring": "Loads the existing change log from disk or returns a new structure.",
      "calls": [
        "load_config"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.556379+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "045e84467919732fd82a3d8d4ca3e8605bc8f656d720c345b587d57e0312ffe8"
    },
    "src/system/tools/change_log_updater.py::append_change_entry": {
      "key": "src/system/tools/change_log_updater.py::append_change_entry",
      "name": "append_change_entry",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Appends a new, structured entry to the metacode change log.",
      "docstring": "Appends a new, structured entry to the metacode change log.",
      "calls": [
        "append",
        "dumps",
        "info",
        "isoformat",
        "load_existing_log",
        "mkdir",
        "utcnow",
        "write_text"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "task",
        "step",
        "modified_files",
        "score",
        "violations"
      ],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-11T17:48:38.557739+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c59edf7a035cfaf6190faeae846f49a4c3c34922515c4e64babf0800aa6797ab"
    },
    "src/system/tools/codegraph_builder.py::_strip_docstrings": {
      "key": "src/system/tools/codegraph_builder.py::_strip_docstrings",
      "name": "_strip_docstrings",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Recursively remove docstring nodes from an AST tree.",
      "docstring": "Recursively remove docstring nodes from an AST tree.",
      "calls": [
        "_strip_docstrings",
        "isinstance",
        "iter_child_nodes"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.565514+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "e3c656ea2e10afe46346850fd74a5afe1244dbbdab3e3a9566e0c17bb3135fe2"
    },
    "src/system/tools/codegraph_builder.py::FunctionInfo": {
      "key": "src/system/tools/codegraph_builder.py::FunctionInfo",
      "name": "FunctionInfo",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A data structure holding all analyzed information about a single symbol (function or class).",
      "docstring": "A data structure holding all analyzed information about a single symbol (function or class).",
      "calls": [
        "field"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.566870+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "0834d2305e61040cca64fa89bcab2ff57afd635892ef582dc040723fb34040df"
    },
    "src/system/tools/codegraph_builder.py::ProjectStructureError": {
      "key": "src/system/tools/codegraph_builder.py::ProjectStructureError",
      "name": "ProjectStructureError",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Custom exception for when the project's root cannot be determined.",
      "docstring": "Custom exception for when the project's root cannot be determined.",
      "calls": [],
      "line_number": 54,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.567491+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "864b1a1df341c21e17b30657d9044bd319c77d991c0135d673dd5e14e10c0cd3"
    },
    "src/system/tools/codegraph_builder.py::find_project_root": {
      "key": "src/system/tools/codegraph_builder.py::find_project_root",
      "name": "find_project_root",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Traverses upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "docstring": "Traverses upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "calls": [
        "ProjectStructureError",
        "exists",
        "resolve"
      ],
      "line_number": 58,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.568257+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "0b0564196641e7941214ad29e72ab4c10e1d22d852fdc72c05922945d647e25c"
    },
    "src/system/tools/codegraph_builder.py::FunctionCallVisitor": {
      "key": "src/system/tools/codegraph_builder.py::FunctionCallVisitor",
      "name": "FunctionCallVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "An AST visitor that collects the names of all functions being called within a node.",
      "docstring": "An AST visitor that collects the names of all functions being called within a node.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance",
        "set"
      ],
      "line_number": 69,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.569360+00:00",
      "is_class": true,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "0645aa2e28bffc32027809f7b94a005ef6538a4295da20ad4e1dddd908eaa115"
    },
    "src/system/tools/codegraph_builder.py::__init__": {
      "key": "src/system/tools/codegraph_builder.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the builder, loading patterns and project configuration.",
      "docstring": "Initializes the builder, loading patterns and project configuration.",
      "calls": [
        "_get_cli_entry_points",
        "_get_domain_map",
        "_load_patterns",
        "resolve"
      ],
      "line_number": 107,
      "is_async": false,
      "parameters": [
        "self",
        "root_path",
        "exclude_patterns"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.592353+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "84dff06c76a72c2ce61aff340335153b24684af7d122c9554d1115ef23afe76a"
    },
    "src/system/tools/codegraph_builder.py::visit_Call": {
      "key": "src/system/tools/codegraph_builder.py::visit_Call",
      "name": "visit_Call",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "docstring": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance"
      ],
      "line_number": 74,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-11T17:48:38.570757+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::FunctionCallVisitor",
      "structural_hash": "bab8953d0f192e3ad33731686353b006217f77d7d00d45c684d77c0b6d248dc7"
    },
    "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder": {
      "key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "name": "KnowledgeGraphBuilder",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "manifest_updating",
      "intent": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "docstring": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "calls": [
        "ContextAwareVisitor",
        "FunctionCallVisitor",
        "FunctionInfo",
        "Path",
        "_apply_entry_point_patterns",
        "_determine_domain",
        "_get_cli_entry_points",
        "_get_domain_map",
        "_get_entry_point_type",
        "_infer_agent_from_path",
        "_infer_domains_from_directory_structure",
        "_load_patterns",
        "_parse_metadata_comment",
        "_process_symbol_node",
        "_should_exclude_path",
        "_strip_docstrings",
        "any",
        "append",
        "as_posix",
        "asdict",
        "encode",
        "error",
        "exists",
        "extend",
        "findall",
        "generic_visit",
        "get",
        "get_docstring",
        "group",
        "hasattr",
        "hexdigest",
        "info",
        "is_dir",
        "isinstance",
        "isoformat",
        "items",
        "iterdir",
        "len",
        "list",
        "load_config",
        "lower",
        "match",
        "max",
        "now",
        "parse",
        "read_text",
        "relative_to",
        "resolve",
        "rglob",
        "scan_file",
        "search",
        "set",
        "sha256",
        "sorted",
        "split",
        "splitlines",
        "startswith",
        "str",
        "strip",
        "unparse",
        "update",
        "values",
        "visit",
        "walk",
        "warning"
      ],
      "line_number": 81,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.586684+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "76ea9fe903a3ab603154c3aeb3fbc43763f176ec22408f42b4be8e9131a20ecc"
    },
    "src/system/tools/codegraph_builder.py::ContextAwareVisitor": {
      "key": "src/system/tools/codegraph_builder.py::ContextAwareVisitor",
      "name": "ContextAwareVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A stateful AST visitor that understands class context for methods.",
      "docstring": "A stateful AST visitor that understands class context for methods.",
      "calls": [
        "_process_symbol_node",
        "generic_visit"
      ],
      "line_number": 84,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.588340+00:00",
      "is_class": true,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "c27587d21b7bec2437ac70273878d45d96e7533e90df180be8a314f810a064b5"
    },
    "src/system/tools/codegraph_builder.py::visit_ClassDef": {
      "key": "src/system/tools/codegraph_builder.py::visit_ClassDef",
      "name": "visit_ClassDef",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the tooling domain.",
      "docstring": "",
      "calls": [
        "_process_symbol_node",
        "generic_visit"
      ],
      "line_number": 92,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-11T17:48:38.589782+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::ContextAwareVisitor",
      "structural_hash": "32840121166f4cad08c3e9f49084fd4153c870c694dd8d0a8ac5e696e0dfa829"
    },
    "src/system/tools/codegraph_builder.py::visit_FunctionDef": {
      "key": "src/system/tools/codegraph_builder.py::visit_FunctionDef",
      "name": "visit_FunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the tooling domain.",
      "docstring": "",
      "calls": [
        "_process_symbol_node",
        "generic_visit"
      ],
      "line_number": 99,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-11T17:48:38.590476+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::ContextAwareVisitor",
      "structural_hash": "5575e92236a49f499b960b253498937dd49abf57b9bf3314aa7144639c90a6ac"
    },
    "src/system/tools/codegraph_builder.py::visit_AsyncFunctionDef": {
      "key": "src/system/tools/codegraph_builder.py::visit_AsyncFunctionDef",
      "name": "visit_AsyncFunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the tooling domain.",
      "docstring": "",
      "calls": [
        "_process_symbol_node",
        "generic_visit"
      ],
      "line_number": 103,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-11T17:48:38.591111+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::ContextAwareVisitor",
      "structural_hash": "9eb4e07a0033dee3b46da9ce918059d5ed7d4f8205b913eef2dcb3ce18cfad5f"
    },
    "src/system/tools/codegraph_builder.py::_load_patterns": {
      "key": "src/system/tools/codegraph_builder.py::_load_patterns",
      "name": "_load_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads entry point detection patterns from the intent file.",
      "docstring": "Loads entry point detection patterns from the intent file.",
      "calls": [
        "exists",
        "get",
        "load_config",
        "warning"
      ],
      "line_number": 120,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.593314+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "93b538fcdb2347bab6a939b9818f3ffeeaf6ccf428452277abbf7e156068a179"
    },
    "src/system/tools/codegraph_builder.py::_get_cli_entry_points": {
      "key": "src/system/tools/codegraph_builder.py::_get_cli_entry_points",
      "name": "_get_cli_entry_points",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parses pyproject.toml to find declared command-line entry points.",
      "docstring": "Parses pyproject.toml to find declared command-line entry points.",
      "calls": [
        "exists",
        "findall",
        "group",
        "read_text",
        "search",
        "set"
      ],
      "line_number": 128,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.594344+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "f611763e9c0c9f8e7c8e1b024cf3765e6929a7d36cde3481298d04934e55d09c"
    },
    "src/system/tools/codegraph_builder.py::_should_exclude_path": {
      "key": "src/system/tools/codegraph_builder.py::_should_exclude_path",
      "name": "_should_exclude_path",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determines if a given path should be excluded from scanning.",
      "docstring": "Determines if a given path should be excluded from scanning.",
      "calls": [
        "any"
      ],
      "line_number": 136,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.595062+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "4b0556303a7101535defeeffda6781fa10a10e69da843d9a17ad36758d2f15a2"
    },
    "src/system/tools/codegraph_builder.py::_infer_domains_from_directory_structure": {
      "key": "src/system/tools/codegraph_builder.py::_infer_domains_from_directory_structure",
      "name": "_infer_domains_from_directory_structure",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A heuristic to guess domains if source_structure.yaml is missing.",
      "docstring": "A heuristic to guess domains if source_structure.yaml is missing.",
      "calls": [
        "Path",
        "as_posix",
        "info",
        "is_dir",
        "iterdir",
        "len",
        "startswith",
        "warning"
      ],
      "line_number": 140,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.596503+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "f8b8ced07296e2c991e1ddda1f89a69950d11e36193309c54c198829041f6057"
    },
    "src/system/tools/codegraph_builder.py::_get_domain_map": {
      "key": "src/system/tools/codegraph_builder.py::_get_domain_map",
      "name": "_get_domain_map",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads the domain-to-path mapping from the constitution, with a fallback",
      "docstring": "Loads the domain-to-path mapping from the constitution, with a fallback\nto inferring domains from the directory structure.",
      "calls": [
        "Path",
        "_infer_domains_from_directory_structure",
        "as_posix",
        "get",
        "load_config"
      ],
      "line_number": 159,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.597726+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "59a16ffe86a33da2a7d39a5e250a38cd64604790c8ec39ed2e98e1c374695ab2"
    },
    "src/system/tools/codegraph_builder.py::_determine_domain": {
      "key": "src/system/tools/codegraph_builder.py::_determine_domain",
      "name": "_determine_domain",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determines the logical domain for a file path based on the longest matching prefix.",
      "docstring": "Determines the logical domain for a file path based on the longest matching prefix.",
      "calls": [
        "as_posix",
        "get",
        "max",
        "startswith"
      ],
      "line_number": 173,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.598626+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "4cb174d60ebdee3eff31ad4ad04373f054818349142764484d972eeaf4c92aea"
    },
    "src/system/tools/codegraph_builder.py::_infer_agent_from_path": {
      "key": "src/system/tools/codegraph_builder.py::_infer_agent_from_path",
      "name": "_infer_agent_from_path",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Infers the most likely responsible agent based on keywords in the file path.",
      "docstring": "Infers the most likely responsible agent based on keywords in the file path.",
      "calls": [
        "any",
        "lower",
        "str"
      ],
      "line_number": 179,
      "is_async": false,
      "parameters": [
        "self",
        "relative_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.599709+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "cdbd81d3f6f2175950361cd6fe94611efb4f0e24de5e81e9d5aee0ffc9f80917"
    },
    "src/system/tools/codegraph_builder.py::_parse_metadata_comment": {
      "key": "src/system/tools/codegraph_builder.py::_parse_metadata_comment",
      "name": "_parse_metadata_comment",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parses the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "docstring": "Parses the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "calls": [
        "group",
        "search",
        "startswith",
        "strip"
      ],
      "line_number": 189,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "source_lines"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.600860+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "36610026f4ca2eb3d8fe96e1edfc0c1d4bba6b6194f1533cdbd723cb18b7087f"
    },
    "src/system/tools/codegraph_builder.py::_get_entry_point_type": {
      "key": "src/system/tools/codegraph_builder.py::_get_entry_point_type",
      "name": "_get_entry_point_type",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Identifies decorator or CLI-based entry points for a function.",
      "docstring": "Identifies decorator or CLI-based entry points for a function.",
      "calls": [
        "isinstance"
      ],
      "line_number": 198,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.602316+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "556244c2de4cded3f191d20c2136fe0a36af8535e86d4fb6535204d855c9706a"
    },
    "src/system/tools/codegraph_builder.py::scan_file": {
      "key": "src/system/tools/codegraph_builder.py::scan_file",
      "name": "scan_file",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Scans a single Python file, parsing its AST to extract all symbols.",
      "docstring": "Scans a single Python file, parsing its AST to extract all symbols.",
      "calls": [
        "ContextAwareVisitor",
        "FunctionCallVisitor",
        "error",
        "isinstance",
        "parse",
        "read_text",
        "set",
        "splitlines",
        "str",
        "update",
        "visit",
        "walk"
      ],
      "line_number": 209,
      "is_async": false,
      "parameters": [
        "self",
        "filepath"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.604814+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "3a5d46ccf1b223a2a916c065fd33fec6dcf52d96d2e895381128eb18df3a6b19"
    },
    "src/system/tools/codegraph_builder.py::_process_symbol_node": {
      "key": "src/system/tools/codegraph_builder.py::_process_symbol_node",
      "name": "_process_symbol_node",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Extracts and stores metadata from a single function or class AST node.",
      "docstring": "Extracts and stores metadata from a single function or class AST node.",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "_determine_domain",
        "_get_entry_point_type",
        "_infer_agent_from_path",
        "_parse_metadata_comment",
        "_strip_docstrings",
        "append",
        "as_posix",
        "encode",
        "get",
        "get_docstring",
        "hasattr",
        "hexdigest",
        "isinstance",
        "isoformat",
        "now",
        "parse",
        "relative_to",
        "sha256",
        "split",
        "strip",
        "unparse",
        "visit"
      ],
      "line_number": 231,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "filepath",
        "source_lines",
        "parent_key"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.608059+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "5a43fc9a730131ae5599722f300af6ce5d130fbfc53ea61c81f28afbdc04b2bd"
    },
    "src/system/tools/codegraph_builder.py::_apply_entry_point_patterns": {
      "key": "src/system/tools/codegraph_builder.py::_apply_entry_point_patterns",
      "name": "_apply_entry_point_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Applies declarative patterns to identify non-obvious entry points.",
      "docstring": "Applies declarative patterns to identify non-obvious entry points.",
      "calls": [
        "any",
        "extend",
        "get",
        "match",
        "values"
      ],
      "line_number": 268,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.610557+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "36fa393fb3ef9894a214e0e4cf3176ec01b78e215ed70799a45e4cddd8594dec"
    },
    "src/system/tools/codegraph_builder.py::build": {
      "key": "src/system/tools/codegraph_builder.py::build",
      "name": "build",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Orchestrates the full knowledge graph generation process.",
      "docstring": "Orchestrates the full knowledge graph generation process.",
      "calls": [
        "_apply_entry_point_patterns",
        "_should_exclude_path",
        "asdict",
        "info",
        "isoformat",
        "items",
        "len",
        "list",
        "now",
        "rglob",
        "scan_file",
        "sorted",
        "values"
      ],
      "line_number": 290,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.613096+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "334afad9e374d7acaa5c681dab3e4a4174ff57f5c1f55fa496c07d443653ee3c"
    },
    "src/system/tools/codegraph_builder.py::main": {
      "key": "src/system/tools/codegraph_builder.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "CLI entry point to run the knowledge graph builder and save the output.",
      "docstring": "CLI entry point to run the knowledge graph builder and save the output.",
      "calls": [
        "KnowledgeGraphBuilder",
        "build",
        "cwd",
        "dumps",
        "error",
        "find_project_root",
        "info",
        "len",
        "load_dotenv",
        "mkdir",
        "write_text"
      ],
      "line_number": 312,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-11T17:48:38.614988+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d7bec690f654cffb54e1cea5acd4e933f00ffd825867ad532b3d0470e21221ed"
    },
    "src/system/tools/manifest_migrator.py::migrate_manifest": {
      "key": "src/system/tools/manifest_migrator.py::migrate_manifest",
      "name": "migrate_manifest",
      "type": "FunctionDef",
      "file": "src/system/tools/manifest_migrator.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Reads the monolithic manifest and splits it into per-domain manifests.",
      "docstring": "Reads the monolithic manifest and splits it into per-domain manifests.",
      "calls": [
        "Exit",
        "Option",
        "all",
        "append",
        "dump",
        "echo",
        "enumerate",
        "error",
        "exists",
        "get",
        "info",
        "items",
        "loads",
        "mkdir",
        "next",
        "read_text",
        "safe_load",
        "secho",
        "values",
        "warning",
        "write_text"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "dry_run"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.621368+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "bea5f20466ad27f164b36e0c9e7d911fa1dc6e045cc6f9265c8bdc40f8b3e2a4"
    },
    "src/system/tools/docstring_adder.py::add_docstring_to_function_line_based": {
      "key": "src/system/tools/docstring_adder.py::add_docstring_to_function_line_based",
      "name": "add_docstring_to_function_line_based",
      "type": "FunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Surgically inserts a docstring into source code using a line-based method.",
      "docstring": "Surgically inserts a docstring into source code using a line-based method.\nPreserves comments and formatting.",
      "calls": [
        "error",
        "insert",
        "join",
        "len",
        "lstrip",
        "splitlines",
        "strip",
        "warning"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "source_code",
        "line_number",
        "docstring"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.626536+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "d72e9a2c564cb36b9ff44d485c1325732d95b6dc2d070af4a5ed78f48f520138"
    },
    "src/system/tools/docstring_adder.py::generate_and_apply_docstring": {
      "key": "src/system/tools/docstring_adder.py::generate_and_apply_docstring",
      "name": "generate_and_apply_docstring",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Generates and applies a docstring for a single function.",
      "docstring": "Generates and applies a docstring for a single function.",
      "calls": [
        "add_docstring_to_function_line_based",
        "error",
        "exists",
        "get",
        "get_docstring",
        "info",
        "isinstance",
        "make_request_async",
        "parse",
        "read_text",
        "replace",
        "secho",
        "strip",
        "unparse",
        "walk",
        "warning",
        "write_text"
      ],
      "line_number": 56,
      "is_async": true,
      "parameters": [
        "target",
        "generator",
        "dry_run"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.630664+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "fd679d58a58b2d5eb678d361ad7956490aec55ed96e7f03fd9dc733e2187f60e"
    },
    "src/system/tools/docstring_adder.py::_async_main": {
      "key": "src/system/tools/docstring_adder.py::_async_main",
      "name": "_async_main",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "The core asynchronous logic for finding and fixing docstrings.",
      "docstring": "The core asynchronous logic for finding and fixing docstrings.",
      "calls": [
        "GeneratorClient",
        "Semaphore",
        "as_completed",
        "error",
        "exists",
        "generate_and_apply_docstring",
        "get",
        "info",
        "len",
        "loads",
        "read_text",
        "str",
        "track",
        "values",
        "worker"
      ],
      "line_number": 129,
      "is_async": true,
      "parameters": [
        "dry_run"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.633316+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "904262bb53ca5588509bf4eb9f7ecf51c2e6efd4c684d04f4844dd4826b770dd"
    },
    "src/system/tools/docstring_adder.py::worker": {
      "key": "src/system/tools/docstring_adder.py::worker",
      "name": "worker",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes the target asynchronously with a semaphore, generating and applying a docstring using the provided generator (dry run if specified).",
      "docstring": "Processes the target asynchronously with a semaphore, generating and applying a docstring using the provided generator (dry run if specified).",
      "calls": [
        "generate_and_apply_docstring"
      ],
      "line_number": 156,
      "is_async": true,
      "parameters": [
        "target"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.634073+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "0313c26fd75e5488a390b7dc961cfd40420d366cc475cd06ee299221b874f0f9"
    },
    "src/system/tools/docstring_adder.py::fix_missing_docstrings": {
      "key": "src/system/tools/docstring_adder.py::fix_missing_docstrings",
      "name": "fix_missing_docstrings",
      "type": "FunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "add_missing_docstrings",
      "intent": "Finds all functions with missing docstrings and uses an LLM to generate them.",
      "docstring": "Finds all functions with missing docstrings and uses an LLM to generate them.",
      "calls": [
        "Option",
        "_async_main",
        "run"
      ],
      "line_number": 169,
      "is_async": false,
      "parameters": [
        "dry_run"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.634774+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "83ebcd1b1903e76fcc721f4193ab7760916089fc6dbae3f6f3c2a749dd0ad4cd"
    },
    "src/system/governance/checks/quality_checks.py::QualityChecks": {
      "key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "name": "QualityChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for code quality constitutional checks.",
      "docstring": "Container for code quality constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 6,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.638836+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "2b0d4043e357b1b636f833f610d100ac6f344d7e69451e91f4d8856f66809ad6"
    },
    "src/system/governance/checks/quality_checks.py::__init__": {
      "key": "src/system/governance/checks/quality_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.639407+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "1dc0d14e79c72e94245288f7c44e6fac8589c4b05b4c310f37b47381e2ea41ea"
    },
    "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents": {
      "key": "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents",
      "name": "check_docstrings_and_intents",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.docstrings",
      "intent": "Finds symbols missing docstrings or having generic intents.",
      "docstring": "Finds symbols missing docstrings or having generic intents.",
      "calls": [
        "AuditFinding",
        "append",
        "get"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.641141+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "f40f71e160a1696a76c508fbb0d72e8da348ea77e5e2de0968ca611e23ac5789"
    },
    "src/system/governance/checks/quality_checks.py::check_for_dead_code": {
      "key": "src/system/governance/checks/quality_checks.py::check_for_dead_code",
      "name": "check_for_dead_code",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.dead_code",
      "intent": "Detects unreferenced public symbols.",
      "docstring": "Detects unreferenced public symbols.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.642966+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "4abaedf091a82766f3e90e0aaafdaf80c041dce5008028f4ad54134032ae81a7"
    },
    "src/system/governance/checks/file_checks.py::FileChecks": {
      "key": "src/system/governance/checks/file_checks.py::FileChecks",
      "name": "FileChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for file-based constitutional checks.",
      "docstring": "Container for file-based constitutional checks.",
      "calls": [
        "AuditFinding",
        "Path",
        "_get_known_files_from_meta",
        "_recursive_find_paths",
        "add",
        "any",
        "append",
        "exists",
        "extend",
        "glob",
        "is_file",
        "isinstance",
        "len",
        "list",
        "load_config",
        "read_text",
        "relative_to",
        "replace",
        "rglob",
        "set",
        "sorted",
        "str",
        "validate_code",
        "values"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.650899+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "26f4252f48775e4065186911d77aa24e5519f04c292f92cbd8b41d859cc87982"
    },
    "src/system/governance/checks/file_checks.py::__init__": {
      "key": "src/system/governance/checks/file_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.651501+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "1dc0d14e79c72e94245288f7c44e6fac8589c4b05b4c310f37b47381e2ea41ea"
    },
    "src/system/governance/checks/file_checks.py::check_required_files": {
      "key": "src/system/governance/checks/file_checks.py::check_required_files",
      "name": "check_required_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.required_files",
      "intent": "Verifies that all files declared in meta.yaml exist on disk.",
      "docstring": "Verifies that all files declared in meta.yaml exist on disk.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "append",
        "exists",
        "len",
        "list",
        "sorted"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.653019+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "1d558fc4c97dd07e4659d870f61d359f6da2d9bc2cdb018f8f1b62ea92716870"
    },
    "src/system/governance/checks/file_checks.py::check_syntax": {
      "key": "src/system/governance/checks/file_checks.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.syntax",
      "intent": "Validates the syntax of all .intent YAML/JSON files (including proposals).",
      "docstring": "Validates the syntax of all .intent YAML/JSON files (including proposals).",
      "calls": [
        "AuditFinding",
        "append",
        "extend",
        "is_file",
        "len",
        "list",
        "read_text",
        "relative_to",
        "rglob",
        "str",
        "validate_code"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.654919+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "46fa6c5267bbf18f04a97fc8a3a532a9ac2649f838025602eeb42bc1436f3091"
    },
    "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files": {
      "key": "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files",
      "name": "check_for_orphaned_intent_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.orphaned_intent_files",
      "intent": "Finds .intent files that are not referenced in meta.yaml.",
      "docstring": "Finds .intent files that are not referenced in meta.yaml.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "any",
        "append",
        "is_file",
        "list",
        "relative_to",
        "replace",
        "rglob",
        "sorted",
        "str"
      ],
      "line_number": 67,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.656832+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "c577086d6a0a345ab40ff8a65cb0f2137646635d6768ca788ad32192f25a4604"
    },
    "src/system/governance/checks/file_checks.py::_get_known_files_from_meta": {
      "key": "src/system/governance/checks/file_checks.py::_get_known_files_from_meta",
      "name": "_get_known_files_from_meta",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Builds a set of all known intent files by reading .intent/meta.yaml.",
      "docstring": "Builds a set of all known intent files by reading .intent/meta.yaml.",
      "calls": [
        "Path",
        "_recursive_find_paths",
        "add",
        "exists",
        "glob",
        "isinstance",
        "load_config",
        "relative_to",
        "replace",
        "set",
        "str",
        "values"
      ],
      "line_number": 86,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.659005+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "5d8cdc25ea5aa7895600393af6617167bc5aad4241a31c94070dd1a80c43b1ca"
    },
    "src/system/governance/checks/file_checks.py::_recursive_find_paths": {
      "key": "src/system/governance/checks/file_checks.py::_recursive_find_paths",
      "name": "_recursive_find_paths",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Recursively finds all file paths declared in the meta configuration.",
      "docstring": "Recursively finds all file paths declared in the meta configuration.",
      "calls": [
        "Path",
        "_recursive_find_paths",
        "add",
        "isinstance",
        "replace",
        "str",
        "values"
      ],
      "line_number": 94,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.660187+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "538bc4a6f8ead1e6d26030e880c885a8805dfbe59e35976cca07b4ff9476024c"
    },
    "src/system/governance/checks/proposal_checks.py::ProposalChecks": {
      "key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "name": "ProposalChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for proposal-related constitutional checks.",
      "docstring": "Container for proposal-related constitutional checks.",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "ValueError",
        "_expected_token_for_content",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "encode",
        "exists",
        "get",
        "glob",
        "hexdigest",
        "iter_errors",
        "join",
        "len",
        "list",
        "load_schema",
        "loads",
        "lower",
        "read_text",
        "relative_to",
        "safe_load",
        "sha256",
        "sorted",
        "str"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.669449+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "ddee93862c9ba4038940bc8763d369e5046ecda674b9d1fa5bdc2d1b518d104b"
    },
    "src/system/governance/checks/proposal_checks.py::__init__": {
      "key": "src/system/governance/checks/proposal_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context, setting `repo_root` and `proposals_dir` paths.",
      "docstring": "Initializes the check with a shared auditor context, setting `repo_root` and `proposals_dir` paths.",
      "calls": [],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.670234+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "c976dff4a3fed5398d62cfee4d4f593fa568780866806d4d8d2d6b858ec20536"
    },
    "src/system/governance/checks/proposal_checks.py::_proposal_paths": {
      "key": "src/system/governance/checks/proposal_checks.py::_proposal_paths",
      "name": "_proposal_paths",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Return all cr-* proposals (both YAML and JSON).",
      "docstring": "Return all cr-* proposals (both YAML and JSON).",
      "calls": [
        "exists",
        "glob",
        "list",
        "sorted"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.671210+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "a246a33fc124b4c96eb9dbf11f96fcfdfb13e84643e0e69738685a5c4f1ce077"
    },
    "src/system/governance/checks/proposal_checks.py::_load_proposal": {
      "key": "src/system/governance/checks/proposal_checks.py::_load_proposal",
      "name": "_load_proposal",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Load proposal preserving its format.",
      "docstring": "Load proposal preserving its format.",
      "calls": [
        "ValueError",
        "loads",
        "lower",
        "read_text",
        "safe_load"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.672372+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "c5ddbf6ffe774f94c6de5fb971495d377f916112bb542b8b4720fbbc76216a93"
    },
    "src/system/governance/checks/proposal_checks.py::_expected_token_for_content": {
      "key": "src/system/governance/checks/proposal_checks.py::_expected_token_for_content",
      "name": "_expected_token_for_content",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Mirror admin token format: 'core-proposal-v1:<sha256hex>'.",
      "docstring": "Mirror admin token format: 'core-proposal-v1:<sha256hex>'.",
      "calls": [
        "encode",
        "hexdigest",
        "sha256"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "content"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.673195+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "9fce88da20cbd5c824350a85ed86bb5509f2bbbfedbb4c7f3bd750c28def1a90"
    },
    "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema": {
      "key": "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema",
      "name": "check_proposal_files_match_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_schema",
      "intent": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "docstring": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "exists",
        "iter_errors",
        "join",
        "list",
        "load_schema",
        "relative_to",
        "str"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.675703+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "f949078077927daa468297db92467250e19195b2cad0a507de1e46b2e528c85d"
    },
    "src/system/governance/checks/proposal_checks.py::check_signatures_match_content": {
      "key": "src/system/governance/checks/proposal_checks.py::check_signatures_match_content",
      "name": "check_signatures_match_content",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_drift",
      "intent": "Detect content/signature drift:",
      "docstring": "Detect content/signature drift:\n- warn if a proposal has no signatures\n- warn if any signature token does not match the current content",
      "calls": [
        "AuditFinding",
        "_expected_token_for_content",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "get",
        "join",
        "len",
        "relative_to",
        "str"
      ],
      "line_number": 127,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.678456+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "b9fd68f990cca281115e4052ff510391b9fce134aea1bc6cb4e451df66225c72"
    },
    "src/system/governance/checks/proposal_checks.py::list_pending_proposals": {
      "key": "src/system/governance/checks/proposal_checks.py::list_pending_proposals",
      "name": "list_pending_proposals",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_list",
      "intent": "Emit a friendly summary of pending proposals.",
      "docstring": "Emit a friendly summary of pending proposals.",
      "calls": [
        "AuditFinding",
        "_proposal_paths",
        "append",
        "exists",
        "relative_to",
        "str"
      ],
      "line_number": 198,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.679924+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "978e7e6371c215f4d6251d974872f3016f9678f7b6e79b94e5b6a4a484d0c12a"
    },
    "src/system/governance/checks/architecture_checks.py::ArchitectureChecks": {
      "key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "name": "ArchitectureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for architectural integrity checks.",
      "docstring": "Container for architectural integrity checks.",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.682592+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "2629fcdc233b11795446c924781df886fe2792e3178adff6e35b092ede84bc89"
    },
    "src/system/governance/checks/architecture_checks.py::__init__": {
      "key": "src/system/governance/checks/architecture_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 12,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.683119+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "structural_hash": "1dc0d14e79c72e94245288f7c44e6fac8589c4b05b4c310f37b47381e2ea41ea"
    },
    "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication": {
      "key": "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication",
      "name": "check_for_structural_duplication",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.duplication",
      "intent": "Finds symbols with identical structural hashes, violating `dry_by_design`, using content-addressed knowledge graph for accurate duplication detection.",
      "docstring": "Finds symbols with identical structural hashes, violating `dry_by_design`, using content-addressed knowledge graph for accurate duplication detection.",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.684927+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "structural_hash": "c14751da54071fc503aa083dbe5d566b22745f491dd37208cb1ea6dd588d5eb5"
    },
    "src/system/governance/checks/structure_checks.py::StructureChecks": {
      "key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "name": "StructureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for structural constitutional checks.",
      "docstring": "Container for structural constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "items",
        "joinpath",
        "len",
        "list",
        "load_config",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "sorted",
        "split",
        "startswith",
        "validate_manifest_entry",
        "with_suffix"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.694021+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "3c1a6a1f14a41b65fac1d4e0e970cb6cba04db054f37532cbd1e81ac28246af7"
    },
    "src/system/governance/checks/structure_checks.py::__init__": {
      "key": "src/system/governance/checks/structure_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.694628+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "1dc0d14e79c72e94245288f7c44e6fac8589c4b05b4c310f37b47381e2ea41ea"
    },
    "src/system/governance/checks/structure_checks.py::check_project_manifest": {
      "key": "src/system/governance/checks/structure_checks.py::check_project_manifest",
      "name": "check_project_manifest",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.project_manifest",
      "intent": "Validates the integrity of project_manifest.yaml.",
      "docstring": "Validates the integrity of project_manifest.yaml.",
      "calls": [
        "AuditFinding",
        "append"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.695818+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "47598ce1a8e620a4140c0826a51f3edda03959d6d6f8c64ff2e92638e07a6e1c"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_coverage": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_coverage",
      "name": "check_capability_coverage",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_coverage",
      "intent": "Ensures all required capabilities are implemented.",
      "docstring": "Ensures all required capabilities are implemented.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "set",
        "sorted"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.697270+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "19b8d23e4555fd690a9776f38aaa1d4f9f6d8bf338d78040a91d0cac069d0c49"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_definitions": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_definitions",
      "name": "check_capability_definitions",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_definitions",
      "intent": "Ensures all implemented capabilities are valid.",
      "docstring": "Ensures all implemented capabilities are valid.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "load_config",
        "sorted"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.699001+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "47f938a690dbeb4a63b0621bc0d6d8171257ae6dfaf680b4a4ba8a90aaedbbf3"
    },
    "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema": {
      "key": "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema",
      "name": "check_knowledge_graph_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.knowledge_graph_schema",
      "intent": "Validates all knowledge graph symbols against the schema.",
      "docstring": "Validates all knowledge graph symbols against the schema.",
      "calls": [
        "AuditFinding",
        "append",
        "items",
        "len",
        "validate_manifest_entry"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.700672+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "7bcbe3ea7151332652bc185d29d0273e1cf161bb6a10c4dfa45c6d2326ef45bf"
    },
    "src/system/governance/checks/structure_checks.py::check_domain_integrity": {
      "key": "src/system/governance/checks/structure_checks.py::check_domain_integrity",
      "name": "check_domain_integrity",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.domain_integrity",
      "intent": "Checks for domain mismatches and illegal imports.",
      "docstring": "Checks for domain mismatches and illegal imports.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "joinpath",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "split",
        "startswith",
        "with_suffix"
      ],
      "line_number": 84,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.703804+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "a92728b73b17e96e47af742ae8a688e68a6326e89f4c40604d5fe7963529e6e5"
    },
    "src/system/governance/checks/environment_checks.py::EnvironmentChecks": {
      "key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "name": "EnvironmentChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for environment and runtime configuration checks.",
      "docstring": "Container for environment and runtime configuration checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "load_config"
      ],
      "line_number": 6,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.706827+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "6b024c0e90859e12afe8ec0853b994a793f02c31ddedf4521fff6cb812426a5e"
    },
    "src/system/governance/checks/environment_checks.py::__init__": {
      "key": "src/system/governance/checks/environment_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-11T17:48:38.707370+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "structural_hash": "1dc0d14e79c72e94245288f7c44e6fac8589c4b05b4c310f37b47381e2ea41ea"
    },
    "src/system/governance/checks/environment_checks.py::check_runtime_environment": {
      "key": "src/system/governance/checks/environment_checks.py::check_runtime_environment",
      "name": "check_runtime_environment",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.environment",
      "intent": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "docstring": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "load_config"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-11T17:48:38.709271+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "structural_hash": "2797c7344f19a0c5c41afc6b3732d11c807fd725d9fc5feaea18718d1816aed8"
    },
    "src/core/cli/guard.py::ensure_cli_entrypoint": {
      "key": "src/core/cli/guard.py::ensure_cli_entrypoint",
      "name": "ensure_cli_entrypoint",
      "type": "FunctionDef",
      "file": "src/core/cli/guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the core domain.",
      "docstring": "Provides functionality for the core domain.",
      "calls": [
        "warning"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-11T17:48:38.710370+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "4da791dd1537cbe4dfbb0243540a0edc4249a708ac8fe669a17c2316679d73d1"
    },
    "src/shared/schemas/manifest_validator.py::load_schema": {
      "key": "src/shared/schemas/manifest_validator.py::load_schema",
      "name": "load_schema",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load a JSON schema from the .intent/schemas/ directory.",
      "docstring": "Load a JSON schema from the .intent/schemas/ directory.\n\nArgs:\n    schema_name (str): The filename of the schema (e.g., 'knowledge_graph_entry.schema.json').\n    \nReturns:\n    Dict[str, Any]: The loaded JSON schema.\n    \nRaises:\n    FileNotFoundError: If the schema file is not found.\n    json.JSONDecodeError: If the schema file is not valid JSON.",
      "calls": [
        "FileNotFoundError",
        "JSONDecodeError",
        "exists",
        "load",
        "open"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [
        "schema_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.712299+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "75a3e049ba750ef453bcb196882ea2b1319162c6d42ce5ee57b96157e678286f"
    },
    "src/shared/schemas/manifest_validator.py::validate_manifest_entry": {
      "key": "src/shared/schemas/manifest_validator.py::validate_manifest_entry",
      "name": "validate_manifest_entry",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Validate a single manifest entry against a schema.",
      "docstring": "Validate a single manifest entry against a schema.\n\nArgs:\n    entry: The dictionary representing a single function/class entry.\n    schema_name: The filename of the schema to validate against.\n    \nReturns:\n    A tuple of (is_valid: bool, list_of_error_messages: List[str]).",
      "calls": [
        "Draft7Validator",
        "append",
        "iter_errors",
        "join",
        "load_schema",
        "str"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "entry",
        "schema_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.713914+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "7a12edc7bfad880292fb8f43c4c24c7a21d7fedbc14c2e5f8a80583fededc517"
    },
    "src/shared/utils/manifest_aggregator.py::aggregate_manifests": {
      "key": "src/shared/utils/manifest_aggregator.py::aggregate_manifests",
      "name": "aggregate_manifests",
      "type": "FunctionDef",
      "file": "src/shared/utils/manifest_aggregator.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds all domain-specific manifest.yaml files and merges them.",
      "docstring": "Finds all domain-specific manifest.yaml files and merges them.\n\nThis function is the heart of the modular manifest system. It reads the\nsource structure to find all domains, then searches for a manifest in each\ndomain's directory, aggregating their contents.\n\nArgs:\n    repo_root (Path): The absolute path to the repository root.\n\nReturns:\n    A dictionary representing the aggregated manifest, primarily focused\n    on compiling a unified list of 'required_capabilities'.",
      "calls": [
        "debug",
        "error",
        "exists",
        "extend",
        "get",
        "info",
        "list",
        "read_text",
        "safe_load",
        "set",
        "sorted"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "repo_root"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.717365+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "e328d65d3f4068a4f2dc7602f0d7d02c70915750d2c066dd17bb654cf717754b"
    },
    "src/shared/utils/import_scanner.py::scan_imports_for_file": {
      "key": "src/shared/utils/import_scanner.py::scan_imports_for_file",
      "name": "scan_imports_for_file",
      "type": "FunctionDef",
      "file": "src/shared/utils/import_scanner.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Parse a Python file and extract all imported module paths.",
      "docstring": "Parse a Python file and extract all imported module paths.\n\nArgs:\n    file_path (Path): Path to the file.\n\nReturns:\n    List[str]: List of imported module paths.",
      "calls": [
        "append",
        "isinstance",
        "parse",
        "read_text",
        "walk",
        "warning"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.719472+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "f1a07ab2523b8bbd0b09c1cd4de9ea522d6240c63d271ad9196321a5814c1ece"
    },
    "src/shared/utils/parsing.py::parse_write_blocks": {
      "key": "src/shared/utils/parsing.py::parse_write_blocks",
      "name": "parse_write_blocks",
      "type": "FunctionDef",
      "file": "src/shared/utils/parsing.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Extracts all [[write:...]] blocks from LLM output.",
      "docstring": "Extracts all [[write:...]] blocks from LLM output.\n\nThis function is robust and handles both [[end]] and [[/write]] as valid terminators\nto accommodate different LLM habits.\n\nArgs:\n    llm_output (str): The raw text output from a language model.\n\nReturns:\n    A dictionary mapping file paths to their corresponding code content.",
      "calls": [
        "findall",
        "strip"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [
        "llm_output"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-11T17:48:38.720690+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "0add4d2946891ed29ab7d8fcf5c560374c35d068110f7270b96bd5ec6af0d11d"
    }
  }
}