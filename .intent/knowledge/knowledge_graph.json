{
  "schema_version": "2.0.0",
  "metadata": {
    "files_scanned": 75,
    "total_symbols": 350,
    "timestamp_utc": "2025-08-18T19:15:33.994380+00:00"
  },
  "symbols": {
    "src/agents/execution_agent.py::ExecutionAgent": {
      "name": "ExecutionAgent",
      "qualname": "unassigned.ExecutionAgent",
      "module": "execution_agent",
      "filepath": "src/agents/execution_agent.py",
      "lineno": 20,
      "end_lineno": 98,
      "params": {},
      "decorators": [],
      "docstring": "Orchestrates the execution of a plan, including code generation and validation.",
      "base_classes": [],
      "structural_hash": "fb3eab1025ec12c2ffbb39faf0701b166484f43e2f998ed265e11237705fbf96",
      "calls": [
        "PlanExecutionContext",
        "_generate_code_for_task",
        "dedent",
        "error",
        "execute_plan",
        "format",
        "get",
        "info",
        "make_request",
        "process",
        "str",
        "strip"
      ],
      "type": "ClassDef",
      "tags": [
        "src/agents/execution_agent.py::ExecutionAgent"
      ]
    },
    "src/agents/execution_agent.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "execution_agent",
      "filepath": "src/agents/execution_agent.py",
      "lineno": 23,
      "end_lineno": 32,
      "params": {
        "self": null,
        "generator_client": null,
        "prompt_pipeline": null,
        "plan_executor": null
      },
      "decorators": [],
      "docstring": "Initializes the ExecutionAgent with its required tools.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "0aefa8dbdccef87c728ed35972726bcbad83f38f93444e0e7af22e26bff52660",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/agents/execution_agent.py::__init__"
      ]
    },
    "src/agents/execution_agent.py::_generate_code_for_task": {
      "name": "_generate_code_for_task",
      "qualname": "unassigned._generate_code_for_task",
      "module": "execution_agent",
      "filepath": "src/agents/execution_agent.py",
      "lineno": 35,
      "end_lineno": 61,
      "params": {
        "self": null,
        "task": null,
        "goal": null
      },
      "decorators": [],
      "docstring": "Generates the code content for a single task using a generator LLM.",
      "base_classes": [],
      "structural_hash": "7d1006c46f46bc6b68dd6111e3de42debe47e7c6aeac6c21bf2a1cc18cdbd219",
      "calls": [
        "dedent",
        "format",
        "info",
        "make_request",
        "process",
        "strip"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/agents/execution_agent.py::_generate_code_for_task"
      ]
    },
    "src/agents/execution_agent.py::execute_plan": {
      "name": "execute_plan",
      "qualname": "unassigned.execute_plan",
      "module": "execution_agent",
      "filepath": "src/agents/execution_agent.py",
      "lineno": 63,
      "end_lineno": 98,
      "params": {
        "self": null,
        "high_level_goal": null,
        "plan": null
      },
      "decorators": [],
      "docstring": "Takes a plan, generates code for each step, and then executes the\nfully-populated plan.",
      "base_classes": [],
      "structural_hash": "7132bb041816821e22af4abcb7d00a531000ad3d8feadd17c7cabb4c2a07dcb6",
      "calls": [
        "PlanExecutionContext",
        "_generate_code_for_task",
        "error",
        "execute_plan",
        "get",
        "info",
        "str"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/agents/execution_agent.py::execute_plan"
      ]
    },
    "src/agents/models.py::TaskStatus": {
      "name": "TaskStatus",
      "qualname": "unassigned.TaskStatus",
      "module": "models",
      "filepath": "src/agents/models.py",
      "lineno": 13,
      "end_lineno": 19,
      "params": {},
      "decorators": [],
      "docstring": "Enumeration of possible states for an ExecutionTask.",
      "base_classes": [
        "Enum"
      ],
      "structural_hash": "d8ad3bccb3971670ad07d88d486e0340daa4f998de5ee01d303682e6a57c29be",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/agents/models.py::TaskStatus"
      ]
    },
    "src/agents/models.py::ExecutionProgress": {
      "name": "ExecutionProgress",
      "qualname": "unassigned.ExecutionProgress",
      "module": "models",
      "filepath": "src/agents/models.py",
      "lineno": 23,
      "end_lineno": 42,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "docstring": "Represents the progress of a plan's execution.",
      "base_classes": [],
      "structural_hash": "a44fc776b69d95d57f15bdc224984da00807cb6bdfe0849ad23d40964fc6d9a8",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/agents/models.py::ExecutionProgress"
      ]
    },
    "src/agents/models.py::completion_percentage": {
      "name": "completion_percentage",
      "qualname": "unassigned.completion_percentage",
      "module": "models",
      "filepath": "src/agents/models.py",
      "lineno": 32,
      "end_lineno": 42,
      "params": {
        "self": null
      },
      "decorators": [
        "property"
      ],
      "docstring": "Calculates the completion percentage of the plan as a float,\nreturning 0 if there are no tasks.",
      "base_classes": [],
      "structural_hash": "d101ab8c655802b187262c9f5903e00ac183fdeb8301e2ae136d4f279d4b027a",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/agents/models.py::completion_percentage"
      ]
    },
    "src/agents/models.py::PlannerConfig": {
      "name": "PlannerConfig",
      "qualname": "unassigned.PlannerConfig",
      "module": "models",
      "filepath": "src/agents/models.py",
      "lineno": 46,
      "end_lineno": 53,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "docstring": "Configuration settings for the PlannerAgent's behavior.",
      "base_classes": [],
      "structural_hash": "1b2dddc2040c6b9e91ef612bf7c9b521900fc8b84be4017844e987d806fad45e",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/agents/models.py::PlannerConfig"
      ]
    },
    "src/agents/models.py::TaskParams": {
      "name": "TaskParams",
      "qualname": "unassigned.TaskParams",
      "module": "models",
      "filepath": "src/agents/models.py",
      "lineno": 57,
      "end_lineno": 63,
      "params": {},
      "decorators": [],
      "docstring": "Data model for the parameters of a single task in an execution plan.",
      "base_classes": [
        "BaseModel"
      ],
      "structural_hash": "1c8868970c18e1b5772d7685996e7441deb79454a884f2769ac55a9f19f35f98",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/agents/models.py::TaskParams"
      ]
    },
    "src/agents/models.py::ExecutionTask": {
      "name": "ExecutionTask",
      "qualname": "unassigned.ExecutionTask",
      "module": "models",
      "filepath": "src/agents/models.py",
      "lineno": 66,
      "end_lineno": 71,
      "params": {},
      "decorators": [],
      "docstring": "Data model for a single, executable step in a plan.",
      "base_classes": [
        "BaseModel"
      ],
      "structural_hash": "b0c8bd81c4be39c825ade5c681d80f88680c30b65c0dd7b7a03271ac2788b825",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/agents/models.py::ExecutionTask"
      ]
    },
    "src/agents/plan_executor.py::PlanExecutionError": {
      "name": "PlanExecutionError",
      "qualname": "unassigned.PlanExecutionError",
      "module": "plan_executor",
      "filepath": "src/agents/plan_executor.py",
      "lineno": 21,
      "end_lineno": 26,
      "params": {},
      "decorators": [],
      "docstring": "Custom exception for failures during plan execution.",
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "3c61acd4cb84afb806dec357db8093d8aef20d4eb1c8c25ffc6463f6f880e4de",
      "calls": [
        "__init__",
        "super"
      ],
      "type": "ClassDef",
      "tags": [
        "src/agents/plan_executor.py::PlanExecutionError"
      ]
    },
    "src/agents/plan_executor.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "plan_executor",
      "filepath": "src/agents/plan_executor.py",
      "lineno": 32,
      "end_lineno": 42,
      "params": {
        "self": null,
        "file_handler": null,
        "git_service": null,
        "config": null
      },
      "decorators": [],
      "docstring": "Initializes the executor with necessary dependencies.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "0b30bc730c4ba6a3a1b8b392d6c763435afbc3a0bf2a124d3c408c05148d2456",
      "calls": [
        "CodeEditor",
        "SymbolLocator",
        "get_event_loop"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/plan_executor.py::__init__"
      ]
    },
    "src/agents/plan_executor.py::PlanExecutor": {
      "name": "PlanExecutor",
      "qualname": "unassigned.PlanExecutor",
      "module": "plan_executor",
      "filepath": "src/agents/plan_executor.py",
      "lineno": 29,
      "end_lineno": 186,
      "params": {},
      "decorators": [],
      "docstring": "A service that takes a list of ExecutionTasks and executes them sequentially.",
      "base_classes": [],
      "structural_hash": "17735db12ab7b0a74cdffea83961886204476d970edac95c771a3ad3a5274554",
      "calls": [
        "CodeEditor",
        "FileExistsError",
        "FileNotFoundError",
        "PlanExecutionError",
        "SymbolLocator",
        "_execute_task",
        "_execute_task_with_timeout",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "enumerate",
        "exists",
        "get_event_loop",
        "info",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "read_text",
        "replace_symbol_in_code",
        "splitlines",
        "validate_code",
        "wait_for",
        "warning"
      ],
      "type": "ClassDef",
      "tags": [
        "src/agents/plan_executor.py::PlanExecutor"
      ]
    },
    "src/agents/plan_executor.py::execute_plan": {
      "name": "execute_plan",
      "qualname": "unassigned.execute_plan",
      "module": "plan_executor",
      "filepath": "src/agents/plan_executor.py",
      "lineno": 44,
      "end_lineno": 48,
      "params": {
        "self": null,
        "plan": null
      },
      "decorators": [],
      "docstring": "Executes the entire plan, one task at a time.",
      "base_classes": [],
      "structural_hash": "8ab199f27dd1071d219d6c48bea8bd7a3d2fdf4eedef7cfc8b84368e2888ac41",
      "calls": [
        "_execute_task_with_timeout",
        "enumerate",
        "info",
        "len"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/agents/plan_executor.py::execute_plan"
      ]
    },
    "src/agents/plan_executor.py::_execute_task_with_timeout": {
      "name": "_execute_task_with_timeout",
      "qualname": "unassigned._execute_task_with_timeout",
      "module": "plan_executor",
      "filepath": "src/agents/plan_executor.py",
      "lineno": 50,
      "end_lineno": 56,
      "params": {
        "self": null,
        "task": null
      },
      "decorators": [],
      "docstring": "Execute task with timeout protection.",
      "base_classes": [],
      "structural_hash": "2b19751daf33b16818e0df3ee50ab15cb04a6b011160ffe645b7763f6a2b17d1",
      "calls": [
        "PlanExecutionError",
        "_execute_task",
        "wait_for"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/agents/plan_executor.py::_execute_task_with_timeout"
      ]
    },
    "src/agents/plan_executor.py::_execute_task": {
      "name": "_execute_task",
      "qualname": "unassigned._execute_task",
      "module": "plan_executor",
      "filepath": "src/agents/plan_executor.py",
      "lineno": 58,
      "end_lineno": 68,
      "params": {
        "self": null,
        "task": null
      },
      "decorators": [],
      "docstring": "Dispatcher that executes a single task from a plan based on its action type.",
      "base_classes": [],
      "structural_hash": "142e7b01a2be8c7c8b602cc730558908a88986ef92ded59e5898efb9d3f2d4ce",
      "calls": [
        "warning"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/agents/plan_executor.py::_execute_task"
      ]
    },
    "src/agents/plan_executor.py::_execute_add_tag": {
      "name": "_execute_add_tag",
      "qualname": "unassigned._execute_add_tag",
      "module": "plan_executor",
      "filepath": "src/agents/plan_executor.py",
      "lineno": 70,
      "end_lineno": 115,
      "params": {
        "self": null,
        "params": null
      },
      "decorators": [],
      "docstring": "Executes the surgical 'add_capability_tag' action.",
      "base_classes": [],
      "structural_hash": "92d0f7ab18897042061d91682aa174be9b4838e02c9cd239fd3531296aac57a7",
      "calls": [
        "PlanExecutionError",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "read_text",
        "splitlines",
        "validate_code"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/agents/plan_executor.py::_execute_add_tag"
      ]
    },
    "src/agents/plan_executor.py::_execute_create_file": {
      "name": "_execute_create_file",
      "qualname": "unassigned._execute_create_file",
      "module": "plan_executor",
      "filepath": "src/agents/plan_executor.py",
      "lineno": 117,
      "end_lineno": 142,
      "params": {
        "self": null,
        "params": null
      },
      "decorators": [],
      "docstring": "Executes the 'create_file' action.",
      "base_classes": [],
      "structural_hash": "4bb5563cf1361275428d4d0b4fec8e2fb191b87359137ff4a4827a076b7515f6",
      "calls": [
        "FileExistsError",
        "PlanExecutionError",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "validate_code"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/agents/plan_executor.py::_execute_create_file"
      ]
    },
    "src/agents/plan_executor.py::_execute_edit_function": {
      "name": "_execute_edit_function",
      "qualname": "unassigned._execute_edit_function",
      "module": "plan_executor",
      "filepath": "src/agents/plan_executor.py",
      "lineno": 144,
      "end_lineno": 186,
      "params": {
        "self": null,
        "params": null
      },
      "decorators": [],
      "docstring": "Executes the 'edit_function' action using the CodeEditor.",
      "base_classes": [],
      "structural_hash": "cd92f69e3aa453220e21b7be41d28f3af1dcd95af46dc15c7e67902679562f94",
      "calls": [
        "FileNotFoundError",
        "PlanExecutionError",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "replace_symbol_in_code",
        "validate_code"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/agents/plan_executor.py::_execute_edit_function"
      ]
    },
    "src/agents/planner_agent.py::PlannerAgent": {
      "name": "PlannerAgent",
      "qualname": "unassigned.PlannerAgent",
      "module": "planner_agent",
      "filepath": "src/agents/planner_agent.py",
      "lineno": 24,
      "end_lineno": 143,
      "params": {},
      "decorators": [],
      "docstring": "Decomposes goals into plans but does not execute them.",
      "base_classes": [],
      "structural_hash": "438ca1d2144b2e8fe0a22f68ed40617570ad8dc2086beb19f2c4ed449ee9bc98",
      "calls": [
        "ExecutionTask",
        "JSONDecoder",
        "PlanExecutionError",
        "PlannerConfig",
        "ValueError",
        "_extract_json_from_response",
        "_log_plan_summary",
        "_setup_logging_context",
        "_validate_task_params",
        "all",
        "dedent",
        "enumerate",
        "error",
        "find",
        "format",
        "getattr",
        "group",
        "info",
        "isinstance",
        "isoformat",
        "len",
        "loads",
        "make_request",
        "now",
        "process",
        "range",
        "raw_decode",
        "search",
        "set",
        "strftime",
        "strip",
        "warning"
      ],
      "type": "ClassDef",
      "tags": [
        "src/agents/planner_agent.py::PlannerAgent"
      ]
    },
    "src/agents/planner_agent.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "planner_agent",
      "filepath": "src/agents/planner_agent.py",
      "lineno": 27,
      "end_lineno": 36,
      "params": {
        "self": null,
        "orchestrator_client": null,
        "prompt_pipeline": null,
        "config": null
      },
      "decorators": [],
      "docstring": "Initializes the PlannerAgent with its dependencies.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "f178ab747ef36e5bf1201cc4aafac640a70777b353028ccc2e9a4089e0902fcf",
      "calls": [
        "PlannerConfig"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/planner_agent.py::__init__"
      ]
    },
    "src/agents/planner_agent.py::_setup_logging_context": {
      "name": "_setup_logging_context",
      "qualname": "unassigned._setup_logging_context",
      "module": "planner_agent",
      "filepath": "src/agents/planner_agent.py",
      "lineno": 38,
      "end_lineno": 46,
      "params": {
        "self": null,
        "goal": null,
        "plan_id": null
      },
      "decorators": [],
      "docstring": "Sets up a structured logging context for a planning cycle.",
      "base_classes": [],
      "structural_hash": "59a96cbfb2dca8f5653d7a9a4255ea9f20aae428732c8e7605bda8e6fb129170",
      "calls": [
        "isoformat",
        "now",
        "set"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/planner_agent.py::_setup_logging_context"
      ]
    },
    "src/agents/planner_agent.py::_extract_json_from_response": {
      "name": "_extract_json_from_response",
      "qualname": "unassigned._extract_json_from_response",
      "module": "planner_agent",
      "filepath": "src/agents/planner_agent.py",
      "lineno": 48,
      "end_lineno": 72,
      "params": {
        "self": null,
        "text": null
      },
      "decorators": [],
      "docstring": "Extracts a JSON object or array from a raw text response, handling markdown blocks.",
      "base_classes": [],
      "structural_hash": "df6ba42dbade92e0423aa963b29741c7a7ca23bacd32fc9f8ea9b06713b5fa02",
      "calls": [
        "JSONDecoder",
        "error",
        "find",
        "group",
        "loads",
        "raw_decode",
        "search",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/planner_agent.py::_extract_json_from_response"
      ]
    },
    "src/agents/planner_agent.py::_log_plan_summary": {
      "name": "_log_plan_summary",
      "qualname": "unassigned._log_plan_summary",
      "module": "planner_agent",
      "filepath": "src/agents/planner_agent.py",
      "lineno": 74,
      "end_lineno": 78,
      "params": {
        "self": null,
        "plan": null
      },
      "decorators": [],
      "docstring": "Logs a human-readable summary of the generated execution plan.",
      "base_classes": [],
      "structural_hash": "8dc5acc38cbf9becc59b88c68b3d4ae8eb6e605e3cdde45f0f4eb329070f3000",
      "calls": [
        "enumerate",
        "info",
        "len"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/planner_agent.py::_log_plan_summary"
      ]
    },
    "src/agents/planner_agent.py::_validate_task_params": {
      "name": "_validate_task_params",
      "qualname": "unassigned._validate_task_params",
      "module": "planner_agent",
      "filepath": "src/agents/planner_agent.py",
      "lineno": 80,
      "end_lineno": 93,
      "params": {
        "self": null,
        "task": null
      },
      "decorators": [],
      "docstring": "Validates that a task has all required parameters for its specified action.",
      "base_classes": [],
      "structural_hash": "42ef310195a95119c6987788500180309637c4d4989bac83da214f72aa637488",
      "calls": [
        "PlanExecutionError",
        "all",
        "getattr"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/planner_agent.py::_validate_task_params"
      ]
    },
    "src/agents/planner_agent.py::create_execution_plan": {
      "name": "create_execution_plan",
      "qualname": "unassigned.create_execution_plan",
      "module": "planner_agent",
      "filepath": "src/agents/planner_agent.py",
      "lineno": 96,
      "end_lineno": 143,
      "params": {
        "self": null,
        "high_level_goal": null
      },
      "decorators": [],
      "docstring": "Decomposes a high-level goal into a structured, code-free execution plan using an LLM.",
      "base_classes": [],
      "structural_hash": "324e353e24435ecfe89dd8c3f0e2764228551ab278f247d4349304dcb8159fc3",
      "calls": [
        "ExecutionTask",
        "PlanExecutionError",
        "ValueError",
        "_extract_json_from_response",
        "_log_plan_summary",
        "_setup_logging_context",
        "_validate_task_params",
        "dedent",
        "format",
        "info",
        "isinstance",
        "make_request",
        "now",
        "process",
        "range",
        "strftime",
        "strip",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/planner_agent.py::create_execution_plan"
      ]
    },
    "src/agents/utils.py::CodeEditor": {
      "name": "CodeEditor",
      "qualname": "unassigned.CodeEditor",
      "module": "utils",
      "filepath": "src/agents/utils.py",
      "lineno": 15,
      "end_lineno": 64,
      "params": {},
      "decorators": [],
      "docstring": "Provides capabilities to surgically edit code files.",
      "base_classes": [],
      "structural_hash": "1e325dcf304aa0ce36a35ad3940b9f6a12c98bc07ba1b0b7b5833c6a60521568",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "hasattr",
        "isinstance",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip",
        "walk"
      ],
      "type": "ClassDef",
      "tags": [
        "src/agents/utils.py::CodeEditor"
      ]
    },
    "src/agents/utils.py::_get_symbol_start_end_lines": {
      "name": "_get_symbol_start_end_lines",
      "qualname": "unassigned._get_symbol_start_end_lines",
      "module": "utils",
      "filepath": "src/agents/utils.py",
      "lineno": 18,
      "end_lineno": 27,
      "params": {
        "self": null,
        "tree": null,
        "symbol_name": null
      },
      "decorators": [],
      "docstring": "Finds the 1-based start and end line numbers of a symbol.",
      "base_classes": [],
      "structural_hash": "e1f209cb8a4ecc20429ae00376a97016fce78fac28e7722e1c75c53a474bc3d2",
      "calls": [
        "hasattr",
        "isinstance",
        "walk"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/utils.py::_get_symbol_start_end_lines"
      ]
    },
    "src/agents/utils.py::replace_symbol_in_code": {
      "name": "replace_symbol_in_code",
      "qualname": "unassigned.replace_symbol_in_code",
      "module": "utils",
      "filepath": "src/agents/utils.py",
      "lineno": 30,
      "end_lineno": 64,
      "params": {
        "self": null,
        "original_code": null,
        "symbol_name": null,
        "new_code_str": null
      },
      "decorators": [],
      "docstring": "Replaces a function/method in code with a new version using a line-based strategy.",
      "base_classes": [],
      "structural_hash": "cfb5faaf154f4f3a26a528a27d7d5bf3528f3fe6ae33480719e6c6d770fe0ee8",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/utils.py::replace_symbol_in_code"
      ]
    },
    "src/agents/utils.py::SymbolLocator": {
      "name": "SymbolLocator",
      "qualname": "unassigned.SymbolLocator",
      "module": "utils",
      "filepath": "src/agents/utils.py",
      "lineno": 67,
      "end_lineno": 87,
      "params": {},
      "decorators": [],
      "docstring": "Dedicated class for finding symbols in code files.",
      "base_classes": [],
      "structural_hash": "aa60ea7ae3b22f0acf89dcbc52608035efb94cdaf001b399ce61573f0275ff0b",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "type": "ClassDef",
      "tags": [
        "src/agents/utils.py::SymbolLocator"
      ]
    },
    "src/agents/utils.py::find_symbol_line": {
      "name": "find_symbol_line",
      "qualname": "unassigned.find_symbol_line",
      "module": "utils",
      "filepath": "src/agents/utils.py",
      "lineno": 71,
      "end_lineno": 87,
      "params": {
        "file_path": null,
        "symbol_name": null
      },
      "decorators": [
        "staticmethod"
      ],
      "docstring": "Finds the line number of a function or class definition in a file.",
      "base_classes": [],
      "structural_hash": "8ddfab18561b557e08e78df5c6ee99ff25b0c38d0088f3ed18ec16efbb047dd9",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/utils.py::find_symbol_line"
      ]
    },
    "src/agents/utils.py::PlanExecutionContext": {
      "name": "PlanExecutionContext",
      "qualname": "unassigned.PlanExecutionContext",
      "module": "utils",
      "filepath": "src/agents/utils.py",
      "lineno": 90,
      "end_lineno": 120,
      "params": {},
      "decorators": [],
      "docstring": "Context manager for safe plan execution with rollback.",
      "base_classes": [],
      "structural_hash": "213b39d472ca44a51dfa93ce0b7490709391d835c23d06710e87d1958bd23ef1",
      "calls": [
        "error",
        "get_current_commit",
        "is_git_repo",
        "reset_to_commit",
        "warning"
      ],
      "type": "ClassDef",
      "tags": [
        "src/agents/utils.py::PlanExecutionContext"
      ]
    },
    "src/agents/utils.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "utils",
      "filepath": "src/agents/utils.py",
      "lineno": 93,
      "end_lineno": 97,
      "params": {
        "self": null,
        "execution_agent": null
      },
      "decorators": [],
      "docstring": "Initializes the context with a reference to the ExecutionAgent.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "1f2d86f30080adf76889beeee8d4229c5e0684bf09739919b44a50b5eff665bb",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/agents/utils.py::__init__"
      ]
    },
    "src/agents/utils.py::__enter__": {
      "name": "__enter__",
      "qualname": "unassigned.__enter__",
      "module": "utils",
      "filepath": "src/agents/utils.py",
      "lineno": 99,
      "end_lineno": 107,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Sets up the execution context, capturing the initial git commit hash.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "c528d97d55a4908365965b4eca1f71a75f6ec4fd94e032f4baa8bb974eb0b20b",
      "calls": [
        "get_current_commit",
        "is_git_repo",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/utils.py::__enter__"
      ]
    },
    "src/agents/utils.py::__exit__": {
      "name": "__exit__",
      "qualname": "unassigned.__exit__",
      "module": "utils",
      "filepath": "src/agents/utils.py",
      "lineno": 109,
      "end_lineno": 120,
      "params": {
        "self": null,
        "exc_type": null,
        "exc_val": null,
        "exc_tb": null
      },
      "decorators": [],
      "docstring": "Cleans up and handles rollback on failure.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "1d2e9ae89957a860461b1b34b6c169fd68bbb991b1230a816c05c336c57a3205",
      "calls": [
        "error",
        "reset_to_commit",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/agents/utils.py::__exit__"
      ]
    },
    "src/core/black_formatter.py::format_code_with_black": {
      "name": "format_code_with_black",
      "qualname": "unassigned.format_code_with_black",
      "module": "black_formatter",
      "filepath": "src/core/black_formatter.py",
      "lineno": 10,
      "end_lineno": 36,
      "params": {
        "code": null
      },
      "decorators": [],
      "docstring": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "base_classes": [],
      "structural_hash": "67aa7b50532f6c25f84285da5bbf9430a54f3b594a386a3299c19b82faa15fbf",
      "calls": [
        "Exception",
        "FileMode",
        "InvalidInput",
        "format_str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/black_formatter.py::format_code_with_black"
      ]
    },
    "src/core/capabilities.py::introspection": {
      "name": "introspection",
      "qualname": "unassigned.introspection",
      "module": "capabilities",
      "filepath": "src/core/capabilities.py",
      "lineno": 20,
      "end_lineno": 74,
      "params": {},
      "decorators": [],
      "docstring": "Runs a full self-analysis cycle to inspect system structure and health.\nThis orchestrates the execution of the system's own introspection tools\nas separate, governed processes.",
      "base_classes": [],
      "structural_hash": "65c205885812932a8159baa16c02658ee3be9c35f7e536cee2a1799fa9a682b7",
      "calls": [
        "Path",
        "error",
        "info",
        "print",
        "resolve",
        "run",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/capabilities.py::introspection"
      ]
    },
    "src/core/clients.py::BaseLLMClient": {
      "name": "BaseLLMClient",
      "qualname": "unassigned.BaseLLMClient",
      "module": "clients",
      "filepath": "src/core/clients.py",
      "lineno": 18,
      "end_lineno": 126,
      "params": {},
      "decorators": [],
      "docstring": "Base class for LLM clients, handling common request logic for Chat APIs.\nProvides shared initialization and error handling for all LLM clients.",
      "base_classes": [],
      "structural_hash": "0f66592a18c2280b2c2aef06c304204bbb7b0fb4ae9fea9bb45530e4aa7073e8",
      "calls": [
        "AsyncClient",
        "ValueError",
        "debug",
        "endswith",
        "error",
        "json",
        "post",
        "raise_for_status",
        "rstrip"
      ],
      "type": "ClassDef",
      "tags": [
        "src/core/clients.py::BaseLLMClient"
      ]
    },
    "src/core/clients.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "clients",
      "filepath": "src/core/clients.py",
      "lineno": 150,
      "end_lineno": 157,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Initialize the LLM client with API URL, key, and model name, setting up headers and async client.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "b403a0adf5809d21d773a4460434cb99a9302d32c855cccb6cd5cf64e2da6ed1",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/clients.py::__init__"
      ]
    },
    "src/core/clients.py::make_request": {
      "name": "make_request",
      "qualname": "unassigned.make_request",
      "module": "clients",
      "filepath": "src/core/clients.py",
      "lineno": 52,
      "end_lineno": 85,
      "params": {
        "self": null,
        "prompt": null,
        "user_id": null
      },
      "decorators": [],
      "docstring": "Sends a prompt to the configured Chat Completions API. (Synchronous)",
      "base_classes": [],
      "structural_hash": "f86839876ec208ce0f0efec9a1ee80bba0eccb140e30ccaa94c499b45e182a73",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/clients.py::make_request"
      ]
    },
    "src/core/clients.py::make_request_async": {
      "name": "make_request_async",
      "qualname": "unassigned.make_request_async",
      "module": "clients",
      "filepath": "src/core/clients.py",
      "lineno": 89,
      "end_lineno": 126,
      "params": {
        "self": null,
        "prompt": null,
        "user_id": null
      },
      "decorators": [],
      "docstring": "Sends a prompt asynchronously to the configured Chat Completions API.",
      "base_classes": [],
      "structural_hash": "000933e12c6751ddaee82d36d6bc4e62a447f2cd6c3fa59c68c0ad1064d3c8b6",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/core/clients.py::make_request_async"
      ]
    },
    "src/core/clients.py::OrchestratorClient": {
      "name": "OrchestratorClient",
      "qualname": "unassigned.OrchestratorClient",
      "module": "clients",
      "filepath": "src/core/clients.py",
      "lineno": 129,
      "end_lineno": 141,
      "params": {},
      "decorators": [],
      "docstring": "Client for the Orchestrator LLM (e.g., GPT-4, Claude 3).\nResponsible for high-level planning and intent interpretation.",
      "base_classes": [
        "BaseLLMClient"
      ],
      "structural_hash": "a9a57b0c8143719c4fdc119649f1c145ab237e70c343b272671aa2cea24d2299",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "type": "ClassDef",
      "tags": [
        "src/core/clients.py::OrchestratorClient"
      ]
    },
    "src/core/clients.py::GeneratorClient": {
      "name": "GeneratorClient",
      "qualname": "unassigned.GeneratorClient",
      "module": "clients",
      "filepath": "src/core/clients.py",
      "lineno": 144,
      "end_lineno": 157,
      "params": {},
      "decorators": [],
      "docstring": "Client for the Generator LLM (e.g., a specialized coding model).\nResponsible for code generation and detailed implementation.",
      "base_classes": [
        "BaseLLMClient"
      ],
      "structural_hash": "4595b0780cd78486b917e5401a7827f3fe1b1ee5ec9fa7dfd131fe42ab6e1df6",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "type": "ClassDef",
      "tags": [
        "src/core/clients.py::GeneratorClient"
      ]
    },
    "src/core/errors.py::register_exception_handlers": {
      "name": "register_exception_handlers",
      "qualname": "unassigned.register_exception_handlers",
      "module": "errors",
      "filepath": "src/core/errors.py",
      "lineno": 17,
      "end_lineno": 52,
      "params": {
        "app": null
      },
      "decorators": [],
      "docstring": "Registers custom exception handlers with the FastAPI application.",
      "base_classes": [],
      "structural_hash": "b4391706ebcc3340825a8843452e9937dff660eae23258170b9a39025af234cd",
      "calls": [
        "JSONResponse",
        "exception",
        "exception_handler",
        "info",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/errors.py::register_exception_handlers"
      ]
    },
    "src/core/errors.py::http_exception_handler": {
      "name": "http_exception_handler",
      "qualname": "unassigned.http_exception_handler",
      "module": "errors",
      "filepath": "src/core/errors.py",
      "lineno": 21,
      "end_lineno": 32,
      "params": {
        "request": null,
        "exc": null
      },
      "decorators": [
        "app.exception_handler(StarletteHTTPException)"
      ],
      "docstring": "Handles FastAPI's built-in HTTP exceptions to ensure consistent\nJSON error responses.",
      "base_classes": [],
      "structural_hash": "844a786fe8a0ce4cd5981900846e4e73cecae20bed3e51aaa59a30f251c850aa",
      "calls": [
        "JSONResponse",
        "exception_handler",
        "warning"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/core/errors.py::http_exception_handler"
      ]
    },
    "src/core/errors.py::unhandled_exception_handler": {
      "name": "unhandled_exception_handler",
      "qualname": "unassigned.unhandled_exception_handler",
      "module": "errors",
      "filepath": "src/core/errors.py",
      "lineno": 35,
      "end_lineno": 50,
      "params": {
        "request": null,
        "exc": null
      },
      "decorators": [
        "app.exception_handler(Exception)"
      ],
      "docstring": "Catches any unhandled exception, logs the full traceback internally,\nand returns a generic 500 Internal Server Error to the client.\nThis is a critical security measure to prevent leaking stack traces.",
      "base_classes": [],
      "structural_hash": "8fe5bb14073169e242922d7e0ec83028c9f5651f22f304eee50f7f1e66a093af",
      "calls": [
        "JSONResponse",
        "exception",
        "exception_handler"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/core/errors.py::unhandled_exception_handler"
      ]
    },
    "src/core/file_handler.py::FileHandler": {
      "name": "FileHandler",
      "qualname": "unassigned.FileHandler",
      "module": "file_handler",
      "filepath": "src/core/file_handler.py",
      "lineno": 21,
      "end_lineno": 115,
      "params": {},
      "decorators": [],
      "docstring": "Central class for safe, auditable file operations in CORE.\nAll writes are staged first and require confirmation. Validation is handled\nby the calling agent via the validation_pipeline.",
      "base_classes": [],
      "structural_hash": "cf22b57d0019b89065c46a812e22e93b4b7115c5a8708f14c806b9a1d98a402f",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "as_posix",
        "dumps",
        "exists",
        "info",
        "is_dir",
        "is_relative_to",
        "isoformat",
        "mkdir",
        "now",
        "pop",
        "resolve",
        "str",
        "unlink",
        "uuid4",
        "write_text"
      ],
      "type": "ClassDef",
      "tags": [
        "src/core/file_handler.py::FileHandler"
      ]
    },
    "src/core/file_handler.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "file_handler",
      "filepath": "src/core/file_handler.py",
      "lineno": 28,
      "end_lineno": 49,
      "params": {
        "self": null,
        "repo_path": null
      },
      "decorators": [],
      "docstring": "Initialize FileHandler with repository root.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "a391bbf69fe28cb6f7dd819585d77edd303092eba98bfedd2829d91a0675d620",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "is_dir",
        "mkdir",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/file_handler.py::__init__"
      ]
    },
    "src/core/file_handler.py::add_pending_write": {
      "name": "add_pending_write",
      "qualname": "unassigned.add_pending_write",
      "module": "file_handler",
      "filepath": "src/core/file_handler.py",
      "lineno": 51,
      "end_lineno": 70,
      "params": {
        "self": null,
        "prompt": null,
        "suggested_path": null,
        "code": null
      },
      "decorators": [],
      "docstring": "Stages a pending write operation for later confirmation.",
      "base_classes": [],
      "structural_hash": "97f53770943022e923da2c61ba40c8b032523785a1466c467746c7cf52a50e8f",
      "calls": [
        "Path",
        "as_posix",
        "dumps",
        "isoformat",
        "now",
        "str",
        "uuid4",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/file_handler.py::add_pending_write"
      ]
    },
    "src/core/file_handler.py::confirm_write": {
      "name": "confirm_write",
      "qualname": "unassigned.confirm_write",
      "module": "file_handler",
      "filepath": "src/core/file_handler.py",
      "lineno": 72,
      "end_lineno": 115,
      "params": {
        "self": null,
        "pending_id": null
      },
      "decorators": [],
      "docstring": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "base_classes": [],
      "structural_hash": "541b4ae3111b2b97acd6b799bddb038018fc5ddaf06d45bd53757acdbbe26688",
      "calls": [
        "ValueError",
        "dumps",
        "exists",
        "info",
        "is_relative_to",
        "mkdir",
        "pop",
        "resolve",
        "str",
        "unlink",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/file_handler.py::confirm_write"
      ]
    },
    "src/core/git_service.py::GitService": {
      "name": "GitService",
      "qualname": "unassigned.GitService",
      "module": "git_service",
      "filepath": "src/core/git_service.py",
      "lineno": 22,
      "end_lineno": 119,
      "params": {},
      "decorators": [],
      "docstring": "Encapsulates Git operations for the CORE system.\nEnsures all file changes are committed with traceable messages.",
      "base_classes": [],
      "structural_hash": "ccc7b74514266784da6391edb69daa742b4ccb839f991520bf4bcd5f53f8bee9",
      "calls": [
        "Path",
        "RuntimeError",
        "ValueError",
        "_run_command",
        "debug",
        "error",
        "info",
        "is_dir",
        "is_git_repo",
        "join",
        "lower",
        "resolve",
        "run",
        "str",
        "strip",
        "warning"
      ],
      "type": "ClassDef",
      "tags": [
        "src/core/git_service.py::GitService"
      ]
    },
    "src/core/git_service.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "git_service",
      "filepath": "src/core/git_service.py",
      "lineno": 28,
      "end_lineno": 33,
      "params": {
        "self": null,
        "repo_path": null
      },
      "decorators": [],
      "docstring": "Initialize GitService with the resolved absolute path to the Git repository; raises ValueError if path is not a valid Git repo.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "2ee6f0bbab7a85e07997d95684c60764cdff44ca12bd88dd923c9ba41636ac16",
      "calls": [
        "Path",
        "ValueError",
        "info",
        "is_git_repo",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/git_service.py::__init__"
      ]
    },
    "src/core/git_service.py::_run_command": {
      "name": "_run_command",
      "qualname": "unassigned._run_command",
      "module": "git_service",
      "filepath": "src/core/git_service.py",
      "lineno": 36,
      "end_lineno": 54,
      "params": {
        "self": null,
        "command": null
      },
      "decorators": [],
      "docstring": "Run a Git command and return stdout.\n\nArgs:\n    command (list): Git command as a list (e.g., ['git', 'status']).\n\nReturns:\n    str: Command output, or raises RuntimeError on failure.",
      "base_classes": [],
      "structural_hash": "244f6b0c9edc75d143c4779dec692c478d7a6308ed924c4e1eb77a9c6f1f8185",
      "calls": [
        "RuntimeError",
        "debug",
        "error",
        "join",
        "run",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/git_service.py::_run_command"
      ]
    },
    "src/core/git_service.py::add": {
      "name": "add",
      "qualname": "unassigned.add",
      "module": "git_service",
      "filepath": "src/core/git_service.py",
      "lineno": 56,
      "end_lineno": 66,
      "params": {
        "self": null,
        "file_path": null
      },
      "decorators": [],
      "docstring": "Stage a file or directory for commit.\n\nArgs:\n    file_path (str): Path to stage. Defaults to '.' (all changes).",
      "base_classes": [],
      "structural_hash": "bf69c45ada0dfc032626720fafc60b9784d1b6f7671472abf04bbef419e3d3b2",
      "calls": [
        "ValueError",
        "_run_command",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/git_service.py::add"
      ]
    },
    "src/core/git_service.py::commit": {
      "name": "commit",
      "qualname": "unassigned.commit",
      "module": "git_service",
      "filepath": "src/core/git_service.py",
      "lineno": 68,
      "end_lineno": 93,
      "params": {
        "self": null,
        "message": null
      },
      "decorators": [],
      "docstring": "Commit staged changes with a message.\nIf there are no changes to commit, this operation is a no-op and will not raise an error.\n\nArgs:\n    message (str): Commit message explaining the change.",
      "base_classes": [],
      "structural_hash": "28aacd32f8f933e003487892fc29991fec80707c4431f9d84ee198f07158791b",
      "calls": [
        "_run_command",
        "info",
        "lower",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/git_service.py::commit"
      ]
    },
    "src/core/git_service.py::is_git_repo": {
      "name": "is_git_repo",
      "qualname": "unassigned.is_git_repo",
      "module": "git_service",
      "filepath": "src/core/git_service.py",
      "lineno": 96,
      "end_lineno": 104,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Check if the configured path is a valid Git repository.\n\nReturns:\n    bool: True if it's a Git repo, False otherwise.",
      "base_classes": [],
      "structural_hash": "44bf21e77508b2285243dbd4a291ad962face3886f645477a69fb5b1af1f182e",
      "calls": [
        "is_dir"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/git_service.py::is_git_repo"
      ]
    },
    "src/core/git_service.py::get_current_commit": {
      "name": "get_current_commit",
      "qualname": "unassigned.get_current_commit",
      "module": "git_service",
      "filepath": "src/core/git_service.py",
      "lineno": 106,
      "end_lineno": 110,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Gets the full SHA hash of the current commit (HEAD).",
      "base_classes": [],
      "structural_hash": "9591cea61e11db1150d7179ac28a550cc2eba183bfc3d60f297b6a304022122a",
      "calls": [
        "_run_command"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/git_service.py::get_current_commit"
      ]
    },
    "src/core/git_service.py::reset_to_commit": {
      "name": "reset_to_commit",
      "qualname": "unassigned.reset_to_commit",
      "module": "git_service",
      "filepath": "src/core/git_service.py",
      "lineno": 112,
      "end_lineno": 119,
      "params": {
        "self": null,
        "commit_hash": null
      },
      "decorators": [],
      "docstring": "Performs a hard reset to a specific commit hash.\nThis will discard all current changes.",
      "base_classes": [],
      "structural_hash": "949dc4328418bf308315afed23d47b25af2965af4c69af006041795f2264b0da",
      "calls": [
        "_run_command",
        "info",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/git_service.py::reset_to_commit"
      ]
    },
    "src/core/intent_alignment.py::_read_text_first": {
      "name": "_read_text_first",
      "qualname": "unassigned._read_text_first",
      "module": "intent_alignment",
      "filepath": "src/core/intent_alignment.py",
      "lineno": 28,
      "end_lineno": 36,
      "params": {
        "paths": null
      },
      "decorators": [],
      "docstring": "Finds and reads the first existing file from a list of candidate paths.",
      "base_classes": [],
      "structural_hash": "5c690a7094496e5795d7c4bde5518e0460231aceb1b54d26fa5870b9d65f2976",
      "calls": [
        "debug",
        "exists",
        "read_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_alignment.py::_read_text_first"
      ]
    },
    "src/core/intent_alignment.py::_read_blocklist": {
      "name": "_read_blocklist",
      "qualname": "unassigned._read_blocklist",
      "module": "intent_alignment",
      "filepath": "src/core/intent_alignment.py",
      "lineno": 39,
      "end_lineno": 52,
      "params": {},
      "decorators": [],
      "docstring": "Reads the blocklist file, returning a list of lowercased, stripped terms.",
      "base_classes": [],
      "structural_hash": "645bcc9a39ef41488c5ea7a2940f13fc4b26c8c1bc436d53f993d814c77c15b3",
      "calls": [
        "debug",
        "exists",
        "lower",
        "read_text",
        "splitlines",
        "startswith",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_alignment.py::_read_blocklist"
      ]
    },
    "src/core/intent_alignment.py::_tokenize": {
      "name": "_tokenize",
      "qualname": "unassigned._tokenize",
      "module": "intent_alignment",
      "filepath": "src/core/intent_alignment.py",
      "lineno": 55,
      "end_lineno": 57,
      "params": {
        "text": null
      },
      "decorators": [],
      "docstring": "Converts a string into a list of lowercase alphanumeric tokens.",
      "base_classes": [],
      "structural_hash": "8b7e436b369f8a59e6ca968520fc9d02eec3f9d1e48258193e87e177d62d8e82",
      "calls": [
        "findall",
        "lower"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_alignment.py::_tokenize"
      ]
    },
    "src/core/intent_alignment.py::check_goal_alignment": {
      "name": "check_goal_alignment",
      "qualname": "unassigned.check_goal_alignment",
      "module": "intent_alignment",
      "filepath": "src/core/intent_alignment.py",
      "lineno": 60,
      "end_lineno": 88,
      "params": {
        "goal": null,
        "project_root": null
      },
      "decorators": [],
      "docstring": "Returns (ok, details). details = { 'coverage': float|None, 'violations': [codes...] }\nViolations codes: 'blocked_topic', 'low_mission_overlap'",
      "base_classes": [],
      "structural_hash": "0c7e02644a288a463670cc1472faa6701002593ecefcd8b3078631666b684468",
      "calls": [
        "Path",
        "_read_blocklist",
        "_read_text_first",
        "_tokenize",
        "any",
        "append",
        "len",
        "lower",
        "max",
        "round",
        "set"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_alignment.py::check_goal_alignment"
      ]
    },
    "src/core/intent_guard.py::IntentGuard": {
      "name": "IntentGuard",
      "qualname": "unassigned.IntentGuard",
      "module": "intent_guard",
      "filepath": "src/core/intent_guard.py",
      "lineno": 21,
      "end_lineno": 102,
      "params": {},
      "decorators": [],
      "docstring": "Central enforcement engine for CORE's safety and governance policies.\nEnsures all proposed file changes comply with declared rules and classifications.",
      "base_classes": [],
      "structural_hash": "3309152ca64bbda67c94f9a5af5a51607261c757cce7a1d4bed6225bf443bf69",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "append",
        "exists",
        "extend",
        "get",
        "glob",
        "info",
        "is_dir",
        "isinstance",
        "len",
        "list",
        "load_config",
        "loads",
        "read_text",
        "resolve",
        "sorted",
        "values"
      ],
      "type": "ClassDef",
      "tags": [
        "src/core/intent_guard.py::IntentGuard"
      ]
    },
    "src/core/intent_guard.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "intent_guard",
      "filepath": "src/core/intent_guard.py",
      "lineno": 27,
      "end_lineno": 42,
      "params": {
        "self": null,
        "repo_path": null
      },
      "decorators": [],
      "docstring": "Initialize IntentGuard with repository path and load all policies.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "1237769acc55b0d16734a3cc7c8a35a433527896ea598b163d555399fc1577fc",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "info",
        "len",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_guard.py::__init__"
      ]
    },
    "src/core/intent_guard.py::_load_policies": {
      "name": "_load_policies",
      "qualname": "unassigned._load_policies",
      "module": "intent_guard",
      "filepath": "src/core/intent_guard.py",
      "lineno": 44,
      "end_lineno": 51,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "base_classes": [],
      "structural_hash": "58ca81c87b60fa11ae873bbb67dd836b4bd82e1f065b14967d0a6b10c724ff1a",
      "calls": [
        "extend",
        "glob",
        "is_dir",
        "isinstance",
        "load_config"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_guard.py::_load_policies"
      ]
    },
    "src/core/intent_guard.py::_load_source_manifest": {
      "name": "_load_source_manifest",
      "qualname": "unassigned._load_source_manifest",
      "module": "intent_guard",
      "filepath": "src/core/intent_guard.py",
      "lineno": 53,
      "end_lineno": 69,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Load the list of all known source files from the knowledge graph.",
      "base_classes": [],
      "structural_hash": "192c2a51474b035387b5dd1d0b9b0c1ea56903c550b8ec5f2ca40f40b69679cb",
      "calls": [
        "exists",
        "get",
        "list",
        "loads",
        "read_text",
        "sorted",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_guard.py::_load_source_manifest"
      ]
    },
    "src/core/intent_guard.py::check_transaction": {
      "name": "check_transaction",
      "qualname": "unassigned.check_transaction",
      "module": "intent_guard",
      "filepath": "src/core/intent_guard.py",
      "lineno": 73,
      "end_lineno": 102,
      "params": {
        "self": null,
        "proposed_paths": null
      },
      "decorators": [],
      "docstring": "Check if a proposed set of file changes complies with all active rules.\nThis is the primary enforcement point for constitutional integrity.",
      "base_classes": [],
      "structural_hash": "92924a1f132945e81b93a5ca688d1a218e3da14b4441bdea14f3888550cc533d",
      "calls": [
        "append",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_guard.py::check_transaction"
      ]
    },
    "src/core/intent_model.py::IntentModel": {
      "name": "IntentModel",
      "qualname": "unassigned.IntentModel",
      "module": "intent_model",
      "filepath": "src/core/intent_model.py",
      "lineno": 25,
      "end_lineno": 189,
      "params": {},
      "decorators": [],
      "docstring": "Load and normalize CORE's source/domain structure.",
      "base_classes": [],
      "structural_hash": "e97ea76587ae08240d4e3a8d63525414ab17820f7cc0a1db5b4207c10750f41d",
      "calls": [
        "Path",
        "_flatten",
        "_load_structure",
        "append",
        "as_posix",
        "error",
        "exists",
        "get",
        "get_repo_root",
        "isinstance",
        "items",
        "keys",
        "len",
        "list",
        "read_text",
        "relative_to",
        "resolve",
        "safe_load",
        "set",
        "warning"
      ],
      "type": "ClassDef",
      "tags": [
        "src/core/intent_model.py::IntentModel"
      ]
    },
    "src/core/intent_model.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "intent_model",
      "filepath": "src/core/intent_model.py",
      "lineno": 28,
      "end_lineno": 36,
      "params": {
        "self": null,
        "project_root": null
      },
      "decorators": [],
      "docstring": "Initialize the intent model.\n\nArgs:\n    project_root: Optional project root to anchor lookups. If not provided,\n        the repository root is discovered via ``get_repo_root()``.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "43943193459f53f478058c650b02f59b98c1a634d61bdef59ca932f92e4c911c",
      "calls": [
        "_load_structure",
        "get_repo_root",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_model.py::__init__"
      ]
    },
    "src/core/intent_model.py::resolve_domain_for_path": {
      "name": "resolve_domain_for_path",
      "qualname": "unassigned.resolve_domain_for_path",
      "module": "intent_model",
      "filepath": "src/core/intent_model.py",
      "lineno": 41,
      "end_lineno": 73,
      "params": {
        "self": null,
        "file_path": null
      },
      "decorators": [],
      "docstring": "Resolve a source file path to its owning domain.\n\nChooses the *deepest* matching domain path if overlaps ever occur.\n\nArgs:\n    file_path: Absolute or relative path to a source file.\n\nReturns:\n    The domain name (e.g., ``\"core\"``) or ``None`` when no domain matches.",
      "base_classes": [],
      "structural_hash": "096ff30e289b47426dbfae5f18ca003c7385febd5dbd45739d07ccb936404f9d",
      "calls": [
        "Path",
        "as_posix",
        "get",
        "items",
        "len",
        "relative_to",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_model.py::resolve_domain_for_path"
      ]
    },
    "src/core/intent_model.py::get_domain_permissions": {
      "name": "get_domain_permissions",
      "qualname": "unassigned.get_domain_permissions",
      "module": "intent_model",
      "filepath": "src/core/intent_model.py",
      "lineno": 75,
      "end_lineno": 98,
      "params": {
        "self": null,
        "domain": null
      },
      "decorators": [],
      "docstring": "Return domain-level allowed import bridges for a given domain.\n\nThe underlying YAML may include lists of standard/third-party libraries.\nThis method filters those out and returns **only other domain names**.\n\nArgs:\n    domain: Domain to inspect (e.g., ``\"core\"``).\n\nReturns:\n    A list of domain names that ``domain`` is allowed to import.",
      "base_classes": [],
      "structural_hash": "238c22f97ced663d24bdb2fd29ff463230fe9195a9df62c2401211158c231d7c",
      "calls": [
        "_flatten",
        "append",
        "get",
        "isinstance",
        "keys",
        "list",
        "set"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_model.py::get_domain_permissions"
      ]
    },
    "src/core/intent_model.py::_flatten": {
      "name": "_flatten",
      "qualname": "unassigned._flatten",
      "module": "intent_model",
      "filepath": "src/core/intent_model.py",
      "lineno": 103,
      "end_lineno": 116,
      "params": {
        "self": null,
        "xs": null
      },
      "decorators": [],
      "docstring": "Yield a flattened stream of items from (possibly nested) lists/tuples.\n\nArgs:\n    xs: Iterable that may contain nested lists/tuples.\n\nYields:\n    Individual items with all list/tuple nesting removed.",
      "base_classes": [],
      "structural_hash": "62e3ffd036cbd18f90813c21f972f272a256782c59e1df5fd663d5cf8be71b09",
      "calls": [
        "_flatten",
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_model.py::_flatten"
      ]
    },
    "src/core/intent_model.py::_load_structure": {
      "name": "_load_structure",
      "qualname": "unassigned._load_structure",
      "module": "intent_model",
      "filepath": "src/core/intent_model.py",
      "lineno": 118,
      "end_lineno": 189,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Load and normalize the source structure from YAML.\n\nSupports:\n    - ``{\"structure\": [ ...entries... ]}``\n    - ``{\"domains\":   [ ...entries... ]}``\n    - A bare list ``[ ...entries... ]``\n    - A map form ``{\"domains\": {\"core\": {...}, ...}}``\n\nReturns:\n    A normalized mapping: ``{domain: {\"path\": str, \"allowed_imports\": list}}``.",
      "base_classes": [],
      "structural_hash": "f40755920ad46d8cc578199aafb8d5106516565cfe590934d5038145f6a90787",
      "calls": [
        "append",
        "error",
        "exists",
        "get",
        "isinstance",
        "items",
        "read_text",
        "safe_load",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/intent_model.py::_load_structure"
      ]
    },
    "src/core/main.py::lifespan": {
      "name": "lifespan",
      "qualname": "unassigned.lifespan",
      "module": "main",
      "filepath": "src/core/main.py",
      "lineno": 50,
      "end_lineno": 84,
      "params": {
        "app": null
      },
      "decorators": [
        "asynccontextmanager"
      ],
      "docstring": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "base_classes": [],
      "structural_hash": "fbf113a46e4ad94071905af87505091bc949b17cc855db75c3c65327b9adba7e",
      "calls": [
        "FileHandler",
        "GeneratorClient",
        "GitService",
        "IntentGuard",
        "OrchestratorClient",
        "Path",
        "PromptPipeline",
        "configure_logging",
        "getenv",
        "info",
        "introspection",
        "lower",
        "str",
        "warning"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/core/main.py::lifespan"
      ]
    },
    "src/core/main.py::GoalRequest": {
      "name": "GoalRequest",
      "qualname": "unassigned.GoalRequest",
      "module": "main",
      "filepath": "src/core/main.py",
      "lineno": 91,
      "end_lineno": 94,
      "params": {},
      "decorators": [],
      "docstring": "Defines the request body for the /execute_goal endpoint.",
      "base_classes": [
        "BaseModel"
      ],
      "structural_hash": "dab1af70493e224489279f97c13f7162623eab8172522e7d4f08b05483e68b9f",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/core/main.py::GoalRequest"
      ]
    },
    "src/core/main.py::AlignmentRequest": {
      "name": "AlignmentRequest",
      "qualname": "unassigned.AlignmentRequest",
      "module": "main",
      "filepath": "src/core/main.py",
      "lineno": 97,
      "end_lineno": 101,
      "params": {},
      "decorators": [],
      "docstring": "Request schema for /guard/align.",
      "base_classes": [
        "BaseModel"
      ],
      "structural_hash": "799db8f1965df5253f685d308034b3fb45ea91da78ae374c7c60656ad26c0a28",
      "calls": [
        "Field"
      ],
      "type": "ClassDef",
      "tags": [
        "src/core/main.py::AlignmentRequest"
      ]
    },
    "src/core/main.py::healthz": {
      "name": "healthz",
      "qualname": "unassigned.healthz",
      "module": "main",
      "filepath": "src/core/main.py",
      "lineno": 105,
      "end_lineno": 108,
      "params": {},
      "decorators": [
        "app.get('/healthz')"
      ],
      "docstring": "Simple liveness/readiness probe.",
      "base_classes": [],
      "structural_hash": "7febe9b644c636fa632eed6757dfd61f5f793d2498af694bb276435f1e0a9136",
      "calls": [
        "get",
        "int",
        "time"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/core/main.py::healthz"
      ]
    },
    "src/core/main.py::guard_align": {
      "name": "guard_align",
      "qualname": "unassigned.guard_align",
      "module": "main",
      "filepath": "src/core/main.py",
      "lineno": 112,
      "end_lineno": 124,
      "params": {
        "payload": null
      },
      "decorators": [
        "app.post('/guard/align')"
      ],
      "docstring": "Evaluate a goal against the NorthStar and optional blocklist.",
      "base_classes": [],
      "structural_hash": "202a6fe24c3a8647bb696b6e100fe53f4f38c1e9f869be4742b5850b1e063628",
      "calls": [
        "JSONResponse",
        "Path",
        "append",
        "check_goal_alignment",
        "get",
        "post"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/core/main.py::guard_align"
      ]
    },
    "src/core/main.py::execute_goal": {
      "name": "execute_goal",
      "qualname": "unassigned.execute_goal",
      "module": "main",
      "filepath": "src/core/main.py",
      "lineno": 128,
      "end_lineno": 168,
      "params": {
        "request_data": null,
        "request": null
      },
      "decorators": [
        "app.post('/execute_goal')"
      ],
      "docstring": "Execute a high-level goal by planning and generating code.",
      "base_classes": [],
      "structural_hash": "42b4430778f928fe01ece455a066daf39c9e197f037e7c88a521f51e934efcff",
      "calls": [
        "ExecutionAgent",
        "HTTPException",
        "JSONResponse",
        "PlanExecutor",
        "PlannerAgent",
        "create_execution_plan",
        "error",
        "exception",
        "execute_plan",
        "info",
        "post",
        "str"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/core/main.py::execute_goal"
      ]
    },
    "src/core/main.py::root": {
      "name": "root",
      "qualname": "unassigned.root",
      "module": "main",
      "filepath": "src/core/main.py",
      "lineno": 172,
      "end_lineno": 174,
      "params": {},
      "decorators": [
        "app.get('/')"
      ],
      "docstring": "Root endpoint \u2014 returns system status.",
      "base_classes": [],
      "structural_hash": "0f4ab9b7486b424e3726a154118bc8d237af730580bf891e8f58b65ba9fd8713",
      "calls": [
        "get"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/core/main.py::root"
      ]
    },
    "src/core/prompt_pipeline.py::PromptPipeline": {
      "name": "PromptPipeline",
      "qualname": "unassigned.PromptPipeline",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 24,
      "end_lineno": 139,
      "params": {},
      "decorators": [],
      "docstring": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].\nEnsures the LLM receives full context before generating code.",
      "base_classes": [],
      "structural_hash": "643ffeca004f05935522cc4d1c1b568539b9a36dd0ab361acf09bb0e399dec65",
      "calls": [
        "Path",
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest",
        "compile",
        "dump",
        "exists",
        "get",
        "group",
        "is_file",
        "isinstance",
        "read_text",
        "resolve",
        "safe_load",
        "split",
        "stat",
        "str",
        "strip",
        "sub"
      ],
      "type": "ClassDef",
      "tags": [
        "src/core/prompt_pipeline.py::PromptPipeline"
      ]
    },
    "src/core/prompt_pipeline.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 30,
      "end_lineno": 43,
      "params": {
        "self": null,
        "repo_path": null
      },
      "decorators": [],
      "docstring": "Initialize PromptPipeline with repository root.\n\nArgs:\n    repo_path (Path): Root path of the repository.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "bda8f0237a381f0ea54c8b1c95a94d352f76364cb12916f96b97e8481887259a",
      "calls": [
        "Path",
        "compile",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/prompt_pipeline.py::__init__"
      ]
    },
    "src/core/prompt_pipeline.py::_replace_context_match": {
      "name": "_replace_context_match",
      "qualname": "unassigned._replace_context_match",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 45,
      "end_lineno": 58,
      "params": {
        "self": null,
        "match": null
      },
      "decorators": [],
      "docstring": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "base_classes": [],
      "structural_hash": "69c3e72e7b03b25521273e77c42e156d65772c262f59ee1b25bcce6d70863bff",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/prompt_pipeline.py::_replace_context_match"
      ]
    },
    "src/core/prompt_pipeline.py::_inject_context": {
      "name": "_inject_context",
      "qualname": "unassigned._inject_context",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 60,
      "end_lineno": 62,
      "params": {
        "self": null,
        "prompt": null
      },
      "decorators": [],
      "docstring": "Replaces [[context:file.py]] directives with actual file content.",
      "base_classes": [],
      "structural_hash": "11fb0fa702d480e49fbad9fe7eaede86611b3cfb9b8944f520892ae15dffc7b0",
      "calls": [
        "sub"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/prompt_pipeline.py::_inject_context"
      ]
    },
    "src/core/prompt_pipeline.py::_replace_include_match": {
      "name": "_replace_include_match",
      "qualname": "unassigned._replace_include_match",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 66,
      "end_lineno": 78,
      "params": {
        "self": null,
        "match": null
      },
      "decorators": [],
      "docstring": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "base_classes": [],
      "structural_hash": "3df3436cee404f0d98540037203c0e84c11e0f56cb31540ca3fe85350eeacdd8",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/prompt_pipeline.py::_replace_include_match"
      ]
    },
    "src/core/prompt_pipeline.py::_inject_includes": {
      "name": "_inject_includes",
      "qualname": "unassigned._inject_includes",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 80,
      "end_lineno": 82,
      "params": {
        "self": null,
        "prompt": null
      },
      "decorators": [],
      "docstring": "Replaces [[include:file.py]] directives with file content.",
      "base_classes": [],
      "structural_hash": "6f77e4347ebd4b2deab3eace2798b591c4243c4cc43686cd319c0a1f5ff0c2ca",
      "calls": [
        "sub"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/prompt_pipeline.py::_inject_includes"
      ]
    },
    "src/core/prompt_pipeline.py::_replace_analysis_match": {
      "name": "_replace_analysis_match",
      "qualname": "unassigned._replace_analysis_match",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 84,
      "end_lineno": 89,
      "params": {
        "self": null,
        "match": null
      },
      "decorators": [],
      "docstring": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "base_classes": [],
      "structural_hash": "34274a0f7415695348ba0437bb6be2b7c6a211608372ea21fcf87b7bb7057f58",
      "calls": [
        "group",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/prompt_pipeline.py::_replace_analysis_match"
      ]
    },
    "src/core/prompt_pipeline.py::_inject_analysis": {
      "name": "_inject_analysis",
      "qualname": "unassigned._inject_analysis",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 91,
      "end_lineno": 93,
      "params": {
        "self": null,
        "prompt": null
      },
      "decorators": [],
      "docstring": "Replaces [[analysis:file.py]] directives with code analysis.",
      "base_classes": [],
      "structural_hash": "c503ae0368651ed52d0af07a2028044a4635852b4262fbe0b292a6de1fef9a74",
      "calls": [
        "sub"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/prompt_pipeline.py::_inject_analysis"
      ]
    },
    "src/core/prompt_pipeline.py::_replace_manifest_match": {
      "name": "_replace_manifest_match",
      "qualname": "unassigned._replace_manifest_match",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 95,
      "end_lineno": 123,
      "params": {
        "self": null,
        "match": null
      },
      "decorators": [],
      "docstring": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "base_classes": [],
      "structural_hash": "4937c71be594f5ada7675be42dc716678817daa722e49398deafa963ac35acad",
      "calls": [
        "dump",
        "exists",
        "get",
        "group",
        "isinstance",
        "read_text",
        "safe_load",
        "split",
        "str",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/prompt_pipeline.py::_replace_manifest_match"
      ]
    },
    "src/core/prompt_pipeline.py::_inject_manifest": {
      "name": "_inject_manifest",
      "qualname": "unassigned._inject_manifest",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 125,
      "end_lineno": 127,
      "params": {
        "self": null,
        "prompt": null
      },
      "decorators": [],
      "docstring": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "base_classes": [],
      "structural_hash": "77f28434e5ad8ebaf00e1d6081b399fd2a9d7c90dac7829bbde092e51da55a4f",
      "calls": [
        "sub"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/prompt_pipeline.py::_inject_manifest"
      ]
    },
    "src/core/prompt_pipeline.py::process": {
      "name": "process",
      "qualname": "unassigned.process",
      "module": "prompt_pipeline",
      "filepath": "src/core/prompt_pipeline.py",
      "lineno": 130,
      "end_lineno": 139,
      "params": {
        "self": null,
        "prompt": null
      },
      "decorators": [],
      "docstring": "Processes the full prompt by sequentially resolving all directives.\nThis is the main entry point for prompt enrichment.",
      "base_classes": [],
      "structural_hash": "7beac5b33fa702f09356b6bd12d514990e13c314587f87580dee342387278a1a",
      "calls": [
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/prompt_pipeline.py::process"
      ]
    },
    "src/core/ruff_linter.py::fix_and_lint_code_with_ruff": {
      "name": "fix_and_lint_code_with_ruff",
      "qualname": "unassigned.fix_and_lint_code_with_ruff",
      "module": "ruff_linter",
      "filepath": "src/core/ruff_linter.py",
      "lineno": 20,
      "end_lineno": 96,
      "params": {
        "code": null,
        "display_filename": null
      },
      "decorators": [],
      "docstring": "Fix and lint the provided Python code using Ruff's JSON output format.\n\nArgs:\n    code (str): Source code to fix and lint.\n    display_filename (str): Optional display name for readable error messages.\n\nReturns:\n    A tuple containing:\n    - The potentially fixed code as a string.\n    - A list of structured violation dictionaries for any remaining issues.",
      "base_classes": [],
      "structural_hash": "43ca55ae34afc29c10e967766b01252dae62b0efe0b5e8f024d0d5f07d1cc287",
      "calls": [
        "NamedTemporaryFile",
        "append",
        "error",
        "exists",
        "get",
        "loads",
        "open",
        "read",
        "remove",
        "run",
        "write"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/ruff_linter.py::fix_and_lint_code_with_ruff"
      ]
    },
    "src/core/self_correction_engine.py::attempt_correction": {
      "name": "attempt_correction",
      "qualname": "unassigned.attempt_correction",
      "module": "self_correction_engine",
      "filepath": "src/core/self_correction_engine.py",
      "lineno": 23,
      "end_lineno": 81,
      "params": {
        "failure_context": null
      },
      "decorators": [],
      "docstring": "Attempts to fix a failed validation or test result by generating corrected code via an LLM prompt based on the provided failure context.",
      "base_classes": [],
      "structural_hash": "62b6c78116a25ee0860c615c72e2ad1e04c559c73432641d14917b0dffba0b64",
      "calls": [
        "GeneratorClient",
        "add_pending_write",
        "dumps",
        "get",
        "items",
        "list",
        "make_request",
        "parse_write_blocks",
        "process",
        "strip",
        "validate_code"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/self_correction_engine.py::attempt_correction"
      ]
    },
    "src/core/syntax_checker.py::check_syntax": {
      "name": "check_syntax",
      "qualname": "unassigned.check_syntax",
      "module": "syntax_checker",
      "filepath": "src/core/syntax_checker.py",
      "lineno": 14,
      "end_lineno": 41,
      "params": {
        "file_path": null,
        "code": null
      },
      "decorators": [],
      "docstring": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "base_classes": [],
      "structural_hash": "1364f88841c69497e8e60da5590e605cb9abe2023ed6c7914d4834889565c54c",
      "calls": [
        "endswith",
        "parse",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/syntax_checker.py::check_syntax"
      ]
    },
    "src/core/test_runner.py::run_tests": {
      "name": "run_tests",
      "qualname": "unassigned.run_tests",
      "module": "test_runner",
      "filepath": "src/core/test_runner.py",
      "lineno": 11,
      "end_lineno": 43,
      "params": {},
      "decorators": [],
      "docstring": "Run pytest and return a structured result indicating success or failure.\nReturns a dict with 'exit_code', 'summary', and 'stderr' keys.",
      "base_classes": [],
      "structural_hash": "cdc3932510367c3baf8d2cccc9044d98d8638f0328af3bfff7834b217bf2be73",
      "calls": [
        "error",
        "info",
        "run",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/test_runner.py::run_tests"
      ]
    },
    "src/core/validation_pipeline.py::_load_safety_policies": {
      "name": "_load_safety_policies",
      "qualname": "unassigned._load_safety_policies",
      "module": "validation_pipeline",
      "filepath": "src/core/validation_pipeline.py",
      "lineno": 29,
      "end_lineno": 37,
      "params": {},
      "decorators": [],
      "docstring": "Loads and caches the safety policies from the .intent directory.",
      "base_classes": [],
      "structural_hash": "cab90bc1e8a1e8e5ffececda4a227e4b8a931edb4fe02be9ce5a23bfae8d222f",
      "calls": [
        "get",
        "get_repo_root",
        "load_config"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/validation_pipeline.py::_load_safety_policies"
      ]
    },
    "src/core/validation_pipeline.py::_get_full_attribute_name": {
      "name": "_get_full_attribute_name",
      "qualname": "unassigned._get_full_attribute_name",
      "module": "validation_pipeline",
      "filepath": "src/core/validation_pipeline.py",
      "lineno": 40,
      "end_lineno": 49,
      "params": {
        "node": null
      },
      "decorators": [],
      "docstring": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "base_classes": [],
      "structural_hash": "72bf270f183300199553865489182c447b5a4ccdc1ea03a3d5b94d95b162322e",
      "calls": [
        "insert",
        "isinstance",
        "join"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/validation_pipeline.py::_get_full_attribute_name"
      ]
    },
    "src/core/validation_pipeline.py::_find_dangerous_patterns": {
      "name": "_find_dangerous_patterns",
      "qualname": "unassigned._find_dangerous_patterns",
      "module": "validation_pipeline",
      "filepath": "src/core/validation_pipeline.py",
      "lineno": 52,
      "end_lineno": 126,
      "params": {
        "tree": null,
        "file_path": null
      },
      "decorators": [],
      "docstring": "Scans the AST for calls and imports forbidden by safety policies.",
      "base_classes": [],
      "structural_hash": "812f91809662354e6852673feef4c0faf04a6c475d9b084ed329ce08d1100463",
      "calls": [
        "Path",
        "_get_full_attribute_name",
        "_load_safety_policies",
        "any",
        "append",
        "get",
        "isinstance",
        "match",
        "replace",
        "set",
        "split",
        "update",
        "walk"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/validation_pipeline.py::_find_dangerous_patterns"
      ]
    },
    "src/core/validation_pipeline.py::_check_for_todo_comments": {
      "name": "_check_for_todo_comments",
      "qualname": "unassigned._check_for_todo_comments",
      "module": "validation_pipeline",
      "filepath": "src/core/validation_pipeline.py",
      "lineno": 129,
      "end_lineno": 144,
      "params": {
        "code": null
      },
      "decorators": [],
      "docstring": "Scans source code for TODO/FIXME comments and returns them as violations.",
      "base_classes": [],
      "structural_hash": "c5b46c2eff257ea4efe9df4b282875ab698168db224abe219bf9f3ef4276594d",
      "calls": [
        "append",
        "enumerate",
        "split",
        "splitlines",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/validation_pipeline.py::_check_for_todo_comments"
      ]
    },
    "src/core/validation_pipeline.py::_check_semantics": {
      "name": "_check_semantics",
      "qualname": "unassigned._check_semantics",
      "module": "validation_pipeline",
      "filepath": "src/core/validation_pipeline.py",
      "lineno": 148,
      "end_lineno": 155,
      "params": {
        "code": null,
        "file_path": null
      },
      "decorators": [],
      "docstring": "Runs all policy-aware semantic checks on a string of Python code.",
      "base_classes": [],
      "structural_hash": "68336360a8c01eee656ceab907a3d3dcb6b61fef29f42c2c891428148a818f3a",
      "calls": [
        "_find_dangerous_patterns",
        "parse"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/validation_pipeline.py::_check_semantics"
      ]
    },
    "src/core/validation_pipeline.py::_validate_python_code": {
      "name": "_validate_python_code",
      "qualname": "unassigned._validate_python_code",
      "module": "validation_pipeline",
      "filepath": "src/core/validation_pipeline.py",
      "lineno": 158,
      "end_lineno": 196,
      "params": {
        "path_hint": null,
        "code": null
      },
      "decorators": [],
      "docstring": "Internal pipeline for Python code validation.\nReturns the final code and a list of all found violations.",
      "base_classes": [],
      "structural_hash": "e96751308fac71051ef307581c6143cebf0852d2a595604b122d0c380c8f37fc",
      "calls": [
        "_check_for_todo_comments",
        "_check_semantics",
        "any",
        "append",
        "check_syntax",
        "extend",
        "fix_and_lint_code_with_ruff",
        "format_code_with_black",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/validation_pipeline.py::_validate_python_code"
      ]
    },
    "src/core/validation_pipeline.py::_validate_yaml": {
      "name": "_validate_yaml",
      "qualname": "unassigned._validate_yaml",
      "module": "validation_pipeline",
      "filepath": "src/core/validation_pipeline.py",
      "lineno": 199,
      "end_lineno": 213,
      "params": {
        "code": null
      },
      "decorators": [],
      "docstring": "Internal pipeline for YAML validation.",
      "base_classes": [],
      "structural_hash": "c1cc9b3495cf7da110b274799aa0d90947cbb9d1605a43719d7aa6ecfb877cef",
      "calls": [
        "append",
        "safe_load"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/validation_pipeline.py::_validate_yaml"
      ]
    },
    "src/core/validation_pipeline.py::_get_file_classification": {
      "name": "_get_file_classification",
      "qualname": "unassigned._get_file_classification",
      "module": "validation_pipeline",
      "filepath": "src/core/validation_pipeline.py",
      "lineno": 216,
      "end_lineno": 225,
      "params": {
        "file_path": null
      },
      "decorators": [],
      "docstring": "Determines the file type based on its extension.",
      "base_classes": [],
      "structural_hash": "5389b48f5dc1b1c94a0a73168977c056aad4c0d85a4843163538780ff9c3cb91",
      "calls": [
        "Path",
        "lower"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/validation_pipeline.py::_get_file_classification"
      ]
    },
    "src/core/validation_pipeline.py::validate_code": {
      "name": "validate_code",
      "qualname": "unassigned.validate_code",
      "module": "validation_pipeline",
      "filepath": "src/core/validation_pipeline.py",
      "lineno": 229,
      "end_lineno": 252,
      "params": {
        "file_path": null,
        "code": null,
        "quiet": null
      },
      "decorators": [],
      "docstring": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type, returning a standardized dictionary with status, violations, and processed code.",
      "base_classes": [],
      "structural_hash": "89de86f90da79d40f54b96d243b439f94dda7e1e0fe83ad3867e582947830cb0",
      "calls": [
        "_get_file_classification",
        "_validate_python_code",
        "_validate_yaml",
        "any",
        "debug",
        "get"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/core/validation_pipeline.py::validate_code"
      ]
    },
    "src/shared/config.py::Settings": {
      "name": "Settings",
      "qualname": "unassigned.Settings",
      "module": "config",
      "filepath": "src/shared/config.py",
      "lineno": 14,
      "end_lineno": 93,
      "params": {},
      "decorators": [],
      "base_classes": [
        "BaseSettings"
      ],
      "structural_hash": "c4916075fe8e3f900d4dbb9961779eaf8bcbdd4f0462fa5db113e205871e4a8d",
      "calls": [
        "Field",
        "SettingsConfigDict",
        "__setattr__",
        "_maybe_fill",
        "model_validator"
      ],
      "type": "ClassDef",
      "tags": [
        "src/shared/config.py::Settings"
      ]
    },
    "src/shared/config.py::ORCHESTRATOR_MODEL_NAME": {
      "name": "ORCHESTRATOR_MODEL_NAME",
      "qualname": "unassigned.ORCHESTRATOR_MODEL_NAME",
      "module": "config",
      "filepath": "src/shared/config.py",
      "lineno": 65,
      "end_lineno": 66,
      "params": {
        "self": null
      },
      "decorators": [
        "property"
      ],
      "base_classes": [],
      "structural_hash": "139f2fe4b109cc18774d1852e76d61cd3e6e60a5fce0d72d666114352423d688",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/shared/config.py::ORCHESTRATOR_MODEL_NAME"
      ]
    },
    "src/shared/config.py::GENERATOR_MODEL_NAME": {
      "name": "GENERATOR_MODEL_NAME",
      "qualname": "unassigned.GENERATOR_MODEL_NAME",
      "module": "config",
      "filepath": "src/shared/config.py",
      "lineno": 69,
      "end_lineno": 70,
      "params": {
        "self": null
      },
      "decorators": [
        "property"
      ],
      "base_classes": [],
      "structural_hash": "fb0e13b745328e316632343e97ee14580153ec1ab013f66cd8e035cb35fb1012",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/shared/config.py::GENERATOR_MODEL_NAME"
      ]
    },
    "src/shared/config.py::orchestrator_model": {
      "name": "orchestrator_model",
      "qualname": "unassigned.orchestrator_model",
      "module": "config",
      "filepath": "src/shared/config.py",
      "lineno": 74,
      "end_lineno": 75,
      "params": {
        "self": null
      },
      "decorators": [
        "property"
      ],
      "base_classes": [],
      "structural_hash": "f2cbc065f50c86d2d52baeb53f6037cf322b9fa3e3f9fbc8b3faeed9a70a382a",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/shared/config.py::orchestrator_model"
      ]
    },
    "src/shared/config.py::generator_model": {
      "name": "generator_model",
      "qualname": "unassigned.generator_model",
      "module": "config",
      "filepath": "src/shared/config.py",
      "lineno": 78,
      "end_lineno": 79,
      "params": {
        "self": null
      },
      "decorators": [
        "property"
      ],
      "base_classes": [],
      "structural_hash": "915031fdb08167412b8dd529be84db81afc076d2b8b9edb32676f4035d629334",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/shared/config.py::generator_model"
      ]
    },
    "src/shared/config.py::_fill_reasonable_local_defaults": {
      "name": "_fill_reasonable_local_defaults",
      "qualname": "unassigned._fill_reasonable_local_defaults",
      "module": "config",
      "filepath": "src/shared/config.py",
      "lineno": 83,
      "end_lineno": 93,
      "params": {
        "self": null
      },
      "decorators": [
        "model_validator(mode='after')"
      ],
      "base_classes": [],
      "structural_hash": "830f3739ad3025da2f6b4d130c9379f8754e476238f02d020d4a270583d71101",
      "calls": [
        "__setattr__",
        "_maybe_fill",
        "model_validator"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/config.py::_fill_reasonable_local_defaults"
      ]
    },
    "src/shared/config.py::_maybe_fill": {
      "name": "_maybe_fill",
      "qualname": "unassigned._maybe_fill",
      "module": "config",
      "filepath": "src/shared/config.py",
      "lineno": 84,
      "end_lineno": 85,
      "params": {
        "url": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "729ec2027bca026eb2e2469efbbc79dc4ab01ad552ef3136e34d49c73faf9e50",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/shared/config.py::_maybe_fill"
      ]
    },
    "src/shared/config_loader.py::load_config": {
      "name": "load_config",
      "qualname": "unassigned.load_config",
      "module": "config_loader",
      "filepath": "src/shared/config_loader.py",
      "lineno": 14,
      "end_lineno": 56,
      "params": {
        "file_path": null,
        "file_type": null
      },
      "decorators": [],
      "docstring": "Loads a JSON or YAML file into a dictionary, handling missing files, invalid formats, and parsing errors by returning an empty dict.",
      "base_classes": [],
      "structural_hash": "7124b13af5cffa8a06961f6fb04e4cad8794f6e029db463269b09ae500e68353",
      "calls": [
        "Path",
        "error",
        "exists",
        "isinstance",
        "load",
        "lower",
        "open",
        "safe_load",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/config_loader.py::load_config"
      ]
    },
    "src/shared/logger.py::_JsonFormatter": {
      "name": "_JsonFormatter",
      "qualname": "unassigned._JsonFormatter",
      "module": "logger",
      "filepath": "src/shared/logger.py",
      "lineno": 21,
      "end_lineno": 35,
      "params": {},
      "decorators": [],
      "docstring": "Minimal JSON formatter for structured logs.",
      "base_classes": [
        "Formatter"
      ],
      "structural_hash": "847c1367ac9800a0aaa40e1417642609b90c45cb66dd9f96015e80cfacdec854",
      "calls": [
        "dumps",
        "getMessage",
        "isoformat",
        "utcfromtimestamp"
      ],
      "type": "ClassDef",
      "tags": [
        "src/shared/logger.py::_JsonFormatter"
      ]
    },
    "src/shared/logger.py::format": {
      "name": "format",
      "qualname": "unassigned.format",
      "module": "logger",
      "filepath": "src/shared/logger.py",
      "lineno": 24,
      "end_lineno": 35,
      "params": {
        "self": null,
        "record": null
      },
      "decorators": [],
      "docstring": "Intent: Render a LogRecord as a compact JSON object suitable for ingestion.",
      "base_classes": [],
      "structural_hash": "ac7aa220547adaa2c6454dbc2de7433b7cda3fab6c22802a4ccfda37ae4bb901",
      "calls": [
        "dumps",
        "getMessage",
        "isoformat",
        "utcfromtimestamp"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/logger.py::format"
      ]
    },
    "src/shared/logger.py::_coerce_level": {
      "name": "_coerce_level",
      "qualname": "unassigned._coerce_level",
      "module": "logger",
      "filepath": "src/shared/logger.py",
      "lineno": 38,
      "end_lineno": 42,
      "params": {
        "level": null
      },
      "decorators": [],
      "docstring": "Intent: Normalize a user-supplied level (str/int) to a logging.* constant.",
      "base_classes": [],
      "structural_hash": "c8c7c3be9bc45ea54f8ac86281e56ab1007b54298be1e70755676e3a30d19cfd",
      "calls": [
        "getattr",
        "isinstance",
        "str",
        "upper"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/logger.py::_coerce_level"
      ]
    },
    "src/shared/logger.py::configure_logging": {
      "name": "configure_logging",
      "qualname": "unassigned.configure_logging",
      "module": "logger",
      "filepath": "src/shared/logger.py",
      "lineno": 45,
      "end_lineno": 73,
      "params": {},
      "decorators": [],
      "docstring": "Configure root logging.\n\nArgs:\n    level: \"DEBUG\"|\"INFO\"|\"WARNING\"|\"ERROR\" or int.\n    stream: Target stream; defaults to real stderr (sys.__stderr__).\n    json_mode: True \u2192 JSON logs; False \u2192 human logs. If None, uses env CORE_LOG_JSON.",
      "base_classes": [],
      "structural_hash": "b947162196adb0bb6de959a505cb18845176d71283a61c90defb531bd714df51",
      "calls": [
        "Formatter",
        "StreamHandler",
        "_JsonFormatter",
        "_coerce_level",
        "basicConfig",
        "getenv",
        "lower",
        "setFormatter"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/logger.py::configure_logging"
      ]
    },
    "src/shared/logger.py::getLogger": {
      "name": "getLogger",
      "qualname": "unassigned.getLogger",
      "module": "logger",
      "filepath": "src/shared/logger.py",
      "lineno": 77,
      "end_lineno": 83,
      "params": {
        "name": null
      },
      "decorators": [],
      "docstring": "Return a named logger. Call `configure_logging()` once at startup.",
      "base_classes": [],
      "structural_hash": "6b7fd75d6ccf5542eaf1f0035a286a7417f92b6cb7ebc79b1ef6dca5df9d3cf3",
      "calls": [
        "getLogger",
        "setLevel"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/logger.py::getLogger"
      ]
    },
    "src/shared/path_utils.py::get_repo_root": {
      "name": "get_repo_root",
      "qualname": "unassigned.get_repo_root",
      "module": "path_utils",
      "filepath": "src/shared/path_utils.py",
      "lineno": 7,
      "end_lineno": 26,
      "params": {
        "start_path": null
      },
      "decorators": [],
      "docstring": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "base_classes": [],
      "structural_hash": "edc71d0c31594afdd9eea55c11cfb962e028462f15c08972f1a1d9cf1796ed79",
      "calls": [
        "Path",
        "RuntimeError",
        "cwd",
        "exists",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/path_utils.py::get_repo_root"
      ]
    },
    "src/shared/schemas/manifest_validator.py::load_schema": {
      "name": "load_schema",
      "qualname": "unassigned.load_schema",
      "module": "manifest_validator",
      "filepath": "src/shared/schemas/manifest_validator.py",
      "lineno": 14,
      "end_lineno": 39,
      "params": {
        "schema_name": null
      },
      "decorators": [],
      "docstring": "Load a JSON schema from the .intent/schemas/ directory.\n\nArgs:\n    schema_name (str): The filename of the schema (e.g., 'knowledge_graph_entry.schema.json').\n\nReturns:\n    Dict[str, Any]: The loaded JSON schema.\n\nRaises:\n    FileNotFoundError: If the schema file is not found.\n    json.JSONDecodeError: If the schema file is not valid JSON.",
      "base_classes": [],
      "structural_hash": "6e3b8465838bb871ec1cd9f626c92298765c571cba61170572d50151c662f9be",
      "calls": [
        "FileNotFoundError",
        "JSONDecodeError",
        "exists",
        "load",
        "open"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/schemas/manifest_validator.py::load_schema"
      ]
    },
    "src/shared/schemas/manifest_validator.py::validate_manifest_entry": {
      "name": "validate_manifest_entry",
      "qualname": "unassigned.validate_manifest_entry",
      "module": "manifest_validator",
      "filepath": "src/shared/schemas/manifest_validator.py",
      "lineno": 42,
      "end_lineno": 70,
      "params": {
        "entry": null,
        "schema_name": null
      },
      "decorators": [],
      "docstring": "Validate a single manifest entry against a schema.\n\nArgs:\n    entry: The dictionary representing a single function/class entry.\n    schema_name: The filename of the schema to validate against.\n\nReturns:\n    A tuple of (is_valid: bool, list_of_error_messages: List[str]).",
      "base_classes": [],
      "structural_hash": "df3df9d690f9e5aebdbffadea221df68a0ebfd500aaafa86a2205e3e452dedd2",
      "calls": [
        "Draft7Validator",
        "append",
        "iter_errors",
        "join",
        "load_schema",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/schemas/manifest_validator.py::validate_manifest_entry"
      ]
    },
    "src/shared/utils/import_scanner.py::scan_imports_for_file": {
      "name": "scan_imports_for_file",
      "qualname": "unassigned.scan_imports_for_file",
      "module": "import_scanner",
      "filepath": "src/shared/utils/import_scanner.py",
      "lineno": 19,
      "end_lineno": 45,
      "params": {
        "file_path": null
      },
      "decorators": [],
      "docstring": "Parse a Python file and extract all imported module paths.\n\nArgs:\n    file_path (Path): Path to the file.\n\nReturns:\n    List[str]: List of imported module paths.",
      "base_classes": [],
      "structural_hash": "42bb5532dfbc0b03134979db387ac69dab213de0539724e125ec4cdb88080722",
      "calls": [
        "append",
        "isinstance",
        "parse",
        "read_text",
        "walk",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/utils/import_scanner.py::scan_imports_for_file"
      ]
    },
    "src/shared/utils/manifest_aggregator.py::aggregate_manifests": {
      "name": "aggregate_manifests",
      "qualname": "unassigned.aggregate_manifests",
      "module": "manifest_aggregator",
      "filepath": "src/shared/utils/manifest_aggregator.py",
      "lineno": 16,
      "end_lineno": 75,
      "params": {
        "repo_root": null
      },
      "decorators": [],
      "docstring": "Finds all domain-specific manifest.yaml files and merges them.\n\nThis function is the heart of the modular manifest system. It reads the\nsource structure to find all domains, then searches for a manifest in each\ndomain's directory, aggregating their contents.\n\nArgs:\n    repo_root (Path): The absolute path to the repository root.\n\nReturns:\n    A dictionary representing the aggregated manifest, primarily focused\n    on compiling a unified list of 'required_capabilities'.",
      "base_classes": [],
      "structural_hash": "3424b54f3633ba0a128f765512d3694b531ca5dc1d7218058d3dfedb8b9e5880",
      "calls": [
        "debug",
        "error",
        "exists",
        "extend",
        "get",
        "info",
        "list",
        "read_text",
        "safe_load",
        "set",
        "sorted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/utils/manifest_aggregator.py::aggregate_manifests"
      ]
    },
    "src/shared/utils/parsing.py::parse_write_blocks": {
      "name": "parse_write_blocks",
      "qualname": "unassigned.parse_write_blocks",
      "module": "parsing",
      "filepath": "src/shared/utils/parsing.py",
      "lineno": 9,
      "end_lineno": 25,
      "params": {
        "llm_output": null
      },
      "decorators": [],
      "docstring": "Extracts all [[write:...]] blocks from LLM output.\n\nThis function is robust and handles both [[end]] and [[/write]] as valid terminators\nto accommodate different LLM habits.\n\nArgs:\n    llm_output (str): The raw text output from a language model.\n\nReturns:\n    A dictionary mapping file paths to their corresponding code content.",
      "base_classes": [],
      "structural_hash": "37291692a6c893a9df4f553fd55414349bd2ec0142680181140f7d6990e94a74",
      "calls": [
        "findall",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/shared/utils/parsing.py::parse_write_blocks"
      ]
    },
    "src/system/admin/DEL-migrator.py::register": {
      "name": "register",
      "qualname": "unassigned.register",
      "module": "DEL-migrator",
      "filepath": "src/system/admin/DEL-migrator.py",
      "lineno": 11,
      "end_lineno": 14,
      "params": {
        "app": null
      },
      "decorators": [],
      "docstring": "Register migration commands (manifest-migrator) under the admin CLI.",
      "base_classes": [],
      "structural_hash": "b5aa9163afdf378f45afb8a26ceecb71fe3dc7e8949a7907aee98b0c2eb40a7f",
      "calls": [
        "command"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/DEL-migrator.py::register"
      ]
    },
    "src/system/admin/agent.py::_extract_json_from_response": {
      "name": "_extract_json_from_response",
      "qualname": "unassigned._extract_json_from_response",
      "module": "agent",
      "filepath": "src/system/admin/agent.py",
      "lineno": 28,
      "end_lineno": 104,
      "params": {
        "text": null
      },
      "decorators": [],
      "docstring": "Robustly extract the first valid JSON value from a model response.\n\nStrategy (least \u2192 most permissive):\n  1) Direct parse if the whole text is JSON.\n  2) Trim common wrappers (code fences), try parse.\n  3) Find the first balanced JSON object/array in the text and parse that.\n\nRaises JSONDecodeError if no valid JSON is found.",
      "base_classes": [],
      "structural_hash": "f752215dcb3fff0b8071ccf4ab4d077ee7aed9a7a03c56ecc0930dfc36566227",
      "calls": [
        "JSONDecodeError",
        "_scan_balanced",
        "append",
        "compile",
        "finditer",
        "group",
        "len",
        "loads",
        "match",
        "pop",
        "startswith",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/agent.py::_extract_json_from_response"
      ]
    },
    "src/system/admin/agent.py::scaffold_new_application": {
      "name": "scaffold_new_application",
      "qualname": "unassigned.scaffold_new_application",
      "module": "agent",
      "filepath": "src/system/admin/agent.py",
      "lineno": 108,
      "end_lineno": 199,
      "params": {
        "project_name": null,
        "goal": null,
        "orchestrator": null,
        "file_handler": null,
        "initialize_git": null
      },
      "decorators": [],
      "docstring": "Uses an LLM to plan and generate a new, multi-file application.",
      "base_classes": [],
      "structural_hash": "a0ab4afdc68880eeab5c49e8b534d824149f08ec661ef47243c527bce7c95cb1",
      "calls": [
        "GitService",
        "Scaffolder",
        "ValueError",
        "_extract_json_from_response",
        "add",
        "commit",
        "dedent",
        "error",
        "exists",
        "format",
        "info",
        "is_git_repo",
        "isinstance",
        "items",
        "len",
        "make_request",
        "read_text",
        "relative_to",
        "replace",
        "run",
        "scaffold_base_structure",
        "str",
        "strip",
        "warning",
        "write_file"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/agent.py::scaffold_new_application"
      ]
    },
    "src/system/admin/agent.py::agent_scaffold": {
      "name": "agent_scaffold",
      "qualname": "unassigned.agent_scaffold",
      "module": "agent",
      "filepath": "src/system/admin/agent.py",
      "lineno": 203,
      "end_lineno": 232,
      "params": {
        "name": null,
        "goal": null,
        "git_init": null
      },
      "decorators": [
        "agent_app.command('scaffold')"
      ],
      "docstring": "Uses an LLM agent to autonomously scaffold a new application.",
      "base_classes": [],
      "structural_hash": "bd0266c9c7195750be517e021607f789b66b7cd01a370b2fe6b848c428f55728",
      "calls": [
        "Argument",
        "Exit",
        "FileHandler",
        "Option",
        "OrchestratorClient",
        "command",
        "error",
        "info",
        "scaffold_new_application",
        "secho",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/agent.py::agent_scaffold"
      ]
    },
    "src/system/admin/agent.py::register": {
      "name": "register",
      "qualname": "unassigned.register",
      "module": "agent",
      "filepath": "src/system/admin/agent.py",
      "lineno": 235,
      "end_lineno": 237,
      "params": {
        "app": null
      },
      "decorators": [],
      "docstring": "Register the 'agent' command group with the main CLI app.",
      "base_classes": [],
      "structural_hash": "07d267b258290654459382e668c672b5d5f218f486a0a69db1a829079247f439",
      "calls": [
        "add_typer"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/agent.py::register"
      ]
    },
    "src/system/admin/agent.py::_scan_balanced": {
      "name": "_scan_balanced",
      "qualname": "unassigned._scan_balanced",
      "module": "agent",
      "filepath": "src/system/admin/agent.py",
      "lineno": 65,
      "end_lineno": 97,
      "params": {
        "src": null
      },
      "decorators": [],
      "docstring": "Scan a string for a balanced bracket-enclosed expression (supports {}, [], and nested strings with escapes) and return it if found, else None.",
      "base_classes": [],
      "structural_hash": "e218d44d78886b77c35c15765677d43dae683efebd2a17545c3a2b8452895420",
      "calls": [
        "append",
        "len",
        "pop"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/agent.py::_scan_balanced"
      ]
    },
    "src/system/admin/byor.py::initialize_repository": {
      "name": "initialize_repository",
      "qualname": "unassigned.initialize_repository",
      "module": "byor",
      "filepath": "src/system/admin/byor.py",
      "lineno": 28,
      "end_lineno": 143,
      "params": {
        "path": null,
        "dry_run": null
      },
      "decorators": [],
      "docstring": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "base_classes": [],
      "structural_hash": "685e77beb1854c44e1d3adc89f529387ef92de25b3e864bb2a747777752208e6",
      "calls": [
        "Argument",
        "Exit",
        "KnowledgeGraphBuilder",
        "Option",
        "build",
        "dump",
        "echo",
        "error",
        "get",
        "info",
        "isinstance",
        "items",
        "len",
        "list",
        "mkdir",
        "read_text",
        "secho",
        "set",
        "sorted",
        "values",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/byor.py::initialize_repository"
      ]
    },
    "src/system/admin/byor.py::register": {
      "name": "register",
      "qualname": "unassigned.register",
      "module": "byor",
      "filepath": "src/system/admin/byor.py",
      "lineno": 146,
      "end_lineno": 148,
      "params": {
        "app": null
      },
      "decorators": [],
      "docstring": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "base_classes": [],
      "structural_hash": "9b62691ef90f3390c625b2239aa9e80250dc156e4deba0ed1740245705a1dbf6",
      "calls": [
        "command"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/byor.py::register"
      ]
    },
    "src/system/admin/fixer.py::register": {
      "name": "register",
      "qualname": "unassigned.register",
      "module": "fixer",
      "filepath": "src/system/admin/fixer.py",
      "lineno": 11,
      "end_lineno": 16,
      "params": {
        "app": null
      },
      "decorators": [],
      "docstring": "Intent: Register fixer commands under the admin CLI.",
      "base_classes": [],
      "structural_hash": "d0ae582702a2b2c6909b50733bb0512725c7da502b0c14afe4d908c46d4e2ef4",
      "calls": [
        "Typer",
        "add_typer",
        "command"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/fixer.py::register"
      ]
    },
    "src/system/admin/guard.py::_load_ux_defaults": {
      "name": "_load_ux_defaults",
      "qualname": "unassigned._load_ux_defaults",
      "module": "guard",
      "filepath": "src/system/admin/guard.py",
      "lineno": 45,
      "end_lineno": 77,
      "params": {
        "root": null
      },
      "decorators": [],
      "docstring": "Extract UX-related defaults for the drift command from `.intent/meta.yaml`.\n\nFalls back to sensible built-in defaults if the file or keys are missing.\nThis influences *only* presentation/paths, not detection behavior.",
      "base_classes": [],
      "structural_hash": "43626173a46d0a5f508019039627edb2df02970a1eae78904e1223fcf8cda96a",
      "calls": [
        "exists",
        "get",
        "read_text",
        "safe_load"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/guard.py::_load_ux_defaults"
      ]
    },
    "src/system/admin/guard.py::_is_clean": {
      "name": "_is_clean",
      "qualname": "unassigned._is_clean",
      "module": "guard",
      "filepath": "src/system/admin/guard.py",
      "lineno": 80,
      "end_lineno": 86,
      "params": {
        "report": null
      },
      "decorators": [],
      "docstring": "Return True if the drift report contains no missing/undeclared/mismatched items.",
      "base_classes": [],
      "structural_hash": "37959f8d821c2b4ca6b6146c0399c2561fc8e567a07025b5ba8ddaf66176f4d5",
      "calls": [
        "get"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/guard.py::_is_clean"
      ]
    },
    "src/system/admin/guard.py::_normalize_report": {
      "name": "_normalize_report",
      "qualname": "unassigned._normalize_report",
      "module": "guard",
      "filepath": "src/system/admin/guard.py",
      "lineno": 89,
      "end_lineno": 107,
      "params": {
        "report": null
      },
      "decorators": [],
      "docstring": "Return a copy of the report with deterministic ordering for stable diffs.",
      "base_classes": [],
      "structural_hash": "0e5632fd1ca4dc5079d51c50c9fcb9cba38735001acd9028e073c841445d9a9c",
      "calls": [
        "get",
        "keys",
        "set",
        "sorted",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/guard.py::_normalize_report"
      ]
    },
    "src/system/admin/guard.py::_print_pretty": {
      "name": "_print_pretty",
      "qualname": "unassigned._print_pretty",
      "module": "guard",
      "filepath": "src/system/admin/guard.py",
      "lineno": 110,
      "end_lineno": 139,
      "params": {
        "report_dict": null,
        "labels": null
      },
      "decorators": [],
      "docstring": "Print a compact, human-friendly summary using basic TTY styling.",
      "base_classes": [],
      "structural_hash": "6315ddd509348301b0499e75cea80b6096404d0faded526108ab46974376b082",
      "calls": [
        "_is_clean",
        "echo",
        "get",
        "print_section",
        "secho"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/guard.py::_print_pretty"
      ]
    },
    "src/system/admin/guard.py::register": {
      "name": "register",
      "qualname": "unassigned.register",
      "module": "guard",
      "filepath": "src/system/admin/guard.py",
      "lineno": 142,
      "end_lineno": 275,
      "params": {
        "app": null
      },
      "decorators": [],
      "docstring": "Register the 'guard' command group with the main Admin CLI.",
      "base_classes": [],
      "structural_hash": "35117d92c2aa3c9584821f7fba42161214a6e446f7a196b9bc14a24d82f33b47",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "Typer",
        "_load_ux_defaults",
        "_normalize_report",
        "_print_pretty",
        "add_typer",
        "collect_code_capabilities",
        "command",
        "dumps",
        "echo",
        "items",
        "len",
        "lower",
        "mkdir",
        "run_drift",
        "should_fail",
        "sorted",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/guard.py::register"
      ]
    },
    "src/system/admin/guard.py::print_section": {
      "name": "print_section",
      "qualname": "unassigned.print_section",
      "module": "guard",
      "filepath": "src/system/admin/guard.py",
      "lineno": 115,
      "end_lineno": 122,
      "params": {
        "title": null,
        "items": null
      },
      "decorators": [],
      "docstring": "Prints a titled section with a list of items, highlighting the title in bold and items in yellow, or a 'none' label in green if the list is empty.",
      "base_classes": [],
      "structural_hash": "2eed04ab485bbb51820d3daae5477600d9445275bc3f142ed73a5a9f886bb86c",
      "calls": [
        "secho"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/guard.py::print_section"
      ]
    },
    "src/system/admin/guard.py::drift": {
      "name": "drift",
      "qualname": "unassigned.drift",
      "module": "guard",
      "filepath": "src/system/admin/guard.py",
      "lineno": 155,
      "end_lineno": 223,
      "params": {
        "root": null,
        "output": null,
        "format": null,
        "fail_on": null,
        "strict_intent": null,
        "dry_run": null
      },
      "decorators": [
        "guard.command('drift')"
      ],
      "docstring": "Compare manifest declarations vs. code to detect capability drift.\n\nWrites a JSON evidence file (unless --dry-run) and prints either a pretty\nsummary or raw JSON. Exit codes: 0 = OK, 2 = drift detected per --fail-on policy.",
      "base_classes": [],
      "structural_hash": "bb5713a098dfdd151b6b0d79f2bd1d402d54af610f13cfe6229a137e042b1f76",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "_load_ux_defaults",
        "_normalize_report",
        "_print_pretty",
        "command",
        "dumps",
        "echo",
        "lower",
        "mkdir",
        "run_drift",
        "should_fail",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/guard.py::drift"
      ]
    },
    "src/system/admin/guard.py::kg_export": {
      "name": "kg_export",
      "qualname": "unassigned.kg_export",
      "module": "guard",
      "filepath": "src/system/admin/guard.py",
      "lineno": 226,
      "end_lineno": 275,
      "params": {
        "root": null,
        "output": null,
        "include": null,
        "exclude": null,
        "prefer": null
      },
      "decorators": [
        "guard.command('kg-export')"
      ],
      "docstring": "Emit a minimal capability knowledge-graph artifact for downstream tools.",
      "base_classes": [],
      "structural_hash": "8051ae55057b51b39ac4f7c40faebadd3b86dd2ff5a4db7af68a10da862d9e69",
      "calls": [
        "Option",
        "Path",
        "collect_code_capabilities",
        "command",
        "dumps",
        "echo",
        "items",
        "len",
        "lower",
        "mkdir",
        "sorted",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/guard.py::kg_export"
      ]
    },
    "src/system/admin/guard_logic.py::run_drift": {
      "name": "run_drift",
      "qualname": "unassigned.run_drift",
      "module": "guard_logic",
      "filepath": "src/system/admin/guard_logic.py",
      "lineno": 15,
      "end_lineno": 30,
      "params": {
        "root": null,
        "strict_intent": null
      },
      "decorators": [],
      "docstring": "Pure function: computes capability drift and returns a report dictionary.\nThis function MUST NOT print, write files, or exit.",
      "base_classes": [],
      "structural_hash": "41d36a0b78bea64925635a30b232a7c2958fa9c59afc4c04383066367dcd607d",
      "calls": [
        "collect_code_capabilities",
        "detect_capability_drift",
        "load_manifest_capabilities",
        "to_dict"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/guard_logic.py::run_drift"
      ]
    },
    "src/system/admin/keys.py::register": {
      "name": "register",
      "qualname": "unassigned.register",
      "module": "keys",
      "filepath": "src/system/admin/keys.py",
      "lineno": 22,
      "end_lineno": 74,
      "params": {
        "app": null
      },
      "decorators": [],
      "docstring": "Intent: Register key management commands under the admin CLI.",
      "base_classes": [],
      "structural_hash": "c339a1d72ef8deb18d44a4acc776d4540fc2b0bda8e197e7f50ec64d9f4292b1",
      "calls": [
        "Argument",
        "NoEncryption",
        "chmod",
        "command",
        "confirm",
        "decode",
        "dump",
        "exists",
        "generate",
        "info",
        "mkdir",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "write_bytes"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/keys.py::register"
      ]
    },
    "src/system/admin/keys.py::keygen": {
      "name": "keygen",
      "qualname": "unassigned.keygen",
      "module": "keys",
      "filepath": "src/system/admin/keys.py",
      "lineno": 26,
      "end_lineno": 74,
      "params": {
        "identity": null
      },
      "decorators": [
        "app.command('keygen')"
      ],
      "docstring": "Intent: Generate a new Ed25519 key pair and print an approver YAML block.",
      "base_classes": [],
      "structural_hash": "5edbabd97e85a046b570023d6ec7330b5b9ce1e29657ade7ab78cf207ddb7f26",
      "calls": [
        "Argument",
        "NoEncryption",
        "chmod",
        "command",
        "confirm",
        "decode",
        "dump",
        "exists",
        "generate",
        "info",
        "mkdir",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "write_bytes"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/keys.py::keygen"
      ]
    },
    "src/system/admin/new.py::register": {
      "name": "register",
      "qualname": "unassigned.register",
      "module": "new",
      "filepath": "src/system/admin/new.py",
      "lineno": 11,
      "end_lineno": 14,
      "params": {
        "app": null
      },
      "decorators": [],
      "docstring": "Register the 'new' command with the main CLI app.",
      "base_classes": [],
      "structural_hash": "358ca9667b776207e550b217e6f9933316ae2f21c94becefe3425c018fd562b8",
      "calls": [
        "command"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/new.py::register"
      ]
    },
    "src/system/admin/proposals.py::proposals_list": {
      "name": "proposals_list",
      "qualname": "unassigned.proposals_list",
      "module": "proposals",
      "filepath": "src/system/admin/proposals.py",
      "lineno": 40,
      "end_lineno": 69,
      "params": {},
      "decorators": [
        "proposals_app.command('list')"
      ],
      "docstring": "List pending constitutional proposals and display their justification, target path, and signature/quorum status.",
      "base_classes": [],
      "structural_hash": "3319d8858166139b9c523a3694781c7fe8e23ff252d7a4c04b72eca5fca2a3d3",
      "calls": [
        "any",
        "command",
        "endswith",
        "get",
        "glob",
        "info",
        "len",
        "load_yaml_file",
        "mkdir",
        "sorted",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/proposals.py::proposals_list"
      ]
    },
    "src/system/admin/proposals.py::proposals_sign": {
      "name": "proposals_sign",
      "qualname": "unassigned.proposals_sign",
      "module": "proposals",
      "filepath": "src/system/admin/proposals.py",
      "lineno": 73,
      "end_lineno": 110,
      "params": {
        "proposal_name": null
      },
      "decorators": [
        "proposals_app.command('sign')"
      ],
      "docstring": "Sign a proposal with the operator's private key (content-bound token).",
      "base_classes": [],
      "structural_hash": "bde248a51a26e815c05964f60e1a85aadcfbe334e6ede8b995077fd523c2bb6b",
      "calls": [
        "Argument",
        "Exit",
        "append",
        "b64encode",
        "command",
        "decode",
        "encode",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "isoformat",
        "load_private_key",
        "load_yaml_file",
        "prompt",
        "save_yaml_file",
        "setdefault",
        "sign",
        "utcnow"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/proposals.py::proposals_sign"
      ]
    },
    "src/system/admin/proposals.py::proposals_approve": {
      "name": "proposals_approve",
      "qualname": "unassigned.proposals_approve",
      "module": "proposals",
      "filepath": "src/system/admin/proposals.py",
      "lineno": 114,
      "end_lineno": 238,
      "params": {
        "proposal_name": null
      },
      "decorators": [
        "proposals_app.command('approve')"
      ],
      "docstring": "Verify signatures/quorum, run a canary constitutional audit, then apply the proposal if valid.",
      "base_classes": [],
      "structural_hash": "c6ec0fe476daca2272ae9468633046c7cec412f55dcc0affea05a705d4b64f82",
      "calls": [
        "Argument",
        "ConstitutionalAuditor",
        "Exit",
        "Path",
        "TemporaryDirectory",
        "any",
        "archive_rollback_plan",
        "b64decode",
        "command",
        "copy",
        "decode",
        "encode",
        "endswith",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "isinstance",
        "load_pem_public_key",
        "load_yaml_file",
        "mkdir",
        "run",
        "run_full_audit",
        "str",
        "unlink",
        "verify",
        "warning",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/proposals.py::proposals_approve"
      ]
    },
    "src/system/admin/proposals.py::register": {
      "name": "register",
      "qualname": "unassigned.register",
      "module": "proposals",
      "filepath": "src/system/admin/proposals.py",
      "lineno": 242,
      "end_lineno": 244,
      "params": {
        "app": null
      },
      "decorators": [],
      "docstring": "Register proposal lifecycle commands under the admin CLI.",
      "base_classes": [],
      "structural_hash": "bed38ebf9ccf2e6383df444f57442b0563d41c4119e91f228822b5e95b6638ac",
      "calls": [
        "add_typer"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/proposals.py::register"
      ]
    },
    "src/system/admin/reviewer.py::_is_ignored": {
      "name": "_is_ignored",
      "qualname": "unassigned._is_ignored",
      "module": "reviewer",
      "filepath": "src/system/admin/reviewer.py",
      "lineno": 23,
      "end_lineno": 25,
      "params": {
        "path_str": null
      },
      "decorators": [],
      "docstring": "Checks if a given file path should be ignored based on IGNORE_PATTERNS.",
      "base_classes": [],
      "structural_hash": "b0dcdbc5bcd3fad88dd29308c2d078febb3f76f3ca1abda9f84b84759ba7568d",
      "calls": [
        "any"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/reviewer.py::_is_ignored"
      ]
    },
    "src/system/admin/reviewer.py::_get_bundle_content": {
      "name": "_get_bundle_content",
      "qualname": "unassigned._get_bundle_content",
      "module": "reviewer",
      "filepath": "src/system/admin/reviewer.py",
      "lineno": 28,
      "end_lineno": 73,
      "params": {},
      "decorators": [],
      "docstring": "Gathers and bundles the content of all constitutional files.",
      "base_classes": [],
      "structural_hash": "47a9e252ee6d00c1d63bb7b8ea1322c3335c77c9b3e9c9ddc0f381c0210bfecd",
      "calls": [
        "Exit",
        "_is_ignored",
        "append",
        "error",
        "exists",
        "extend",
        "find_paths_in_meta",
        "info",
        "is_file",
        "isinstance",
        "join",
        "len",
        "list",
        "read_text",
        "safe_load",
        "set",
        "sorted",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/reviewer.py::_get_bundle_content"
      ]
    },
    "src/system/admin/reviewer.py::export_constitution": {
      "name": "export_constitution",
      "qualname": "unassigned.export_constitution",
      "module": "reviewer",
      "filepath": "src/system/admin/reviewer.py",
      "lineno": 76,
      "end_lineno": 93,
      "params": {
        "output": null
      },
      "decorators": [],
      "docstring": "Packages the full .intent/ directory into a single bundle for external analysis.\nThis command reads the meta.yaml file to discover all constitutional files\nand concatenates them into a single, LLM-friendly text file.",
      "base_classes": [],
      "structural_hash": "686b1c150edec5ed4602dd73ddb2fec5bc73ac70ac18d987f29b95650830b3a1",
      "calls": [
        "Option",
        "Path",
        "_get_bundle_content",
        "info",
        "mkdir",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/reviewer.py::export_constitution"
      ]
    },
    "src/system/admin/reviewer.py::peer_review": {
      "name": "peer_review",
      "qualname": "unassigned.peer_review",
      "module": "reviewer",
      "filepath": "src/system/admin/reviewer.py",
      "lineno": 96,
      "end_lineno": 154,
      "params": {
        "output": null,
        "dry_run": null
      },
      "decorators": [],
      "docstring": "Orchestrates sending the constitutional bundle to an external LLM for critique.",
      "base_classes": [],
      "structural_hash": "e11c1de750dc05d495def7939cc8e95c9fb8363cfff4819c4145240276a2655e",
      "calls": [
        "Exit",
        "Option",
        "OrchestratorClient",
        "Path",
        "_get_bundle_content",
        "echo",
        "error",
        "exists",
        "info",
        "make_request",
        "mkdir",
        "read_text",
        "secho",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/reviewer.py::peer_review"
      ]
    },
    "src/system/admin/reviewer.py::register": {
      "name": "register",
      "qualname": "unassigned.register",
      "module": "reviewer",
      "filepath": "src/system/admin/reviewer.py",
      "lineno": 157,
      "end_lineno": 162,
      "params": {
        "app": null
      },
      "decorators": [],
      "docstring": "Registers the 'review' command group and its subcommands.",
      "base_classes": [],
      "structural_hash": "50564ec3cb9525beb4d7a7142754651f6778e34d74f9c147b4d99fb3d7f73464",
      "calls": [
        "Typer",
        "add_typer",
        "command"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/reviewer.py::register"
      ]
    },
    "src/system/admin/reviewer.py::find_paths_in_meta": {
      "name": "find_paths_in_meta",
      "qualname": "unassigned.find_paths_in_meta",
      "module": "reviewer",
      "filepath": "src/system/admin/reviewer.py",
      "lineno": 42,
      "end_lineno": 53,
      "params": {
        "data": null
      },
      "decorators": [],
      "docstring": "Recursively extracts all strings containing '/' from nested dictionaries, lists, or strings in `data`.",
      "base_classes": [],
      "structural_hash": "255da73b20e290e0b58012f6bfab50667316e3e22fa34c15e51acf93d0752e60",
      "calls": [
        "append",
        "extend",
        "find_paths_in_meta",
        "isinstance",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/reviewer.py::find_paths_in_meta"
      ]
    },
    "src/system/admin/utils.py::should_fail": {
      "name": "should_fail",
      "qualname": "unassigned.should_fail",
      "module": "utils",
      "filepath": "src/system/admin/utils.py",
      "lineno": 24,
      "end_lineno": 34,
      "params": {
        "report": null,
        "fail_on": null
      },
      "decorators": [],
      "docstring": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "base_classes": [],
      "structural_hash": "4d0fc9b76df312e54be34f47cf05c8fc7f3704ee9a5081f9305e5c1b95aa9365",
      "calls": [
        "bool",
        "get"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/utils.py::should_fail"
      ]
    },
    "src/system/admin/utils.py::load_yaml_file": {
      "name": "load_yaml_file",
      "qualname": "unassigned.load_yaml_file",
      "module": "utils",
      "filepath": "src/system/admin/utils.py",
      "lineno": 37,
      "end_lineno": 39,
      "params": {
        "path": null
      },
      "decorators": [],
      "docstring": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "base_classes": [],
      "structural_hash": "2ce3e9f321eb08e41cb6220dcbcc1598d37029ebcf200d493aba3bdd7c765ba5",
      "calls": [
        "read_text",
        "safe_load"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/utils.py::load_yaml_file"
      ]
    },
    "src/system/admin/utils.py::save_yaml_file": {
      "name": "save_yaml_file",
      "qualname": "unassigned.save_yaml_file",
      "module": "utils",
      "filepath": "src/system/admin/utils.py",
      "lineno": 42,
      "end_lineno": 44,
      "params": {
        "path": null,
        "data": null
      },
      "decorators": [],
      "docstring": "Intent: Persist YAML with stable ordering disabled to preserve human readability.",
      "base_classes": [],
      "structural_hash": "ccaf07602c00f1121e12286d587578113fff47ffa979777f3f56fc72b7b50d43",
      "calls": [
        "safe_dump",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/utils.py::save_yaml_file"
      ]
    },
    "src/system/admin/utils.py::generate_approval_token": {
      "name": "generate_approval_token",
      "qualname": "unassigned.generate_approval_token",
      "module": "utils",
      "filepath": "src/system/admin/utils.py",
      "lineno": 47,
      "end_lineno": 60,
      "params": {
        "proposal": null
      },
      "decorators": [],
      "docstring": "Intent: Produce a deterministic token for approvals bound to the *full proposal intent*,\nnot just raw content. This prevents replay against a different target.",
      "base_classes": [],
      "structural_hash": "4b1270fce4c6fc0e4ecb637d6a67950144796164a95f9a8e9b8bc39a9a10e4fa",
      "calls": [
        "Hash",
        "SHA256",
        "dumps",
        "encode",
        "finalize",
        "get",
        "hex",
        "update"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/utils.py::generate_approval_token"
      ]
    },
    "src/system/admin/utils.py::load_private_key": {
      "name": "load_private_key",
      "qualname": "unassigned.load_private_key",
      "module": "utils",
      "filepath": "src/system/admin/utils.py",
      "lineno": 63,
      "end_lineno": 71,
      "params": {},
      "decorators": [],
      "docstring": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "base_classes": [],
      "structural_hash": "79de185a59c6d906ef87f05fdd2fdee38825b2c4d620dfe5c78e8344704e612c",
      "calls": [
        "SystemExit",
        "error",
        "exists",
        "load_pem_private_key",
        "read_bytes"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/utils.py::load_private_key"
      ]
    },
    "src/system/admin/utils.py::archive_rollback_plan": {
      "name": "archive_rollback_plan",
      "qualname": "unassigned.archive_rollback_plan",
      "module": "utils",
      "filepath": "src/system/admin/utils.py",
      "lineno": 74,
      "end_lineno": 97,
      "params": {
        "proposal_name": null,
        "proposal": null
      },
      "decorators": [],
      "docstring": "Intent: Persist a rollback plan snapshot for approved proposals under .intent/constitution/rollbacks/.",
      "base_classes": [],
      "structural_hash": "3fee477cc6e1a83e51d223a8844378614d3e379c846ae8b2b008ac59063dd680",
      "calls": [
        "dumps",
        "get",
        "info",
        "mkdir",
        "strftime",
        "utcnow",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin/utils.py::archive_rollback_plan"
      ]
    },
    "src/system/admin.py::_load_yaml": {
      "name": "_load_yaml",
      "qualname": "unassigned._load_yaml",
      "module": "admin",
      "filepath": "src/system/admin.py",
      "lineno": 49,
      "end_lineno": 57,
      "params": {
        "p": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "a34c65d3797d969407408ee98920f874de31eac524f4052375725aebff3c6e37",
      "calls": [
        "Exit",
        "exists",
        "read_text",
        "safe_load",
        "secho"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin.py::_load_yaml"
      ]
    },
    "src/system/admin.py::_meta_paths": {
      "name": "_meta_paths",
      "qualname": "unassigned._meta_paths",
      "module": "admin",
      "filepath": "src/system/admin.py",
      "lineno": 60,
      "end_lineno": 71,
      "params": {},
      "decorators": [],
      "base_classes": [],
      "structural_hash": "09dae3dac63777a4c9a432a443d016b3b91e27f38aeb401c911c74d82db59bb7",
      "calls": [
        "Path",
        "_load_yaml",
        "get",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin.py::_meta_paths"
      ]
    },
    "src/system/admin.py::guard_check": {
      "name": "guard_check",
      "qualname": "unassigned.guard_check",
      "module": "admin",
      "filepath": "src/system/admin.py",
      "lineno": 78,
      "end_lineno": 103,
      "params": {
        "fmt": null,
        "no_fail": null
      },
      "decorators": [
        "guard_app.command('check')"
      ],
      "docstring": "Run Intent Guard (import/dependency checks).",
      "base_classes": [],
      "structural_hash": "bd9b821f18ef600cfb4995904a59f3338f0198ff899d39a9eadb73c8d63144c6",
      "calls": [
        "Exit",
        "Option",
        "command",
        "guard_runner_main",
        "secho"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin.py::guard_check"
      ]
    },
    "src/system/admin.py::DriftSummary": {
      "name": "DriftSummary",
      "qualname": "unassigned.DriftSummary",
      "module": "admin",
      "filepath": "src/system/admin.py",
      "lineno": 110,
      "end_lineno": 112,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "base_classes": [],
      "structural_hash": "2cd0fc5f8e3fb008a17931ea1aeb1e977d3db3560017bdd8d4db3aea302c7192",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/system/admin.py::DriftSummary"
      ]
    },
    "src/system/admin.py::_summarize_drift": {
      "name": "_summarize_drift",
      "qualname": "unassigned._summarize_drift",
      "module": "admin",
      "filepath": "src/system/admin.py",
      "lineno": 115,
      "end_lineno": 118,
      "params": {
        "payload": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "ddd0b2cd80426491d3c8a6f360776f2007408c8fa91a58e95db5f0d2e7f741a8",
      "calls": [
        "DriftSummary",
        "get",
        "len"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin.py::_summarize_drift"
      ]
    },
    "src/system/admin.py::guard_drift": {
      "name": "guard_drift",
      "qualname": "unassigned.guard_drift",
      "module": "admin",
      "filepath": "src/system/admin.py",
      "lineno": 122,
      "end_lineno": 195,
      "params": {
        "fmt": null
      },
      "decorators": [
        "guard_app.command('drift')"
      ],
      "docstring": "Display drift evidence produced by manifest_migrator (schema errors + capability duplicates).",
      "base_classes": [],
      "structural_hash": "c1bbdb45939e922c8ca7af8314f2c2fcbca18c87e3628b9a8ec73e2f16f95319",
      "calls": [
        "Console",
        "Exit",
        "Option",
        "Table",
        "_meta_paths",
        "_summarize_drift",
        "add_column",
        "add_row",
        "command",
        "dumps",
        "echo",
        "exists",
        "get",
        "items",
        "join",
        "loads",
        "print",
        "read_text",
        "secho",
        "sorted",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin.py::guard_drift"
      ]
    },
    "src/system/admin.py::fix_docstrings": {
      "name": "fix_docstrings",
      "qualname": "unassigned.fix_docstrings",
      "module": "admin",
      "filepath": "src/system/admin.py",
      "lineno": 202,
      "end_lineno": 218,
      "params": {
        "write": null
      },
      "decorators": [
        "fix_app.command('docstrings')"
      ],
      "docstring": "Placeholder command so 'make fix-docstrings' doesn't break.",
      "base_classes": [],
      "structural_hash": "1958e4c50f07e251df4197069cfb4ca58a2c6b067f92490c046311d36991269d",
      "calls": [
        "Exit",
        "Option",
        "command",
        "secho"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/admin.py::fix_docstrings"
      ]
    },
    "src/system/governance/checks/architecture_checks.py::ArchitectureChecks": {
      "name": "ArchitectureChecks",
      "qualname": "unassigned.ArchitectureChecks",
      "module": "architecture_checks",
      "filepath": "src/system/governance/checks/architecture_checks.py",
      "lineno": 12,
      "end_lineno": 55,
      "params": {},
      "decorators": [],
      "docstring": "Container for architectural integrity checks.",
      "base_classes": [
        "BaseAuditCheck"
      ],
      "structural_hash": "340ce208f119aee50a4c8a3b0d0b1eb9ccf8cc976379b0c18f84dce4f74ed743",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/checks/architecture_checks.py::ArchitectureChecks"
      ]
    },
    "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication": {
      "name": "check_for_structural_duplication",
      "qualname": "unassigned.check_for_structural_duplication",
      "module": "architecture_checks",
      "filepath": "src/system/governance/checks/architecture_checks.py",
      "lineno": 18,
      "end_lineno": 55,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Finds symbols with identical structural hashes, violating `dry_by_design`.\nThis check uses the content-addressed nature of the knowledge graph to\ndetect code duplication with perfect accuracy.",
      "base_classes": [],
      "structural_hash": "b8c6e17f8c3e0a114ed1eebcd284fe35d8229b9f8d6d985f9ab226f2b59929f2",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication"
      ]
    },
    "src/system/governance/checks/base.py::BaseAuditCheck": {
      "name": "BaseAuditCheck",
      "qualname": "unassigned.BaseAuditCheck",
      "module": "base",
      "filepath": "src/system/governance/checks/base.py",
      "lineno": 9,
      "end_lineno": 14,
      "params": {},
      "decorators": [],
      "docstring": "Base class for a collection of auditor checks.",
      "base_classes": [],
      "structural_hash": "96b7ea29c2e61948bc07ced5e413c47e756fe244dbd7115fec4556da9a596f9d",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/checks/base.py::BaseAuditCheck"
      ]
    },
    "src/system/governance/checks/base.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "base",
      "filepath": "src/system/governance/checks/base.py",
      "lineno": 12,
      "end_lineno": 14,
      "params": {
        "self": null,
        "context": null
      },
      "decorators": [],
      "docstring": "Initializes the check with a shared auditor context.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "474c67c3ad417e92e0a5cfe962deb537f55c550a1fd8b27eca415afbdf6a6986",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/base.py::__init__"
      ]
    },
    "src/system/governance/checks/environment_checks.py::EnvironmentChecks": {
      "name": "EnvironmentChecks",
      "qualname": "unassigned.EnvironmentChecks",
      "module": "environment_checks",
      "filepath": "src/system/governance/checks/environment_checks.py",
      "lineno": 9,
      "end_lineno": 53,
      "params": {},
      "decorators": [],
      "docstring": "Container for environment and runtime configuration checks.",
      "base_classes": [
        "BaseAuditCheck"
      ],
      "structural_hash": "c777f3cb2eb7c7db7c2884402f544b316d8c48a61cf9ab72063905979a99c32f",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "load_config"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/checks/environment_checks.py::EnvironmentChecks"
      ]
    },
    "src/system/governance/checks/environment_checks.py::check_runtime_environment": {
      "name": "check_runtime_environment",
      "qualname": "unassigned.check_runtime_environment",
      "module": "environment_checks",
      "filepath": "src/system/governance/checks/environment_checks.py",
      "lineno": 13,
      "end_lineno": 53,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "base_classes": [],
      "structural_hash": "69c78373d6d784751125b189d281ed33c291f8220e1143451a3040940525543f",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "load_config"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/environment_checks.py::check_runtime_environment"
      ]
    },
    "src/system/governance/checks/file_checks.py::FileChecks": {
      "name": "FileChecks",
      "qualname": "unassigned.FileChecks",
      "module": "file_checks",
      "filepath": "src/system/governance/checks/file_checks.py",
      "lineno": 11,
      "end_lineno": 204,
      "params": {},
      "decorators": [],
      "docstring": "Container for file-based constitutional checks.",
      "base_classes": [],
      "structural_hash": "451b029338435682415bdbde0023d13d1673dde0436a74c04354b74ae466b063",
      "calls": [
        "AuditFinding",
        "Path",
        "_get_known_files_from_meta",
        "_recursive_find_paths",
        "add",
        "any",
        "append",
        "copy",
        "exists",
        "extend",
        "get",
        "glob",
        "is_file",
        "isinstance",
        "len",
        "load_config",
        "read_text",
        "relative_to",
        "replace",
        "rglob",
        "set",
        "sorted",
        "str",
        "validate_code",
        "values"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/checks/file_checks.py::FileChecks"
      ]
    },
    "src/system/governance/checks/file_checks.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "file_checks",
      "filepath": "src/system/governance/checks/file_checks.py",
      "lineno": 14,
      "end_lineno": 18,
      "params": {
        "self": null,
        "context": null
      },
      "decorators": [],
      "docstring": "Initialize with a shared auditor context.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "b6ae2e2a72f0cbc823f1b1d48c7f7bd2baf4951e23a7ce717cef727fad61f62f",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/file_checks.py::__init__"
      ]
    },
    "src/system/governance/checks/file_checks.py::check_required_files": {
      "name": "check_required_files",
      "qualname": "unassigned.check_required_files",
      "module": "file_checks",
      "filepath": "src/system/governance/checks/file_checks.py",
      "lineno": 21,
      "end_lineno": 60,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Verify that all files declared in meta.yaml exist on disk.",
      "base_classes": [],
      "structural_hash": "fdae6956729ff51a7d86d64d26ed9b47addb932b1245bb77ee3105a4eb15d3ea",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "append",
        "exists",
        "len",
        "sorted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/file_checks.py::check_required_files"
      ]
    },
    "src/system/governance/checks/file_checks.py::check_syntax": {
      "name": "check_syntax",
      "qualname": "unassigned.check_syntax",
      "module": "file_checks",
      "filepath": "src/system/governance/checks/file_checks.py",
      "lineno": 63,
      "end_lineno": 109,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Validate syntax of all .intent YAML/JSON files (including proposals).",
      "base_classes": [],
      "structural_hash": "d87bd10847da7311d1bfd947eb9bdf5ee37fe24b91210911282750f2f5b666ac",
      "calls": [
        "AuditFinding",
        "append",
        "extend",
        "is_file",
        "len",
        "read_text",
        "relative_to",
        "rglob",
        "str",
        "validate_code"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/file_checks.py::check_syntax"
      ]
    },
    "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files": {
      "name": "check_for_orphaned_intent_files",
      "qualname": "unassigned.check_for_orphaned_intent_files",
      "module": "file_checks",
      "filepath": "src/system/governance/checks/file_checks.py",
      "lineno": 112,
      "end_lineno": 147,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Find .intent files not referenced in meta.yaml.",
      "base_classes": [],
      "structural_hash": "552a2c32abf61e300ae6ccf8bcf3f3a2fdd7d592fbd902eaa3413a8bf98f1509",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "any",
        "append",
        "is_file",
        "relative_to",
        "replace",
        "rglob",
        "sorted",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files"
      ]
    },
    "src/system/governance/checks/file_checks.py::_get_known_files_from_meta": {
      "name": "_get_known_files_from_meta",
      "qualname": "unassigned._get_known_files_from_meta",
      "module": "file_checks",
      "filepath": "src/system/governance/checks/file_checks.py",
      "lineno": 149,
      "end_lineno": 204,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Build a set of known intent files from .intent/meta.yaml.",
      "base_classes": [],
      "structural_hash": "fb4b9b60e3edba9e2631c5a37bacc3cee5534b8e5643c1ceaf856760d1fa081d",
      "calls": [
        "Path",
        "_recursive_find_paths",
        "add",
        "copy",
        "exists",
        "get",
        "glob",
        "isinstance",
        "load_config",
        "relative_to",
        "replace",
        "set",
        "str",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/file_checks.py::_get_known_files_from_meta"
      ]
    },
    "src/system/governance/checks/file_checks.py::_recursive_find_paths": {
      "name": "_recursive_find_paths",
      "qualname": "unassigned._recursive_find_paths",
      "module": "file_checks",
      "filepath": "src/system/governance/checks/file_checks.py",
      "lineno": 172,
      "end_lineno": 190,
      "params": {
        "data": null
      },
      "decorators": [],
      "docstring": "Recursively find all file paths in meta configuration.",
      "base_classes": [],
      "structural_hash": "0f44eacef430913ebbf5e52ad0100c5dc8af35eebc944cb6fe63bc0f0ad883b2",
      "calls": [
        "Path",
        "_recursive_find_paths",
        "add",
        "copy",
        "isinstance",
        "replace",
        "str",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/file_checks.py::_recursive_find_paths"
      ]
    },
    "src/system/governance/checks/health_checks.py::HealthChecks": {
      "name": "HealthChecks",
      "qualname": "unassigned.HealthChecks",
      "module": "health_checks",
      "filepath": "src/system/governance/checks/health_checks.py",
      "lineno": 12,
      "end_lineno": 110,
      "params": {},
      "decorators": [],
      "docstring": "Container for codebase health constitutional checks.",
      "base_classes": [],
      "structural_hash": "dc4094cf311674d8302d4193243abbfeeba30d61ddd34811b39f849d9e55a7bb",
      "calls": [
        "AuditFinding",
        "_get_logical_lines_of_code",
        "append",
        "endswith",
        "extend",
        "from_ast",
        "get",
        "items",
        "len",
        "list",
        "load_config",
        "mean",
        "parse",
        "read_text",
        "relative_to",
        "splitlines",
        "startswith",
        "stdev",
        "strip",
        "values"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/checks/health_checks.py::HealthChecks"
      ]
    },
    "src/system/governance/checks/health_checks.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "health_checks",
      "filepath": "src/system/governance/checks/health_checks.py",
      "lineno": 15,
      "end_lineno": 20,
      "params": {
        "self": null,
        "context": null
      },
      "decorators": [],
      "docstring": "Initializes the check with a shared auditor context.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "72e35c9130203912e2a03a46408bf68a845d509cf8563766821f36549693aebb",
      "calls": [
        "load_config"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/health_checks.py::__init__"
      ]
    },
    "src/system/governance/checks/health_checks.py::_get_logical_lines_of_code": {
      "name": "_get_logical_lines_of_code",
      "qualname": "unassigned._get_logical_lines_of_code",
      "module": "health_checks",
      "filepath": "src/system/governance/checks/health_checks.py",
      "lineno": 22,
      "end_lineno": 30,
      "params": {
        "self": null,
        "source_code": null
      },
      "decorators": [],
      "docstring": "Calculates the Logical Lines of Code (LLOC), ignoring comments and blank lines.",
      "base_classes": [],
      "structural_hash": "a790caa3a6ae6c7e8af0b040561f7c4f4dbaf3ac73c80023c67311b7e9f89d70",
      "calls": [
        "len",
        "splitlines",
        "startswith",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/health_checks.py::_get_logical_lines_of_code"
      ]
    },
    "src/system/governance/checks/health_checks.py::check_codebase_health": {
      "name": "check_codebase_health",
      "qualname": "unassigned.check_codebase_health",
      "module": "health_checks",
      "filepath": "src/system/governance/checks/health_checks.py",
      "lineno": 33,
      "end_lineno": 110,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Measures code complexity and atomicity against defined policies.",
      "base_classes": [],
      "structural_hash": "1b9f38a97bb5dcc7c011930e6868997d140bb0389eb802f332e58c829e06867d",
      "calls": [
        "AuditFinding",
        "_get_logical_lines_of_code",
        "append",
        "endswith",
        "extend",
        "from_ast",
        "get",
        "items",
        "len",
        "list",
        "mean",
        "parse",
        "read_text",
        "relative_to",
        "stdev",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/health_checks.py::check_codebase_health"
      ]
    },
    "src/system/governance/checks/proposal_checks.py::ProposalChecks": {
      "name": "ProposalChecks",
      "qualname": "unassigned.ProposalChecks",
      "module": "proposal_checks",
      "filepath": "src/system/governance/checks/proposal_checks.py",
      "lineno": 19,
      "end_lineno": 230,
      "params": {},
      "decorators": [],
      "docstring": "Container for proposal-related constitutional checks.",
      "base_classes": [
        "BaseAuditCheck"
      ],
      "structural_hash": "92110c3e01f58e19f04a5b331f2f25214c53c80e0b0f45e4e5a2c6098e913d53",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "ValueError",
        "__init__",
        "_expected_token_for_proposal",
        "_get_proposal_paths",
        "_load_proposal",
        "_validate_single_proposal_schema",
        "_validate_single_proposal_signatures",
        "append",
        "dumps",
        "encode",
        "exists",
        "extend",
        "finalize",
        "get",
        "glob",
        "hex",
        "iter_errors",
        "join",
        "len",
        "list",
        "load_schema",
        "loads",
        "lower",
        "read_text",
        "relative_to",
        "safe_load",
        "sha256",
        "sorted",
        "str",
        "super",
        "update"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/checks/proposal_checks.py::ProposalChecks"
      ]
    },
    "src/system/governance/checks/proposal_checks.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "proposal_checks",
      "filepath": "src/system/governance/checks/proposal_checks.py",
      "lineno": 22,
      "end_lineno": 29,
      "params": {
        "self": null,
        "context": null
      },
      "decorators": [],
      "docstring": "Initializes the check with a shared auditor context.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "0aaf9db3d8c6050ad3a818600df299578a6ec4cdec2ca28b62f1cf645e6ff69a",
      "calls": [
        "__init__",
        "load_schema",
        "super"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/proposal_checks.py::__init__"
      ]
    },
    "src/system/governance/checks/proposal_checks.py::_get_proposal_paths": {
      "name": "_get_proposal_paths",
      "qualname": "unassigned._get_proposal_paths",
      "module": "proposal_checks",
      "filepath": "src/system/governance/checks/proposal_checks.py",
      "lineno": 33,
      "end_lineno": 41,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Return all cr-* proposals (both YAML and JSON).",
      "base_classes": [],
      "structural_hash": "93925293886a6b028b04e4101097b098b6f9ab96498983cd1683b95169ea87b9",
      "calls": [
        "exists",
        "glob",
        "list",
        "sorted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/proposal_checks.py::_get_proposal_paths"
      ]
    },
    "src/system/governance/checks/proposal_checks.py::_load_proposal": {
      "name": "_load_proposal",
      "qualname": "unassigned._load_proposal",
      "module": "proposal_checks",
      "filepath": "src/system/governance/checks/proposal_checks.py",
      "lineno": 43,
      "end_lineno": 51,
      "params": {
        "self": null,
        "path": null
      },
      "decorators": [],
      "docstring": "Load proposal preserving its format, raising ValueError on failure.",
      "base_classes": [],
      "structural_hash": "5c4a272b51f2ef2f388a2c0840c6e0fea194cf5ec94855341d4dc470197a96c2",
      "calls": [
        "ValueError",
        "loads",
        "lower",
        "read_text",
        "safe_load"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/proposal_checks.py::_load_proposal"
      ]
    },
    "src/system/governance/checks/proposal_checks.py::_expected_token_for_proposal": {
      "name": "_expected_token_for_proposal",
      "qualname": "unassigned._expected_token_for_proposal",
      "module": "proposal_checks",
      "filepath": "src/system/governance/checks/proposal_checks.py",
      "lineno": 55,
      "end_lineno": 68,
      "params": {
        "proposal": null
      },
      "decorators": [
        "staticmethod"
      ],
      "docstring": "Produce a deterministic token for approvals bound to the full proposal intent.\nThis logic MUST mirror the token generation in `src/system/admin/utils.py`.",
      "base_classes": [],
      "structural_hash": "e9730bde0ad108925405e24d0d6c741fbab5e5a202d5a128759b21d15f57f595",
      "calls": [
        "dumps",
        "encode",
        "finalize",
        "get",
        "hex",
        "sha256",
        "update"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/proposal_checks.py::_expected_token_for_proposal"
      ]
    },
    "src/system/governance/checks/proposal_checks.py::_validate_single_proposal_schema": {
      "name": "_validate_single_proposal_schema",
      "qualname": "unassigned._validate_single_proposal_schema",
      "module": "proposal_checks",
      "filepath": "src/system/governance/checks/proposal_checks.py",
      "lineno": 70,
      "end_lineno": 108,
      "params": {
        "self": null,
        "path": null,
        "validator": null
      },
      "decorators": [],
      "docstring": "Validates a single proposal file against the JSON schema.",
      "base_classes": [],
      "structural_hash": "4052feee339d4f1ff48fbfb205a7627100e825092cd4d07ce15b4c00d7bec013",
      "calls": [
        "AuditFinding",
        "_load_proposal",
        "append",
        "iter_errors",
        "join",
        "list",
        "relative_to",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/proposal_checks.py::_validate_single_proposal_schema"
      ]
    },
    "src/system/governance/checks/proposal_checks.py::_validate_single_proposal_signatures": {
      "name": "_validate_single_proposal_signatures",
      "qualname": "unassigned._validate_single_proposal_signatures",
      "module": "proposal_checks",
      "filepath": "src/system/governance/checks/proposal_checks.py",
      "lineno": 110,
      "end_lineno": 163,
      "params": {
        "self": null,
        "path": null
      },
      "decorators": [],
      "docstring": "Validates the signatures of a single proposal file for drift.",
      "base_classes": [],
      "structural_hash": "8b8f857f364c47985aae8697c739ecb34944518be83e61701b10eeaf538a35a2",
      "calls": [
        "AuditFinding",
        "_expected_token_for_proposal",
        "_load_proposal",
        "append",
        "get",
        "join",
        "len",
        "relative_to",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/proposal_checks.py::_validate_single_proposal_signatures"
      ]
    },
    "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema": {
      "name": "check_proposal_files_match_schema",
      "qualname": "unassigned.check_proposal_files_match_schema",
      "module": "proposal_checks",
      "filepath": "src/system/governance/checks/proposal_checks.py",
      "lineno": 168,
      "end_lineno": 193,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "base_classes": [],
      "structural_hash": "a6367d374a00f893749b1098d11305385d024f16142b3cf30fb3a5c735ea1d81",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "_get_proposal_paths",
        "_validate_single_proposal_schema",
        "extend"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema"
      ]
    },
    "src/system/governance/checks/proposal_checks.py::check_signatures_match_content": {
      "name": "check_signatures_match_content",
      "qualname": "unassigned.check_signatures_match_content",
      "module": "proposal_checks",
      "filepath": "src/system/governance/checks/proposal_checks.py",
      "lineno": 196,
      "end_lineno": 205,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Detect content/signature drift for all pending proposals.",
      "base_classes": [],
      "structural_hash": "2b0de8239cfc8f160f8f98596e1574e491e7fafc4b122d7a6a70e22708e59b7a",
      "calls": [
        "_get_proposal_paths",
        "_validate_single_proposal_signatures",
        "extend"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/proposal_checks.py::check_signatures_match_content"
      ]
    },
    "src/system/governance/checks/proposal_checks.py::list_pending_proposals": {
      "name": "list_pending_proposals",
      "qualname": "unassigned.list_pending_proposals",
      "module": "proposal_checks",
      "filepath": "src/system/governance/checks/proposal_checks.py",
      "lineno": 208,
      "end_lineno": 230,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Emit a friendly summary of pending proposals.",
      "base_classes": [],
      "structural_hash": "375e8aa9acdd0d990a54d115492e29729fadc2d688de14d3223919bef9ba010c",
      "calls": [
        "AuditFinding",
        "_get_proposal_paths",
        "exists",
        "relative_to",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/proposal_checks.py::list_pending_proposals"
      ]
    },
    "src/system/governance/checks/quality_checks.py::QualityChecks": {
      "name": "QualityChecks",
      "qualname": "unassigned.QualityChecks",
      "module": "quality_checks",
      "filepath": "src/system/governance/checks/quality_checks.py",
      "lineno": 8,
      "end_lineno": 83,
      "params": {},
      "decorators": [],
      "docstring": "Container for code quality constitutional checks.",
      "base_classes": [
        "BaseAuditCheck"
      ],
      "structural_hash": "99265c7cac1b73b8c2e49a43c98111ef345301b253d286c6674d60e3702af0d4",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/checks/quality_checks.py::QualityChecks"
      ]
    },
    "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents": {
      "name": "check_docstrings_and_intents",
      "qualname": "unassigned.check_docstrings_and_intents",
      "module": "quality_checks",
      "filepath": "src/system/governance/checks/quality_checks.py",
      "lineno": 14,
      "end_lineno": 46,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Finds symbols missing docstrings or having generic intents.",
      "base_classes": [],
      "structural_hash": "26909ce55bf9e823775eff9afee451d43f85a43e46039c61dee69cf39825702d",
      "calls": [
        "AuditFinding",
        "append",
        "get"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents"
      ]
    },
    "src/system/governance/checks/quality_checks.py::check_for_dead_code": {
      "name": "check_for_dead_code",
      "qualname": "unassigned.check_for_dead_code",
      "module": "quality_checks",
      "filepath": "src/system/governance/checks/quality_checks.py",
      "lineno": 49,
      "end_lineno": 83,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Detects unreferenced public symbols.",
      "base_classes": [],
      "structural_hash": "bb685c54a606e923f512ea3413c9a9567d6dbc9451b9d1cf0d3ce949e6836ad4",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/quality_checks.py::check_for_dead_code"
      ]
    },
    "src/system/governance/checks/security_checks.py::SecurityChecks": {
      "name": "SecurityChecks",
      "qualname": "unassigned.SecurityChecks",
      "module": "security_checks",
      "filepath": "src/system/governance/checks/security_checks.py",
      "lineno": 9,
      "end_lineno": 86,
      "params": {},
      "decorators": [],
      "docstring": "Container for security-related constitutional checks.",
      "base_classes": [],
      "structural_hash": "c8d6f6266ecefbb1ed159a5937a9aa4ca6d2ba5e1978ee62c5ae0ac5f7e0c2f1",
      "calls": [
        "AuditFinding",
        "Path",
        "any",
        "append",
        "compile",
        "enumerate",
        "get",
        "load_config",
        "match",
        "next",
        "read_text",
        "search",
        "set",
        "splitlines",
        "str"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/checks/security_checks.py::SecurityChecks"
      ]
    },
    "src/system/governance/checks/security_checks.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "security_checks",
      "filepath": "src/system/governance/checks/security_checks.py",
      "lineno": 12,
      "end_lineno": 17,
      "params": {
        "self": null,
        "context": null
      },
      "decorators": [],
      "docstring": "Initializes the check with a shared auditor context.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "d609ebf2f5063400021d85393ed766550d4d97d15988fc0c6bcd9493ab9cbfbe",
      "calls": [
        "load_config"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/security_checks.py::__init__"
      ]
    },
    "src/system/governance/checks/security_checks.py::check_for_hardcoded_secrets": {
      "name": "check_for_hardcoded_secrets",
      "qualname": "unassigned.check_for_hardcoded_secrets",
      "module": "security_checks",
      "filepath": "src/system/governance/checks/security_checks.py",
      "lineno": 20,
      "end_lineno": 86,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Scans source code for patterns that look like hardcoded secrets.",
      "base_classes": [],
      "structural_hash": "ae0ccd04ba9271130c812a8ff6a27648856e7de792ada274fc5001573e1d1564",
      "calls": [
        "AuditFinding",
        "Path",
        "any",
        "append",
        "compile",
        "enumerate",
        "get",
        "match",
        "next",
        "read_text",
        "search",
        "set",
        "splitlines",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/security_checks.py::check_for_hardcoded_secrets"
      ]
    },
    "src/system/governance/checks/structure_checks.py::StructureChecks": {
      "name": "StructureChecks",
      "qualname": "unassigned.StructureChecks",
      "module": "structure_checks",
      "filepath": "src/system/governance/checks/structure_checks.py",
      "lineno": 10,
      "end_lineno": 207,
      "params": {},
      "decorators": [],
      "docstring": "Container for structural constitutional checks.",
      "base_classes": [
        "BaseAuditCheck"
      ],
      "structural_hash": "80bd1a0a2fa2ff0d7dead7fc98056f0b4333abeb2b1485bdbf8fbbca4398701b",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "items",
        "joinpath",
        "len",
        "list",
        "load_config",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "sorted",
        "split",
        "startswith",
        "validate_manifest_entry",
        "with_suffix"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/checks/structure_checks.py::StructureChecks"
      ]
    },
    "src/system/governance/checks/structure_checks.py::check_project_manifest": {
      "name": "check_project_manifest",
      "qualname": "unassigned.check_project_manifest",
      "module": "structure_checks",
      "filepath": "src/system/governance/checks/structure_checks.py",
      "lineno": 14,
      "end_lineno": 38,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Validates the integrity of project_manifest.yaml.",
      "base_classes": [],
      "structural_hash": "330055588e86adabc8ecefef8531dd2c828b106982869750b6d678b8e2808a90",
      "calls": [
        "AuditFinding",
        "append"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/structure_checks.py::check_project_manifest"
      ]
    },
    "src/system/governance/checks/structure_checks.py::check_capability_coverage": {
      "name": "check_capability_coverage",
      "qualname": "unassigned.check_capability_coverage",
      "module": "structure_checks",
      "filepath": "src/system/governance/checks/structure_checks.py",
      "lineno": 41,
      "end_lineno": 72,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Ensures all required capabilities are implemented.",
      "base_classes": [],
      "structural_hash": "0f0007f98aa1b951bcb9625f47e29c38d7eb241b8b3a27044adfc71cdfc9b872",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "set",
        "sorted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/structure_checks.py::check_capability_coverage"
      ]
    },
    "src/system/governance/checks/structure_checks.py::check_capability_definitions": {
      "name": "check_capability_definitions",
      "qualname": "unassigned.check_capability_definitions",
      "module": "structure_checks",
      "filepath": "src/system/governance/checks/structure_checks.py",
      "lineno": 75,
      "end_lineno": 109,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Ensures all implemented capabilities are valid.",
      "base_classes": [],
      "structural_hash": "1cb7e76f476b8cc87382eee14d06ffda9869b54aca27a18c92f50722f4942f81",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "load_config",
        "sorted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/structure_checks.py::check_capability_definitions"
      ]
    },
    "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema": {
      "name": "check_knowledge_graph_schema",
      "qualname": "unassigned.check_knowledge_graph_schema",
      "module": "structure_checks",
      "filepath": "src/system/governance/checks/structure_checks.py",
      "lineno": 112,
      "end_lineno": 139,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Validates all knowledge graph symbols against the schema.",
      "base_classes": [],
      "structural_hash": "1595abdcfc3a59ec7c1bde58699f35224b13cfbee0cf24df81b4d80e0a435d79",
      "calls": [
        "AuditFinding",
        "append",
        "items",
        "len",
        "validate_manifest_entry"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema"
      ]
    },
    "src/system/governance/checks/structure_checks.py::check_domain_integrity": {
      "name": "check_domain_integrity",
      "qualname": "unassigned.check_domain_integrity",
      "module": "structure_checks",
      "filepath": "src/system/governance/checks/structure_checks.py",
      "lineno": 144,
      "end_lineno": 207,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Checks for domain mismatches and illegal imports.",
      "base_classes": [],
      "structural_hash": "158a997003c23c750115175d143367e3c9539ea143365e34f1d9f4a0ce02f9a3",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "joinpath",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "split",
        "startswith",
        "with_suffix"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/checks/structure_checks.py::check_domain_integrity"
      ]
    },
    "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor": {
      "name": "ConstitutionalAuditor",
      "qualname": "unassigned.ConstitutionalAuditor",
      "module": "constitutional_auditor",
      "filepath": "src/system/governance/constitutional_auditor.py",
      "lineno": 29,
      "end_lineno": 177,
      "params": {},
      "decorators": [],
      "docstring": "Orchestrates the discovery and execution of constitutional checks.",
      "base_classes": [],
      "structural_hash": "4bbc89b66a38745a0896d8fd7e9b1059b6771fc1ca61aaf5632b4b3dabf14ba0",
      "calls": [
        "AuditFinding",
        "AuditorContext",
        "Console",
        "IntentModel",
        "Panel",
        "Path",
        "_LoggingBridge",
        "_discover_checks",
        "_report_final_status",
        "aggregate_manifests",
        "any",
        "append",
        "check_fn",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "exists",
        "extend",
        "get",
        "get_repo_root",
        "getmembers",
        "glob",
        "import_module",
        "info",
        "len",
        "list",
        "load_config",
        "load_dotenv",
        "print",
        "sort",
        "split",
        "startswith",
        "strip",
        "sum",
        "values",
        "warning"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor"
      ]
    },
    "src/system/governance/constitutional_auditor.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "constitutional_auditor",
      "filepath": "src/system/governance/constitutional_auditor.py",
      "lineno": 66,
      "end_lineno": 78,
      "params": {
        "self": null,
        "repo_root": null
      },
      "decorators": [],
      "docstring": "Initialize context with repository paths and configurations.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "b453ef345b77a84fe4ada63f4ab873aef53f6f582679ed75aa18acc8a11871d4",
      "calls": [
        "IntentModel",
        "aggregate_manifests",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/constitutional_auditor.py::__init__"
      ]
    },
    "src/system/governance/constitutional_auditor.py::_discover_checks": {
      "name": "_discover_checks",
      "qualname": "unassigned._discover_checks",
      "module": "constitutional_auditor",
      "filepath": "src/system/governance/constitutional_auditor.py",
      "lineno": 80,
      "end_lineno": 122,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Discover check methods from modules in the 'checks' directory.",
      "base_classes": [],
      "structural_hash": "7d994c3c3157d6e5746f17da0471adb29ea4abab2fcac99089adc5c5b23793ad",
      "calls": [
        "Path",
        "append",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "get",
        "getmembers",
        "glob",
        "import_module",
        "len",
        "sort",
        "split",
        "startswith"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/constitutional_auditor.py::_discover_checks"
      ]
    },
    "src/system/governance/constitutional_auditor.py::run_full_audit": {
      "name": "run_full_audit",
      "qualname": "unassigned.run_full_audit",
      "module": "constitutional_auditor",
      "filepath": "src/system/governance/constitutional_auditor.py",
      "lineno": 124,
      "end_lineno": 163,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Run all discovered validation checks and return overall status.",
      "base_classes": [],
      "structural_hash": "0e5a342921730b79160f6b87b9173dfa7dbf260c69799dd33923b277d38d661f",
      "calls": [
        "AuditFinding",
        "Panel",
        "_report_final_status",
        "any",
        "append",
        "check_fn",
        "error",
        "extend",
        "info",
        "print",
        "split",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/constitutional_auditor.py::run_full_audit"
      ]
    },
    "src/system/governance/constitutional_auditor.py::_report_final_status": {
      "name": "_report_final_status",
      "qualname": "unassigned._report_final_status",
      "module": "constitutional_auditor",
      "filepath": "src/system/governance/constitutional_auditor.py",
      "lineno": 165,
      "end_lineno": 177,
      "params": {
        "self": null,
        "passed": null
      },
      "decorators": [],
      "docstring": "Print final audit summary to the console.",
      "base_classes": [],
      "structural_hash": "24f3456c07f2542af03ec4f96aab424a76aa133c1bfbab1b7b85fdcae32cd7ea",
      "calls": [
        "Panel",
        "print",
        "sum"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/constitutional_auditor.py::_report_final_status"
      ]
    },
    "src/system/governance/constitutional_auditor.py::main": {
      "name": "main",
      "qualname": "unassigned.main",
      "module": "constitutional_auditor",
      "filepath": "src/system/governance/constitutional_auditor.py",
      "lineno": 180,
      "end_lineno": 195,
      "params": {},
      "decorators": [],
      "docstring": "CLI entry point for the Constitutional Auditor.",
      "base_classes": [],
      "structural_hash": "f6fdbaa6bfe1e6124c035255bac2283c42602332b190a0302133de3a8620c2b6",
      "calls": [
        "ConstitutionalAuditor",
        "error",
        "exit",
        "load_dotenv",
        "run_full_audit"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/constitutional_auditor.py::main"
      ]
    },
    "src/system/governance/constitutional_auditor.py::_LoggingBridge": {
      "name": "_LoggingBridge",
      "qualname": "unassigned._LoggingBridge",
      "module": "constitutional_auditor",
      "filepath": "src/system/governance/constitutional_auditor.py",
      "lineno": 32,
      "end_lineno": 38,
      "params": {},
      "decorators": [],
      "docstring": "Redirects console output to the logger.",
      "base_classes": [
        "StringIO"
      ],
      "structural_hash": "accbf7162a4d8000d9e089db10a6b222a78133e2eb9926efcb837c89fe869927",
      "calls": [
        "info",
        "strip"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/constitutional_auditor.py::_LoggingBridge"
      ]
    },
    "src/system/governance/constitutional_auditor.py::write": {
      "name": "write",
      "qualname": "unassigned.write",
      "module": "constitutional_auditor",
      "filepath": "src/system/governance/constitutional_auditor.py",
      "lineno": 35,
      "end_lineno": 38,
      "params": {
        "self": null,
        "s": null
      },
      "decorators": [],
      "docstring": "Redirects writes to the logger info stream.",
      "base_classes": [],
      "structural_hash": "32a110e0afaf2a1e54639b543cfc4509a1c00712e7244004cba4900925c2f79c",
      "calls": [
        "info",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/governance/constitutional_auditor.py::write"
      ]
    },
    "src/system/governance/constitutional_auditor.py::AuditorContext": {
      "name": "AuditorContext",
      "qualname": "unassigned.AuditorContext",
      "module": "constitutional_auditor",
      "filepath": "src/system/governance/constitutional_auditor.py",
      "lineno": 63,
      "end_lineno": 78,
      "params": {},
      "decorators": [],
      "docstring": "Shared state container for audit checks.",
      "base_classes": [],
      "structural_hash": "cdfb4eb71dd5acccbbd35233cc44232c7cc839cda3cd11df6058ea4dba5b1dd2",
      "calls": [
        "IntentModel",
        "aggregate_manifests",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/constitutional_auditor.py::AuditorContext"
      ]
    },
    "src/system/governance/models.py::AuditSeverity": {
      "name": "AuditSeverity",
      "qualname": "unassigned.AuditSeverity",
      "module": "models",
      "filepath": "src/system/governance/models.py",
      "lineno": 10,
      "end_lineno": 15,
      "params": {},
      "decorators": [],
      "docstring": "Severity levels for audit findings.",
      "base_classes": [
        "Enum"
      ],
      "structural_hash": "28f79c27c1ebb4978fd62cdbbe31ddb7e431f470ef3a59a801b0f7b146fdab17",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/models.py::AuditSeverity"
      ]
    },
    "src/system/governance/models.py::AuditFinding": {
      "name": "AuditFinding",
      "qualname": "unassigned.AuditFinding",
      "module": "models",
      "filepath": "src/system/governance/models.py",
      "lineno": 19,
      "end_lineno": 25,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "docstring": "Represents a single audit finding.",
      "base_classes": [],
      "structural_hash": "a77333291b4a5559fadebab11ad48cd08bc5847c3142d31af4b41d0a2b4ef394",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/system/governance/models.py::AuditFinding"
      ]
    },
    "src/system/guard/capability_discovery.py::collect_code_capabilities": {
      "name": "collect_code_capabilities",
      "qualname": "unassigned.collect_code_capabilities",
      "module": "capability_discovery",
      "filepath": "src/system/guard/capability_discovery.py",
      "lineno": 16,
      "end_lineno": 45,
      "params": {
        "root": null,
        "include_globs": null,
        "exclude_globs": null,
        "require_kgb": null
      },
      "decorators": [],
      "docstring": "Unified discovery entrypoint that tries the live KnowledgeGraphBuilder first,\nthen falls back to a direct source scan.",
      "base_classes": [],
      "structural_hash": "c8f42a62f1eca05baf487e0dc4f2b0c5b5f6850ff0720caf0dc08e95ce61071c",
      "calls": [
        "DomainMapper",
        "RuntimeError",
        "collect_from_kgb",
        "collect_from_source_scan"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/capability_discovery.py::collect_code_capabilities"
      ]
    },
    "src/system/guard/capability_discovery.py::load_manifest_capabilities": {
      "name": "load_manifest_capabilities",
      "qualname": "unassigned.load_manifest_capabilities",
      "module": "capability_discovery",
      "filepath": "src/system/guard/capability_discovery.py",
      "lineno": 48,
      "end_lineno": 52,
      "params": {
        "root": null,
        "explicit_path": null
      },
      "decorators": [],
      "docstring": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "base_classes": [],
      "structural_hash": "7424757e7242faf2787f618be65139b5771145e1148c99ca1bd7844759895507",
      "calls": [
        "load_manifest_capabilities"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/capability_discovery.py::load_manifest_capabilities"
      ]
    },
    "src/system/guard/discovery/from_kgb.py::_extract_cap_meta_from_node": {
      "name": "_extract_cap_meta_from_node",
      "qualname": "unassigned._extract_cap_meta_from_node",
      "module": "from_kgb",
      "filepath": "src/system/guard/discovery/from_kgb.py",
      "lineno": 15,
      "end_lineno": 24,
      "params": {
        "node": null
      },
      "decorators": [],
      "docstring": "Extracts capability metadata from a Knowledge Graph node.",
      "base_classes": [],
      "structural_hash": "b385da546dbc6c856c4048d18354072a90fb09870ff89f366757e4db9aaf9dee",
      "calls": [
        "CapabilityMeta",
        "get",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/discovery/from_kgb.py::_extract_cap_meta_from_node"
      ]
    },
    "src/system/guard/discovery/from_kgb.py::collect_from_kgb": {
      "name": "collect_from_kgb",
      "qualname": "unassigned.collect_from_kgb",
      "module": "from_kgb",
      "filepath": "src/system/guard/discovery/from_kgb.py",
      "lineno": 27,
      "end_lineno": 43,
      "params": {
        "root": null
      },
      "decorators": [],
      "docstring": "Uses KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "base_classes": [],
      "structural_hash": "cf16b1b5c093d3279c72a8e676069f433169ab20b48c66755c326319cd433297",
      "calls": [
        "KnowledgeGraphBuilder",
        "_extract_cap_meta_from_node",
        "build",
        "get",
        "isinstance",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/discovery/from_kgb.py::collect_from_kgb"
      ]
    },
    "src/system/guard/discovery/from_manifest.py::_normalize_cap_list": {
      "name": "_normalize_cap_list",
      "qualname": "unassigned._normalize_cap_list",
      "module": "from_manifest",
      "filepath": "src/system/guard/discovery/from_manifest.py",
      "lineno": 19,
      "end_lineno": 26,
      "params": {
        "items": null
      },
      "decorators": [],
      "docstring": "Normalizes various list/dict shapes into a standard {cap: Meta} dictionary.",
      "base_classes": [],
      "structural_hash": "2661bca830c843baba443291eaf1d76e8e05d4f82423889256244d948004f58f",
      "calls": [
        "CapabilityMeta",
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/discovery/from_manifest.py::_normalize_cap_list"
      ]
    },
    "src/system/guard/discovery/from_manifest.py::_find_all_manifests": {
      "name": "_find_all_manifests",
      "qualname": "unassigned._find_all_manifests",
      "module": "from_manifest",
      "filepath": "src/system/guard/discovery/from_manifest.py",
      "lineno": 29,
      "end_lineno": 34,
      "params": {
        "start": null
      },
      "decorators": [],
      "docstring": "Locates all manifest.yaml files within the src directory.",
      "base_classes": [],
      "structural_hash": "b15fdc1cbe22c819a11fc867a80252cc518242c8edf62867d0f4189e2b5dfbf9",
      "calls": [
        "glob",
        "is_dir",
        "list",
        "sorted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/discovery/from_manifest.py::_find_all_manifests"
      ]
    },
    "src/system/guard/discovery/from_manifest.py::load_manifest_capabilities": {
      "name": "load_manifest_capabilities",
      "qualname": "unassigned.load_manifest_capabilities",
      "module": "from_manifest",
      "filepath": "src/system/guard/discovery/from_manifest.py",
      "lineno": 37,
      "end_lineno": 66,
      "params": {
        "root": null,
        "explicit_path": null
      },
      "decorators": [],
      "docstring": "Loads, parses, and aggregates capabilities from all domain-specific manifests.",
      "base_classes": [],
      "structural_hash": "e02b757e859bbf4068fd051e2370bbffeaaca6265f3a1264a07b7d0dcecd4b96",
      "calls": [
        "CapabilityMeta",
        "RuntimeError",
        "_find_all_manifests",
        "_normalize_cap_list",
        "get",
        "items",
        "open",
        "safe_load"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/discovery/from_manifest.py::load_manifest_capabilities"
      ]
    },
    "src/system/guard/discovery/from_source_scan.py::_parse_inline_meta": {
      "name": "_parse_inline_meta",
      "qualname": "unassigned._parse_inline_meta",
      "module": "from_source_scan",
      "filepath": "src/system/guard/discovery/from_source_scan.py",
      "lineno": 12,
      "end_lineno": 21,
      "params": {
        "trailing": null
      },
      "decorators": [],
      "docstring": "Parse inline [key=value] metadata from trailing text.",
      "base_classes": [],
      "structural_hash": "4f31e6e74ed77090ee5626846af779359d56b55b771a32dd43b9e4f4aa681249",
      "calls": [
        "findall",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/discovery/from_source_scan.py::_parse_inline_meta"
      ]
    },
    "src/system/guard/discovery/from_source_scan.py::_iter_source_files": {
      "name": "_iter_source_files",
      "qualname": "unassigned._iter_source_files",
      "module": "from_source_scan",
      "filepath": "src/system/guard/discovery/from_source_scan.py",
      "lineno": 24,
      "end_lineno": 39,
      "params": {
        "root": null,
        "include_globs": null,
        "exclude_globs": null
      },
      "decorators": [],
      "docstring": "Yields repository files to be scanned.",
      "base_classes": [],
      "structural_hash": "b5b675110e61cfb12eaf9fd7630d3b5493e662dd45521e6a570d58b4362ade36",
      "calls": [
        "any",
        "is_file",
        "match",
        "rglob",
        "wanted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/discovery/from_source_scan.py::_iter_source_files"
      ]
    },
    "src/system/guard/discovery/from_source_scan.py::collect_from_source_scan": {
      "name": "collect_from_source_scan",
      "qualname": "unassigned.collect_from_source_scan",
      "module": "from_source_scan",
      "filepath": "src/system/guard/discovery/from_source_scan.py",
      "lineno": 42,
      "end_lineno": 86,
      "params": {
        "root": null,
        "include_globs": null,
        "exclude_globs": null,
        "domain_mapper": null
      },
      "decorators": [],
      "docstring": "Scans for '# CAPABILITY:' tags with optional inline metadata.\nNow constitution-aware via DomainMapper.",
      "base_classes": [],
      "structural_hash": "9eb6d448b47a6227610f9b3e3bdc23b763538b7a15d194c651f23a0b0416a399",
      "calls": [
        "CapabilityMeta",
        "DomainMapper",
        "_iter_source_files",
        "_parse_inline_meta",
        "compile",
        "determine_domain",
        "get",
        "group",
        "match",
        "read_text",
        "relative_to",
        "splitlines",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/discovery/from_source_scan.py::collect_from_source_scan"
      ]
    },
    "src/system/guard/discovery/from_source_scan.py::wanted": {
      "name": "wanted",
      "qualname": "unassigned.wanted",
      "module": "from_source_scan",
      "filepath": "src/system/guard/discovery/from_source_scan.py",
      "lineno": 29,
      "end_lineno": 35,
      "params": {
        "p": null
      },
      "decorators": [],
      "docstring": "Return True if the path matches include_globs (if specified) or has a .py suffix, and does not match exclude_globs.",
      "base_classes": [],
      "structural_hash": "5345aca39bfbb4edb9ef0d4011c61efa4c1c44757af84f97b1221aedc6165256",
      "calls": [
        "any",
        "match"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/discovery/from_source_scan.py::wanted"
      ]
    },
    "src/system/guard/drift_detector.py::detect_capability_drift": {
      "name": "detect_capability_drift",
      "qualname": "unassigned.detect_capability_drift",
      "module": "drift_detector",
      "filepath": "src/system/guard/drift_detector.py",
      "lineno": 15,
      "end_lineno": 40,
      "params": {
        "manifest_caps": null,
        "code_caps": null
      },
      "decorators": [],
      "docstring": "Computes missing, undeclared, and mismatched capabilities between manifest and code.",
      "base_classes": [],
      "structural_hash": "a8ad3d7d1c170a012cf984cfff280dd0e10ecd70d76fc464325010157af1fc06",
      "calls": [
        "DriftReport",
        "append",
        "keys",
        "list",
        "set",
        "sorted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/drift_detector.py::detect_capability_drift"
      ]
    },
    "src/system/guard/drift_detector.py::write_report": {
      "name": "write_report",
      "qualname": "unassigned.write_report",
      "module": "drift_detector",
      "filepath": "src/system/guard/drift_detector.py",
      "lineno": 43,
      "end_lineno": 46,
      "params": {
        "report_path": null,
        "report": null
      },
      "decorators": [],
      "docstring": "Persists the drift report to disk for evidence and CI.",
      "base_classes": [],
      "structural_hash": "f470e15b680e9bda6d15592a0bcb69254df8aef37a8400043fda5abc2a84ec49",
      "calls": [
        "dumps",
        "mkdir",
        "to_dict",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/drift_detector.py::write_report"
      ]
    },
    "src/system/guard/models.py::CapabilityMeta": {
      "name": "CapabilityMeta",
      "qualname": "unassigned.CapabilityMeta",
      "module": "models",
      "filepath": "src/system/guard/models.py",
      "lineno": 13,
      "end_lineno": 18,
      "params": {},
      "decorators": [
        "dataclass(frozen=True)"
      ],
      "docstring": "A minimal, shared data container for capability metadata.",
      "base_classes": [],
      "structural_hash": "16c4f81415492ed8331c9a206c1f55a0e7ac37b46f777a803d4ae45901b86124",
      "calls": [
        "dataclass"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/guard/models.py::CapabilityMeta"
      ]
    },
    "src/system/guard/models.py::DriftReport": {
      "name": "DriftReport",
      "qualname": "unassigned.DriftReport",
      "module": "models",
      "filepath": "src/system/guard/models.py",
      "lineno": 22,
      "end_lineno": 35,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "docstring": "Structured result for capability drift suitable for JSON emission and CI gating.",
      "base_classes": [],
      "structural_hash": "7921fd074f563aace637ec680097dd26facb5aa61c3fd8ca7ce69782c1a818a8",
      "calls": [
        "sorted"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/guard/models.py::DriftReport"
      ]
    },
    "src/system/guard/models.py::to_dict": {
      "name": "to_dict",
      "qualname": "unassigned.to_dict",
      "module": "models",
      "filepath": "src/system/guard/models.py",
      "lineno": 29,
      "end_lineno": 35,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Converts the drift report into a stable JSON-serializable dict.",
      "base_classes": [],
      "structural_hash": "485033d9fffb5828ea2f692bf9505bb59c7f33d9d7cec1bd11506141277667e2",
      "calls": [
        "sorted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/guard/models.py::to_dict"
      ]
    },
    "src/system/tools/ast_utils.py::strip_docstrings": {
      "name": "strip_docstrings",
      "qualname": "unassigned.strip_docstrings",
      "module": "ast_utils",
      "filepath": "src/system/tools/ast_utils.py",
      "lineno": 11,
      "end_lineno": 26,
      "params": {
        "node": null
      },
      "decorators": [],
      "docstring": "Recursively remove docstring nodes from an AST tree for structural hashing.",
      "base_classes": [],
      "structural_hash": "520ff4dd6bf1ff781d0552b7e3c3d3667e4ea9aa97e12f094ef01c9d120e6d5f",
      "calls": [
        "isinstance",
        "iter_child_nodes",
        "strip_docstrings"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_utils.py::strip_docstrings"
      ]
    },
    "src/system/tools/ast_utils.py::calculate_structural_hash": {
      "name": "calculate_structural_hash",
      "qualname": "unassigned.calculate_structural_hash",
      "module": "ast_utils",
      "filepath": "src/system/tools/ast_utils.py",
      "lineno": 29,
      "end_lineno": 33,
      "params": {
        "node": null
      },
      "decorators": [],
      "docstring": "Calculate a hash of the node's structure without docstrings.",
      "base_classes": [],
      "structural_hash": "014a91cdb2aaf134603f4fe4415d0c4fd2ba3a530c44b9a2adedaf7fa21a6804",
      "calls": [
        "encode",
        "hexdigest",
        "parse",
        "replace",
        "sha256",
        "strip_docstrings",
        "unparse"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_utils.py::calculate_structural_hash"
      ]
    },
    "src/system/tools/ast_utils.py::detect_docstring": {
      "name": "detect_docstring",
      "qualname": "unassigned.detect_docstring",
      "module": "ast_utils",
      "filepath": "src/system/tools/ast_utils.py",
      "lineno": 36,
      "end_lineno": 49,
      "params": {
        "node": null
      },
      "decorators": [],
      "docstring": "Detects both standard and non-standard docstrings for a node.",
      "base_classes": [],
      "structural_hash": "361fcc6dddb36505bb1486f5f466435c20b3cf521499397941d909a870d6f163",
      "calls": [
        "get_docstring",
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_utils.py::detect_docstring"
      ]
    },
    "src/system/tools/ast_utils.py::extract_base_classes": {
      "name": "extract_base_classes",
      "qualname": "unassigned.extract_base_classes",
      "module": "ast_utils",
      "filepath": "src/system/tools/ast_utils.py",
      "lineno": 52,
      "end_lineno": 60,
      "params": {
        "node": null
      },
      "decorators": [],
      "docstring": "Extract base class names from a class definition.",
      "base_classes": [],
      "structural_hash": "95dceab5bad0d24dd6e43a90d656b349b61f5529de711ec65c59a037bcff9af3",
      "calls": [
        "append",
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_utils.py::extract_base_classes"
      ]
    },
    "src/system/tools/ast_utils.py::parse_metadata_comment": {
      "name": "parse_metadata_comment",
      "qualname": "unassigned.parse_metadata_comment",
      "module": "ast_utils",
      "filepath": "src/system/tools/ast_utils.py",
      "lineno": 63,
      "end_lineno": 71,
      "params": {
        "node": null,
        "source_lines": null
      },
      "decorators": [],
      "docstring": "Parses the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "base_classes": [],
      "structural_hash": "580591c7d6fd7706edbb62b9dde1f347482f19c2d739bbbc519ce428f2caf391",
      "calls": [
        "group",
        "len",
        "search",
        "startswith",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_utils.py::parse_metadata_comment"
      ]
    },
    "src/system/tools/ast_utils.py::is_fastapi_assignment": {
      "name": "is_fastapi_assignment",
      "qualname": "unassigned.is_fastapi_assignment",
      "module": "ast_utils",
      "filepath": "src/system/tools/ast_utils.py",
      "lineno": 74,
      "end_lineno": 82,
      "params": {
        "node": null
      },
      "decorators": [],
      "docstring": "Check if node is a FastAPI app assignment.",
      "base_classes": [],
      "structural_hash": "95692faf75510223cabe67d2830526fc20aea29ce646a59a804d1c7f9d55cabb",
      "calls": [
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_utils.py::is_fastapi_assignment"
      ]
    },
    "src/system/tools/ast_utils.py::is_main_block": {
      "name": "is_main_block",
      "qualname": "unassigned.is_main_block",
      "module": "ast_utils",
      "filepath": "src/system/tools/ast_utils.py",
      "lineno": 85,
      "end_lineno": 94,
      "params": {
        "node": null
      },
      "decorators": [],
      "docstring": "Check if node is an if __name__ == '__main__' block.",
      "base_classes": [],
      "structural_hash": "ac818678d6bd6faf5ef7b7ac9bf0746a1a2915489dccc361c3c40b2716877ed8",
      "calls": [
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_utils.py::is_main_block"
      ]
    },
    "src/system/tools/ast_visitor.py::FunctionCallVisitor": {
      "name": "FunctionCallVisitor",
      "qualname": "unassigned.FunctionCallVisitor",
      "module": "ast_visitor",
      "filepath": "src/system/tools/ast_visitor.py",
      "lineno": 12,
      "end_lineno": 24,
      "params": {},
      "decorators": [],
      "docstring": "An AST visitor that collects the names of all functions being called within a node.",
      "base_classes": [
        "NodeVisitor"
      ],
      "structural_hash": "1d7392083a2be98b2d882157167d40075ee0a30a3b4cabc691ebb598e26250c9",
      "calls": [
        "add",
        "generic_visit",
        "isinstance",
        "set"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/ast_visitor.py::FunctionCallVisitor"
      ]
    },
    "src/system/tools/ast_visitor.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "ast_visitor",
      "filepath": "src/system/tools/ast_visitor.py",
      "lineno": 30,
      "end_lineno": 35,
      "params": {
        "self": null,
        "builder": null,
        "filepath": null,
        "source_lines": null
      },
      "decorators": [],
      "docstring": "Initialize the instance with the given builder, filepath, source lines, and an empty context stack.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "e5203c6e20bf02e7644590a063ce5e5db0ab69b9ef4dfca433a71816b361bc47",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_visitor.py::__init__"
      ]
    },
    "src/system/tools/ast_visitor.py::visit_Call": {
      "name": "visit_Call",
      "qualname": "unassigned.visit_Call",
      "module": "ast_visitor",
      "filepath": "src/system/tools/ast_visitor.py",
      "lineno": 18,
      "end_lineno": 24,
      "params": {
        "self": null,
        "node": null
      },
      "decorators": [],
      "docstring": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "base_classes": [],
      "structural_hash": "6bd1e8e30a8e89ac8a9e78b12c02e5d78b2cf0b9187ff32da75aeedd1c8161af",
      "calls": [
        "add",
        "generic_visit",
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_visitor.py::visit_Call"
      ]
    },
    "src/system/tools/ast_visitor.py::ContextAwareVisitor": {
      "name": "ContextAwareVisitor",
      "qualname": "unassigned.ContextAwareVisitor",
      "module": "ast_visitor",
      "filepath": "src/system/tools/ast_visitor.py",
      "lineno": 27,
      "end_lineno": 67,
      "params": {},
      "decorators": [],
      "docstring": "A stateful AST visitor that understands nested class and function contexts.",
      "base_classes": [
        "NodeVisitor"
      ],
      "structural_hash": "b28d049bdc95acaee71cbe5ad02878514d81fd1e88ffc7a23724204684c5c3ef",
      "calls": [
        "_process_and_visit",
        "_process_symbol_node",
        "append",
        "generic_visit",
        "pop"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/ast_visitor.py::ContextAwareVisitor"
      ]
    },
    "src/system/tools/ast_visitor.py::_process_and_visit": {
      "name": "_process_and_visit",
      "qualname": "unassigned._process_and_visit",
      "module": "ast_visitor",
      "filepath": "src/system/tools/ast_visitor.py",
      "lineno": 37,
      "end_lineno": 55,
      "params": {
        "self": null,
        "node": null,
        "node_type": null
      },
      "decorators": [],
      "docstring": "Helper to process a symbol and manage the context stack.",
      "base_classes": [],
      "structural_hash": "72ed2d2e224dfe5a9879f157b463bde0bf9109eb7ccef5316baac6b310ae6c96",
      "calls": [
        "_process_symbol_node",
        "append",
        "generic_visit",
        "pop"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_visitor.py::_process_and_visit"
      ]
    },
    "src/system/tools/ast_visitor.py::visit_ClassDef": {
      "name": "visit_ClassDef",
      "qualname": "unassigned.visit_ClassDef",
      "module": "ast_visitor",
      "filepath": "src/system/tools/ast_visitor.py",
      "lineno": 57,
      "end_lineno": 59,
      "params": {
        "self": null,
        "node": null
      },
      "decorators": [],
      "docstring": "Processes a class definition node, and visits its children.",
      "base_classes": [],
      "structural_hash": "5fc309bc3b69e72b37ff19e6a7a79f9a377eae0dc1ec0f9e826863e744406929",
      "calls": [
        "_process_and_visit"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_visitor.py::visit_ClassDef"
      ]
    },
    "src/system/tools/ast_visitor.py::visit_FunctionDef": {
      "name": "visit_FunctionDef",
      "qualname": "unassigned.visit_FunctionDef",
      "module": "ast_visitor",
      "filepath": "src/system/tools/ast_visitor.py",
      "lineno": 61,
      "end_lineno": 63,
      "params": {
        "self": null,
        "node": null
      },
      "decorators": [],
      "docstring": "Processes a function definition node, and visits its children.",
      "base_classes": [],
      "structural_hash": "3f2d3b5171306dce35ba70a697fe9bc954cd498e4d514ee7488742bb2cf1905c",
      "calls": [
        "_process_and_visit"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_visitor.py::visit_FunctionDef"
      ]
    },
    "src/system/tools/ast_visitor.py::visit_AsyncFunctionDef": {
      "name": "visit_AsyncFunctionDef",
      "qualname": "unassigned.visit_AsyncFunctionDef",
      "module": "ast_visitor",
      "filepath": "src/system/tools/ast_visitor.py",
      "lineno": 65,
      "end_lineno": 67,
      "params": {
        "self": null,
        "node": null
      },
      "decorators": [],
      "docstring": "Processes an async function definition node, and visits its children.",
      "base_classes": [],
      "structural_hash": "ce568d79cf5bf2713454e3eb1f44137b0c2105b15ee76686ba9f48fcda3e23e2",
      "calls": [
        "_process_and_visit"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/ast_visitor.py::visit_AsyncFunctionDef"
      ]
    },
    "src/system/tools/change_log_updater.py::load_existing_log": {
      "name": "load_existing_log",
      "qualname": "unassigned.load_existing_log",
      "module": "change_log_updater",
      "filepath": "src/system/tools/change_log_updater.py",
      "lineno": 17,
      "end_lineno": 22,
      "params": {},
      "decorators": [],
      "docstring": "Loads the existing change log from disk or returns a new structure.",
      "base_classes": [],
      "structural_hash": "617e44205e9e392dcf047c13cf3fd9d88d9568ae09b5c487f92733eaf6167426",
      "calls": [
        "load_config"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/change_log_updater.py::load_existing_log"
      ]
    },
    "src/system/tools/change_log_updater.py::append_change_entry": {
      "name": "append_change_entry",
      "qualname": "unassigned.append_change_entry",
      "module": "change_log_updater",
      "filepath": "src/system/tools/change_log_updater.py",
      "lineno": 25,
      "end_lineno": 50,
      "params": {
        "task": null,
        "step": null,
        "modified_files": null,
        "score": null,
        "violations": null
      },
      "decorators": [],
      "docstring": "Appends a new, structured entry to the metacode change log.",
      "base_classes": [],
      "structural_hash": "810699914d469cb08496ca059f28f88fc261f95546655275a5821abcca68cdce",
      "calls": [
        "append",
        "dumps",
        "info",
        "isoformat",
        "load_existing_log",
        "mkdir",
        "utcnow",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/change_log_updater.py::append_change_entry"
      ]
    },
    "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder": {
      "name": "KnowledgeGraphBuilder",
      "qualname": "unassigned.KnowledgeGraphBuilder",
      "module": "codegraph_builder",
      "filepath": "src/system/tools/codegraph_builder.py",
      "lineno": 27,
      "end_lineno": 86,
      "params": {},
      "decorators": [],
      "docstring": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "base_classes": [],
      "structural_hash": "b246d912c35499ad9a6f10c2a493ef55b4c83586e3902da606c5d43efbf254c3",
      "calls": [
        "DomainMapper",
        "EntryPointDetector",
        "FileScanner",
        "PatternMatcher",
        "_load_patterns",
        "apply_patterns",
        "build_graph_data",
        "exists",
        "get",
        "get_cli_entry_points",
        "get_python_files",
        "info",
        "len",
        "load_config",
        "resolve",
        "scan_file",
        "warning"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
      ]
    },
    "src/system/tools/codegraph_builder.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "codegraph_builder",
      "filepath": "src/system/tools/codegraph_builder.py",
      "lineno": 30,
      "end_lineno": 50,
      "params": {
        "self": null,
        "root_path": null,
        "exclude_patterns": null
      },
      "decorators": [],
      "docstring": "Initializes the builder, loading patterns and project configuration.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "7d369f2cc373f6c02ecc31917ec58ce35e2099422e8b983c79c199e52bbbfb57",
      "calls": [
        "DomainMapper",
        "EntryPointDetector",
        "FileScanner",
        "PatternMatcher",
        "_load_patterns",
        "get_cli_entry_points",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/codegraph_builder.py::__init__"
      ]
    },
    "src/system/tools/codegraph_builder.py::_load_patterns": {
      "name": "_load_patterns",
      "qualname": "unassigned._load_patterns",
      "module": "codegraph_builder",
      "filepath": "src/system/tools/codegraph_builder.py",
      "lineno": 52,
      "end_lineno": 59,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Loads entry point detection patterns from the intent file.",
      "base_classes": [],
      "structural_hash": "466ea43bdd1390ce477bcb475a9f1107c736fc9d7337069c4c26e7cd7fb652f2",
      "calls": [
        "exists",
        "get",
        "load_config",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/codegraph_builder.py::_load_patterns"
      ]
    },
    "src/system/tools/codegraph_builder.py::build": {
      "name": "build",
      "qualname": "unassigned.build",
      "module": "codegraph_builder",
      "filepath": "src/system/tools/codegraph_builder.py",
      "lineno": 61,
      "end_lineno": 86,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Orchestrates the full knowledge graph generation process.",
      "base_classes": [],
      "structural_hash": "fa613bca8cedc5ec516a2b879e463e275d5396a0e972c966ee38db997d650162",
      "calls": [
        "apply_patterns",
        "build_graph_data",
        "get_python_files",
        "info",
        "len",
        "scan_file"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/codegraph_builder.py::build"
      ]
    },
    "src/system/tools/codegraph_builder.py::main": {
      "name": "main",
      "qualname": "unassigned.main",
      "module": "codegraph_builder",
      "filepath": "src/system/tools/codegraph_builder.py",
      "lineno": 89,
      "end_lineno": 112,
      "params": {},
      "decorators": [],
      "docstring": "CLI entry point to run the knowledge graph builder and save the output.",
      "base_classes": [],
      "structural_hash": "efbba822b1676d18e03265cdca26d5fcac7c79777abcb553f79ed046b7e42b05",
      "calls": [
        "KnowledgeGraphBuilder",
        "build",
        "cwd",
        "error",
        "find_project_root",
        "load_dotenv",
        "save_to_file",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/codegraph_builder.py::main"
      ]
    },
    "src/system/tools/docstring_adder.py::add_docstring_to_function_line_based": {
      "name": "add_docstring_to_function_line_based",
      "qualname": "unassigned.add_docstring_to_function_line_based",
      "module": "docstring_adder",
      "filepath": "src/system/tools/docstring_adder.py",
      "lineno": 39,
      "end_lineno": 66,
      "params": {
        "source_code": null,
        "line_number": null,
        "docstring": null
      },
      "decorators": [],
      "docstring": "Surgically inserts a docstring into source code using a line-based method.",
      "base_classes": [],
      "structural_hash": "056c0063bbadc526ef803cbfecba77ca674c291b23cd5807f84ffabde2894624",
      "calls": [
        "error",
        "insert",
        "join",
        "len",
        "lstrip",
        "replace",
        "splitlines",
        "strip",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/docstring_adder.py::add_docstring_to_function_line_based"
      ]
    },
    "src/system/tools/docstring_adder.py::generate_and_apply_docstring": {
      "name": "generate_and_apply_docstring",
      "qualname": "unassigned.generate_and_apply_docstring",
      "module": "docstring_adder",
      "filepath": "src/system/tools/docstring_adder.py",
      "lineno": 69,
      "end_lineno": 159,
      "params": {
        "target": null,
        "generator": null,
        "dry_run": null
      },
      "decorators": [],
      "docstring": "Generates, validates, and applies a docstring for a single symbol.",
      "base_classes": [],
      "structural_hash": "0e21817ea91aa2576fa37c72aa077d4748e0dad52fd5906d287641c4585f3494",
      "calls": [
        "add_docstring_to_function_line_based",
        "error",
        "exists",
        "get",
        "get_docstring",
        "info",
        "isinstance",
        "make_request_async",
        "next",
        "parse",
        "read_text",
        "secho",
        "str",
        "strip",
        "unparse",
        "validate_code",
        "walk",
        "warning",
        "write_text"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/system/tools/docstring_adder.py::generate_and_apply_docstring"
      ]
    },
    "src/system/tools/docstring_adder.py::_async_main": {
      "name": "_async_main",
      "qualname": "unassigned._async_main",
      "module": "docstring_adder",
      "filepath": "src/system/tools/docstring_adder.py",
      "lineno": 162,
      "end_lineno": 211,
      "params": {
        "dry_run": null
      },
      "decorators": [],
      "docstring": "The core asynchronous logic for finding and fixing docstrings.",
      "base_classes": [],
      "structural_hash": "1fd9ea967327de7f483a03c98bd7cb6d88d9d5b0e56e642a37a703c387ca0cbd",
      "calls": [
        "GeneratorClient",
        "KnowledgeGraphBuilder",
        "Semaphore",
        "as_completed",
        "build",
        "dumps",
        "error",
        "generate_and_apply_docstring",
        "get",
        "info",
        "len",
        "track",
        "values",
        "worker",
        "write_text"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/system/tools/docstring_adder.py::_async_main"
      ]
    },
    "src/system/tools/docstring_adder.py::fix_missing_docstrings": {
      "name": "fix_missing_docstrings",
      "qualname": "unassigned.fix_missing_docstrings",
      "module": "docstring_adder",
      "filepath": "src/system/tools/docstring_adder.py",
      "lineno": 215,
      "end_lineno": 234,
      "params": {
        "dry_run": null
      },
      "decorators": [],
      "docstring": "Finds all symbols with missing docstrings and uses an LLM to generate and apply them, with validation.",
      "base_classes": [],
      "structural_hash": "f91473198c85429e52389f565707d6ea841f56ce73c4b305b8848044c8b98cad",
      "calls": [
        "KnowledgeGraphBuilder",
        "Option",
        "_async_main",
        "build",
        "dumps",
        "error",
        "info",
        "run",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/docstring_adder.py::fix_missing_docstrings"
      ]
    },
    "src/system/tools/docstring_adder.py::worker": {
      "name": "worker",
      "qualname": "unassigned.worker",
      "module": "docstring_adder",
      "filepath": "src/system/tools/docstring_adder.py",
      "lineno": 198,
      "end_lineno": 201,
      "params": {
        "target": null
      },
      "decorators": [],
      "docstring": "Processes a target by generating and applying a docstring while respecting a semaphore limit.",
      "base_classes": [],
      "structural_hash": "bf227975be6db77562124c68865894e9d5ac82e03cb2cacf17189d59183d48df",
      "calls": [
        "generate_and_apply_docstring"
      ],
      "type": "AsyncFunctionDef",
      "tags": [
        "src/system/tools/docstring_adder.py::worker"
      ]
    },
    "src/system/tools/docstring_adder.py::track": {
      "name": "track",
      "qualname": "unassigned.track",
      "module": "docstring_adder",
      "filepath": "src/system/tools/docstring_adder.py",
      "lineno": 25,
      "end_lineno": 29,
      "params": {
        "iterable": null,
        "description": null
      },
      "decorators": [],
      "docstring": "Iterate over an iterable, optionally with a description (no-op, yields items unchanged).",
      "base_classes": [],
      "structural_hash": "60118f7bb3c1b4679b6aa618665cb14795875cb58a3028d6aebbb3876a3dadd6",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/docstring_adder.py::track"
      ]
    },
    "src/system/tools/domain_mapper.py::DomainMapper": {
      "name": "DomainMapper",
      "qualname": "unassigned.DomainMapper",
      "module": "domain_mapper",
      "filepath": "src/system/tools/domain_mapper.py",
      "lineno": 14,
      "end_lineno": 129,
      "params": {},
      "decorators": [],
      "docstring": "Maps file paths to their corresponding domains based on directory structure.",
      "base_classes": [],
      "structural_hash": "510ba69edc168b218428190b11de3b5035d8f3747b34d9ec888985d1887adbbf",
      "calls": [
        "Path",
        "_load_domain_map",
        "any",
        "debug",
        "get",
        "is_absolute",
        "is_relative_to",
        "isinstance",
        "items",
        "keys",
        "len",
        "load_config",
        "lower",
        "relative_to",
        "resolve",
        "sorted",
        "startswith",
        "str",
        "type",
        "warning"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/domain_mapper.py::DomainMapper"
      ]
    },
    "src/system/tools/domain_mapper.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "domain_mapper",
      "filepath": "src/system/tools/domain_mapper.py",
      "lineno": 17,
      "end_lineno": 29,
      "params": {
        "self": null,
        "root_path": null
      },
      "decorators": [],
      "docstring": "Initialize the domain mapper with the root path of the project.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "22932f1332524723e8ee5d239c7e834816be268900ad98a2b7112060297eb9c2",
      "calls": [
        "Path",
        "_load_domain_map",
        "debug",
        "keys",
        "len",
        "resolve",
        "sorted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/domain_mapper.py::__init__"
      ]
    },
    "src/system/tools/domain_mapper.py::_load_domain_map": {
      "name": "_load_domain_map",
      "qualname": "unassigned._load_domain_map",
      "module": "domain_mapper",
      "filepath": "src/system/tools/domain_mapper.py",
      "lineno": 31,
      "end_lineno": 56,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Load domain mappings from source_structure.yaml.",
      "base_classes": [],
      "structural_hash": "caf8f93f87dfac13f45344b57ca58774350860b4c5c8412c1bd1aedf214de0ff",
      "calls": [
        "Path",
        "debug",
        "get",
        "isinstance",
        "len",
        "load_config",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/domain_mapper.py::_load_domain_map"
      ]
    },
    "src/system/tools/domain_mapper.py::determine_domain": {
      "name": "determine_domain",
      "qualname": "unassigned.determine_domain",
      "module": "domain_mapper",
      "filepath": "src/system/tools/domain_mapper.py",
      "lineno": 58,
      "end_lineno": 112,
      "params": {
        "self": null,
        "file_path_relative": null
      },
      "decorators": [],
      "docstring": "Determine the domain for a file given its relative path from root.",
      "base_classes": [],
      "structural_hash": "3a4d0be5b9750b4368b1ffec395c4346cb376982d754d815a2eeb01a7f00ca77",
      "calls": [
        "Path",
        "debug",
        "is_absolute",
        "is_relative_to",
        "isinstance",
        "relative_to",
        "startswith",
        "str",
        "type",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/domain_mapper.py::determine_domain"
      ]
    },
    "src/system/tools/domain_mapper.py::infer_agent_from_path": {
      "name": "infer_agent_from_path",
      "qualname": "unassigned.infer_agent_from_path",
      "module": "domain_mapper",
      "filepath": "src/system/tools/domain_mapper.py",
      "lineno": 114,
      "end_lineno": 129,
      "params": {
        "self": null,
        "relative_path": null
      },
      "decorators": [],
      "docstring": "Infer the agent type from the given relative path by checking for predefined keywords, returning the corresponding agent string or 'generic_agent' if no match is found.",
      "base_classes": [],
      "structural_hash": "c8e455f64f297ca1fe33d7ee15ebe0dc0f2463eddbc143c12c8cfc80c0c93bce",
      "calls": [
        "any",
        "items",
        "lower",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/domain_mapper.py::infer_agent_from_path"
      ]
    },
    "src/system/tools/entry_point_detector.py::EntryPointDetector": {
      "name": "EntryPointDetector",
      "qualname": "unassigned.EntryPointDetector",
      "module": "entry_point_detector",
      "filepath": "src/system/tools/entry_point_detector.py",
      "lineno": 17,
      "end_lineno": 76,
      "params": {},
      "decorators": [],
      "docstring": "Detects various types of entry points in Python code.",
      "base_classes": [],
      "structural_hash": "3f4b6803d48d01d1485f5e53d2907317a60c4e2cba54ab27f91aa882dd138e59",
      "calls": [
        "FunctionCallVisitor",
        "_is_fastapi_route_decorator",
        "_load_patterns",
        "exists",
        "get",
        "is_fastapi_assignment",
        "is_main_block",
        "isinstance",
        "load_config",
        "set",
        "update",
        "visit",
        "walk",
        "warning"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/entry_point_detector.py::EntryPointDetector"
      ]
    },
    "src/system/tools/entry_point_detector.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "entry_point_detector",
      "filepath": "src/system/tools/entry_point_detector.py",
      "lineno": 20,
      "end_lineno": 25,
      "params": {
        "self": null,
        "root_path": null,
        "cli_entry_points": null
      },
      "decorators": [],
      "docstring": "Initialize the instance with root path, CLI entry points, and load patterns.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "d730ae4468ea71120cf99ca761e4c5bf4f5802a735c665b816ad154f51d046c8",
      "calls": [
        "_load_patterns"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/entry_point_detector.py::__init__"
      ]
    },
    "src/system/tools/entry_point_detector.py::_load_patterns": {
      "name": "_load_patterns",
      "qualname": "unassigned._load_patterns",
      "module": "entry_point_detector",
      "filepath": "src/system/tools/entry_point_detector.py",
      "lineno": 27,
      "end_lineno": 34,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Loads entry point detection patterns from the intent file.",
      "base_classes": [],
      "structural_hash": "c17bede7a040dbd9e19d5ebbe55cbdddcb651d6ff36fd77b20826d2db0f62044",
      "calls": [
        "exists",
        "get",
        "load_config",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/entry_point_detector.py::_load_patterns"
      ]
    },
    "src/system/tools/entry_point_detector.py::detect_in_tree": {
      "name": "detect_in_tree",
      "qualname": "unassigned.detect_in_tree",
      "module": "entry_point_detector",
      "filepath": "src/system/tools/entry_point_detector.py",
      "lineno": 36,
      "end_lineno": 48,
      "params": {
        "self": null,
        "tree": null
      },
      "decorators": [],
      "docstring": "Detect entry points in an AST tree and update internal state.",
      "base_classes": [],
      "structural_hash": "633ba0172b6b1525bb0c11c4b1a0a44e81fc24e3135443aba4d701e809ae50fb",
      "calls": [
        "FunctionCallVisitor",
        "is_fastapi_assignment",
        "is_main_block",
        "set",
        "update",
        "visit",
        "walk"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/entry_point_detector.py::detect_in_tree"
      ]
    },
    "src/system/tools/entry_point_detector.py::_is_fastapi_route_decorator": {
      "name": "_is_fastapi_route_decorator",
      "qualname": "unassigned._is_fastapi_route_decorator",
      "module": "entry_point_detector",
      "filepath": "src/system/tools/entry_point_detector.py",
      "lineno": 50,
      "end_lineno": 57,
      "params": {
        "self": null,
        "decorator": null
      },
      "decorators": [],
      "docstring": "Check if decorator is a FastAPI route decorator.",
      "base_classes": [],
      "structural_hash": "0baa596d3a2aec7ccaba8e6924d38fa0c576bace3c40669bb13de8f04d97cdf6",
      "calls": [
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/entry_point_detector.py::_is_fastapi_route_decorator"
      ]
    },
    "src/system/tools/entry_point_detector.py::get_entry_point_type": {
      "name": "get_entry_point_type",
      "qualname": "unassigned.get_entry_point_type",
      "module": "entry_point_detector",
      "filepath": "src/system/tools/entry_point_detector.py",
      "lineno": 59,
      "end_lineno": 76,
      "params": {
        "self": null,
        "node": null
      },
      "decorators": [],
      "docstring": "Identifies decorator or CLI-based entry points for a function.",
      "base_classes": [],
      "structural_hash": "6556fc7a82812ea33dd452d67ab173f09bab3a076fe3f02cb4688d836ebabd3c",
      "calls": [
        "_is_fastapi_route_decorator",
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/entry_point_detector.py::get_entry_point_type"
      ]
    },
    "src/system/tools/file_scanner.py::FileScanner": {
      "name": "FileScanner",
      "qualname": "unassigned.FileScanner",
      "module": "file_scanner",
      "filepath": "src/system/tools/file_scanner.py",
      "lineno": 23,
      "end_lineno": 122,
      "params": {},
      "decorators": [],
      "docstring": "Scans Python files and extracts symbol information.",
      "base_classes": [],
      "structural_hash": "a7fd06f7e2b87345cf904296c58ef17d9cd2275f1478194d62e2f3777e598fa2",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "as_posix",
        "calculate_structural_hash",
        "detect_docstring",
        "detect_in_tree",
        "determine_domain",
        "error",
        "extract_base_classes",
        "hasattr",
        "isinstance",
        "parse",
        "process_symbol_node",
        "read_text",
        "relative_to",
        "splitlines",
        "str",
        "unparse",
        "update",
        "visit",
        "walk"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/file_scanner.py::FileScanner"
      ]
    },
    "src/system/tools/file_scanner.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "file_scanner",
      "filepath": "src/system/tools/file_scanner.py",
      "lineno": 26,
      "end_lineno": 32,
      "params": {
        "self": null,
        "domain_mapper": null,
        "entry_point_detector": null
      },
      "decorators": [],
      "docstring": "Initializes the scanner with its required helper components.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "a82109787ae93f804b85ff7f0ecff19c7dcd6a2ad0d40f2732d5c656bb547c36",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/file_scanner.py::__init__"
      ]
    },
    "src/system/tools/file_scanner.py::scan_file": {
      "name": "scan_file",
      "qualname": "unassigned.scan_file",
      "module": "file_scanner",
      "filepath": "src/system/tools/file_scanner.py",
      "lineno": 34,
      "end_lineno": 59,
      "params": {
        "self": null,
        "filepath": null
      },
      "decorators": [],
      "docstring": "Scans a single Python file, parsing its AST to extract all symbols.",
      "base_classes": [],
      "structural_hash": "bf9837da78b1262972e4462d7b5ef27aefebd01b1c4971a59b99e002ea91abe8",
      "calls": [
        "detect_in_tree",
        "error",
        "isinstance",
        "parse",
        "process_symbol_node",
        "read_text",
        "splitlines",
        "str",
        "update",
        "walk"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/file_scanner.py::scan_file"
      ]
    },
    "src/system/tools/file_scanner.py::process_symbol_node": {
      "name": "process_symbol_node",
      "qualname": "unassigned.process_symbol_node",
      "module": "file_scanner",
      "filepath": "src/system/tools/file_scanner.py",
      "lineno": 61,
      "end_lineno": 122,
      "params": {
        "self": null,
        "node": null,
        "filepath": null,
        "source_lines": null,
        "parent_key": null
      },
      "decorators": [],
      "docstring": "Extracts and stores metadata from a single function or class AST node.",
      "base_classes": [],
      "structural_hash": "95f6a7953c8c5f0d35be39acc56754227ec013a1472a896985eebb0c9bfa3253",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "as_posix",
        "calculate_structural_hash",
        "detect_docstring",
        "determine_domain",
        "extract_base_classes",
        "hasattr",
        "isinstance",
        "process_symbol_node",
        "relative_to",
        "unparse",
        "visit"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/file_scanner.py::process_symbol_node"
      ]
    },
    "src/system/tools/graph_serializer.py::GraphSerializer": {
      "name": "GraphSerializer",
      "qualname": "unassigned.GraphSerializer",
      "module": "graph_serializer",
      "filepath": "src/system/tools/graph_serializer.py",
      "lineno": 19,
      "end_lineno": 67,
      "params": {},
      "decorators": [],
      "docstring": "Handles serialization of knowledge graph data.",
      "base_classes": [],
      "structural_hash": "1a4f84474c83f18c42d39a152c35c6c610e365faa18bb1bd6bf341d03848fb28",
      "calls": [
        "FileLock",
        "asdict",
        "dumps",
        "info",
        "isoformat",
        "items",
        "len",
        "list",
        "mkdir",
        "now",
        "serialize_functions",
        "sorted",
        "str",
        "values",
        "write_text"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/graph_serializer.py::GraphSerializer"
      ]
    },
    "src/system/tools/graph_serializer.py::serialize_functions": {
      "name": "serialize_functions",
      "qualname": "unassigned.serialize_functions",
      "module": "graph_serializer",
      "filepath": "src/system/tools/graph_serializer.py",
      "lineno": 23,
      "end_lineno": 36,
      "params": {
        "functions": null
      },
      "decorators": [
        "staticmethod"
      ],
      "docstring": "Convert FunctionInfo objects to serializable dictionaries.",
      "base_classes": [],
      "structural_hash": "fb3e1081c1da8cee1cad99389b6926fb51e4477765ee8d241ae132ee9585ddb8",
      "calls": [
        "asdict",
        "items",
        "list",
        "sorted",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/graph_serializer.py::serialize_functions"
      ]
    },
    "src/system/tools/graph_serializer.py::build_graph_data": {
      "name": "build_graph_data",
      "qualname": "unassigned.build_graph_data",
      "module": "graph_serializer",
      "filepath": "src/system/tools/graph_serializer.py",
      "lineno": 39,
      "end_lineno": 53,
      "params": {
        "functions": null,
        "files_scanned": null
      },
      "decorators": [
        "staticmethod"
      ],
      "docstring": "Build the complete knowledge graph data structure.",
      "base_classes": [],
      "structural_hash": "8ec4ad74e865ef0686589880d5b8d751f12804aa620d86e51c0105498bf136b9",
      "calls": [
        "isoformat",
        "len",
        "now",
        "serialize_functions"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/graph_serializer.py::build_graph_data"
      ]
    },
    "src/system/tools/graph_serializer.py::save_to_file": {
      "name": "save_to_file",
      "qualname": "unassigned.save_to_file",
      "module": "graph_serializer",
      "filepath": "src/system/tools/graph_serializer.py",
      "lineno": 56,
      "end_lineno": 67,
      "params": {
        "graph_data": null,
        "output_path": null
      },
      "decorators": [
        "staticmethod"
      ],
      "docstring": "Save the knowledge graph to a JSON file with file locking.",
      "base_classes": [],
      "structural_hash": "04f11c853873d73a33f15630a38cc20d31a92b52e793cce87e54172fcd50079d",
      "calls": [
        "FileLock",
        "dumps",
        "info",
        "mkdir",
        "str",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/graph_serializer.py::save_to_file"
      ]
    },
    "src/system/tools/intent_guard_runner.py::find_repo_root": {
      "name": "find_repo_root",
      "qualname": "unassigned.find_repo_root",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 54,
      "end_lineno": 59,
      "params": {
        "start": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "055385f878a6bdc3efe080511b236dd1c02411b1ade7dfba9158d3a9f88f6de6",
      "calls": [
        "Path",
        "cwd",
        "exists",
        "list",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::find_repo_root"
      ]
    },
    "src/system/tools/intent_guard_runner.py::Domain": {
      "name": "Domain",
      "qualname": "unassigned.Domain",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 70,
      "end_lineno": 73,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "base_classes": [],
      "structural_hash": "995d0a60e473b08933ad27297a63995a0801d1d2bcef268d977e30180378a492",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::Domain"
      ]
    },
    "src/system/tools/intent_guard_runner.py::ImportEdge": {
      "name": "ImportEdge",
      "qualname": "unassigned.ImportEdge",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 77,
      "end_lineno": 82,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "base_classes": [],
      "structural_hash": "23e4c6538dae2fe2e44a92e5114c5c1495672dcde75f1a5db1204b6283d936e9",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::ImportEdge"
      ]
    },
    "src/system/tools/intent_guard_runner.py::load_yaml": {
      "name": "load_yaml",
      "qualname": "unassigned.load_yaml",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 88,
      "end_lineno": 94,
      "params": {
        "path": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "cf3104febed43f9744a3132e446df063c56b9c2d23cfa34ce4fea67fc154acba",
      "calls": [
        "exists",
        "fail",
        "read_text",
        "rel",
        "safe_load"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::load_yaml"
      ]
    },
    "src/system/tools/intent_guard_runner.py::rel": {
      "name": "rel",
      "qualname": "unassigned.rel",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 97,
      "end_lineno": 101,
      "params": {
        "p": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "5227def6c08e2c6e3de639317b2b95117333e870d36ecf8c8a56f33f621ebeb7",
      "calls": [
        "relative_to",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::rel"
      ]
    },
    "src/system/tools/intent_guard_runner.py::info": {
      "name": "info",
      "qualname": "unassigned.info",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 104,
      "end_lineno": 108,
      "params": {
        "msg": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "6051b45b16d2cd5fcb6dc27bd6b45269375f9602b60294c8b90566a384d944d3",
      "calls": [
        "Console",
        "print"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::info"
      ]
    },
    "src/system/tools/intent_guard_runner.py::warn": {
      "name": "warn",
      "qualname": "unassigned.warn",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 111,
      "end_lineno": 115,
      "params": {
        "msg": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "8f5846d2006d30f6d499ab2799f9d9f8ef696fdc9bb3ecf68d0088503a47d348",
      "calls": [
        "Console",
        "print"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::warn"
      ]
    },
    "src/system/tools/intent_guard_runner.py::fail": {
      "name": "fail",
      "qualname": "unassigned.fail",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 118,
      "end_lineno": 123,
      "params": {
        "msg": null,
        "code": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "33175efafd70422bc23e5d152d48e16eae6dc79a0ba892b20707242b2f0f6011",
      "calls": [
        "Console",
        "exit",
        "print"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::fail"
      ]
    },
    "src/system/tools/intent_guard_runner.py::compile_regex_list": {
      "name": "compile_regex_list",
      "qualname": "unassigned.compile_regex_list",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 126,
      "end_lineno": 133,
      "params": {
        "patterns": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "591774070afe06c9272c4406a6e73e838d2cc68b0225dbb47f20054611bd9111",
      "calls": [
        "append",
        "compile",
        "warn"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::compile_regex_list"
      ]
    },
    "src/system/tools/intent_guard_runner.py::path_matches_any": {
      "name": "path_matches_any",
      "qualname": "unassigned.path_matches_any",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 136,
      "end_lineno": 137,
      "params": {
        "path": null,
        "patterns": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "1d930fc54b39e0972246342d495c53dbcdddf2b665f3468fda3b899fa0d67b50",
      "calls": [
        "any",
        "search"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::path_matches_any"
      ]
    },
    "src/system/tools/intent_guard_runner.py::is_relative_import": {
      "name": "is_relative_import",
      "qualname": "unassigned.is_relative_import",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 140,
      "end_lineno": 142,
      "params": {
        "node": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "3edc2ceae9c31aa3b2ed0296237e13e0232d3490c505b0986df6d5a076b8b3bb",
      "calls": [
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::is_relative_import"
      ]
    },
    "src/system/tools/intent_guard_runner.py::load_paths_from_meta": {
      "name": "load_paths_from_meta",
      "qualname": "unassigned.load_paths_from_meta",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 148,
      "end_lineno": 156,
      "params": {},
      "decorators": [],
      "base_classes": [],
      "structural_hash": "f92074164ca76be6c8d91d201985ad3f76b8dec0babf2d60797fa3652c253a8c",
      "calls": [
        "get",
        "load_yaml"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::load_paths_from_meta"
      ]
    },
    "src/system/tools/intent_guard_runner.py::load_domains": {
      "name": "load_domains",
      "qualname": "unassigned.load_domains",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 159,
      "end_lineno": 168,
      "params": {
        "source_map_path": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "ce69e95d0824d3fb51c1ec5a3b91780acb9a48bb64366eb0556e5ddb447cbdd7",
      "calls": [
        "Domain",
        "bool",
        "get",
        "load_yaml",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::load_domains"
      ]
    },
    "src/system/tools/intent_guard_runner.py::discover_py_files": {
      "name": "discover_py_files",
      "qualname": "unassigned.discover_py_files",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 174,
      "end_lineno": 190,
      "params": {
        "domains": null,
        "ignored": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "a8aca7e698f070b2aa3a751338c70680c10545095214bbb398dc3de2269f45c8",
      "calls": [
        "append",
        "exists",
        "path_matches_any",
        "rel",
        "rglob",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::discover_py_files"
      ]
    },
    "src/system/tools/intent_guard_runner.py::top_level_name": {
      "name": "top_level_name",
      "qualname": "unassigned.top_level_name",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 193,
      "end_lineno": 194,
      "params": {
        "mod": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "7bc8831907be4133013cd20dace77d10580c31d4df2aa85f2df0bf38576b0c30",
      "calls": [
        "split"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::top_level_name"
      ]
    },
    "src/system/tools/intent_guard_runner.py::resolve_domain_for_module": {
      "name": "resolve_domain_for_module",
      "qualname": "unassigned.resolve_domain_for_module",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 197,
      "end_lineno": 201,
      "params": {
        "mod": null,
        "domains": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "6ebc65e678d6cb5e2d250b64760a476470a0c7d7d41b5a19e99d1009ce148267",
      "calls": [
        "top_level_name"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::resolve_domain_for_module"
      ]
    },
    "src/system/tools/intent_guard_runner.py::scan_file_imports": {
      "name": "scan_file_imports",
      "qualname": "unassigned.scan_file_imports",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 204,
      "end_lineno": 221,
      "params": {
        "path": null
      },
      "decorators": [],
      "docstring": "Return list of (imported_module, lineno). Only absolute imports are returned.",
      "base_classes": [],
      "structural_hash": "012ba77da53b9dcde5fc37e22f15d2593f152692452dc79c8f0d9437640d6d02",
      "calls": [
        "append",
        "getattr",
        "is_relative_import",
        "isinstance",
        "parse",
        "read_text",
        "rel",
        "str",
        "walk",
        "warn"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::scan_file_imports"
      ]
    },
    "src/system/tools/intent_guard_runner.py::domain_for_file": {
      "name": "domain_for_file",
      "qualname": "unassigned.domain_for_file",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 224,
      "end_lineno": 236,
      "params": {
        "path": null,
        "domains": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "7ea8193da53d4a1ba92d90ccd7fa67bc5f8717109d03b881aab73e68f8492b5a",
      "calls": [
        "is_relative_to",
        "items",
        "relative_to"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::domain_for_file"
      ]
    },
    "src/system/tools/intent_guard_runner.py::collect_edges": {
      "name": "collect_edges",
      "qualname": "unassigned.collect_edges",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 239,
      "end_lineno": 258,
      "params": {
        "domains": null,
        "ignored": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "1583a97357a2b9ff3ad0eeb972e4623fed3d09845ce94b0d512b7d75b8af43c3",
      "calls": [
        "ImportEdge",
        "append",
        "discover_py_files",
        "domain_for_file",
        "resolve_domain_for_module",
        "scan_file_imports"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::collect_edges"
      ]
    },
    "src/system/tools/intent_guard_runner.py::Violation": {
      "name": "Violation",
      "qualname": "unassigned.Violation",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 265,
      "end_lineno": 273,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "base_classes": [],
      "structural_hash": "dd9b48ceba08b28fa9f621d3ed415f11c62a03e1eec4c9fb4848650b22cb9917",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::Violation"
      ]
    },
    "src/system/tools/intent_guard_runner.py::enforce_policy": {
      "name": "enforce_policy",
      "qualname": "unassigned.enforce_policy",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 276,
      "end_lineno": 420,
      "params": {
        "policy": null,
        "domains": null,
        "edges": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "b8d8ceaa00d6875284863d756809fe3a77e8ca48259750fe8bdbe3abeace5e12",
      "calls": [
        "Violation",
        "add",
        "any",
        "append",
        "bool",
        "compile_regex_list",
        "find_domain_cycles",
        "get",
        "join",
        "lower",
        "path_matches_any",
        "rel",
        "search",
        "set",
        "setdefault",
        "startswith",
        "top_level_name",
        "tuple"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::enforce_policy"
      ]
    },
    "src/system/tools/intent_guard_runner.py::find_domain_cycles": {
      "name": "find_domain_cycles",
      "qualname": "unassigned.find_domain_cycles",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 423,
      "end_lineno": 452,
      "params": {
        "graph": null
      },
      "decorators": [],
      "docstring": "Return list of cycles found in a directed graph (domain-level).",
      "base_classes": [],
      "structural_hash": "edf97e75c37e6a8e6358c9bb4da0a3475178c8d45c97189145f428b165dbcaa4",
      "calls": [
        "add",
        "append",
        "copy",
        "dfs",
        "get",
        "index",
        "keys",
        "list",
        "pop",
        "remove",
        "set"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::find_domain_cycles"
      ]
    },
    "src/system/tools/intent_guard_runner.py::print_report": {
      "name": "print_report",
      "qualname": "unassigned.print_report",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 458,
      "end_lineno": 492,
      "params": {
        "violations": null,
        "fmt": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "ecac3322cba2208aa02f324aa3037258954fb9605d8a2de6b7dbef7b79348c0e",
      "calls": [
        "Console",
        "Table",
        "add_column",
        "add_row",
        "dumps",
        "print"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::print_report"
      ]
    },
    "src/system/tools/intent_guard_runner.py::parse_args": {
      "name": "parse_args",
      "qualname": "unassigned.parse_args",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 498,
      "end_lineno": 518,
      "params": {
        "argv": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "30f87e22dbbcc121e5bd0c1ba0fd60018942c9c16617963c7bbc07a488a801ea",
      "calls": [
        "fail",
        "split",
        "startswith",
        "strip"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::parse_args"
      ]
    },
    "src/system/tools/intent_guard_runner.py::main": {
      "name": "main",
      "qualname": "unassigned.main",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 521,
      "end_lineno": 547,
      "params": {
        "argv": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "d14b1d729b21db747d95820914201864fba090db6b35f3686d87c835db04ba8a",
      "calls": [
        "collect_edges",
        "compile_regex_list",
        "enforce_policy",
        "exit",
        "get",
        "load_domains",
        "load_paths_from_meta",
        "load_yaml",
        "lower",
        "parse_args",
        "print_report"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::main"
      ]
    },
    "src/system/tools/intent_guard_runner.py::dfs": {
      "name": "dfs",
      "qualname": "unassigned.dfs",
      "module": "intent_guard_runner",
      "filepath": "src/system/tools/intent_guard_runner.py",
      "lineno": 430,
      "end_lineno": 447,
      "params": {
        "node": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "da79601a7562ba976b7f26f3cba9702d6f0e5ae9db0e8930a9c916820991dcef",
      "calls": [
        "add",
        "append",
        "copy",
        "dfs",
        "get",
        "index",
        "pop",
        "remove",
        "set"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/intent_guard_runner.py::dfs"
      ]
    },
    "src/system/tools/manifest_migrator.py::find_repo_root": {
      "name": "find_repo_root",
      "qualname": "unassigned.find_repo_root",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 54,
      "end_lineno": 61,
      "params": {
        "start": null
      },
      "decorators": [],
      "docstring": "Walk upward until a folder containing .intent/ is found.",
      "base_classes": [],
      "structural_hash": "055385f878a6bdc3efe080511b236dd1c02411b1ade7dfba9158d3a9f88f6de6",
      "calls": [
        "Path",
        "cwd",
        "exists",
        "list",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::find_repo_root"
      ]
    },
    "src/system/tools/manifest_migrator.py::Paths": {
      "name": "Paths",
      "qualname": "unassigned.Paths",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 75,
      "end_lineno": 79,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "base_classes": [],
      "structural_hash": "ea2169d4098f5bac62775932e38d876f4653c8766ec4f8efe774c9c1696ec104",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::Paths"
      ]
    },
    "src/system/tools/manifest_migrator.py::load_meta": {
      "name": "load_meta",
      "qualname": "unassigned.load_meta",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 82,
      "end_lineno": 108,
      "params": {},
      "decorators": [],
      "base_classes": [],
      "structural_hash": "09c4463cea12811cc259a128f206f203866a8d81cb899a9fd867f9acecd576ac",
      "calls": [
        "exists",
        "fail",
        "get",
        "read_text",
        "rel",
        "safe_load"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::load_meta"
      ]
    },
    "src/system/tools/manifest_migrator.py::load_paths": {
      "name": "load_paths",
      "qualname": "unassigned.load_paths",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 111,
      "end_lineno": 125,
      "params": {},
      "decorators": [],
      "base_classes": [],
      "structural_hash": "976f45583d47cc0a8bb63e7890c8ebd2a2b232a2aaab3848011f14f7441a4624",
      "calls": [
        "Path",
        "Paths",
        "exists",
        "fail",
        "get",
        "load_meta",
        "mkdir",
        "rel"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::load_paths"
      ]
    },
    "src/system/tools/manifest_migrator.py::DomainDef": {
      "name": "DomainDef",
      "qualname": "unassigned.DomainDef",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 132,
      "end_lineno": 136,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "base_classes": [],
      "structural_hash": "ac9e48d51db7598a672a06417fd26395abc2ea435bf721ac1e7622b9d829a2f1",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::DomainDef"
      ]
    },
    "src/system/tools/manifest_migrator.py::load_domains": {
      "name": "load_domains",
      "qualname": "unassigned.load_domains",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 139,
      "end_lineno": 155,
      "params": {
        "source_structure_path": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "53a38fe38bb55014868418003c0506e2fc5d703a5ba84668e084953ca607989b",
      "calls": [
        "DomainDef",
        "append",
        "bool",
        "get",
        "read_text",
        "safe_load",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::load_domains"
      ]
    },
    "src/system/tools/manifest_migrator.py::schema_validator": {
      "name": "schema_validator",
      "qualname": "unassigned.schema_validator",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 161,
      "end_lineno": 163,
      "params": {
        "schema_path": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "e9f99793b6ebfd1b2ecdb328c103439db92ca50003ba975c963c898a661842f9",
      "calls": [
        "Draft7Validator",
        "loads",
        "read_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::schema_validator"
      ]
    },
    "src/system/tools/manifest_migrator.py::manifest_path_for": {
      "name": "manifest_path_for",
      "qualname": "unassigned.manifest_path_for",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 166,
      "end_lineno": 167,
      "params": {
        "domain": null,
        "manifests_dir": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "4ac4ecc1b84cc3ff14958ba8ccc210b521d36c064eb7f141580ca95bf8b6c29f",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::manifest_path_for"
      ]
    },
    "src/system/tools/manifest_migrator.py::read_manifest": {
      "name": "read_manifest",
      "qualname": "unassigned.read_manifest",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 170,
      "end_lineno": 174,
      "params": {
        "path": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "849a60ba6ec69a16fc66dcbd902c64f2f537d446890b1e94191f02e02f706857",
      "calls": [
        "fail",
        "loads",
        "read_text",
        "rel"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::read_manifest"
      ]
    },
    "src/system/tools/manifest_migrator.py::write_manifest": {
      "name": "write_manifest",
      "qualname": "unassigned.write_manifest",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 177,
      "end_lineno": 179,
      "params": {
        "path": null,
        "manifest": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "fdfc7ca910b074fe63e93b1e7726b231f4817447dedaf4f00f368a7f865661ae",
      "calls": [
        "dumps",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::write_manifest"
      ]
    },
    "src/system/tools/manifest_migrator.py::rel": {
      "name": "rel",
      "qualname": "unassigned.rel",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 185,
      "end_lineno": 189,
      "params": {
        "p": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "154f46568360862b8e4dc5634bcd8a371d40e13b1cc434285df3fbd5f7cfcf17",
      "calls": [
        "relative_to",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::rel"
      ]
    },
    "src/system/tools/manifest_migrator.py::info": {
      "name": "info",
      "qualname": "unassigned.info",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 192,
      "end_lineno": 196,
      "params": {
        "msg": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "c4b9ab6c2a28f2c783e17d034710566aa588bd753eb0c4fd4e10270cea903051",
      "calls": [
        "print"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::info"
      ]
    },
    "src/system/tools/manifest_migrator.py::warn": {
      "name": "warn",
      "qualname": "unassigned.warn",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 199,
      "end_lineno": 203,
      "params": {
        "msg": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "4405907e87012211f098c0b92b27ec0bf6e1497a2880a7929b53c75ff4ee4011",
      "calls": [
        "print"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::warn"
      ]
    },
    "src/system/tools/manifest_migrator.py::fail": {
      "name": "fail",
      "qualname": "unassigned.fail",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 206,
      "end_lineno": 211,
      "params": {
        "msg": null,
        "code": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "020ab7f4c0bfefe7e7bdd435f155eb2c8c839954b3e1fe88ce0d351c427fdae9",
      "calls": [
        "exit",
        "print"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::fail"
      ]
    },
    "src/system/tools/manifest_migrator.py::validate_manifests": {
      "name": "validate_manifests",
      "qualname": "unassigned.validate_manifests",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 217,
      "end_lineno": 251,
      "params": {
        "paths": null,
        "fail_on_error": null
      },
      "decorators": [],
      "docstring": "Validate all manifests against the schema. Returns (#errors, error_messages).",
      "base_classes": [],
      "structural_hash": "7dead729e1040412198508b92adf5c0c4da64e12b5e531bd537a3f87de10fe39",
      "calls": [
        "append",
        "exists",
        "fail",
        "info",
        "iter_errors",
        "join",
        "len",
        "load_domains",
        "manifest_path_for",
        "print",
        "read_manifest",
        "rel",
        "schema_validator",
        "sorted",
        "str",
        "warn"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::validate_manifests"
      ]
    },
    "src/system/tools/manifest_migrator.py::scaffold_missing": {
      "name": "scaffold_missing",
      "qualname": "unassigned.scaffold_missing",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 254,
      "end_lineno": 278,
      "params": {
        "paths": null
      },
      "decorators": [],
      "docstring": "Create minimal manifests for domains that don't have one yet.",
      "base_classes": [],
      "structural_hash": "d22593b98da816141377dcd27c207c2c30eb5d22f7a88b7f936b5681644f5a36",
      "calls": [
        "append",
        "exists",
        "info",
        "load_domains",
        "manifest_path_for",
        "rel",
        "write_manifest"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::scaffold_missing"
      ]
    },
    "src/system/tools/manifest_migrator.py::collect_capabilities": {
      "name": "collect_capabilities",
      "qualname": "unassigned.collect_capabilities",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 281,
      "end_lineno": 294,
      "params": {
        "paths": null
      },
      "decorators": [],
      "docstring": "Return {domain: [capabilities...]} for all existing manifests (missing ones count as []).",
      "base_classes": [],
      "structural_hash": "973838f30eef96548cddce0f82ac12428816226ac38c0e2adeb9ba05d1c0a64f",
      "calls": [
        "exists",
        "get",
        "isinstance",
        "load_domains",
        "manifest_path_for",
        "read_manifest",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::collect_capabilities"
      ]
    },
    "src/system/tools/manifest_migrator.py::find_duplicate_capabilities": {
      "name": "find_duplicate_capabilities",
      "qualname": "unassigned.find_duplicate_capabilities",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 297,
      "end_lineno": 303,
      "params": {
        "cap_map": null
      },
      "decorators": [],
      "docstring": "Return {capability: [domains...]} for capabilities present in >1 domain.",
      "base_classes": [],
      "structural_hash": "13351896e6a6c2603bc62961c25d5d24377e122d1a7b6248666966ff3b362b64",
      "calls": [
        "append",
        "items",
        "len",
        "setdefault"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::find_duplicate_capabilities"
      ]
    },
    "src/system/tools/manifest_migrator.py::check_duplicates": {
      "name": "check_duplicates",
      "qualname": "unassigned.check_duplicates",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 306,
      "end_lineno": 335,
      "params": {
        "paths": null,
        "fail_on_conflicts": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "7bacb8149ef59860639394689e5ac829c3c084686b708fdb5bff14e31f217669",
      "calls": [
        "Table",
        "add_column",
        "add_row",
        "collect_capabilities",
        "fail",
        "find_duplicate_capabilities",
        "items",
        "join",
        "print",
        "sorted"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::check_duplicates"
      ]
    },
    "src/system/tools/manifest_migrator.py::write_drift_report": {
      "name": "write_drift_report",
      "qualname": "unassigned.write_drift_report",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 338,
      "end_lineno": 351,
      "params": {
        "paths": null,
        "validation_errors": null,
        "duplicates": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "7c593eaa59931d44e0067f9a0f43a79948903cded52ce3397c26be606b989229",
      "calls": [
        "dumps",
        "info",
        "mkdir",
        "rel",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::write_drift_report"
      ]
    },
    "src/system/tools/manifest_migrator.py::parse_args": {
      "name": "parse_args",
      "qualname": "unassigned.parse_args",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 357,
      "end_lineno": 374,
      "params": {
        "argv": null
      },
      "decorators": [],
      "docstring": "Minimal arg parser (keeps dependencies light).\nCommands: validate | scaffold | check-duplicates | all\nFlags: --fail-on-conflicts",
      "base_classes": [],
      "structural_hash": "c7ba2d3bf80bd993f4e15f78f2d2a55cd62bc221aed66e07031a3135007e0851",
      "calls": [
        "fail"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::parse_args"
      ]
    },
    "src/system/tools/manifest_migrator.py::main": {
      "name": "main",
      "qualname": "unassigned.main",
      "module": "manifest_migrator",
      "filepath": "src/system/tools/manifest_migrator.py",
      "lineno": 377,
      "end_lineno": 410,
      "params": {
        "argv": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "03598a596c3f9d99b925c52131df3e834361f767d2624618248e9d8dcf8bf3c2",
      "calls": [
        "check_duplicates",
        "exit",
        "get",
        "load_paths",
        "parse_args",
        "scaffold_missing",
        "validate_manifests",
        "warn",
        "write_drift_report"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/manifest_migrator.py::main"
      ]
    },
    "src/system/tools/models.py::_dedupe_seq": {
      "name": "_dedupe_seq",
      "qualname": "unassigned._dedupe_seq",
      "module": "models",
      "filepath": "src/system/tools/models.py",
      "lineno": 21,
      "end_lineno": 23,
      "params": {
        "seq": null
      },
      "decorators": [],
      "docstring": "Deduplicate while preserving order (stable for reports/JSON).",
      "base_classes": [],
      "structural_hash": "08682fe9484ec4717d4ca114564837fa0da8bf3af1be914e111c299cc66b0d10",
      "calls": [
        "fromkeys",
        "list"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/models.py::_dedupe_seq"
      ]
    },
    "src/system/tools/models.py::FunctionInfo": {
      "name": "FunctionInfo",
      "qualname": "unassigned.FunctionInfo",
      "module": "models",
      "filepath": "src/system/tools/models.py",
      "lineno": 27,
      "end_lineno": 107,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "docstring": "Minimal, JSON-safe representation of a function for graphing and reports.",
      "base_classes": [],
      "structural_hash": "f8ad94238cb7741745ba98bf10567a8186e7b69c7a5b88a6cc227389043e21fc",
      "calls": [
        "_dedupe_seq",
        "append",
        "asdict",
        "field",
        "int",
        "isinstance",
        "items",
        "str"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/models.py::FunctionInfo"
      ]
    },
    "src/system/tools/models.py::add_call": {
      "name": "add_call",
      "qualname": "unassigned.add_call",
      "module": "models",
      "filepath": "src/system/tools/models.py",
      "lineno": 62,
      "end_lineno": 66,
      "params": {
        "self": null,
        "callee_qualname": null
      },
      "decorators": [],
      "docstring": "Record a call edge (duplicates are ok; they are deduped at export).",
      "base_classes": [],
      "structural_hash": "c45ce4e08fa4e53fd477a7a2208f2f4308f6c7c2b506c4bf9fcef19901c1b800",
      "calls": [
        "append",
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/models.py::add_call"
      ]
    },
    "src/system/tools/models.py::add_tag": {
      "name": "add_tag",
      "qualname": "unassigned.add_tag",
      "module": "models",
      "filepath": "src/system/tools/models.py",
      "lineno": 68,
      "end_lineno": 70,
      "params": {
        "self": null,
        "tag": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "64dd6c91ebcc65ac5a625622430ca191c98c968479d0972e1ec0874e2a2e79aa",
      "calls": [
        "append",
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/models.py::add_tag"
      ]
    },
    "src/system/tools/models.py::to_dict": {
      "name": "to_dict",
      "qualname": "unassigned.to_dict",
      "module": "models",
      "filepath": "src/system/tools/models.py",
      "lineno": 142,
      "end_lineno": 147,
      "params": {
        "self": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "8c2d7e05c37fe84b35117bfb77e266e1433b38648dd35513b188a8aeaec248e0",
      "calls": [
        "int",
        "str"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/models.py::to_dict"
      ]
    },
    "src/system/tools/models.py::ModuleInfo": {
      "name": "ModuleInfo",
      "qualname": "unassigned.ModuleInfo",
      "module": "models",
      "filepath": "src/system/tools/models.py",
      "lineno": 111,
      "end_lineno": 129,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "docstring": "Aggregate of functions from a single Python module (file).",
      "base_classes": [],
      "structural_hash": "b73c04bfa8b014a77c7a265473d1db13a04cd6194be6f67c8b4bb4960a4f3c4e",
      "calls": [
        "append",
        "field",
        "isinstance",
        "str",
        "to_dict"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/models.py::ModuleInfo"
      ]
    },
    "src/system/tools/models.py::add_function": {
      "name": "add_function",
      "qualname": "unassigned.add_function",
      "module": "models",
      "filepath": "src/system/tools/models.py",
      "lineno": 120,
      "end_lineno": 122,
      "params": {
        "self": null,
        "fn": null
      },
      "decorators": [],
      "base_classes": [],
      "structural_hash": "f6a1529c7722aed276dbfad72e8b309e0e6c581a6e0c7cec3ee6d4adc81dfcc4",
      "calls": [
        "append",
        "isinstance"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/models.py::add_function"
      ]
    },
    "src/system/tools/models.py::ImportEdge": {
      "name": "ImportEdge",
      "qualname": "unassigned.ImportEdge",
      "module": "models",
      "filepath": "src/system/tools/models.py",
      "lineno": 133,
      "end_lineno": 147,
      "params": {},
      "decorators": [
        "dataclass"
      ],
      "docstring": "Simple import edge (module-level), used by guards/graph builders.",
      "base_classes": [],
      "structural_hash": "f9be2909acbf870774f482105bb69d03ea9f95f3c3de4f76c8c4d931262e1eab",
      "calls": [
        "int",
        "str"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/models.py::ImportEdge"
      ]
    },
    "src/system/tools/pattern_matcher.py::PatternMatcher": {
      "name": "PatternMatcher",
      "qualname": "unassigned.PatternMatcher",
      "module": "pattern_matcher",
      "filepath": "src/system/tools/pattern_matcher.py",
      "lineno": 16,
      "end_lineno": 121,
      "params": {},
      "decorators": [],
      "docstring": "Applies declarative patterns to a list of symbols to identify entry points.",
      "base_classes": [],
      "structural_hash": "dc1145748ce3e43439a314ff11f622ec61b5523d505af431d22cc7273b2339c0",
      "calls": [
        "_is_match",
        "debug",
        "error",
        "exists",
        "get",
        "len",
        "match",
        "read_text",
        "set",
        "splitlines",
        "startswith",
        "strip",
        "update",
        "values"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/pattern_matcher.py::PatternMatcher"
      ]
    },
    "src/system/tools/pattern_matcher.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "pattern_matcher",
      "filepath": "src/system/tools/pattern_matcher.py",
      "lineno": 19,
      "end_lineno": 28,
      "params": {
        "self": null,
        "patterns": null,
        "root_path": null
      },
      "decorators": [],
      "docstring": "Initialize the PatternMatcher with a set of rules.\n\nArgs:\n    patterns: A list of pattern dictionaries from entry_point_patterns.yaml.\n    root_path: The absolute path to the repository root.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "445c74dd2573cc56d17b2745b1d9aa89decf1be39fe2ae622da57bbb6d47c96b",
      "calls": [],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/pattern_matcher.py::__init__"
      ]
    },
    "src/system/tools/pattern_matcher.py::apply_patterns": {
      "name": "apply_patterns",
      "qualname": "unassigned.apply_patterns",
      "module": "pattern_matcher",
      "filepath": "src/system/tools/pattern_matcher.py",
      "lineno": 30,
      "end_lineno": 54,
      "params": {
        "self": null,
        "functions": null
      },
      "decorators": [],
      "docstring": "Apply configured patterns to identify entry points in function symbols.\n\nArgs:\n    functions: A dictionary of FunctionInfo objects from the KnowledgeGraphBuilder.",
      "base_classes": [],
      "structural_hash": "b56de77c134df1e7f4904dc8f21951df2565ebab3055dccfe9b65aaa9f21c97a",
      "calls": [
        "_is_match",
        "debug",
        "get",
        "values"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/pattern_matcher.py::apply_patterns"
      ]
    },
    "src/system/tools/pattern_matcher.py::_is_match": {
      "name": "_is_match",
      "qualname": "unassigned._is_match",
      "module": "pattern_matcher",
      "filepath": "src/system/tools/pattern_matcher.py",
      "lineno": 56,
      "end_lineno": 121,
      "params": {
        "self": null,
        "info": null,
        "rules": null,
        "all_base_classes": null,
        "functions": null
      },
      "decorators": [],
      "docstring": "Check if a single symbol matches a set of declarative rules.",
      "base_classes": [],
      "structural_hash": "71a2b9c5bb6e02e6ac1c396728d0f0f41fc40b8bd4b5dda5395bc8522ef39502",
      "calls": [
        "error",
        "exists",
        "get",
        "len",
        "match",
        "read_text",
        "set",
        "splitlines",
        "startswith",
        "strip",
        "update"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/pattern_matcher.py::_is_match"
      ]
    },
    "src/system/tools/project_structure.py::ProjectStructureError": {
      "name": "ProjectStructureError",
      "qualname": "unassigned.ProjectStructureError",
      "module": "project_structure",
      "filepath": "src/system/tools/project_structure.py",
      "lineno": 14,
      "end_lineno": 17,
      "params": {},
      "decorators": [],
      "docstring": "Custom exception for when the project's root cannot be determined.",
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "2f13e6e5a0eb3f0c4f02e9a457c18dba96ed08cc8c805bed8008ebab96d432b6",
      "calls": [],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/project_structure.py::ProjectStructureError"
      ]
    },
    "src/system/tools/project_structure.py::find_project_root": {
      "name": "find_project_root",
      "qualname": "unassigned.find_project_root",
      "module": "project_structure",
      "filepath": "src/system/tools/project_structure.py",
      "lineno": 20,
      "end_lineno": 26,
      "params": {
        "start_path": null
      },
      "decorators": [],
      "docstring": "Traverses upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "base_classes": [],
      "structural_hash": "84c7db2ca5b8eda499b953a6bf3038470a575bed5d399c1af17a821e9181137b",
      "calls": [
        "ProjectStructureError",
        "exists",
        "resolve"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/project_structure.py::find_project_root"
      ]
    },
    "src/system/tools/project_structure.py::get_cli_entry_points": {
      "name": "get_cli_entry_points",
      "qualname": "unassigned.get_cli_entry_points",
      "module": "project_structure",
      "filepath": "src/system/tools/project_structure.py",
      "lineno": 29,
      "end_lineno": 41,
      "params": {
        "root_path": null
      },
      "decorators": [],
      "docstring": "Parses pyproject.toml to find declared command-line entry points.",
      "base_classes": [],
      "structural_hash": "9e7e319527850d809e354ece4f140ab49f81f76411c7c2be86f9d7356a7871d9",
      "calls": [
        "exists",
        "findall",
        "group",
        "read_text",
        "search",
        "set",
        "warning"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/project_structure.py::get_cli_entry_points"
      ]
    },
    "src/system/tools/project_structure.py::should_exclude_path": {
      "name": "should_exclude_path",
      "qualname": "unassigned.should_exclude_path",
      "module": "project_structure",
      "filepath": "src/system/tools/project_structure.py",
      "lineno": 44,
      "end_lineno": 46,
      "params": {
        "path": null,
        "exclude_patterns": null
      },
      "decorators": [],
      "docstring": "Determines if a given path should be excluded from scanning.",
      "base_classes": [],
      "structural_hash": "7e43ba6fe776c51c6ed484b0bc17e16f113b4034b79840a7f38c898f9819d116",
      "calls": [
        "any"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/project_structure.py::should_exclude_path"
      ]
    },
    "src/system/tools/project_structure.py::get_python_files": {
      "name": "get_python_files",
      "qualname": "unassigned.get_python_files",
      "module": "project_structure",
      "filepath": "src/system/tools/project_structure.py",
      "lineno": 49,
      "end_lineno": 63,
      "params": {
        "src_root": null,
        "exclude_patterns": null
      },
      "decorators": [],
      "docstring": "Get all Python files in the source directory, excluding specified patterns.",
      "base_classes": [],
      "structural_hash": "9b5742d83c5daa6d3d7c242bdede42e66c358c60c01a89b0f36771e3578bf3dd",
      "calls": [
        "list",
        "rglob",
        "should_exclude_path",
        "sort"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/project_structure.py::get_python_files"
      ]
    },
    "src/system/tools/scaffolder.py::Scaffolder": {
      "name": "Scaffolder",
      "qualname": "unassigned.Scaffolder",
      "module": "scaffolder",
      "filepath": "src/system/tools/scaffolder.py",
      "lineno": 22,
      "end_lineno": 115,
      "params": {},
      "decorators": [],
      "docstring": "A reusable service for creating new, constitutionally-governed projects.",
      "base_classes": [],
      "structural_hash": "460ac66b683039ecff54b93539963fd91bde8fa64de032d0724f5ececaf715fc",
      "calls": [
        "FileExistsError",
        "FileNotFoundError",
        "copy",
        "dump",
        "exists",
        "format",
        "get",
        "glob",
        "info",
        "is_dir",
        "load_config",
        "mkdir",
        "read_text",
        "replace",
        "safe_load",
        "write_text"
      ],
      "type": "ClassDef",
      "tags": [
        "src/system/tools/scaffolder.py::Scaffolder"
      ]
    },
    "src/system/tools/scaffolder.py::__init__": {
      "name": "__init__",
      "qualname": "unassigned.__init__",
      "module": "scaffolder",
      "filepath": "src/system/tools/scaffolder.py",
      "lineno": 25,
      "end_lineno": 48,
      "params": {
        "self": null,
        "project_name": null,
        "profile": null,
        "workspace_dir": null
      },
      "decorators": [],
      "docstring": "Initializes the Scaffolder with project name, profile, and workspace directory.",
      "base_classes": [],
      "entry_point_type": "magic_method",
      "entry_point_justification": "python_magic_method",
      "structural_hash": "ed3a0ec7574340799159ef0d9da86c387d677484b786ba3cffb6724733c43d1c",
      "calls": [
        "FileNotFoundError",
        "get",
        "is_dir",
        "load_config"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/scaffolder.py::__init__"
      ]
    },
    "src/system/tools/scaffolder.py::scaffold_base_structure": {
      "name": "scaffold_base_structure",
      "qualname": "unassigned.scaffold_base_structure",
      "module": "scaffolder",
      "filepath": "src/system/tools/scaffolder.py",
      "lineno": 50,
      "end_lineno": 108,
      "params": {
        "self": null
      },
      "decorators": [],
      "docstring": "Creates the base project structure, including tests and CI directories.",
      "base_classes": [],
      "structural_hash": "c166cf9f5388008b3572799f587d0bbded4fdfca2f8677086d28f09dd8cbecf2",
      "calls": [
        "FileExistsError",
        "copy",
        "dump",
        "exists",
        "format",
        "glob",
        "info",
        "mkdir",
        "read_text",
        "replace",
        "safe_load",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/scaffolder.py::scaffold_base_structure"
      ]
    },
    "src/system/tools/scaffolder.py::write_file": {
      "name": "write_file",
      "qualname": "unassigned.write_file",
      "module": "scaffolder",
      "filepath": "src/system/tools/scaffolder.py",
      "lineno": 110,
      "end_lineno": 115,
      "params": {
        "self": null,
        "relative_path": null,
        "content": null
      },
      "decorators": [],
      "docstring": "Writes content to a file within the new project's directory, creating parent directories as needed.",
      "base_classes": [],
      "structural_hash": "133c8713ca7a9a324d48304f82fee2c2543196bcabba5e031e4f39758bfac180",
      "calls": [
        "info",
        "mkdir",
        "write_text"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/scaffolder.py::write_file"
      ]
    },
    "src/system/tools/scaffolder.py::new_project": {
      "name": "new_project",
      "qualname": "unassigned.new_project",
      "module": "scaffolder",
      "filepath": "src/system/tools/scaffolder.py",
      "lineno": 118,
      "end_lineno": 170,
      "params": {
        "name": null,
        "profile": null,
        "dry_run": null
      },
      "decorators": [],
      "docstring": "Scaffolds a new CORE-governed application with the given name, profile, and dry-run option, including base structure and README generation.",
      "base_classes": [],
      "structural_hash": "0a4c9f0c2c40bb1dc27ac90be0c4f251ccc563fc2479428fcf7fd513f1e9ef42",
      "calls": [
        "Argument",
        "Exit",
        "Option",
        "Scaffolder",
        "echo",
        "error",
        "exists",
        "format",
        "info",
        "read_text",
        "relative_to",
        "scaffold_base_structure",
        "secho",
        "write_file"
      ],
      "type": "FunctionDef",
      "tags": [
        "src/system/tools/scaffolder.py::new_project"
      ]
    }
  }
}