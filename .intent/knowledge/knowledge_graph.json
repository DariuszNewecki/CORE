{
  "schema_version": "2.0.0",
  "metadata": {
    "files_scanned": 81,
    "total_symbols": 296,
    "timestamp_utc": "2025-08-24T09:27:08.933184+00:00"
  },
  "symbols": {
    "src/core/knowledge_service.py::KnowledgeService": {
      "key": "src/core/knowledge_service.py::KnowledgeService",
      "name": "KnowledgeService",
      "type": "ClassDef",
      "file": "src/core/knowledge_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "A read-only service to access the system's knowledge graph.",
      "docstring": "A read-only service to access the system's knowledge graph.",
      "calls": [
        "exists",
        "get",
        "info",
        "list",
        "load_config",
        "load_graph",
        "sorted",
        "values",
        "warning"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.371159+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "e9da62bca31b1eee7f1f9510e1362e5a32445895c731ef7830c3f074e90d8255"
    },
    "src/core/knowledge_service.py::__init__": {
      "key": "src/core/knowledge_service.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/knowledge_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initializes the service and loads the knowledge graph.",
      "docstring": "Initializes the service and loads the knowledge graph.",
      "calls": [
        "load_graph"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.371772+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/knowledge_service.py::KnowledgeService",
      "structural_hash": "b972b45e1e1e1ab39d605d4812aca9553962819ec4e0ef3a45bcd77f23dafa92"
    },
    "src/core/knowledge_service.py::load_graph": {
      "key": "src/core/knowledge_service.py::load_graph",
      "name": "load_graph",
      "type": "FunctionDef",
      "file": "src/core/knowledge_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads or reloads the knowledge graph from disk.",
      "docstring": "Loads or reloads the knowledge graph from disk.",
      "calls": [
        "exists",
        "info",
        "load_config",
        "warning"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.372394+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/knowledge_service.py::KnowledgeService",
      "structural_hash": "a7d03d989a12b017745f63b41ff0c30ed60b6e888827996ea00288c9ab527c58"
    },
    "src/core/knowledge_service.py::list_capabilities": {
      "key": "src/core/knowledge_service.py::list_capabilities",
      "name": "list_capabilities",
      "type": "FunctionDef",
      "file": "src/core/knowledge_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Returns a sorted list of all unique, declared capabilities.",
      "docstring": "Returns a sorted list of all unique, declared capabilities.",
      "calls": [
        "get",
        "list",
        "sorted",
        "values"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.373168+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/knowledge_service.py::KnowledgeService",
      "structural_hash": "9712c3076e50f3d6bd5f177a39710db0f373a5024068ac5e056a930428d82b70"
    },
    "src/core/clients.py::BaseLLMClient": {
      "key": "src/core/clients.py::BaseLLMClient",
      "name": "BaseLLMClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "llm_orchestration",
      "intent": "Base class for LLM clients, handling common request logic for Chat APIs.",
      "docstring": "Base class for LLM clients, handling common request logic for Chat APIs.\nProvides shared initialization and error handling for all LLM clients.",
      "calls": [
        "AsyncClient",
        "ValueError",
        "debug",
        "endswith",
        "error",
        "json",
        "post",
        "raise_for_status",
        "rstrip"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.379651+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "5f7674a38118a6d9e82962e538527a18ef54fb03f98442670b101827028fda58"
    },
    "src/core/clients.py::__init__": {
      "key": "src/core/clients.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize the LLM client with API credentials and endpoint.",
      "docstring": "Initialize the LLM client with API credentials and endpoint.",
      "calls": [
        "AsyncClient",
        "ValueError",
        "endswith",
        "rstrip"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self",
        "api_url",
        "api_key",
        "model_name"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.380741+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "44a03084dab1aca211e881016e0caac0e624aab093ddebad58b5e0fffa8f53f2"
    },
    "src/core/clients.py::make_request": {
      "key": "src/core/clients.py::make_request",
      "name": "make_request",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt to the configured Chat Completions API. (Synchronous)",
      "docstring": "Sends a prompt to the configured Chat Completions API. (Synchronous)",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "line_number": 43,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "last_updated": "2025-08-24T09:27:08.382531+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "2957547c2d2c529fb77ea5c10dafff8ac3d1f3594dd627512b0944570ea48db2"
    },
    "src/core/clients.py::make_request_async": {
      "key": "src/core/clients.py::make_request_async",
      "name": "make_request_async",
      "type": "AsyncFunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt asynchronously to the configured Chat Completions API.",
      "docstring": "Sends a prompt asynchronously to the configured Chat Completions API.",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "line_number": 79,
      "is_async": true,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "last_updated": "2025-08-24T09:27:08.384513+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "000933e12c6751ddaee82d36d6bc4e62a447f2cd6c3fa59c68c0ad1064d3c8b6"
    },
    "src/core/cognitive_service.py::CognitiveService": {
      "key": "src/core/cognitive_service.py::CognitiveService",
      "name": "CognitiveService",
      "type": "ClassDef",
      "file": "src/core/cognitive_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "cognitive_service.management",
      "intent": "Manages the lifecycle and provision of role-based LLM clients.",
      "docstring": "Manages the lifecycle and provision of role-based LLM clients.",
      "calls": [
        "BaseLLMClient",
        "ValueError",
        "all",
        "get",
        "getattr",
        "info",
        "len",
        "load_config",
        "upper"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.388953+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "4523816b53a5d9ebea87ff9abf053a438a7a43b31a400b1c13cb17024515158a"
    },
    "src/core/cognitive_service.py::__init__": {
      "key": "src/core/cognitive_service.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/cognitive_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initializes the service by loading and parsing the cognitive architecture from the constitution.",
      "docstring": "Initializes the service by loading and parsing the cognitive architecture from the constitution.",
      "calls": [
        "get",
        "info",
        "len",
        "load_config"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.390219+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/cognitive_service.py::CognitiveService",
      "structural_hash": "1f0ec194a6b1b6681433f2af0bb11d4f31c9771ded3a414f2f317f195f6c4087"
    },
    "src/core/cognitive_service.py::get_client_for_role": {
      "key": "src/core/cognitive_service.py::get_client_for_role",
      "name": "get_client_for_role",
      "type": "FunctionDef",
      "file": "src/core/cognitive_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Gets a configured LLM client for a specific cognitive role using the central settings object.",
      "docstring": "Gets a configured LLM client for a specific cognitive role using the central settings object.",
      "calls": [
        "BaseLLMClient",
        "ValueError",
        "all",
        "get",
        "getattr",
        "info",
        "upper"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "self",
        "role_name"
      ],
      "last_updated": "2025-08-24T09:27:08.392318+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/cognitive_service.py::CognitiveService",
      "structural_hash": "6c0b23eeabc257a66cb213b3edd81e75cbee32f124d8dcb9774a2f5ae0b395e6"
    },
    "src/core/validation_pipeline.py::_load_safety_policies": {
      "key": "src/core/validation_pipeline.py::_load_safety_policies",
      "name": "_load_safety_policies",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and caches the safety policies from the .intent directory.",
      "docstring": "Loads and caches the safety policies from the .intent directory.",
      "calls": [
        "get",
        "get_repo_root",
        "load_config"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.396945+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "cab90bc1e8a1e8e5ffececda4a227e4b8a931edb4fe02be9ce5a23bfae8d222f"
    },
    "src/core/validation_pipeline.py::_get_full_attribute_name": {
      "key": "src/core/validation_pipeline.py::_get_full_attribute_name",
      "name": "_get_full_attribute_name",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "docstring": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "calls": [
        "insert",
        "isinstance",
        "join"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-24T09:27:08.397712+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "72bf270f183300199553865489182c447b5a4ccdc1ea03a3d5b94d95b162322e"
    },
    "src/core/validation_pipeline.py::_find_dangerous_patterns": {
      "key": "src/core/validation_pipeline.py::_find_dangerous_patterns",
      "name": "_find_dangerous_patterns",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans the AST for calls and imports forbidden by safety policies.",
      "docstring": "Scans the AST for calls and imports forbidden by safety policies.",
      "calls": [
        "Path",
        "_get_full_attribute_name",
        "_load_safety_policies",
        "any",
        "append",
        "get",
        "isinstance",
        "match",
        "replace",
        "set",
        "split",
        "update",
        "walk"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "tree",
        "file_path"
      ],
      "last_updated": "2025-08-24T09:27:08.401161+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "812f91809662354e6852673feef4c0faf04a6c475d9b084ed329ce08d1100463"
    },
    "src/core/validation_pipeline.py::_check_for_todo_comments": {
      "key": "src/core/validation_pipeline.py::_check_for_todo_comments",
      "name": "_check_for_todo_comments",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans source code for TODO/FIXME comments and returns them as violations.",
      "docstring": "Scans source code for TODO/FIXME comments and returns them as violations.",
      "calls": [
        "append",
        "enumerate",
        "split",
        "splitlines",
        "strip"
      ],
      "line_number": 129,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-24T09:27:08.402290+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c5b46c2eff257ea4efe9df4b282875ab698168db224abe219bf9f3ef4276594d"
    },
    "src/core/validation_pipeline.py::_check_semantics": {
      "key": "src/core/validation_pipeline.py::_check_semantics",
      "name": "_check_semantics",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "semantic_validation",
      "intent": "Runs all policy-aware semantic checks on a string of Python code.",
      "docstring": "Runs all policy-aware semantic checks on a string of Python code.",
      "calls": [
        "_find_dangerous_patterns",
        "parse"
      ],
      "line_number": 148,
      "is_async": false,
      "parameters": [
        "code",
        "file_path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.402834+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "68336360a8c01eee656ceab907a3d3dcb6b61fef29f42c2c891428148a818f3a"
    },
    "src/core/validation_pipeline.py::_validate_python_code": {
      "key": "src/core/validation_pipeline.py::_validate_python_code",
      "name": "_validate_python_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Internal pipeline for Python code validation.",
      "docstring": "Internal pipeline for Python code validation.\nReturns the final code and a list of all found violations.",
      "calls": [
        "_check_for_todo_comments",
        "_check_semantics",
        "any",
        "append",
        "check_syntax",
        "extend",
        "fix_and_lint_code_with_ruff",
        "format_code_with_black",
        "str"
      ],
      "line_number": 158,
      "is_async": false,
      "parameters": [
        "path_hint",
        "code"
      ],
      "last_updated": "2025-08-24T09:27:08.404242+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e96751308fac71051ef307581c6143cebf0852d2a595604b122d0c380c8f37fc"
    },
    "src/core/validation_pipeline.py::_validate_yaml": {
      "key": "src/core/validation_pipeline.py::_validate_yaml",
      "name": "_validate_yaml",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Internal pipeline for YAML validation.",
      "docstring": "Internal pipeline for YAML validation.",
      "calls": [
        "append",
        "safe_load"
      ],
      "line_number": 199,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-24T09:27:08.405098+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c1cc9b3495cf7da110b274799aa0d90947cbb9d1605a43719d7aa6ecfb877cef"
    },
    "src/core/validation_pipeline.py::_get_file_classification": {
      "key": "src/core/validation_pipeline.py::_get_file_classification",
      "name": "_get_file_classification",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Determines the file type based on its extension.",
      "docstring": "Determines the file type based on its extension.",
      "calls": [
        "Path",
        "lower"
      ],
      "line_number": 216,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-24T09:27:08.405858+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5389b48f5dc1b1c94a0a73168977c056aad4c0d85a4843163538780ff9c3cb91"
    },
    "src/core/validation_pipeline.py::validate_code": {
      "key": "src/core/validation_pipeline.py::validate_code",
      "name": "validate_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "code_quality_analysis",
      "intent": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type, returning a standardized dictionary with status, violations, and processed code.",
      "docstring": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type, returning a standardized dictionary with status, violations, and processed code.",
      "calls": [
        "_get_file_classification",
        "_validate_python_code",
        "_validate_yaml",
        "any",
        "debug",
        "get"
      ],
      "line_number": 229,
      "is_async": false,
      "parameters": [
        "file_path",
        "code",
        "quiet"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.407249+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "89de86f90da79d40f54b96d243b439f94dda7e1e0fe83ad3867e582947830cb0"
    },
    "src/core/git_service.py::GitService": {
      "key": "src/core/git_service.py::GitService",
      "name": "GitService",
      "type": "ClassDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Encapsulates Git operations for the CORE system.",
      "docstring": "Encapsulates Git operations for the CORE system.\nEnsures all file changes are committed with traceable messages.",
      "calls": [
        "Path",
        "RuntimeError",
        "ValueError",
        "_run_command",
        "debug",
        "error",
        "info",
        "is_dir",
        "is_git_repo",
        "join",
        "lower",
        "resolve",
        "run",
        "str",
        "strip",
        "warning"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.412542+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "ccc7b74514266784da6391edb69daa742b4ccb839f991520bf4bcd5f53f8bee9"
    },
    "src/core/git_service.py::__init__": {
      "key": "src/core/git_service.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize GitService with the resolved absolute path to the Git repository; raises ValueError if path is not a valid Git repo.",
      "docstring": "Initialize GitService with the resolved absolute path to the Git repository; raises ValueError if path is not a valid Git repo.",
      "calls": [
        "Path",
        "ValueError",
        "info",
        "is_git_repo",
        "resolve"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.413268+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "2ee6f0bbab7a85e07997d95684c60764cdff44ca12bd88dd923c9ba41636ac16"
    },
    "src/core/git_service.py::_run_command": {
      "key": "src/core/git_service.py::_run_command",
      "name": "_run_command",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "change_safety_enforcement",
      "intent": "Run a Git command and return stdout.",
      "docstring": "Run a Git command and return stdout.\n\nArgs:\n    command (list): Git command as a list (e.g., ['git', 'status']).\n\nReturns:\n    str: Command output, or raises RuntimeError on failure.",
      "calls": [
        "RuntimeError",
        "debug",
        "error",
        "join",
        "run",
        "strip"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "self",
        "command"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.414253+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "244f6b0c9edc75d143c4779dec692c478d7a6308ed924c4e1eb77a9c6f1f8185"
    },
    "src/core/git_service.py::add": {
      "key": "src/core/git_service.py::add",
      "name": "add",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stage a file or directory for commit.",
      "docstring": "Stage a file or directory for commit.\n\nArgs:\n    file_path (str): Path to stage. Defaults to '.' (all changes).",
      "calls": [
        "ValueError",
        "_run_command",
        "resolve"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-24T09:27:08.415027+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "bf69c45ada0dfc032626720fafc60b9784d1b6f7671472abf04bbef419e3d3b2"
    },
    "src/core/git_service.py::commit": {
      "key": "src/core/git_service.py::commit",
      "name": "commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Commit staged changes with a message.",
      "docstring": "Commit staged changes with a message.\nIf there are no changes to commit, this operation is a no-op and will not raise an error.\n\nArgs:\n    message (str): Commit message explaining the change.",
      "calls": [
        "_run_command",
        "info",
        "lower",
        "str"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [
        "self",
        "message"
      ],
      "last_updated": "2025-08-24T09:27:08.416003+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "28aacd32f8f933e003487892fc29991fec80707c4431f9d84ee198f07158791b"
    },
    "src/core/git_service.py::is_git_repo": {
      "key": "src/core/git_service.py::is_git_repo",
      "name": "is_git_repo",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Check if the configured path is a valid Git repository.",
      "docstring": "Check if the configured path is a valid Git repository.\n\nReturns:\n    bool: True if it's a Git repo, False otherwise.",
      "calls": [
        "is_dir"
      ],
      "line_number": 96,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.416487+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "44bf21e77508b2285243dbd4a291ad962face3886f645477a69fb5b1af1f182e"
    },
    "src/core/git_service.py::get_current_commit": {
      "key": "src/core/git_service.py::get_current_commit",
      "name": "get_current_commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Gets the full SHA hash of the current commit (HEAD).",
      "docstring": "Gets the full SHA hash of the current commit (HEAD).",
      "calls": [
        "_run_command"
      ],
      "line_number": 106,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.416903+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "9591cea61e11db1150d7179ac28a550cc2eba183bfc3d60f297b6a304022122a"
    },
    "src/core/git_service.py::reset_to_commit": {
      "key": "src/core/git_service.py::reset_to_commit",
      "name": "reset_to_commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Performs a hard reset to a specific commit hash.",
      "docstring": "Performs a hard reset to a specific commit hash.\nThis will discard all current changes.",
      "calls": [
        "_run_command",
        "info",
        "warning"
      ],
      "line_number": 112,
      "is_async": false,
      "parameters": [
        "self",
        "commit_hash"
      ],
      "last_updated": "2025-08-24T09:27:08.417607+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "949dc4328418bf308315afed23d47b25af2965af4c69af006041795f2264b0da"
    },
    "src/core/syntax_checker.py::check_syntax": {
      "key": "src/core/syntax_checker.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/core/syntax_checker.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "syntax_validation",
      "intent": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "docstring": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "calls": [
        "endswith",
        "parse",
        "strip"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "file_path",
        "code"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.419083+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "1364f88841c69497e8e60da5590e605cb9abe2023ed6c7914d4834889565c54c"
    },
    "src/core/black_formatter.py::format_code_with_black": {
      "key": "src/core/black_formatter.py::format_code_with_black",
      "name": "format_code_with_black",
      "type": "FunctionDef",
      "file": "src/core/black_formatter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "docstring": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "calls": [
        "Exception",
        "FileMode",
        "InvalidInput",
        "format_str"
      ],
      "line_number": 10,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-24T09:27:08.420308+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "67aa7b50532f6c25f84285da5bbf9430a54f3b594a386a3299c19b82faa15fbf"
    },
    "src/core/test_runner.py::run_tests": {
      "key": "src/core/test_runner.py::run_tests",
      "name": "run_tests",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "test_execution",
      "intent": "Executes pytest on the tests/ directory and returns a structured result.",
      "docstring": "Executes pytest on the tests/ directory and returns a structured result.",
      "calls": [
        "Path",
        "_log_test_result",
        "_store_failure_if_any",
        "_summarize",
        "error",
        "getenv",
        "info",
        "int",
        "isoformat",
        "resolve",
        "run",
        "str",
        "strip",
        "utcnow",
        "warning"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "silent"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.425499+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "e7898d73b9abc7a58013e08dcee037d619fa78f60f80f33bb74770bd9e7e7717"
    },
    "src/core/test_runner.py::_summarize": {
      "key": "src/core/test_runner.py::_summarize",
      "name": "_summarize",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Parses pytest output to find the final summary line.",
      "docstring": "Parses pytest output to find the final summary line.",
      "calls": [
        "reversed",
        "splitlines",
        "strip"
      ],
      "line_number": 80,
      "is_async": false,
      "parameters": [
        "output"
      ],
      "last_updated": "2025-08-24T09:27:08.426163+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "ecb56e37049e5532d9a6ce3afe63d1fd652cb164fc98e76a46565820fd320bf7"
    },
    "src/core/test_runner.py::_log_test_result": {
      "key": "src/core/test_runner.py::_log_test_result",
      "name": "_log_test_result",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Appends a JSON record of a test run to the persistent log file.",
      "docstring": "Appends a JSON record of a test run to the persistent log file.",
      "calls": [
        "Path",
        "dumps",
        "mkdir",
        "open",
        "warning",
        "write"
      ],
      "line_number": 89,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "last_updated": "2025-08-24T09:27:08.427056+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "13f83ee9bd80ac8766838342478341ecac3f76e1a251506d3a68a02723b420d3"
    },
    "src/core/test_runner.py::_store_failure_if_any": {
      "key": "src/core/test_runner.py::_store_failure_if_any",
      "name": "_store_failure_if_any",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Saves the details of a failed test run to a dedicated file for easy access.",
      "docstring": "Saves the details of a failed test run to a dedicated file for easy access.",
      "calls": [
        "Path",
        "dumps",
        "exists",
        "get",
        "mkdir",
        "unlink",
        "warning",
        "write_text"
      ],
      "line_number": 100,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "last_updated": "2025-08-24T09:27:08.428243+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "af76b1754db8cbc6ae124a21f9916aaa8bfc52fa38d68bc69f86fd7e70aed49e"
    },
    "src/core/main.py::lifespan": {
      "key": "src/core/main.py::lifespan",
      "name": "lifespan",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "docstring": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "calls": [
        "CognitiveService",
        "KnowledgeService",
        "Path",
        "info",
        "introspection",
        "warning"
      ],
      "line_number": 40,
      "is_async": true,
      "parameters": [
        "app"
      ],
      "entry_point_type": "context_manager",
      "last_updated": "2025-08-24T09:27:08.430603+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "1160d0a73abf43c2644a70e1783a9fa80d56949605a58f0df5af495c12fb85df"
    },
    "src/core/main.py::GoalRequest": {
      "key": "src/core/main.py::GoalRequest",
      "name": "GoalRequest",
      "type": "ClassDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Defines the request body for the /execute_goal endpoint.",
      "docstring": "Defines the request body for the /execute_goal endpoint.",
      "calls": [
        "Field"
      ],
      "line_number": 71,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.430962+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "512b92faa274c914fe8a0ce4c72ffb43c618c7e303b87ab6bbc9d70d29517eee"
    },
    "src/core/main.py::AlignmentRequest": {
      "key": "src/core/main.py::AlignmentRequest",
      "name": "AlignmentRequest",
      "type": "ClassDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Request schema for /guard/align.",
      "docstring": "Request schema for /guard/align.",
      "calls": [
        "Field"
      ],
      "line_number": 78,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.431470+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "81eb1abaa32af8db17ff9adbd3a2f9a5c877a900b7629347896266edb551ddd5"
    },
    "src/core/main.py::guard_align": {
      "key": "src/core/main.py::guard_align",
      "name": "guard_align",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Evaluate a goal against the NorthStar and optional blocklist.",
      "docstring": "Evaluate a goal against the NorthStar and optional blocklist.",
      "calls": [
        "JSONResponse",
        "Path",
        "append",
        "check_goal_alignment",
        "get",
        "post"
      ],
      "line_number": 86,
      "is_async": true,
      "parameters": [
        "payload"
      ],
      "entry_point_type": "fastapi_route_post",
      "last_updated": "2025-08-24T09:27:08.432563+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "202a6fe24c3a8647bb696b6e100fe53f4f38c1e9f869be4742b5850b1e063628"
    },
    "src/core/main.py::list_capabilities": {
      "key": "src/core/main.py::list_capabilities",
      "name": "list_capabilities",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Returns a list of all capabilities the system has declared.",
      "docstring": "Returns a list of all capabilities the system has declared.",
      "calls": [
        "get",
        "list_capabilities"
      ],
      "line_number": 105,
      "is_async": true,
      "parameters": [
        "request"
      ],
      "entry_point_type": "fastapi_route_get",
      "last_updated": "2025-08-24T09:27:08.433044+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5099e7071ee405b695b02a297922f4b33dd002e3aa3400ddf0b0de6e7e1f83cb"
    },
    "src/core/main.py::execute_goal": {
      "key": "src/core/main.py::execute_goal",
      "name": "execute_goal",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Execute a high-level goal by planning and generating code.",
      "docstring": "Execute a high-level goal by planning and generating code.\nThis endpoint is a simple wrapper around the core development cycle logic.",
      "calls": [
        "HTTPException",
        "JSONResponse",
        "error",
        "info",
        "post",
        "run_development_cycle"
      ],
      "line_number": 112,
      "is_async": true,
      "parameters": [
        "request_data"
      ],
      "entry_point_type": "fastapi_route_post",
      "last_updated": "2025-08-24T09:27:08.434137+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7552572d05d27156c4fb5697fc6b3ce8829fb0454186d09523581b1f1ebf0aca"
    },
    "src/core/main.py::root": {
      "key": "src/core/main.py::root",
      "name": "root",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Root endpoint \u2014 returns system status.",
      "docstring": "Root endpoint \u2014 returns system status.",
      "calls": [
        "get"
      ],
      "line_number": 142,
      "is_async": true,
      "parameters": [],
      "entry_point_type": "fastapi_route_get",
      "last_updated": "2025-08-24T09:27:08.434528+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0f4ab9b7486b424e3726a154118bc8d237af730580bf891e8f58b65ba9fd8713"
    },
    "src/core/prompt_pipeline.py::PromptPipeline": {
      "key": "src/core/prompt_pipeline.py::PromptPipeline",
      "name": "PromptPipeline",
      "type": "ClassDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].",
      "docstring": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].\nEnsures the LLM receives full context before generating code.",
      "calls": [
        "Path",
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest",
        "compile",
        "dump",
        "exists",
        "get",
        "group",
        "is_file",
        "isinstance",
        "read_text",
        "resolve",
        "safe_load",
        "split",
        "stat",
        "str",
        "strip",
        "sub"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.442601+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "643ffeca004f05935522cc4d1c1b568539b9a36dd0ab361acf09bb0e399dec65"
    },
    "src/core/prompt_pipeline.py::__init__": {
      "key": "src/core/prompt_pipeline.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize PromptPipeline with repository root.",
      "docstring": "Initialize PromptPipeline with repository root.\n\nArgs:\n    repo_path (Path): Root path of the repository.",
      "calls": [
        "Path",
        "compile",
        "resolve"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.443293+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "bda8f0237a381f0ea54c8b1c95a94d352f76364cb12916f96b97e8481887259a"
    },
    "src/core/prompt_pipeline.py::_replace_context_match": {
      "key": "src/core/prompt_pipeline.py::_replace_context_match",
      "name": "_replace_context_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "docstring": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "line_number": 45,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-24T09:27:08.444689+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "69c3e72e7b03b25521273e77c42e156d65772c262f59ee1b25bcce6d70863bff"
    },
    "src/core/prompt_pipeline.py::_inject_context": {
      "key": "src/core/prompt_pipeline.py::_inject_context",
      "name": "_inject_context",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[context:file.py]] directives with actual file content.",
      "docstring": "Replaces [[context:file.py]] directives with actual file content.",
      "calls": [
        "sub"
      ],
      "line_number": 60,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-24T09:27:08.445077+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "11fb0fa702d480e49fbad9fe7eaede86611b3cfb9b8944f520892ae15dffc7b0"
    },
    "src/core/prompt_pipeline.py::_replace_include_match": {
      "key": "src/core/prompt_pipeline.py::_replace_include_match",
      "name": "_replace_include_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "docstring": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-24T09:27:08.446441+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "3df3436cee404f0d98540037203c0e84c11e0f56cb31540ca3fe85350eeacdd8"
    },
    "src/core/prompt_pipeline.py::_inject_includes": {
      "key": "src/core/prompt_pipeline.py::_inject_includes",
      "name": "_inject_includes",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[include:file.py]] directives with file content.",
      "docstring": "Replaces [[include:file.py]] directives with file content.",
      "calls": [
        "sub"
      ],
      "line_number": 80,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-24T09:27:08.446839+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "6f77e4347ebd4b2deab3eace2798b591c4243c4cc43686cd319c0a1f5ff0c2ca"
    },
    "src/core/prompt_pipeline.py::_replace_analysis_match": {
      "key": "src/core/prompt_pipeline.py::_replace_analysis_match",
      "name": "_replace_analysis_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "docstring": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "calls": [
        "group",
        "strip"
      ],
      "line_number": 84,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-24T09:27:08.447425+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "34274a0f7415695348ba0437bb6be2b7c6a211608372ea21fcf87b7bb7057f58"
    },
    "src/core/prompt_pipeline.py::_inject_analysis": {
      "key": "src/core/prompt_pipeline.py::_inject_analysis",
      "name": "_inject_analysis",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[analysis:file.py]] directives with code analysis.",
      "docstring": "Replaces [[analysis:file.py]] directives with code analysis.",
      "calls": [
        "sub"
      ],
      "line_number": 91,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-24T09:27:08.447814+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "c503ae0368651ed52d0af07a2028044a4635852b4262fbe0b292a6de1fef9a74"
    },
    "src/core/prompt_pipeline.py::_replace_manifest_match": {
      "key": "src/core/prompt_pipeline.py::_replace_manifest_match",
      "name": "_replace_manifest_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "docstring": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "calls": [
        "dump",
        "exists",
        "get",
        "group",
        "isinstance",
        "read_text",
        "safe_load",
        "split",
        "str",
        "strip"
      ],
      "line_number": 95,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-24T09:27:08.449584+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "4937c71be594f5ada7675be42dc716678817daa722e49398deafa963ac35acad"
    },
    "src/core/prompt_pipeline.py::_inject_manifest": {
      "key": "src/core/prompt_pipeline.py::_inject_manifest",
      "name": "_inject_manifest",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "docstring": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "calls": [
        "sub"
      ],
      "line_number": 125,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-24T09:27:08.449975+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "77f28434e5ad8ebaf00e1d6081b399fd2a9d7c90dac7829bbde092e51da55a4f"
    },
    "src/core/prompt_pipeline.py::process": {
      "key": "src/core/prompt_pipeline.py::process",
      "name": "process",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "prompt_interpretation",
      "intent": "Processes the full prompt by sequentially resolving all directives.",
      "docstring": "Processes the full prompt by sequentially resolving all directives.\nThis is the main entry point for prompt enrichment.",
      "calls": [
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest"
      ],
      "line_number": 130,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.450568+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "7beac5b33fa702f09356b6bd12d514990e13c314587f87580dee342387278a1a"
    },
    "src/core/intent_alignment.py::_read_text_first": {
      "key": "src/core/intent_alignment.py::_read_text_first",
      "name": "_read_text_first",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Finds and reads the first existing file from a list of candidate paths.",
      "docstring": "Finds and reads the first existing file from a list of candidate paths.",
      "calls": [
        "debug",
        "exists",
        "read_text"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "paths"
      ],
      "last_updated": "2025-08-24T09:27:08.452465+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5c690a7094496e5795d7c4bde5518e0460231aceb1b54d26fa5870b9d65f2976"
    },
    "src/core/intent_alignment.py::_read_blocklist": {
      "key": "src/core/intent_alignment.py::_read_blocklist",
      "name": "_read_blocklist",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Reads the blocklist file, returning a list of lowercased, stripped terms.",
      "docstring": "Reads the blocklist file, returning a list of lowercased, stripped terms.",
      "calls": [
        "debug",
        "exists",
        "lower",
        "read_text",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.453390+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "645bcc9a39ef41488c5ea7a2940f13fc4b26c8c1bc436d53f993d814c77c15b3"
    },
    "src/core/intent_alignment.py::_tokenize": {
      "key": "src/core/intent_alignment.py::_tokenize",
      "name": "_tokenize",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Converts a string into a list of lowercase alphanumeric tokens.",
      "docstring": "Converts a string into a list of lowercase alphanumeric tokens.",
      "calls": [
        "findall",
        "lower"
      ],
      "line_number": 55,
      "is_async": false,
      "parameters": [
        "text"
      ],
      "last_updated": "2025-08-24T09:27:08.453810+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8b7e436b369f8a59e6ca968520fc9d02eec3f9d1e48258193e87e177d62d8e82"
    },
    "src/core/intent_alignment.py::check_goal_alignment": {
      "key": "src/core/intent_alignment.py::check_goal_alignment",
      "name": "check_goal_alignment",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Returns (ok, details). details = { 'coverage': float|None, 'violations': [codes...] }",
      "docstring": "Returns (ok, details). details = { 'coverage': float|None, 'violations': [codes...] }\nViolations codes: 'blocked_topic', 'low_mission_overlap'",
      "calls": [
        "Path",
        "_read_blocklist",
        "_read_text_first",
        "_tokenize",
        "any",
        "append",
        "len",
        "lower",
        "max",
        "round",
        "set"
      ],
      "line_number": 60,
      "is_async": false,
      "parameters": [
        "goal",
        "project_root"
      ],
      "last_updated": "2025-08-24T09:27:08.455353+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0c7e02644a288a463670cc1472faa6701002593ecefcd8b3078631666b684468"
    },
    "src/core/capabilities.py::introspection": {
      "key": "src/core/capabilities.py::introspection",
      "name": "introspection",
      "type": "FunctionDef",
      "file": "src/core/capabilities.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "introspection",
      "intent": "Runs a full self-analysis cycle to inspect system structure and health.",
      "docstring": "Runs a full self-analysis cycle to inspect system structure and health.\nThis orchestrates the execution of the system's own introspection tools\nas separate, governed processes.",
      "calls": [
        "Path",
        "error",
        "info",
        "print",
        "resolve",
        "run",
        "warning"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-24T09:27:08.458566+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "65c205885812932a8159baa16c02658ee3be9c35f7e536cee2a1799fa9a682b7"
    },
    "src/core/ruff_linter.py::fix_and_lint_code_with_ruff": {
      "key": "src/core/ruff_linter.py::fix_and_lint_code_with_ruff",
      "name": "fix_and_lint_code_with_ruff",
      "type": "FunctionDef",
      "file": "src/core/ruff_linter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Fix and lint the provided Python code using Ruff's JSON output format.",
      "docstring": "Fix and lint the provided Python code using Ruff's JSON output format.\n\nArgs:\n    code (str): Source code to fix and lint.\n    display_filename (str): Optional display name for readable error messages.\n\nReturns:\n    A tuple containing:\n    - The potentially fixed code as a string.\n    - A list of structured violation dictionaries for any remaining issues.",
      "calls": [
        "NamedTemporaryFile",
        "append",
        "error",
        "exists",
        "get",
        "loads",
        "open",
        "read",
        "remove",
        "run",
        "write"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "code",
        "display_filename"
      ],
      "last_updated": "2025-08-24T09:27:08.461992+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "43ca55ae34afc29c10e967766b01252dae62b0efe0b5e8f024d0d5f07d1cc287"
    },
    "src/core/file_handler.py::FileHandler": {
      "key": "src/core/file_handler.py::FileHandler",
      "name": "FileHandler",
      "type": "ClassDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Central class for safe, auditable file operations in CORE.",
      "docstring": "Central class for safe, auditable file operations in CORE.\nAll writes are staged first and require confirmation. Validation is handled\nby the calling agent via the validation_pipeline.",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "as_posix",
        "dumps",
        "exists",
        "info",
        "is_dir",
        "is_relative_to",
        "isoformat",
        "mkdir",
        "now",
        "pop",
        "resolve",
        "str",
        "unlink",
        "uuid4",
        "write_text"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.467511+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "cf22b57d0019b89065c46a812e22e93b4b7115c5a8708f14c806b9a1d98a402f"
    },
    "src/core/file_handler.py::__init__": {
      "key": "src/core/file_handler.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize FileHandler with repository root.",
      "docstring": "Initialize FileHandler with repository root.",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "is_dir",
        "mkdir",
        "resolve"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.468645+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "a391bbf69fe28cb6f7dd819585d77edd303092eba98bfedd2829d91a0675d620"
    },
    "src/core/file_handler.py::add_pending_write": {
      "key": "src/core/file_handler.py::add_pending_write",
      "name": "add_pending_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stages a pending write operation for later confirmation.",
      "docstring": "Stages a pending write operation for later confirmation.",
      "calls": [
        "Path",
        "as_posix",
        "dumps",
        "isoformat",
        "now",
        "str",
        "uuid4",
        "write_text"
      ],
      "line_number": 51,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "suggested_path",
        "code"
      ],
      "last_updated": "2025-08-24T09:27:08.469704+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "97f53770943022e923da2c61ba40c8b032523785a1466c467746c7cf52a50e8f"
    },
    "src/core/file_handler.py::confirm_write": {
      "key": "src/core/file_handler.py::confirm_write",
      "name": "confirm_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "docstring": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "calls": [
        "ValueError",
        "dumps",
        "exists",
        "info",
        "is_relative_to",
        "mkdir",
        "pop",
        "resolve",
        "str",
        "unlink",
        "write_text"
      ],
      "line_number": 72,
      "is_async": false,
      "parameters": [
        "self",
        "pending_id"
      ],
      "last_updated": "2025-08-24T09:27:08.471796+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "541b4ae3111b2b97acd6b799bddb038018fc5ddaf06d45bd53757acdbbe26688"
    },
    "src/core/intent_model.py::IntentModel": {
      "key": "src/core/intent_model.py::IntentModel",
      "name": "IntentModel",
      "type": "ClassDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and provides an queryable interface to the source code structure",
      "docstring": "Loads and provides an queryable interface to the source code structure\ndefined in .intent/knowledge/source_structure.yaml.",
      "calls": [
        "FileNotFoundError",
        "Path",
        "ValueError",
        "_load_structure",
        "exists",
        "get",
        "isinstance",
        "items",
        "len",
        "read_text",
        "resolve",
        "safe_load",
        "sorted"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.475949+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "ead52768c57f82f1780c8048368cab32f42cf88daf78acfe2535d08b2a8e4e0e"
    },
    "src/core/intent_model.py::__init__": {
      "key": "src/core/intent_model.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initializes the model by loading the source structure definition from the repository, inferring the root if not provided.",
      "docstring": "Initializes the model by loading the source structure definition from the repository, inferring the root if not provided.",
      "calls": [
        "Path",
        "_load_structure",
        "resolve"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.476751+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "b6a00bdb4d20cab52b39f280147b910b87f17475e126165f66b105aeaf41d245"
    },
    "src/core/intent_model.py::_load_structure": {
      "key": "src/core/intent_model.py::_load_structure",
      "name": "_load_structure",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load the domain structure from .intent/knowledge/source_structure.yaml.",
      "docstring": "Load the domain structure from .intent/knowledge/source_structure.yaml.\n\nReturns:\n    Dict[str, dict]: Mapping of domain names to metadata (path, permissions, etc.).",
      "calls": [
        "FileNotFoundError",
        "ValueError",
        "exists",
        "isinstance",
        "read_text",
        "safe_load"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.477723+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "b824e94138bb02de0af5745ab5f6a071ce7b11cbfb5530c8f99e55a1bbccc06e"
    },
    "src/core/intent_model.py::resolve_domain_for_path": {
      "key": "src/core/intent_model.py::resolve_domain_for_path",
      "name": "resolve_domain_for_path",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Given an absolute or relative path, determine which domain it belongs to.",
      "docstring": "Given an absolute or relative path, determine which domain it belongs to.\nPrefers deeper (more specific) paths over shorter ones.",
      "calls": [
        "items",
        "len",
        "resolve",
        "sorted"
      ],
      "line_number": 61,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-24T09:27:08.478788+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "7233e373175714977e544959c79a24ce93db7915c6a103e729b62d514d42216c"
    },
    "src/core/intent_model.py::get_domain_permissions": {
      "key": "src/core/intent_model.py::get_domain_permissions",
      "name": "get_domain_permissions",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Return a list of allowed domains that the given domain can import from.",
      "docstring": "Return a list of allowed domains that the given domain can import from.\n\nArgs:\n    domain (str): The domain to query.\n\nReturns:\n    List[str]: List of allowed domain names, or empty list if not defined.",
      "calls": [
        "get",
        "isinstance"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [
        "self",
        "domain"
      ],
      "last_updated": "2025-08-24T09:27:08.479523+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "16a9b7ddeb463171579a3fbc9d32982a49bdb7faefbe080378a345cbbfda5698"
    },
    "src/core/errors.py::register_exception_handlers": {
      "key": "src/core/errors.py::register_exception_handlers",
      "name": "register_exception_handlers",
      "type": "FunctionDef",
      "file": "src/core/errors.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Registers custom exception handlers with the FastAPI application.",
      "docstring": "Registers custom exception handlers with the FastAPI application.",
      "calls": [
        "JSONResponse",
        "exception",
        "exception_handler",
        "info",
        "warning"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "last_updated": "2025-08-24T09:27:08.481641+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b4391706ebcc3340825a8843452e9937dff660eae23258170b9a39025af234cd"
    },
    "src/core/intent_guard.py::IntentGuard": {
      "key": "src/core/intent_guard.py::IntentGuard",
      "name": "IntentGuard",
      "type": "ClassDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "intent_guarding",
      "intent": "Central enforcement engine for CORE's safety and governance policies.",
      "docstring": "Central enforcement engine for CORE's safety and governance policies.\nEnsures all proposed file changes comply with declared rules and classifications.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "append",
        "exists",
        "extend",
        "get",
        "glob",
        "info",
        "is_dir",
        "isinstance",
        "len",
        "list",
        "load_config",
        "loads",
        "read_text",
        "resolve",
        "sorted",
        "values"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.486266+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "3309152ca64bbda67c94f9a5af5a51607261c757cce7a1d4bed6225bf443bf69"
    },
    "src/core/intent_guard.py::__init__": {
      "key": "src/core/intent_guard.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize IntentGuard with repository path and load all policies.",
      "docstring": "Initialize IntentGuard with repository path and load all policies.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "info",
        "len",
        "resolve"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.487310+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "1237769acc55b0d16734a3cc7c8a35a433527896ea598b163d555399fc1577fc"
    },
    "src/core/intent_guard.py::_load_policies": {
      "key": "src/core/intent_guard.py::_load_policies",
      "name": "_load_policies",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "docstring": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "calls": [
        "extend",
        "glob",
        "is_dir",
        "isinstance",
        "load_config"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.488057+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "58ca81c87b60fa11ae873bbb67dd836b4bd82e1f065b14967d0a6b10c724ff1a"
    },
    "src/core/intent_guard.py::_load_source_manifest": {
      "key": "src/core/intent_guard.py::_load_source_manifest",
      "name": "_load_source_manifest",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load the list of all known source files from the knowledge graph.",
      "docstring": "Load the list of all known source files from the knowledge graph.",
      "calls": [
        "exists",
        "get",
        "list",
        "loads",
        "read_text",
        "sorted",
        "values"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.489116+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "192c2a51474b035387b5dd1d0b9b0c1ea56903c550b8ec5f2ca40f40b69679cb"
    },
    "src/core/intent_guard.py::check_transaction": {
      "key": "src/core/intent_guard.py::check_transaction",
      "name": "check_transaction",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Check if a proposed set of file changes complies with all active rules.",
      "docstring": "Check if a proposed set of file changes complies with all active rules.\nThis is the primary enforcement point for constitutional integrity.",
      "calls": [
        "append",
        "resolve"
      ],
      "line_number": 73,
      "is_async": false,
      "parameters": [
        "self",
        "proposed_paths"
      ],
      "last_updated": "2025-08-24T09:27:08.490229+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "92924a1f132945e81b93a5ca688d1a218e3da14b4441bdea14f3888550cc533d"
    },
    "src/core/self_correction_engine.py::attempt_correction": {
      "key": "src/core/self_correction_engine.py::attempt_correction",
      "name": "attempt_correction",
      "type": "FunctionDef",
      "file": "src/core/self_correction_engine.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "self_correction",
      "intent": "Attempts to fix a failed validation or test result by generating corrected code via an LLM prompt based on the provided failure context.",
      "docstring": "Attempts to fix a failed validation or test result by generating corrected code via an LLM prompt based on the provided failure context.",
      "calls": [
        "GeneratorClient",
        "add_pending_write",
        "dumps",
        "get",
        "items",
        "list",
        "make_request",
        "parse_write_blocks",
        "process",
        "strip",
        "validate_code"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "failure_context"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.493413+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "62b6c78116a25ee0860c615c72e2ad1e04c559c73432641d14917b0dffba0b64"
    },
    "src/agents/development_cycle.py::run_development_cycle": {
      "key": "src/agents/development_cycle.py::run_development_cycle",
      "name": "run_development_cycle",
      "type": "AsyncFunctionDef",
      "file": "src/agents/development_cycle.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes a full, autonomous development cycle from a high-level goal.",
      "docstring": "Executes a full, autonomous development cycle from a high-level goal.",
      "calls": [
        "CognitiveService",
        "ExecutionAgent",
        "FileHandler",
        "GitService",
        "PlanExecutor",
        "PlannerAgent",
        "PromptPipeline",
        "create_execution_plan",
        "error",
        "execute_plan",
        "get_client_for_role",
        "info",
        "load_config",
        "str"
      ],
      "line_number": 24,
      "is_async": true,
      "parameters": [
        "goal"
      ],
      "last_updated": "2025-08-24T09:27:08.496535+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b937a6268d5a4ef34d90aa97ff67f3783d13d41ec66abf553bb4dc38c13c2af8"
    },
    "src/agents/plan_executor.py::PlanExecutionError": {
      "key": "src/agents/plan_executor.py::PlanExecutionError",
      "name": "PlanExecutionError",
      "type": "ClassDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Custom exception for failures during plan execution.",
      "docstring": "Custom exception for failures during plan execution.",
      "calls": [
        "__init__",
        "super"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.500926+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "3c61acd4cb84afb806dec357db8093d8aef20d4eb1c8c25ffc6463f6f880e4de"
    },
    "src/agents/plan_executor.py::__init__": {
      "key": "src/agents/plan_executor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the executor with necessary dependencies.",
      "docstring": "Initializes the executor with necessary dependencies.",
      "calls": [
        "CodeEditor",
        "SymbolLocator",
        "get_event_loop"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "self",
        "file_handler",
        "git_service",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.511465+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "0b30bc730c4ba6a3a1b8b392d6c763435afbc3a0bf2a124d3c408c05148d2456"
    },
    "src/agents/plan_executor.py::PlanExecutor": {
      "key": "src/agents/plan_executor.py::PlanExecutor",
      "name": "PlanExecutor",
      "type": "ClassDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "A service that takes a list of ExecutionTasks and executes them sequentially.",
      "docstring": "A service that takes a list of ExecutionTasks and executes them sequentially.",
      "calls": [
        "CodeEditor",
        "FileExistsError",
        "FileNotFoundError",
        "PlanExecutionError",
        "SymbolLocator",
        "_execute_task",
        "_execute_task_with_timeout",
        "_executor",
        "add",
        "add_pending_write",
        "all",
        "commit",
        "confirm_write",
        "dump",
        "enumerate",
        "exists",
        "get_event_loop",
        "info",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "mkdir",
        "read_text",
        "replace",
        "replace_symbol_in_code",
        "split",
        "splitlines",
        "str",
        "uuid4",
        "validate_code",
        "wait_for",
        "warning",
        "write_text"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.510796+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "ef7c20082076250e8823da7454e6b94865e7233b441f19e685c5532a13c41264"
    },
    "src/agents/plan_executor.py::execute_plan": {
      "key": "src/agents/plan_executor.py::execute_plan",
      "name": "execute_plan",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the entire plan, one task at a time.",
      "docstring": "Executes the entire plan, one task at a time.",
      "calls": [
        "_execute_task_with_timeout",
        "enumerate",
        "info",
        "len"
      ],
      "line_number": 47,
      "is_async": true,
      "parameters": [
        "self",
        "plan"
      ],
      "last_updated": "2025-08-24T09:27:08.512240+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "8ab199f27dd1071d219d6c48bea8bd7a3d2fdf4eedef7cfc8b84368e2888ac41"
    },
    "src/agents/plan_executor.py::_execute_task_with_timeout": {
      "key": "src/agents/plan_executor.py::_execute_task_with_timeout",
      "name": "_execute_task_with_timeout",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Execute task with timeout protection.",
      "docstring": "Execute task with timeout protection.",
      "calls": [
        "PlanExecutionError",
        "_execute_task",
        "wait_for"
      ],
      "line_number": 53,
      "is_async": true,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-24T09:27:08.512939+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "2b19751daf33b16818e0df3ee50ab15cb04a6b011160ffe645b7763f6a2b17d1"
    },
    "src/agents/plan_executor.py::_execute_task": {
      "key": "src/agents/plan_executor.py::_execute_task",
      "name": "_execute_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Dispatcher that executes a single task from a plan based on its action type.",
      "docstring": "Dispatcher that executes a single task from a plan based on its action type.",
      "calls": [
        "warning"
      ],
      "line_number": 61,
      "is_async": true,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-24T09:27:08.513728+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "263ef062428022dafb3f16b3dca0d6d5ab72c380d4f9f1a53799f70420802b57"
    },
    "src/agents/plan_executor.py::_execute_create_proposal": {
      "key": "src/agents/plan_executor.py::_execute_create_proposal",
      "name": "_execute_create_proposal",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'create_proposal' action.",
      "docstring": "Executes the 'create_proposal' action.",
      "calls": [
        "PlanExecutionError",
        "add",
        "all",
        "commit",
        "dump",
        "info",
        "is_git_repo",
        "mkdir",
        "replace",
        "split",
        "str",
        "uuid4",
        "write_text"
      ],
      "line_number": 75,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-24T09:27:08.515592+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "5b2c248301cb7ad2f533f96860ded4578b0b577a4d5c238bfa69913ed08f9376"
    },
    "src/agents/plan_executor.py::_execute_add_tag": {
      "key": "src/agents/plan_executor.py::_execute_add_tag",
      "name": "_execute_add_tag",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the surgical 'add_capability_tag' action.",
      "docstring": "Executes the surgical 'add_capability_tag' action.",
      "calls": [
        "PlanExecutionError",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "read_text",
        "splitlines",
        "validate_code"
      ],
      "line_number": 112,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-24T09:27:08.517999+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "92d0f7ab18897042061d91682aa174be9b4838e02c9cd239fd3531296aac57a7"
    },
    "src/agents/plan_executor.py::_execute_create_file": {
      "key": "src/agents/plan_executor.py::_execute_create_file",
      "name": "_execute_create_file",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'create_file' action.",
      "docstring": "Executes the 'create_file' action.",
      "calls": [
        "FileExistsError",
        "PlanExecutionError",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "validate_code"
      ],
      "line_number": 159,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-24T09:27:08.519508+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "4bb5563cf1361275428d4d0b4fec8e2fb191b87359137ff4a4827a076b7515f6"
    },
    "src/agents/plan_executor.py::_execute_edit_function": {
      "key": "src/agents/plan_executor.py::_execute_edit_function",
      "name": "_execute_edit_function",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'edit_function' action using the CodeEditor.",
      "docstring": "Executes the 'edit_function' action using the CodeEditor.",
      "calls": [
        "FileNotFoundError",
        "PlanExecutionError",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "replace_symbol_in_code",
        "validate_code"
      ],
      "line_number": 186,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-24T09:27:08.521567+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "cd92f69e3aa453220e21b7be41d28f3af1dcd95af46dc15c7e67902679562f94"
    },
    "src/agents/utils.py::CodeEditor": {
      "key": "src/agents/utils.py::CodeEditor",
      "name": "CodeEditor",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Provides capabilities to surgically edit code files.",
      "docstring": "Provides capabilities to surgically edit code files.",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "hasattr",
        "isinstance",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip",
        "walk"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.525853+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "1e325dcf304aa0ce36a35ad3940b9f6a12c98bc07ba1b0b7b5833c6a60521568"
    },
    "src/agents/utils.py::_get_symbol_start_end_lines": {
      "key": "src/agents/utils.py::_get_symbol_start_end_lines",
      "name": "_get_symbol_start_end_lines",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the 1-based start and end line numbers of a symbol.",
      "docstring": "Finds the 1-based start and end line numbers of a symbol.",
      "calls": [
        "hasattr",
        "isinstance",
        "walk"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "self",
        "tree",
        "symbol_name"
      ],
      "last_updated": "2025-08-24T09:27:08.526724+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/utils.py::CodeEditor",
      "structural_hash": "e1f209cb8a4ecc20429ae00376a97016fce78fac28e7722e1c75c53a474bc3d2"
    },
    "src/agents/utils.py::replace_symbol_in_code": {
      "key": "src/agents/utils.py::replace_symbol_in_code",
      "name": "replace_symbol_in_code",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Replaces a function/method in code with a new version using a line-based strategy.",
      "docstring": "Replaces a function/method in code with a new version using a line-based strategy.",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "self",
        "original_code",
        "symbol_name",
        "new_code_str"
      ],
      "last_updated": "2025-08-24T09:27:08.528438+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/utils.py::CodeEditor",
      "structural_hash": "cfb5faaf154f4f3a26a528a27d7d5bf3528f3fe6ae33480719e6c6d770fe0ee8"
    },
    "src/agents/utils.py::SymbolLocator": {
      "key": "src/agents/utils.py::SymbolLocator",
      "name": "SymbolLocator",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Dedicated class for finding symbols in code files.",
      "docstring": "Dedicated class for finding symbols in code files.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 69,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.529678+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "aa60ea7ae3b22f0acf89dcbc52608035efb94cdaf001b399ce61573f0275ff0b"
    },
    "src/agents/utils.py::find_symbol_line": {
      "key": "src/agents/utils.py::find_symbol_line",
      "name": "find_symbol_line",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the line number of a function or class definition in a file.",
      "docstring": "Finds the line number of a function or class definition in a file.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 73,
      "is_async": false,
      "parameters": [
        "file_path",
        "symbol_name"
      ],
      "last_updated": "2025-08-24T09:27:08.530850+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/utils.py::SymbolLocator",
      "structural_hash": "8ddfab18561b557e08e78df5c6ee99ff25b0c38d0088f3ed18ec16efbb047dd9"
    },
    "src/agents/utils.py::PlanExecutionContext": {
      "key": "src/agents/utils.py::PlanExecutionContext",
      "name": "PlanExecutionContext",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Context manager for safe plan execution with rollback.",
      "docstring": "Context manager for safe plan execution with rollback.",
      "calls": [
        "error",
        "get_current_commit",
        "is_git_repo",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 92,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.532215+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "0b5739e5879cc46fa7179e8c5de1d2f18481edbf8bde3cbfe93ab969e6059e1a"
    },
    "src/agents/utils.py::__init__": {
      "key": "src/agents/utils.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the context with the required services.",
      "docstring": "Initializes the context with the required services.",
      "calls": [],
      "line_number": 95,
      "is_async": false,
      "parameters": [
        "self",
        "git_service",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.532652+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "7a13b548b918d5f316c0f0dfb6b1c9aa786e7b9c5dd143c953df40f4c662c466"
    },
    "src/agents/utils.py::__enter__": {
      "key": "src/agents/utils.py::__enter__",
      "name": "__enter__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Sets up the execution context, capturing the initial git commit hash.",
      "docstring": "Sets up the execution context, capturing the initial git commit hash.",
      "calls": [
        "get_current_commit",
        "is_git_repo",
        "warning"
      ],
      "line_number": 101,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.533257+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "2eea8c9fedbe1113555cdb8dcdc7a195ea28d7047262856371b86dad399fcd48"
    },
    "src/agents/utils.py::__exit__": {
      "key": "src/agents/utils.py::__exit__",
      "name": "__exit__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Cleans up and handles rollback on failure.",
      "docstring": "Cleans up and handles rollback on failure.",
      "calls": [
        "error",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 110,
      "is_async": false,
      "parameters": [
        "self",
        "exc_type",
        "exc_val",
        "exc_tb"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.533936+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "cea0f9f8d587cddd867f45cf18307268680752bc315fad6ce98dee93f58a3e12"
    },
    "src/agents/planner_agent.py::PlannerAgent": {
      "key": "src/agents/planner_agent.py::PlannerAgent",
      "name": "PlannerAgent",
      "type": "ClassDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Decomposes goals into plans but does not execute them.",
      "docstring": "Decomposes goals into plans but does not execute them.",
      "calls": [
        "ExecutionTask",
        "PlanExecutionError",
        "PlannerConfig",
        "ValueError",
        "_log_plan_summary",
        "_setup_logging_context",
        "_validate_task_params",
        "all",
        "dedent",
        "enumerate",
        "extract_json_from_response",
        "format",
        "get",
        "getattr",
        "info",
        "isinstance",
        "isoformat",
        "len",
        "make_request",
        "now",
        "process",
        "range",
        "set",
        "strftime",
        "strip",
        "warning"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.540264+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "9392fa266221746adf5ad8dbc2b8478a65d9b0e1b9406e7ec328888d839947ac"
    },
    "src/agents/planner_agent.py::__init__": {
      "key": "src/agents/planner_agent.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Initializes the PlannerAgent with its dependencies.",
      "docstring": "Initializes the PlannerAgent with its dependencies.",
      "calls": [
        "PlannerConfig",
        "get"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self",
        "orchestrator_client",
        "prompt_pipeline",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.540963+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "876da26956d4f036f3d9cb01e5f1a791eed53ce391943b4687e488d441a24ab9"
    },
    "src/agents/planner_agent.py::_setup_logging_context": {
      "key": "src/agents/planner_agent.py::_setup_logging_context",
      "name": "_setup_logging_context",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Sets up a structured logging context for a planning cycle.",
      "docstring": "Sets up a structured logging context for a planning cycle.",
      "calls": [
        "isoformat",
        "now",
        "set"
      ],
      "line_number": 43,
      "is_async": false,
      "parameters": [
        "self",
        "goal",
        "plan_id"
      ],
      "last_updated": "2025-08-24T09:27:08.541475+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "59a96cbfb2dca8f5653d7a9a4255ea9f20aae428732c8e7605bda8e6fb129170"
    },
    "src/agents/planner_agent.py::_log_plan_summary": {
      "key": "src/agents/planner_agent.py::_log_plan_summary",
      "name": "_log_plan_summary",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Logs a human-readable summary of the generated execution plan.",
      "docstring": "Logs a human-readable summary of the generated execution plan.",
      "calls": [
        "enumerate",
        "info",
        "len"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [
        "self",
        "plan"
      ],
      "last_updated": "2025-08-24T09:27:08.542377+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "8dc5acc38cbf9becc59b88c68b3d4ae8eb6e605e3cdde45f0f4eb329070f3000"
    },
    "src/agents/planner_agent.py::_validate_task_params": {
      "key": "src/agents/planner_agent.py::_validate_task_params",
      "name": "_validate_task_params",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Validates that a task has all required parameters for its specified action.",
      "docstring": "Validates that a task has all required parameters for its specified action.",
      "calls": [
        "PlanExecutionError",
        "all",
        "getattr"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-24T09:27:08.543577+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "7609d31af8b098257e87f235689da188afb6395b79d03bcdb6548ef7e4ecf757"
    },
    "src/agents/planner_agent.py::create_execution_plan": {
      "key": "src/agents/planner_agent.py::create_execution_plan",
      "name": "create_execution_plan",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "llm_orchestration",
      "intent": "Decomposes a high-level goal into a structured, code-free execution plan using an LLM.",
      "docstring": "Decomposes a high-level goal into a structured, code-free execution plan using an LLM.",
      "calls": [
        "ExecutionTask",
        "PlanExecutionError",
        "ValueError",
        "_log_plan_summary",
        "_setup_logging_context",
        "_validate_task_params",
        "dedent",
        "extract_json_from_response",
        "format",
        "info",
        "isinstance",
        "make_request",
        "now",
        "process",
        "range",
        "strftime",
        "strip",
        "warning"
      ],
      "line_number": 79,
      "is_async": false,
      "parameters": [
        "self",
        "high_level_goal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.545530+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "3f52d14e88f56f5c5df71fa1adc604f4ba8dacfa890e47b761d494d891299174"
    },
    "src/agents/execution_agent.py::ExecutionAgent": {
      "key": "src/agents/execution_agent.py::ExecutionAgent",
      "name": "ExecutionAgent",
      "type": "ClassDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Orchestrates the execution of a plan, including code generation and validation.",
      "docstring": "Orchestrates the execution of a plan, including code generation and validation.",
      "calls": [
        "Path",
        "PlanExecutionContext",
        "_generate_code_for_proposal",
        "_generate_code_for_task",
        "dedent",
        "error",
        "execute_plan",
        "format",
        "get",
        "info",
        "make_request",
        "process",
        "read_text",
        "str",
        "strip",
        "warning"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.551979+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "e91c7c032fed5290b22c4a64371acab6fab03419b6f020e64d1eb33c13d8e3f7"
    },
    "src/agents/execution_agent.py::__init__": {
      "key": "src/agents/execution_agent.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the ExecutionAgent with its required tools.",
      "docstring": "Initializes the ExecutionAgent with its required tools.",
      "calls": [],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self",
        "generator_client",
        "prompt_pipeline",
        "plan_executor"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.552533+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/execution_agent.py::ExecutionAgent",
      "structural_hash": "c1a7286ad8dd84b7276b33672b2d266ef46696bc7da5c564035c95fa3618b70d"
    },
    "src/agents/execution_agent.py::_generate_code_for_proposal": {
      "key": "src/agents/execution_agent.py::_generate_code_for_proposal",
      "name": "_generate_code_for_proposal",
      "type": "AsyncFunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Generates the full file content for a create_proposal task.",
      "docstring": "Generates the full file content for a create_proposal task.",
      "calls": [
        "Path",
        "dedent",
        "error",
        "format",
        "info",
        "make_request",
        "read_text",
        "strip",
        "warning"
      ],
      "line_number": 41,
      "is_async": true,
      "parameters": [
        "self",
        "task",
        "goal"
      ],
      "last_updated": "2025-08-24T09:27:08.553938+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/execution_agent.py::ExecutionAgent",
      "structural_hash": "4f1dd45843c1b101a41acd4f619d1d21902ab20b91cab28feea5e88ebfb62514"
    },
    "src/agents/execution_agent.py::_generate_code_for_task": {
      "key": "src/agents/execution_agent.py::_generate_code_for_task",
      "name": "_generate_code_for_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "code_generation",
      "intent": "Generates the code content for a single task using a generator LLM.",
      "docstring": "Generates the code content for a single task using a generator LLM.",
      "calls": [
        "dedent",
        "format",
        "info",
        "make_request",
        "process",
        "strip"
      ],
      "line_number": 83,
      "is_async": true,
      "parameters": [
        "self",
        "task",
        "goal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.555039+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/agents/execution_agent.py::ExecutionAgent",
      "structural_hash": "7d1006c46f46bc6b68dd6111e3de42debe47e7c6aeac6c21bf2a1cc18cdbd219"
    },
    "src/agents/execution_agent.py::execute_plan": {
      "key": "src/agents/execution_agent.py::execute_plan",
      "name": "execute_plan",
      "type": "AsyncFunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Takes a plan, generates code for each step, and then executes the",
      "docstring": "Takes a plan, generates code for each step, and then executes the\nfully-populated plan.",
      "calls": [
        "PlanExecutionContext",
        "_generate_code_for_proposal",
        "_generate_code_for_task",
        "error",
        "execute_plan",
        "get",
        "info",
        "str"
      ],
      "line_number": 111,
      "is_async": true,
      "parameters": [
        "self",
        "high_level_goal",
        "plan"
      ],
      "last_updated": "2025-08-24T09:27:08.557316+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/execution_agent.py::ExecutionAgent",
      "structural_hash": "51786a08b5fc04f5bc51500e97b0275fc08c986af48a18d26d65f846e6a8a426"
    },
    "src/agents/models.py::TaskStatus": {
      "key": "src/agents/models.py::TaskStatus",
      "name": "TaskStatus",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Enumeration of possible states for an ExecutionTask.",
      "docstring": "Enumeration of possible states for an ExecutionTask.",
      "calls": [],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-24T09:27:08.558443+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition",
      "structural_hash": "d8ad3bccb3971670ad07d88d486e0340daa4f998de5ee01d303682e6a57c29be"
    },
    "src/agents/models.py::ExecutionProgress": {
      "key": "src/agents/models.py::ExecutionProgress",
      "name": "ExecutionProgress",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents the progress of a plan's execution.",
      "docstring": "Represents the progress of a plan's execution.",
      "calls": [],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.559130+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "883302550aafe6e5415325977197c59b7aabd402c5bb7843141f2305b0d22e62"
    },
    "src/agents/models.py::completion_percentage": {
      "key": "src/agents/models.py::completion_percentage",
      "name": "completion_percentage",
      "type": "FunctionDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates the completion percentage of the plan as a float,",
      "docstring": "Calculates the completion percentage of the plan as a float,\nreturning 0 if there are no tasks.",
      "calls": [],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.559637+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/models.py::ExecutionProgress",
      "structural_hash": "96a415b263a74ad9782012a018e24a85eefcc70fb291c0e2c00e65420d411352"
    },
    "src/agents/models.py::PlannerConfig": {
      "key": "src/agents/models.py::PlannerConfig",
      "name": "PlannerConfig",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Configuration settings for the PlannerAgent's behavior.",
      "docstring": "Configuration settings for the PlannerAgent's behavior.",
      "calls": [],
      "line_number": 45,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.560064+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "1b2dddc2040c6b9e91ef612bf7c9b521900fc8b84be4017844e987d806fad45e"
    },
    "src/agents/models.py::TaskParams": {
      "key": "src/agents/models.py::TaskParams",
      "name": "TaskParams",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for the parameters of a single task in an execution plan.",
      "docstring": "Data model for the parameters of a single task in an execution plan.",
      "calls": [],
      "line_number": 55,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.560674+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "7de51c1da18f978a58116d0f54417aa474d6eca8bec9f774216c31ef0a78a15c"
    },
    "src/agents/models.py::ExecutionTask": {
      "key": "src/agents/models.py::ExecutionTask",
      "name": "ExecutionTask",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for a single, executable step in a plan.",
      "docstring": "Data model for a single, executable step in a plan.",
      "calls": [],
      "line_number": 65,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.561073+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "7de45f51e556b98d78eb9665d5c0d851ff128cab9dc7f7f35329d8e473022f79"
    },
    "src/shared/path_utils.py::get_repo_root": {
      "key": "src/shared/path_utils.py::get_repo_root",
      "name": "get_repo_root",
      "type": "FunctionDef",
      "file": "src/shared/path_utils.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "docstring": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "calls": [
        "Path",
        "RuntimeError",
        "cwd",
        "exists",
        "resolve"
      ],
      "line_number": 7,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "last_updated": "2025-08-24T09:27:08.562172+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "edc71d0c31594afdd9eea55c11cfb962e028462f15c08972f1a1d9cf1796ed79"
    },
    "src/shared/config_loader.py::load_config": {
      "key": "src/shared/config_loader.py::load_config",
      "name": "load_config",
      "type": "FunctionDef",
      "file": "src/shared/config_loader.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "config.load",
      "intent": "Loads a JSON or YAML file into a dictionary with consistent error handling.",
      "docstring": "Loads a JSON or YAML file into a dictionary with consistent error handling.\n\nArgs:\n    file_path (Path): Path to the file to load.\n    file_type (str): 'json', 'yaml', or 'auto' to infer from extension.\n\nReturns:\n    Dict[str, Any]: Parsed file content or empty dict if file is missing/invalid.",
      "calls": [
        "Path",
        "error",
        "exists",
        "isinstance",
        "load",
        "lower",
        "open",
        "safe_load",
        "warning"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "file_path",
        "file_type"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.565643+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "fbc2d2b93fc2dafe94329531d8609337ff131d0b78fc91ccc06ae7c696dce4e1"
    },
    "src/shared/config.py::Settings": {
      "key": "src/shared/config.py::Settings",
      "name": "Settings",
      "type": "ClassDef",
      "file": "src/shared/config.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "A Pydantic settings model that loads configuration from the environment.",
      "docstring": "A Pydantic settings model that loads configuration from the environment.\nIt provides a typed, validated access to all system settings.",
      "calls": [
        "Path"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.567385+00:00",
      "is_class": true,
      "base_classes": [
        "BaseSettings"
      ],
      "structural_hash": "7754a5a97d3be5fb9a5499c8557af281b175b1d3736d2ba492fa7e6722316cac"
    },
    "src/shared/logger.py::getLogger": {
      "key": "src/shared/logger.py::getLogger",
      "name": "getLogger",
      "type": "FunctionDef",
      "file": "src/shared/logger.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "system_logging",
      "intent": "Returns a pre-configured logger instance with the given name.",
      "docstring": "Returns a pre-configured logger instance with the given name.",
      "calls": [
        "getLogger"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "name"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.568325+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "5c6f3d9067a28ed8b1274e2bc25fac32142f9ebce99fa57aea4a8ce44bf2edd9"
    },
    "src/system/guard/capability_discovery.py::collect_code_capabilities": {
      "key": "src/system/guard/capability_discovery.py::collect_code_capabilities",
      "name": "collect_code_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/capability_discovery.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Unified discovery entrypoint that tries the live KnowledgeGraphBuilder first,",
      "docstring": "Unified discovery entrypoint that tries the live KnowledgeGraphBuilder first,\nthen falls back to a direct source scan.",
      "calls": [
        "RuntimeError",
        "collect_from_kgb",
        "collect_from_source_scan"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs",
        "require_kgb"
      ],
      "last_updated": "2025-08-24T09:27:08.569798+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e48f7c87ea6b26ad0a7235a1de21d5d681fb9d602b84bc197e8e488ee74f9d56"
    },
    "src/system/guard/capability_discovery.py::load_manifest_capabilities": {
      "key": "src/system/guard/capability_discovery.py::load_manifest_capabilities",
      "name": "load_manifest_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/capability_discovery.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "docstring": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "calls": [
        "load_manifest_capabilities"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [
        "root",
        "explicit_path"
      ],
      "last_updated": "2025-08-24T09:27:08.570283+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7424757e7242faf2787f618be65139b5771145e1148c99ca1bd7844759895507"
    },
    "src/system/guard/drift_detector.py::detect_capability_drift": {
      "key": "src/system/guard/drift_detector.py::detect_capability_drift",
      "name": "detect_capability_drift",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Computes missing, undeclared, and mismatched capabilities between manifest and code.",
      "docstring": "Computes missing, undeclared, and mismatched capabilities between manifest and code.",
      "calls": [
        "DriftReport",
        "append",
        "keys",
        "list",
        "set",
        "sorted"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "manifest_caps",
        "code_caps"
      ],
      "last_updated": "2025-08-24T09:27:08.572625+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "fb9cc3adce19b9962fed21968390bc8fd63447ff630b4742636e98c8fb796d14"
    },
    "src/system/guard/drift_detector.py::write_report": {
      "key": "src/system/guard/drift_detector.py::write_report",
      "name": "write_report",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Persists the drift report to disk for evidence and CI.",
      "docstring": "Persists the drift report to disk for evidence and CI.",
      "calls": [
        "dumps",
        "mkdir",
        "to_dict",
        "write_text"
      ],
      "line_number": 43,
      "is_async": false,
      "parameters": [
        "report_path",
        "report"
      ],
      "last_updated": "2025-08-24T09:27:08.573198+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f470e15b680e9bda6d15592a0bcb69254df8aef37a8400043fda5abc2a84ec49"
    },
    "src/system/guard/models.py::CapabilityMeta": {
      "key": "src/system/guard/models.py::CapabilityMeta",
      "name": "CapabilityMeta",
      "type": "ClassDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "A minimal, shared data container for capability metadata.",
      "docstring": "A minimal, shared data container for capability metadata.",
      "calls": [
        "dataclass"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.574114+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "16c4f81415492ed8331c9a206c1f55a0e7ac37b46f777a803d4ae45901b86124"
    },
    "src/system/guard/models.py::DriftReport": {
      "key": "src/system/guard/models.py::DriftReport",
      "name": "DriftReport",
      "type": "ClassDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Structured result for capability drift suitable for JSON emission and CI gating.",
      "docstring": "Structured result for capability drift suitable for JSON emission and CI gating.",
      "calls": [
        "sorted"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.574904+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "7921fd074f563aace637ec680097dd26facb5aa61c3fd8ca7ce69782c1a818a8"
    },
    "src/system/guard/models.py::to_dict": {
      "key": "src/system/guard/models.py::to_dict",
      "name": "to_dict",
      "type": "FunctionDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Converts the drift report into a stable JSON-serializable dict.",
      "docstring": "Converts the drift report into a stable JSON-serializable dict.",
      "calls": [
        "sorted"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.575386+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/guard/models.py::DriftReport",
      "structural_hash": "485033d9fffb5828ea2f692bf9505bb59c7f33d9d7cec1bd11506141277667e2"
    },
    "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor": {
      "key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "name": "ConstitutionalAuditor",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "alignment_checking",
      "intent": "Orchestrates the discovery and execution of constitutional checks.",
      "docstring": "Orchestrates the discovery and execution of constitutional checks.",
      "calls": [
        "AuditFinding",
        "AuditorContext",
        "Console",
        "IntentModel",
        "Panel",
        "Path",
        "_LoggingBridge",
        "_discover_checks",
        "_report_final_status",
        "aggregate_manifests",
        "any",
        "append",
        "check_fn",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "exists",
        "extend",
        "get",
        "get_repo_root",
        "getmembers",
        "glob",
        "import_module",
        "info",
        "len",
        "list",
        "load_config",
        "load_dotenv",
        "print",
        "sort",
        "split",
        "startswith",
        "strip",
        "sum",
        "values",
        "warning"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.586222+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "276d65072a44d39e837b067caadf20adae2e3751ceb8a2a638a93832a2afbee3"
    },
    "src/system/governance/constitutional_auditor.py::__init__": {
      "key": "src/system/governance/constitutional_auditor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize the auditor, loading configuration and knowledge files.",
      "docstring": "Initialize the auditor, loading configuration and knowledge files.\n\nArgs:\n    repo_root_override: If provided, use this directory as the repo root (used for canary validation).",
      "calls": [
        "AuditorContext",
        "Console",
        "_LoggingBridge",
        "_discover_checks",
        "exists",
        "get_repo_root",
        "info",
        "load_dotenv"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root_override"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.587612+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "3f1eacb17d8e5a529e3db9d2dc4a713730eccaf940abaf7485948ebc7d1813e4"
    },
    "src/system/governance/constitutional_auditor.py::_discover_checks": {
      "key": "src/system/governance/constitutional_auditor.py::_discover_checks",
      "name": "_discover_checks",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Discover check methods from modules in the 'checks' directory.",
      "docstring": "Discover check methods from modules in the 'checks' directory.",
      "calls": [
        "Path",
        "append",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "get",
        "getmembers",
        "glob",
        "import_module",
        "len",
        "sort",
        "split",
        "startswith",
        "warning"
      ],
      "line_number": 80,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.590263+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "e0c78bae4bd9ebac3e0af66fb766ac489691f007c6a9ca33313b5c69189f6fab"
    },
    "src/system/governance/constitutional_auditor.py::run_full_audit": {
      "key": "src/system/governance/constitutional_auditor.py::run_full_audit",
      "name": "run_full_audit",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Run all discovered validation checks and return overall status.",
      "docstring": "Run all discovered validation checks and return overall status.",
      "calls": [
        "AuditFinding",
        "Panel",
        "_report_final_status",
        "any",
        "append",
        "check_fn",
        "error",
        "extend",
        "info",
        "print",
        "split",
        "warning"
      ],
      "line_number": 124,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.592319+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "0e5a342921730b79160f6b87b9173dfa7dbf260c69799dd33923b277d38d661f"
    },
    "src/system/governance/constitutional_auditor.py::_report_final_status": {
      "key": "src/system/governance/constitutional_auditor.py::_report_final_status",
      "name": "_report_final_status",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Print final audit summary to the console.",
      "docstring": "Print final audit summary to the console.",
      "calls": [
        "Panel",
        "print",
        "sum"
      ],
      "line_number": 165,
      "is_async": false,
      "parameters": [
        "self",
        "passed"
      ],
      "last_updated": "2025-08-24T09:27:08.593486+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "24f3456c07f2542af03ec4f96aab424a76aa133c1bfbab1b7b85fdcae32cd7ea"
    },
    "src/system/governance/constitutional_auditor.py::main": {
      "key": "src/system/governance/constitutional_auditor.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "CLI entry point for the Constitutional Auditor.",
      "docstring": "CLI entry point for the Constitutional Auditor.",
      "calls": [
        "ConstitutionalAuditor",
        "error",
        "exit",
        "load_dotenv",
        "run_full_audit"
      ],
      "line_number": 180,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-24T09:27:08.594489+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f6fdbaa6bfe1e6124c035255bac2283c42602332b190a0302133de3a8620c2b6"
    },
    "src/system/governance/models.py::AuditSeverity": {
      "key": "src/system/governance/models.py::AuditSeverity",
      "name": "AuditSeverity",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Severity levels for audit findings.",
      "docstring": "Severity levels for audit findings.",
      "calls": [],
      "line_number": 10,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-24T09:27:08.595222+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition",
      "structural_hash": "28f79c27c1ebb4978fd62cdbbe31ddb7e431f470ef3a59a801b0f7b146fdab17"
    },
    "src/system/governance/models.py::AuditFinding": {
      "key": "src/system/governance/models.py::AuditFinding",
      "name": "AuditFinding",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents a single audit finding.",
      "docstring": "Represents a single audit finding.",
      "calls": [],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.595638+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "a77333291b4a5559fadebab11ad48cd08bc5847c3142d31af4b41d0a2b4ef394"
    },
    "src/system/admin/new.py::register": {
      "key": "src/system/admin/new.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/new.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register the 'new' command with the main CLI app.",
      "docstring": "Register the 'new' command with the main CLI app.",
      "calls": [
        "command"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.596238+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "358ca9667b776207e550b217e6f9933316ae2f21c94becefe3425c018fd562b8"
    },
    "src/system/admin/fixer.py::register": {
      "key": "src/system/admin/fixer.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/fixer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register fixer commands under the admin CLI.",
      "docstring": "Intent: Register fixer commands under the admin CLI.",
      "calls": [
        "Typer",
        "add_typer",
        "command"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.597019+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "d0ae582702a2b2c6909b50733bb0512725c7da502b0c14afe4d908c46d4e2ef4"
    },
    "src/system/admin/agent.py::_extract_json_from_response": {
      "key": "src/system/admin/agent.py::_extract_json_from_response",
      "name": "_extract_json_from_response",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Helper to extract JSON from LLM responses for scaffolding.",
      "docstring": "Helper to extract JSON from LLM responses for scaffolding.",
      "calls": [
        "group",
        "loads",
        "search"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "text"
      ],
      "last_updated": "2025-08-24T09:27:08.599776+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "10f0c5d7a50aa56e299e0a3866b80236d02458d27d59d3ed38f71d42e00ec4d5"
    },
    "src/system/admin/agent.py::scaffold_new_application": {
      "key": "src/system/admin/agent.py::scaffold_new_application",
      "name": "scaffold_new_application",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "scaffold_project",
      "intent": "Uses an LLM to plan and generate a new, multi-file application.",
      "docstring": "Uses an LLM to plan and generate a new, multi-file application.",
      "calls": [
        "GitService",
        "Scaffolder",
        "ValueError",
        "_extract_json_from_response",
        "add",
        "commit",
        "dedent",
        "error",
        "exists",
        "format",
        "get_client_for_role",
        "info",
        "isinstance",
        "items",
        "len",
        "make_request",
        "read_text",
        "relative_to",
        "run",
        "scaffold_base_structure",
        "str",
        "strip",
        "write_file"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "project_name",
        "goal",
        "cognitive_service",
        "file_handler",
        "initialize_git"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.602992+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "a1488477d060b585c18eb0f0d1e7b684a960469dc61034a959ef39e77782ae04"
    },
    "src/system/admin/agent.py::agent_scaffold": {
      "key": "src/system/admin/agent.py::agent_scaffold",
      "name": "agent_scaffold",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Uses an LLM agent to autonomously scaffold a new application.",
      "docstring": "Uses an LLM agent to autonomously scaffold a new application.",
      "calls": [
        "Argument",
        "CognitiveService",
        "Exit",
        "FileHandler",
        "Option",
        "command",
        "error",
        "info",
        "scaffold_new_application",
        "secho",
        "str"
      ],
      "line_number": 118,
      "is_async": false,
      "parameters": [
        "name",
        "goal",
        "git_init"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.604749+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "d359d40223f6cf002cbe08f62c4905423c0c1589bb4da4a6504571a603bce9a0"
    },
    "src/system/admin/agent.py::register": {
      "key": "src/system/admin/agent.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register the 'agent' command group with the main CLI app.",
      "docstring": "Register the 'agent' command group with the main CLI app.",
      "calls": [
        "add_typer"
      ],
      "line_number": 151,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.605140+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "07d267b258290654459382e668c672b5d5f218f486a0a69db1a829079247f439"
    },
    "src/system/admin/migrator.py::register": {
      "key": "src/system/admin/migrator.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/migrator.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register migration commands (manifest-migrator) under the admin CLI.",
      "docstring": "Register migration commands (manifest-migrator) under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.605843+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "b5aa9163afdf378f45afb8a26ceecb71fe3dc7e8949a7907aee98b0c2eb40a7f"
    },
    "src/system/admin/utils.py::should_fail": {
      "key": "src/system/admin/utils.py::should_fail",
      "name": "should_fail",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.should_fail",
      "intent": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "docstring": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "calls": [
        "bool",
        "get"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "report",
        "fail_on"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.608185+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "4d0fc9b76df312e54be34f47cf05c8fc7f3704ee9a5081f9305e5c1b95aa9365"
    },
    "src/system/admin/utils.py::load_yaml_file": {
      "key": "src/system/admin/utils.py::load_yaml_file",
      "name": "load_yaml_file",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.load_yaml",
      "intent": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "docstring": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "calls": [
        "read_text",
        "safe_load"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [
        "path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.608708+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "2ce3e9f321eb08e41cb6220dcbcc1598d37029ebcf200d493aba3bdd7c765ba5"
    },
    "src/system/admin/utils.py::save_yaml_file": {
      "key": "src/system/admin/utils.py::save_yaml_file",
      "name": "save_yaml_file",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.save_yaml",
      "intent": "Intent: Persist YAML with stable ordering to ensure consistent hashes.",
      "docstring": "Intent: Persist YAML with stable ordering to ensure consistent hashes.",
      "calls": [
        "dump",
        "write_text"
      ],
      "line_number": 45,
      "is_async": false,
      "parameters": [
        "path",
        "data"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.609229+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "9c7b11b6961eeeb84df8234519f9f967e905c743dc674b1cd970457751b43456"
    },
    "src/system/admin/utils.py::_get_canonical_payload": {
      "key": "src/system/admin/utils.py::_get_canonical_payload",
      "name": "_get_canonical_payload",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Creates a stable, sorted JSON string of the proposal's core intent,",
      "docstring": "Creates a stable, sorted JSON string of the proposal's core intent,\nignoring all other metadata like signatures. This is the single source\nof truth for what gets signed.",
      "calls": [
        "dumps",
        "get"
      ],
      "line_number": 51,
      "is_async": false,
      "parameters": [
        "proposal"
      ],
      "last_updated": "2025-08-24T09:27:08.609939+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "cd368980a1ec19c61879bf251b291bcbbba9c6a4a3adcb371e221d8f0cbff772"
    },
    "src/system/admin/utils.py::generate_approval_token": {
      "key": "src/system/admin/utils.py::generate_approval_token",
      "name": "generate_approval_token",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.generate_token",
      "intent": "Intent: Produce a deterministic token based on a canonical representation",
      "docstring": "Intent: Produce a deterministic token based on a canonical representation\nof the proposal's intent.",
      "calls": [
        "Hash",
        "SHA256",
        "_get_canonical_payload",
        "encode",
        "finalize",
        "hex",
        "update"
      ],
      "line_number": 69,
      "is_async": false,
      "parameters": [
        "proposal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.610678+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "dd65f7283e4d7191e614d6286839506917f6c09f39e67f79857b2be10b3c3889"
    },
    "src/system/admin/utils.py::load_private_key": {
      "key": "src/system/admin/utils.py::load_private_key",
      "name": "load_private_key",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.load_key",
      "intent": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "docstring": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "calls": [
        "SystemExit",
        "error",
        "exists",
        "load_pem_private_key",
        "read_bytes"
      ],
      "line_number": 83,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.611352+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "ec28f05c87fe73ee0dfa8f5580121c927c5dc0a08c0b75bfa22ee0e0868e468b"
    },
    "src/system/admin/utils.py::archive_rollback_plan": {
      "key": "src/system/admin/utils.py::archive_rollback_plan",
      "name": "archive_rollback_plan",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.archive_plan",
      "intent": "Intent: Persist a rollback plan snapshot for approved proposals.",
      "docstring": "Intent: Persist a rollback plan snapshot for approved proposals.",
      "calls": [
        "dumps",
        "get",
        "info",
        "mkdir",
        "strftime",
        "utcnow",
        "write_text"
      ],
      "line_number": 95,
      "is_async": false,
      "parameters": [
        "proposal_name",
        "proposal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.612653+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "3fee477cc6e1a83e51d223a8844378614d3e379c846ae8b2b008ac59063dd680"
    },
    "src/system/admin/reviewer.py::_is_ignored": {
      "key": "src/system/admin/reviewer.py::_is_ignored",
      "name": "_is_ignored",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Checks if a given file path should be ignored based on IGNORE_PATTERNS.",
      "docstring": "Checks if a given file path should be ignored based on IGNORE_PATTERNS.",
      "calls": [
        "any"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "path_str"
      ],
      "last_updated": "2025-08-24T09:27:08.615451+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b0dcdbc5bcd3fad88dd29308c2d078febb3f76f3ca1abda9f84b84759ba7568d"
    },
    "src/system/admin/reviewer.py::_get_bundle_content": {
      "key": "src/system/admin/reviewer.py::_get_bundle_content",
      "name": "_get_bundle_content",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Gathers and bundles the content of all constitutional files.",
      "docstring": "Gathers and bundles the content of all constitutional files.",
      "calls": [
        "Exit",
        "_is_ignored",
        "append",
        "error",
        "exists",
        "extend",
        "find_paths_in_meta",
        "info",
        "is_file",
        "isinstance",
        "join",
        "len",
        "list",
        "read_text",
        "safe_load",
        "set",
        "sorted",
        "values"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.617912+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "47a9e252ee6d00c1d63bb7b8ea1322c3335c77c9b3e9c9ddc0f381c0210bfecd"
    },
    "src/system/admin/reviewer.py::export_constitution": {
      "key": "src/system/admin/reviewer.py::export_constitution",
      "name": "export_constitution",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Packages the full .intent/ directory into a single bundle for external analysis.",
      "docstring": "Packages the full .intent/ directory into a single bundle for external analysis.\nThis command reads the meta.yaml file to discover all constitutional files\nand concatenates them into a single, LLM-friendly text file.",
      "calls": [
        "Option",
        "Path",
        "_get_bundle_content",
        "info",
        "mkdir",
        "write_text"
      ],
      "line_number": 77,
      "is_async": false,
      "parameters": [
        "output"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.618764+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "686b1c150edec5ed4602dd73ddb2fec5bc73ac70ac18d987f29b95650830b3a1"
    },
    "src/system/admin/reviewer.py::peer_review": {
      "key": "src/system/admin/reviewer.py::peer_review",
      "name": "peer_review",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Orchestrates sending the constitutional bundle to an external LLM for critique.",
      "docstring": "Orchestrates sending the constitutional bundle to an external LLM for critique.",
      "calls": [
        "CognitiveService",
        "Exit",
        "Option",
        "Path",
        "_get_bundle_content",
        "echo",
        "error",
        "exists",
        "get_client_for_role",
        "info",
        "make_request",
        "mkdir",
        "read_text",
        "secho",
        "write_text"
      ],
      "line_number": 97,
      "is_async": false,
      "parameters": [
        "output",
        "no_send"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.621190+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "d9627eab2503c0881710cc6a31aba4159920a853a1f41b7b7a2d75ed26877984"
    },
    "src/system/admin/reviewer.py::register": {
      "key": "src/system/admin/reviewer.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Registers the 'review' command group and its subcommands.",
      "docstring": "Registers the 'review' command group and its subcommands.",
      "calls": [
        "Typer",
        "add_typer",
        "command"
      ],
      "line_number": 168,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.621800+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "50564ec3cb9525beb4d7a7142754651f6778e34d74f9c147b4d99fb3d7f73464"
    },
    "src/system/admin/byor.py::initialize_repository": {
      "key": "src/system/admin/byor.py::initialize_repository",
      "name": "initialize_repository",
      "type": "FunctionDef",
      "file": "src/system/admin/byor.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "docstring": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "calls": [
        "Argument",
        "Exit",
        "KnowledgeGraphBuilder",
        "Option",
        "build",
        "dump",
        "echo",
        "error",
        "get",
        "info",
        "isinstance",
        "items",
        "len",
        "list",
        "mkdir",
        "read_text",
        "secho",
        "set",
        "sorted",
        "values",
        "write_text"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "path",
        "dry_run"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.627392+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "685e77beb1854c44e1d3adc89f529387ef92de25b3e864bb2a747777752208e6"
    },
    "src/system/admin/byor.py::register": {
      "key": "src/system/admin/byor.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/byor.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "docstring": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 146,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.627817+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "9b62691ef90f3390c625b2239aa9e80250dc156e4deba0ed1740245705a1dbf6"
    },
    "src/system/admin/proposals.py::proposals_list": {
      "key": "src/system/admin/proposals.py::proposals_list",
      "name": "proposals_list",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "List pending constitutional proposals and display their justification, target path, and signature/quorum status.",
      "docstring": "List pending constitutional proposals and display their justification, target path, and signature/quorum status.",
      "calls": [
        "any",
        "command",
        "endswith",
        "get",
        "glob",
        "info",
        "len",
        "list",
        "load_yaml_file",
        "mkdir",
        "sorted",
        "strip"
      ],
      "line_number": 37,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.634579+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "b0b367db0accf32e883a7583eb2a457f4afe625e8f14ec5a41a1d1fed537a5cc"
    },
    "src/system/admin/proposals.py::proposals_sign": {
      "key": "src/system/admin/proposals.py::proposals_sign",
      "name": "proposals_sign",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Sign a proposal with the operator's private key (content-bound token).",
      "docstring": "Sign a proposal with the operator's private key (content-bound token).",
      "calls": [
        "Argument",
        "Exit",
        "append",
        "b64encode",
        "command",
        "decode",
        "encode",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "isoformat",
        "load_private_key",
        "load_yaml_file",
        "prompt",
        "save_yaml_file",
        "setdefault",
        "sign",
        "utcnow"
      ],
      "line_number": 83,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.636418+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "bde248a51a26e815c05964f60e1a85aadcfbe334e6ede8b995077fd523c2bb6b"
    },
    "src/system/admin/proposals.py::proposals_approve": {
      "key": "src/system/admin/proposals.py::proposals_approve",
      "name": "proposals_approve",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Verify signatures/quorum, run a canary constitutional audit, then apply the proposal if valid.",
      "docstring": "Verify signatures/quorum, run a canary constitutional audit, then apply the proposal if valid.",
      "calls": [
        "Argument",
        "ConstitutionalAuditor",
        "Exit",
        "Path",
        "TemporaryDirectory",
        "any",
        "archive_rollback_plan",
        "b64decode",
        "command",
        "copy",
        "decode",
        "encode",
        "endswith",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "load_pem_public_key",
        "load_yaml_file",
        "mkdir",
        "run",
        "run_full_audit",
        "str",
        "unlink",
        "verify",
        "warning",
        "write_text"
      ],
      "line_number": 122,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.642730+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "00f51f4386ea8d53696eebfd8bdf9868f19db410641c87041979427425aa35dd"
    },
    "src/system/admin/proposals.py::register": {
      "key": "src/system/admin/proposals.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register proposal lifecycle commands under the admin CLI.",
      "docstring": "Register proposal lifecycle commands under the admin CLI.",
      "calls": [
        "add_typer"
      ],
      "line_number": 253,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.643139+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "bed38ebf9ccf2e6383df444f57442b0563d41c4119e91f228822b5e95b6638ac"
    },
    "src/system/admin/guard.py::_find_manifest_path": {
      "key": "src/system/admin/guard.py::_find_manifest_path",
      "name": "_find_manifest_path",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Locate and return the path to the project manifest file, or None.",
      "docstring": "Locate and return the path to the project manifest file, or None.",
      "calls": [
        "exists"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "last_updated": "2025-08-24T09:27:08.647729+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6dd09295daf064db06a1ec5f1748ef584230a79a2c12aff3e6ff5d3d08653108"
    },
    "src/system/admin/guard.py::_load_raw_manifest": {
      "key": "src/system/admin/guard.py::_load_raw_manifest",
      "name": "_load_raw_manifest",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads and parses a YAML manifest file, returning an empty dict if not found.",
      "docstring": "Loads and parses a YAML manifest file, returning an empty dict if not found.",
      "calls": [
        "_find_manifest_path",
        "read_text",
        "safe_load"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "last_updated": "2025-08-24T09:27:08.648456+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5ba2a3e01f6a1ff0de5b94fbb1c20721738ba2589d77a32d38da472ac6e12f64"
    },
    "src/system/admin/guard.py::_ux_defaults": {
      "key": "src/system/admin/guard.py::_ux_defaults",
      "name": "_ux_defaults",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Extracts and returns UX-related default values from the manifest.",
      "docstring": "Extracts and returns UX-related default values from the manifest.",
      "calls": [
        "_load_raw_manifest",
        "bool",
        "get"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "last_updated": "2025-08-24T09:27:08.649678+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "62452ac1b181264f3d8f59bbcc99a76562f815b7bbd08e00e4257649cdee4f25"
    },
    "src/system/admin/guard.py::_is_clean": {
      "key": "src/system/admin/guard.py::_is_clean",
      "name": "_is_clean",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Determines if a report is clean.",
      "docstring": "Determines if a report is clean.",
      "calls": [
        "get"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "report"
      ],
      "last_updated": "2025-08-24T09:27:08.650202+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "37959f8d821c2b4ca6b6146c0399c2561fc8e567a07025b5ba8ddaf66176f4d5"
    },
    "src/system/admin/guard.py::_print_table": {
      "key": "src/system/admin/guard.py::_print_table",
      "name": "_print_table",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Prints a formatted table of the drift report.",
      "docstring": "Prints a formatted table of the drift report.",
      "calls": [
        "Table",
        "_is_clean",
        "add_column",
        "add_row",
        "fit",
        "get",
        "join",
        "row",
        "rprint"
      ],
      "line_number": 79,
      "is_async": false,
      "parameters": [
        "report_dict",
        "labels"
      ],
      "last_updated": "2025-08-24T09:27:08.652616+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8adb51eb76846db20ba682e57e97adc72ecb9a3dea4d84079e99507b35534913"
    },
    "src/system/admin/guard.py::_print_pretty": {
      "key": "src/system/admin/guard.py::_print_pretty",
      "name": "_print_pretty",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Prints a user-friendly summary of the drift report.",
      "docstring": "Prints a user-friendly summary of the drift report.",
      "calls": [
        "_print_table"
      ],
      "line_number": 118,
      "is_async": false,
      "parameters": [
        "report_dict",
        "labels"
      ],
      "last_updated": "2025-08-24T09:27:08.653049+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "76f6ca2a3c5b52f7a6e59c006de9011d04cee89af176fc0e53f1feb7d5a739b6"
    },
    "src/system/admin/guard.py::register": {
      "key": "src/system/admin/guard.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Registers the 'guard' command group with the CLI.",
      "docstring": "Registers the 'guard' command group with the CLI.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "StringIO",
        "Typer",
        "_print_pretty",
        "_ux_defaults",
        "add_typer",
        "collect_code_capabilities",
        "command",
        "detect_capability_drift",
        "dumps",
        "echo",
        "items",
        "len",
        "load_manifest_capabilities",
        "lower",
        "mkdir",
        "redirect_stdout",
        "rprint",
        "secho",
        "should_fail",
        "sorted",
        "to_dict",
        "write_report",
        "write_text"
      ],
      "line_number": 123,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.657696+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "bd5f5329091a31896ed3904a1d0ec06fbe51d193b38b7b1b172e40e36c2ed249"
    },
    "src/system/admin/keys.py::register": {
      "key": "src/system/admin/keys.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/keys.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register key management commands under the admin CLI.",
      "docstring": "Intent: Register key management commands under the admin CLI.",
      "calls": [
        "Argument",
        "NoEncryption",
        "chmod",
        "command",
        "confirm",
        "decode",
        "dump",
        "exists",
        "generate",
        "info",
        "mkdir",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "write_bytes"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.660429+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "c339a1d72ef8deb18d44a4acc776d4540fc2b0bda8e197e7f50ec64d9f4292b1"
    },
    "src/system/admin/develop.py::develop": {
      "key": "src/system/admin/develop.py::develop",
      "name": "develop",
      "type": "FunctionDef",
      "file": "src/system/admin/develop.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "autonomous_development",
      "intent": "Orchestrates the autonomous development process from a high-level goal.",
      "docstring": "Orchestrates the autonomous development process from a high-level goal.",
      "calls": [
        "Argument",
        "Exit",
        "error",
        "info",
        "load_dotenv",
        "run",
        "run_development_cycle",
        "secho"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "goal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.662589+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "09e2664be58fe2e169ff719d71a895bdc32799caffd5f718322a987955cc7ac8"
    },
    "src/system/admin/develop.py::register": {
      "key": "src/system/admin/develop.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/develop.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register the 'develop' command with the main CLI app.",
      "docstring": "Register the 'develop' command with the main CLI app.",
      "calls": [
        "command"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-24T09:27:08.663012+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "5f2dc93b5a1aa9e365808a504b61df5d20cb7a79dd9e12e159f2811592b18cee"
    },
    "src/system/tools/change_log_updater.py::load_existing_log": {
      "key": "src/system/tools/change_log_updater.py::load_existing_log",
      "name": "load_existing_log",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads the existing change log from disk or returns a new structure.",
      "docstring": "Loads the existing change log from disk or returns a new structure.",
      "calls": [
        "load_config"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.664336+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "617e44205e9e392dcf047c13cf3fd9d88d9568ae09b5c487f92733eaf6167426"
    },
    "src/system/tools/change_log_updater.py::append_change_entry": {
      "key": "src/system/tools/change_log_updater.py::append_change_entry",
      "name": "append_change_entry",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Appends a new, structured entry to the metacode change log.",
      "docstring": "Appends a new, structured entry to the metacode change log.",
      "calls": [
        "append",
        "dumps",
        "info",
        "isoformat",
        "load_existing_log",
        "mkdir",
        "utcnow",
        "write_text"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "task",
        "step",
        "modified_files",
        "score",
        "violations"
      ],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-24T09:27:08.665458+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "810699914d469cb08496ca059f28f88fc261f95546655275a5821abcca68cdce"
    },
    "src/system/tools/codegraph_builder.py::ProjectStructureError": {
      "key": "src/system/tools/codegraph_builder.py::ProjectStructureError",
      "name": "ProjectStructureError",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Custom exception for when the project's root cannot be determined.",
      "docstring": "Custom exception for when the project's root cannot be determined.",
      "calls": [],
      "line_number": 21,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.667716+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "2f13e6e5a0eb3f0c4f02e9a457c18dba96ed08cc8c805bed8008ebab96d432b6"
    },
    "src/system/tools/codegraph_builder.py::find_project_root": {
      "key": "src/system/tools/codegraph_builder.py::find_project_root",
      "name": "find_project_root",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Traverse upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "docstring": "Traverse upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "calls": [
        "ProjectStructureError",
        "exists",
        "resolve"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "last_updated": "2025-08-24T09:27:08.668360+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e730a8c97bbf62a3563d99cd7b52e176fcb2add0ee57994783e82f6fd4170b24"
    },
    "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder": {
      "key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "name": "KnowledgeGraphBuilder",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "manifest_updating",
      "intent": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "docstring": "Builds a comprehensive JSON representation of the project's code structure and relationships.\n\nThis is the main orchestrator that coordinates file scanning, AST analysis, domain mapping,\nand pattern matching to generate a complete knowledge graph of the codebase.",
      "calls": [
        "ASTAnalyzer",
        "DomainMapper",
        "FileScanner",
        "PatternMatcher",
        "_build_empty_output",
        "_build_output",
        "analyze_files",
        "apply_patterns",
        "asdict",
        "find_python_files",
        "from_project",
        "info",
        "isoformat",
        "items",
        "len",
        "list",
        "now",
        "resolve",
        "sorted",
        "values",
        "warning"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.671157+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "1812c66091e851cada6a9d853eb11b9ba6dca0cac8ba36c30d9113fb5e4904f3"
    },
    "src/system/tools/codegraph_builder.py::__init__": {
      "key": "src/system/tools/codegraph_builder.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the builder with configuration and component dependencies.",
      "docstring": "Initialize the builder with configuration and component dependencies.",
      "calls": [
        "ASTAnalyzer",
        "DomainMapper",
        "FileScanner",
        "PatternMatcher",
        "from_project",
        "resolve"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [
        "self",
        "root_path",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.671990+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "f7b4d68b9f2d86e64de4db3bf411a07f845e1e792face3eeb90819d1b483e49c"
    },
    "src/system/tools/codegraph_builder.py::build": {
      "key": "src/system/tools/codegraph_builder.py::build",
      "name": "build",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Orchestrate the full knowledge graph generation process.",
      "docstring": "Orchestrate the full knowledge graph generation process.\n\nReturns:\n    Dict containing the complete knowledge graph with metadata and symbols.",
      "calls": [
        "_build_empty_output",
        "_build_output",
        "analyze_files",
        "apply_patterns",
        "find_python_files",
        "info",
        "warning"
      ],
      "line_number": 57,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.672954+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "903ce4a17d0eee94e5621639d87a297223aa07465014604806eda348ecd5e17d"
    },
    "src/system/tools/codegraph_builder.py::_build_output": {
      "key": "src/system/tools/codegraph_builder.py::_build_output",
      "name": "_build_output",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Build the final JSON output structure.",
      "docstring": "Build the final JSON output structure.",
      "calls": [
        "asdict",
        "isoformat",
        "items",
        "len",
        "list",
        "now",
        "sorted",
        "values"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [
        "self",
        "symbols"
      ],
      "last_updated": "2025-08-24T09:27:08.674121+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "d9646f81ed9b32dccfe0f89ecdea8d54d060e080484da6e7ee6635739fcf9ddf"
    },
    "src/system/tools/codegraph_builder.py::_build_empty_output": {
      "key": "src/system/tools/codegraph_builder.py::_build_empty_output",
      "name": "_build_empty_output",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Build output structure when no files are found.",
      "docstring": "Build output structure when no files are found.",
      "calls": [
        "isoformat",
        "now"
      ],
      "line_number": 106,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.674722+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "90a3f8b1ea419c85704110c71335fa4754b7b696c2103c6f3d9d9851e9b01d89"
    },
    "src/system/tools/codegraph_builder.py::main": {
      "key": "src/system/tools/codegraph_builder.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "CLI entry point to run the knowledge graph builder and save the output.",
      "docstring": "CLI entry point to run the knowledge graph builder and save the output.",
      "calls": [
        "FileLock",
        "KnowledgeGraphBuilder",
        "build",
        "cwd",
        "dumps",
        "error",
        "find_project_root",
        "info",
        "load_dotenv",
        "mkdir",
        "str",
        "write_text"
      ],
      "line_number": 119,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-24T09:27:08.676145+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f41ce8a5b0466b306efee0986b97fdaa12d89505480024611da1914903693a00"
    },
    "src/system/tools/scaffolder.py::Scaffolder": {
      "key": "src/system/tools/scaffolder.py::Scaffolder",
      "name": "Scaffolder",
      "type": "ClassDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A reusable service for creating new, constitutionally-governed projects.",
      "docstring": "A reusable service for creating new, constitutionally-governed projects.",
      "calls": [
        "FileExistsError",
        "FileNotFoundError",
        "copy",
        "dump",
        "exists",
        "format",
        "get",
        "glob",
        "info",
        "is_dir",
        "load_config",
        "mkdir",
        "read_text",
        "replace",
        "safe_load",
        "write_text"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.682914+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "460ac66b683039ecff54b93539963fd91bde8fa64de032d0724f5ececaf715fc"
    },
    "src/system/tools/scaffolder.py::__init__": {
      "key": "src/system/tools/scaffolder.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the Scaffolder with project name, profile, and workspace directory.",
      "docstring": "Initializes the Scaffolder with project name, profile, and workspace directory.",
      "calls": [
        "FileNotFoundError",
        "get",
        "is_dir",
        "load_config"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self",
        "project_name",
        "profile",
        "workspace_dir"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.684101+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/scaffolder.py::Scaffolder",
      "structural_hash": "ed3a0ec7574340799159ef0d9da86c387d677484b786ba3cffb6724733c43d1c"
    },
    "src/system/tools/scaffolder.py::scaffold_base_structure": {
      "key": "src/system/tools/scaffolder.py::scaffold_base_structure",
      "name": "scaffold_base_structure",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Creates the base project structure, including tests and CI directories.",
      "docstring": "Creates the base project structure, including tests and CI directories.",
      "calls": [
        "FileExistsError",
        "copy",
        "dump",
        "exists",
        "format",
        "glob",
        "info",
        "mkdir",
        "read_text",
        "replace",
        "safe_load",
        "write_text"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.686801+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/scaffolder.py::Scaffolder",
      "structural_hash": "c166cf9f5388008b3572799f587d0bbded4fdfca2f8677086d28f09dd8cbecf2"
    },
    "src/system/tools/scaffolder.py::write_file": {
      "key": "src/system/tools/scaffolder.py::write_file",
      "name": "write_file",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Writes content to a file within the new project's directory, creating parent directories as needed.",
      "docstring": "Writes content to a file within the new project's directory, creating parent directories as needed.",
      "calls": [
        "info",
        "mkdir",
        "write_text"
      ],
      "line_number": 110,
      "is_async": false,
      "parameters": [
        "self",
        "relative_path",
        "content"
      ],
      "last_updated": "2025-08-24T09:27:08.687527+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/scaffolder.py::Scaffolder",
      "structural_hash": "133c8713ca7a9a324d48304f82fee2c2543196bcabba5e031e4f39758bfac180"
    },
    "src/system/tools/scaffolder.py::new_project": {
      "key": "src/system/tools/scaffolder.py::new_project",
      "name": "new_project",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Scaffolds a new CORE-governed application with the given name, profile, and dry-run option, including base structure and README generation.",
      "docstring": "Scaffolds a new CORE-governed application with the given name, profile, and dry-run option, including base structure and README generation.",
      "calls": [
        "Argument",
        "Exit",
        "Option",
        "Scaffolder",
        "echo",
        "error",
        "exists",
        "format",
        "info",
        "read_text",
        "relative_to",
        "scaffold_base_structure",
        "secho",
        "write_file"
      ],
      "line_number": 118,
      "is_async": false,
      "parameters": [
        "name",
        "profile",
        "dry_run"
      ],
      "last_updated": "2025-08-24T09:27:08.690187+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0a4c9f0c2c40bb1dc27ac90be0c4f251ccc563fc2479428fcf7fd513f1e9ef42"
    },
    "src/system/tools/file_scanner.py::FileScanner": {
      "key": "src/system/tools/file_scanner.py::FileScanner",
      "name": "FileScanner",
      "type": "ClassDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Handles file discovery and filtering.",
      "docstring": "Handles file discovery and filtering.",
      "calls": [
        "any",
        "info",
        "is_dir",
        "len",
        "rglob",
        "should_exclude_path",
        "warning"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.692330+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "377c24b25c426f82c93a1530b5978e7924f6a1cf40a290cfe18e033370c531af"
    },
    "src/system/tools/file_scanner.py::__init__": {
      "key": "src/system/tools/file_scanner.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the FileScanner with the builder configuration.",
      "docstring": "Initializes the FileScanner with the builder configuration.",
      "calls": [],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.692704+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/file_scanner.py::FileScanner",
      "structural_hash": "29c8b0da4296ddaa2bf7187b8e81018faa01c117895cba8e306261aa97b59720"
    },
    "src/system/tools/file_scanner.py::find_python_files": {
      "key": "src/system/tools/file_scanner.py::find_python_files",
      "name": "find_python_files",
      "type": "FunctionDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Find all Python files in src/ that should be analyzed.",
      "docstring": "Find all Python files in src/ that should be analyzed.",
      "calls": [
        "info",
        "is_dir",
        "len",
        "rglob",
        "should_exclude_path",
        "warning"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.693787+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/file_scanner.py::FileScanner",
      "structural_hash": "888e61b047755c0c99809fee073f3d092005a1e124c08b6f95cec4fd1c882781"
    },
    "src/system/tools/file_scanner.py::should_exclude_path": {
      "key": "src/system/tools/file_scanner.py::should_exclude_path",
      "name": "should_exclude_path",
      "type": "FunctionDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determine if a given path should be excluded from scanning.",
      "docstring": "Determine if a given path should be excluded from scanning.",
      "calls": [
        "any"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "last_updated": "2025-08-24T09:27:08.694268+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/file_scanner.py::FileScanner",
      "structural_hash": "921d20f2c6ed29dccb58a83c8ffe41400e28afce83c610d26d5da0d9ae5d0692"
    },
    "src/system/tools/manifest_migrator.py::migrate_manifest": {
      "key": "src/system/tools/manifest_migrator.py::migrate_manifest",
      "name": "migrate_manifest",
      "type": "FunctionDef",
      "file": "src/system/tools/manifest_migrator.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Reads the monolithic manifest and splits it into per-domain manifests.",
      "docstring": "Reads the monolithic manifest and splits it into per-domain manifests.",
      "calls": [
        "Exit",
        "Option",
        "all",
        "append",
        "dump",
        "echo",
        "enumerate",
        "error",
        "exists",
        "get",
        "info",
        "items",
        "loads",
        "mkdir",
        "next",
        "read_text",
        "safe_load",
        "secho",
        "values",
        "warning",
        "write_text"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "dry_run"
      ],
      "last_updated": "2025-08-24T09:27:08.700274+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "ec4fdbcf778a03ddf923e5e7cd854d8665eeb680179b86c267b67848374f3291"
    },
    "src/system/tools/entry_point_detector.py::EntryPointDetector": {
      "key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "name": "EntryPointDetector",
      "type": "ClassDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Detects various types of entry points (CLI, FastAPI, etc.).",
      "docstring": "Detects various types of entry points (CLI, FastAPI, etc.).",
      "calls": [
        "FunctionCallVisitor",
        "copy",
        "isinstance",
        "set",
        "update",
        "visit",
        "walk"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.704779+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "d4140c5caf1116ce0f8ac07e0a33d02f87f06cc6f4cbdd7d91062359997e92f3"
    },
    "src/system/tools/entry_point_detector.py::__init__": {
      "key": "src/system/tools/entry_point_detector.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the EntryPointDetector with the builder configuration.",
      "docstring": "Initializes the EntryPointDetector with the builder configuration.",
      "calls": [
        "copy"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "self",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.705295+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "structural_hash": "c635e04022d5ea6762c27839f2c342ce9905c93fded437be450c2171e5bb40ab"
    },
    "src/system/tools/entry_point_detector.py::detect_fastapi_app_name": {
      "key": "src/system/tools/entry_point_detector.py::detect_fastapi_app_name",
      "name": "detect_fastapi_app_name",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Scan AST tree to find FastAPI app instance name.",
      "docstring": "Scan AST tree to find FastAPI app instance name.",
      "calls": [
        "isinstance",
        "walk"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self",
        "tree"
      ],
      "last_updated": "2025-08-24T09:27:08.706158+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "structural_hash": "7b4c8d758c607765d4d55e3e4dc26ed1ea30fdd8977544a7ea17b7b2200381c3"
    },
    "src/system/tools/entry_point_detector.py::detect_main_block_calls": {
      "key": "src/system/tools/entry_point_detector.py::detect_main_block_calls",
      "name": "detect_main_block_calls",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Find function calls in if __name__ == '__main__' blocks.",
      "docstring": "Find function calls in if __name__ == '__main__' blocks.",
      "calls": [
        "FunctionCallVisitor",
        "isinstance",
        "set",
        "update",
        "visit",
        "walk"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self",
        "tree"
      ],
      "last_updated": "2025-08-24T09:27:08.707309+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "structural_hash": "48740db4005db380528f967f22d15118f3016e18577e049334f4d908efbffead"
    },
    "src/system/tools/entry_point_detector.py::update_cli_entry_points": {
      "key": "src/system/tools/entry_point_detector.py::update_cli_entry_points",
      "name": "update_cli_entry_points",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Add newly discovered CLI entry points.",
      "docstring": "Add newly discovered CLI entry points.",
      "calls": [
        "update"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "self",
        "additional_points"
      ],
      "last_updated": "2025-08-24T09:27:08.707731+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "structural_hash": "ab8b67fb42d62f8993bdc39de400969b189706be429c48b78e8b3034e2e9f73c"
    },
    "src/system/tools/entry_point_detector.py::get_entry_point_type": {
      "key": "src/system/tools/entry_point_detector.py::get_entry_point_type",
      "name": "get_entry_point_type",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Identify decorator or CLI-based entry points for a function.",
      "docstring": "Identify decorator or CLI-based entry points for a function.",
      "calls": [
        "isinstance"
      ],
      "line_number": 54,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-24T09:27:08.708942+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "structural_hash": "a9536f289372ee15e7f8bf74ca04aa61c68393994b77037a661cd76d8b38f69f"
    },
    "src/system/tools/domain_mapper.py::DomainMapper": {
      "key": "src/system/tools/domain_mapper.py::DomainMapper",
      "name": "DomainMapper",
      "type": "ClassDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Handles domain determination for files and symbols.",
      "docstring": "Handles domain determination for files and symbols.",
      "calls": [
        "any",
        "as_posix",
        "get",
        "lower",
        "max",
        "startswith",
        "str"
      ],
      "line_number": 7,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.711070+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "5df01de869c9d627ac9e7436d52b9d60fe3961f48a010617484d68747eabf182"
    },
    "src/system/tools/domain_mapper.py::__init__": {
      "key": "src/system/tools/domain_mapper.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the DomainMapper with the builder configuration.",
      "docstring": "Initializes the DomainMapper with the builder configuration.",
      "calls": [],
      "line_number": 10,
      "is_async": false,
      "parameters": [
        "self",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.711499+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/domain_mapper.py::DomainMapper",
      "structural_hash": "f13e5e4c295896f00d4b404b259391e83c4b52a50a2dc451d4d5701099ac0af9"
    },
    "src/system/tools/domain_mapper.py::get_domain_for_file": {
      "key": "src/system/tools/domain_mapper.py::get_domain_for_file",
      "name": "get_domain_for_file",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determine the logical domain for a file path based on longest matching prefix.",
      "docstring": "Determine the logical domain for a file path based on longest matching prefix.",
      "calls": [
        "as_posix",
        "get",
        "max",
        "startswith"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-24T09:27:08.712178+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/domain_mapper.py::DomainMapper",
      "structural_hash": "04b2408e033cc1638b1134f0edb15a5ab53b10465a47fbb954338c94e22cb03f"
    },
    "src/system/tools/domain_mapper.py::infer_agent_from_path": {
      "key": "src/system/tools/domain_mapper.py::infer_agent_from_path",
      "name": "infer_agent_from_path",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Infer the most likely responsible agent based on keywords in the file path.",
      "docstring": "Infer the most likely responsible agent based on keywords in the file path.",
      "calls": [
        "any",
        "lower",
        "str"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self",
        "relative_path"
      ],
      "last_updated": "2025-08-24T09:27:08.713101+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/domain_mapper.py::DomainMapper",
      "structural_hash": "f43118d11c1f3d911cb5664981408eeeef017205802a242285d0fa5327259952"
    },
    "src/system/tools/ast_visitor.py::FunctionCallVisitor": {
      "key": "src/system/tools/ast_visitor.py::FunctionCallVisitor",
      "name": "FunctionCallVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "An AST visitor that collects the names of all functions being called within a node.",
      "docstring": "An AST visitor that collects the names of all functions being called within a node.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance",
        "set"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.715054+00:00",
      "is_class": true,
      "base_classes": [
        "NodeVisitor"
      ],
      "structural_hash": "1d7392083a2be98b2d882157167d40075ee0a30a3b4cabc691ebb598e26250c9"
    },
    "src/system/tools/ast_visitor.py::__init__": {
      "key": "src/system/tools/ast_visitor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the instance with the given builder, filepath, source lines, and an empty context stack.",
      "docstring": "Initialize the instance with the given builder, filepath, source lines, and an empty context stack.",
      "calls": [],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self",
        "builder",
        "filepath",
        "source_lines"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.718708+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "e5203c6e20bf02e7644590a063ce5e5db0ab69b9ef4dfca433a71816b361bc47"
    },
    "src/system/tools/ast_visitor.py::visit_Call": {
      "key": "src/system/tools/ast_visitor.py::visit_Call",
      "name": "visit_Call",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "docstring": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-24T09:27:08.716098+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::FunctionCallVisitor",
      "structural_hash": "6bd1e8e30a8e89ac8a9e78b12c02e5d78b2cf0b9187ff32da75aeedd1c8161af"
    },
    "src/system/tools/ast_visitor.py::ContextAwareVisitor": {
      "key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "name": "ContextAwareVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A stateful AST visitor that understands nested class and function contexts.",
      "docstring": "A stateful AST visitor that understands nested class and function contexts.",
      "calls": [
        "_process_and_visit",
        "_process_symbol_node",
        "append",
        "generic_visit",
        "pop"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.718087+00:00",
      "is_class": true,
      "base_classes": [
        "NodeVisitor"
      ],
      "structural_hash": "b28d049bdc95acaee71cbe5ad02878514d81fd1e88ffc7a23724204684c5c3ef"
    },
    "src/system/tools/ast_visitor.py::_process_and_visit": {
      "key": "src/system/tools/ast_visitor.py::_process_and_visit",
      "name": "_process_and_visit",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Helper to process a symbol and manage the context stack.",
      "docstring": "Helper to process a symbol and manage the context stack.",
      "calls": [
        "_process_symbol_node",
        "append",
        "generic_visit",
        "pop"
      ],
      "line_number": 37,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "node_type"
      ],
      "last_updated": "2025-08-24T09:27:08.719764+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "72ed2d2e224dfe5a9879f157b463bde0bf9109eb7ccef5316baac6b310ae6c96"
    },
    "src/system/tools/ast_visitor.py::visit_ClassDef": {
      "key": "src/system/tools/ast_visitor.py::visit_ClassDef",
      "name": "visit_ClassDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a class definition node, and visits its children.",
      "docstring": "Processes a class definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 57,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-24T09:27:08.720156+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "5fc309bc3b69e72b37ff19e6a7a79f9a377eae0dc1ec0f9e826863e744406929"
    },
    "src/system/tools/ast_visitor.py::visit_FunctionDef": {
      "key": "src/system/tools/ast_visitor.py::visit_FunctionDef",
      "name": "visit_FunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a function definition node, and visits its children.",
      "docstring": "Processes a function definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 61,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-24T09:27:08.720571+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "3f2d3b5171306dce35ba70a697fe9bc954cd498e4d514ee7488742bb2cf1905c"
    },
    "src/system/tools/ast_visitor.py::visit_AsyncFunctionDef": {
      "key": "src/system/tools/ast_visitor.py::visit_AsyncFunctionDef",
      "name": "visit_AsyncFunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes an async function definition node, and visits its children.",
      "docstring": "Processes an async function definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 65,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-24T09:27:08.720959+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "ce568d79cf5bf2713454e3eb1f44137b0c2105b15ee76686ba9f48fcda3e23e2"
    },
    "src/system/tools/pattern_matcher.py::PatternMatcher": {
      "key": "src/system/tools/pattern_matcher.py::PatternMatcher",
      "name": "PatternMatcher",
      "type": "ClassDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Applies declarative patterns to a list of symbols to identify entry points.",
      "docstring": "Applies declarative patterns to a list of symbols to identify entry points.",
      "calls": [
        "_is_match",
        "debug",
        "error",
        "exists",
        "get",
        "len",
        "match",
        "read_text",
        "set",
        "splitlines",
        "startswith",
        "strip",
        "update",
        "values"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.727507+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "dc1145748ce3e43439a314ff11f622ec61b5523d505af431d22cc7273b2339c0"
    },
    "src/system/tools/pattern_matcher.py::__init__": {
      "key": "src/system/tools/pattern_matcher.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the PatternMatcher with a set of rules.",
      "docstring": "Initialize the PatternMatcher with a set of rules.\n\nArgs:\n    patterns: A list of pattern dictionaries from entry_point_patterns.yaml.\n    root_path: The absolute path to the repository root.",
      "calls": [],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self",
        "patterns",
        "root_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.728132+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/pattern_matcher.py::PatternMatcher",
      "structural_hash": "445c74dd2573cc56d17b2745b1d9aa89decf1be39fe2ae622da57bbb6d47c96b"
    },
    "src/system/tools/pattern_matcher.py::apply_patterns": {
      "key": "src/system/tools/pattern_matcher.py::apply_patterns",
      "name": "apply_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Apply configured patterns to identify entry points in function symbols.",
      "docstring": "Apply configured patterns to identify entry points in function symbols.\n\nArgs:\n    functions: A dictionary of FunctionInfo objects from the KnowledgeGraphBuilder.",
      "calls": [
        "_is_match",
        "debug",
        "get",
        "values"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self",
        "functions"
      ],
      "last_updated": "2025-08-24T09:27:08.729417+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/pattern_matcher.py::PatternMatcher",
      "structural_hash": "b56de77c134df1e7f4904dc8f21951df2565ebab3055dccfe9b65aaa9f21c97a"
    },
    "src/system/tools/pattern_matcher.py::_is_match": {
      "key": "src/system/tools/pattern_matcher.py::_is_match",
      "name": "_is_match",
      "type": "FunctionDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Check if a single symbol matches a set of declarative rules.",
      "docstring": "Check if a single symbol matches a set of declarative rules.",
      "calls": [
        "error",
        "exists",
        "get",
        "len",
        "match",
        "read_text",
        "set",
        "splitlines",
        "startswith",
        "strip",
        "update"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "self",
        "info",
        "rules",
        "all_base_classes",
        "functions"
      ],
      "last_updated": "2025-08-24T09:27:08.732596+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/pattern_matcher.py::PatternMatcher",
      "structural_hash": "71a2b9c5bb6e02e6ac1c396728d0f0f41fc40b8bd4b5dda5395bc8522ef39502"
    },
    "src/system/tools/ast_utils.py::strip_docstrings": {
      "key": "src/system/tools/ast_utils.py::strip_docstrings",
      "name": "strip_docstrings",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Recursively remove docstring nodes from an AST tree for structural hashing.",
      "docstring": "Recursively remove docstring nodes from an AST tree for structural hashing.",
      "calls": [
        "isinstance",
        "iter_child_nodes",
        "strip_docstrings"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-24T09:27:08.735196+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "dff236902c1d9feeac5f019ddbffb46bf09ed0d3c1601ee866760797c23f417d"
    },
    "src/system/tools/ast_utils.py::detect_docstring": {
      "key": "src/system/tools/ast_utils.py::detect_docstring",
      "name": "detect_docstring",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Detect both standard and non-standard docstrings for a node.",
      "docstring": "Detect both standard and non-standard docstrings for a node.",
      "calls": [
        "get_docstring",
        "hasattr",
        "isinstance"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-24T09:27:08.736098+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0ff82d2cbcc3595fa9d78a61078bbd2a8a65ef9a6e2d863b3849d4ef2463559f"
    },
    "src/system/tools/ast_utils.py::calculate_structural_hash": {
      "key": "src/system/tools/ast_utils.py::calculate_structural_hash",
      "name": "calculate_structural_hash",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Calculate a hash for structural comparison of AST nodes.",
      "docstring": "Calculate a hash for structural comparison of AST nodes.",
      "calls": [
        "encode",
        "hexdigest",
        "parse",
        "replace",
        "sha256",
        "strip_docstrings",
        "unparse"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-24T09:27:08.736820+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "014a91cdb2aaf134603f4fe4415d0c4fd2ba3a530c44b9a2adedaf7fa21a6804"
    },
    "src/system/tools/ast_utils.py::parse_metadata_comment": {
      "key": "src/system/tools/ast_utils.py::parse_metadata_comment",
      "name": "parse_metadata_comment",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parse the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "docstring": "Parse the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "calls": [
        "group",
        "search",
        "startswith",
        "strip"
      ],
      "line_number": 54,
      "is_async": false,
      "parameters": [
        "node",
        "source_lines"
      ],
      "last_updated": "2025-08-24T09:27:08.737757+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3ff25bd3fd0202a993cef39c56fd2ec62136247385fc1196c4bb29fe3d9edafc"
    },
    "src/system/tools/ast_utils.py::extract_base_classes": {
      "key": "src/system/tools/ast_utils.py::extract_base_classes",
      "name": "extract_base_classes",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Extract base class names from a class definition.",
      "docstring": "Extract base class names from a class definition.",
      "calls": [
        "append",
        "isinstance"
      ],
      "line_number": 65,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-24T09:27:08.738450+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "95dceab5bad0d24dd6e43a90d656b349b61f5529de711ec65c59a037bcff9af3"
    },
    "src/system/tools/ast_utils.py::extract_function_parameters": {
      "key": "src/system/tools/ast_utils.py::extract_function_parameters",
      "name": "extract_function_parameters",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Extract parameter names from a function definition.",
      "docstring": "Extract parameter names from a function definition.",
      "calls": [
        "hasattr"
      ],
      "line_number": 76,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-24T09:27:08.739031+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6439f7faf56d51a3d64c82408f1642ea6895b3b7a2f2b5777d309fc4515d06e8"
    },
    "src/system/tools/docstring_adder.py::add_docstring_to_function_line_based": {
      "key": "src/system/tools/docstring_adder.py::add_docstring_to_function_line_based",
      "name": "add_docstring_to_function_line_based",
      "type": "FunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Surgically inserts a docstring into source code using a line-based method.",
      "docstring": "Surgically inserts a docstring into source code using a line-based method.",
      "calls": [
        "error",
        "insert",
        "join",
        "len",
        "lstrip",
        "replace",
        "splitlines",
        "strip",
        "warning"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "source_code",
        "line_number",
        "docstring"
      ],
      "last_updated": "2025-08-24T09:27:08.743737+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "056c0063bbadc526ef803cbfecba77ca674c291b23cd5807f84ffabde2894624"
    },
    "src/system/tools/docstring_adder.py::generate_and_apply_docstring": {
      "key": "src/system/tools/docstring_adder.py::generate_and_apply_docstring",
      "name": "generate_and_apply_docstring",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Generates, validates, and applies a docstring for a single symbol.",
      "docstring": "Generates, validates, and applies a docstring for a single symbol.",
      "calls": [
        "add_docstring_to_function_line_based",
        "error",
        "exists",
        "get",
        "get_client_for_role",
        "get_docstring",
        "info",
        "isinstance",
        "make_request_async",
        "next",
        "parse",
        "read_text",
        "secho",
        "str",
        "strip",
        "unparse",
        "validate_code",
        "walk",
        "write_text"
      ],
      "line_number": 58,
      "is_async": true,
      "parameters": [
        "target",
        "cognitive_service",
        "dry_run"
      ],
      "last_updated": "2025-08-24T09:27:08.746812+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "961080192ff78054bb3b3a8618b52ec011a355a2cd8575147907085062541373"
    },
    "src/system/tools/docstring_adder.py::_async_main": {
      "key": "src/system/tools/docstring_adder.py::_async_main",
      "name": "_async_main",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "The core asynchronous logic for finding and fixing docstrings.",
      "docstring": "The core asynchronous logic for finding and fixing docstrings.",
      "calls": [
        "CognitiveService",
        "KnowledgeGraphBuilder",
        "Semaphore",
        "as_completed",
        "build",
        "dumps",
        "generate_and_apply_docstring",
        "get",
        "info",
        "len",
        "track",
        "values",
        "worker",
        "write_text"
      ],
      "line_number": 130,
      "is_async": true,
      "parameters": [
        "dry_run"
      ],
      "last_updated": "2025-08-24T09:27:08.748475+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d7a1a75f8fa98aa5a52a155480898083541eb589c3f38953e526e46a3116c562"
    },
    "src/system/tools/docstring_adder.py::fix_missing_docstrings": {
      "key": "src/system/tools/docstring_adder.py::fix_missing_docstrings",
      "name": "fix_missing_docstrings",
      "type": "FunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "add_missing_docstrings",
      "intent": "Finds all symbols with missing docstrings and uses an LLM to generate and apply them, with validation.",
      "docstring": "Finds all symbols with missing docstrings and uses an LLM to generate and apply them, with validation.",
      "calls": [
        "KnowledgeGraphBuilder",
        "Option",
        "_async_main",
        "build",
        "dumps",
        "info",
        "run",
        "write_text"
      ],
      "line_number": 170,
      "is_async": false,
      "parameters": [
        "dry_run"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.749378+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "ffcf70042dccc6141223e881fc88e8447bc0582d7b7bb392aca73e9b7d1fdd84"
    },
    "src/system/tools/models.py::FunctionInfo": {
      "key": "src/system/tools/models.py::FunctionInfo",
      "name": "FunctionInfo",
      "type": "ClassDef",
      "file": "src/system/tools/models.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A data structure holding all analyzed information about a single symbol (function, method, or class).",
      "docstring": "A data structure holding all analyzed information about a single symbol (function, method, or class).",
      "calls": [
        "field"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.751038+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "d8c3fbd14dd6721420770299c61be330eb98b0989c0250317c2f6e0f9b656974"
    },
    "src/system/tools/symbol_processor.py::ProcessingContext": {
      "key": "src/system/tools/symbol_processor.py::ProcessingContext",
      "name": "ProcessingContext",
      "type": "ClassDef",
      "file": "src/system/tools/symbol_processor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Context information needed for processing AST nodes.",
      "docstring": "Context information needed for processing AST nodes.",
      "calls": [],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.752799+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "77b9d63345c543ad41fb676be8433afa286cb6245272ce5aef4ce9a4c013156b"
    },
    "src/system/tools/symbol_processor.py::SymbolProcessor": {
      "key": "src/system/tools/symbol_processor.py::SymbolProcessor",
      "name": "SymbolProcessor",
      "type": "ClassDef",
      "file": "src/system/tools/symbol_processor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes individual AST nodes into FunctionInfo objects.",
      "docstring": "Processes individual AST nodes into FunctionInfo objects.",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "_generate_intent",
        "as_posix",
        "calculate_structural_hash",
        "detect_docstring",
        "extract_base_classes",
        "extract_function_parameters",
        "get",
        "get_domain_for_file",
        "get_entry_point_type",
        "infer_agent_from_path",
        "isinstance",
        "isoformat",
        "now",
        "parse_metadata_comment",
        "relative_to",
        "split",
        "strip",
        "visit"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.755375+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "b2a3abf090be8599969440bf57f164f20154e49e6c33c89bd2f355a9584ea4e4"
    },
    "src/system/tools/symbol_processor.py::process_node": {
      "key": "src/system/tools/symbol_processor.py::process_node",
      "name": "process_node",
      "type": "FunctionDef",
      "file": "src/system/tools/symbol_processor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Process a single AST node into a FunctionInfo object.",
      "docstring": "Process a single AST node into a FunctionInfo object.",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "_generate_intent",
        "as_posix",
        "calculate_structural_hash",
        "detect_docstring",
        "extract_base_classes",
        "extract_function_parameters",
        "get",
        "get_domain_for_file",
        "get_entry_point_type",
        "infer_agent_from_path",
        "isinstance",
        "isoformat",
        "now",
        "parse_metadata_comment",
        "relative_to",
        "visit"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "context"
      ],
      "last_updated": "2025-08-24T09:27:08.757423+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/symbol_processor.py::SymbolProcessor",
      "structural_hash": "7e0abbc2a410a18bef1d9c10d5b21968c86966c8211cce72244883404735cc74"
    },
    "src/system/tools/symbol_processor.py::_generate_intent": {
      "key": "src/system/tools/symbol_processor.py::_generate_intent",
      "name": "_generate_intent",
      "type": "FunctionDef",
      "file": "src/system/tools/symbol_processor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Generate an intent description from docstring or domain.",
      "docstring": "Generate an intent description from docstring or domain.",
      "calls": [
        "split",
        "strip"
      ],
      "line_number": 109,
      "is_async": false,
      "parameters": [
        "self",
        "docstring",
        "domain"
      ],
      "last_updated": "2025-08-24T09:27:08.758042+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/symbol_processor.py::SymbolProcessor",
      "structural_hash": "b8433ae388845807a960eceb17088016006c4c96c5339944955ee037c38f15a2"
    },
    "src/system/tools/ast_analyzer.py::ASTAnalyzer": {
      "key": "src/system/tools/ast_analyzer.py::ASTAnalyzer",
      "name": "ASTAnalyzer",
      "type": "ClassDef",
      "file": "src/system/tools/ast_analyzer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Handles AST parsing and symbol extraction from Python files.",
      "docstring": "Handles AST parsing and symbol extraction from Python files.",
      "calls": [
        "EntryPointDetector",
        "ProcessingContext",
        "SymbolProcessor",
        "_process_class_methods",
        "analyze_file",
        "detect_fastapi_app_name",
        "detect_main_block_calls",
        "error",
        "info",
        "isinstance",
        "parse",
        "process_node",
        "read_text",
        "splitlines",
        "str",
        "update",
        "update_cli_entry_points"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.763312+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "fa5b91785c420e7decab3777bfb75411892df3466817e41bb11c637ef92f4c88"
    },
    "src/system/tools/ast_analyzer.py::__init__": {
      "key": "src/system/tools/ast_analyzer.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_analyzer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the ASTAnalyzer with the builder configuration.",
      "docstring": "Initializes the ASTAnalyzer with the builder configuration.",
      "calls": [
        "EntryPointDetector",
        "SymbolProcessor"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.763864+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/ast_analyzer.py::ASTAnalyzer",
      "structural_hash": "17d8a119c91d615e5b9212352efb919c2796fa1d46f82e2a3b09c3679a1e2806"
    },
    "src/system/tools/ast_analyzer.py::analyze_files": {
      "key": "src/system/tools/ast_analyzer.py::analyze_files",
      "name": "analyze_files",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_analyzer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Analyze multiple files and return all discovered symbols.",
      "docstring": "Analyze multiple files and return all discovered symbols.",
      "calls": [
        "analyze_file",
        "info",
        "update"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "self",
        "files",
        "domain_mapper"
      ],
      "last_updated": "2025-08-24T09:27:08.764694+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_analyzer.py::ASTAnalyzer",
      "structural_hash": "34069f55e63deab86ba16b1264b00fd3202a1f47bb2a26824095d067902c3ea6"
    },
    "src/system/tools/ast_analyzer.py::analyze_file": {
      "key": "src/system/tools/ast_analyzer.py::analyze_file",
      "name": "analyze_file",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_analyzer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Analyze a single Python file and extract all symbols.",
      "docstring": "Analyze a single Python file and extract all symbols.",
      "calls": [
        "ProcessingContext",
        "_process_class_methods",
        "detect_fastapi_app_name",
        "detect_main_block_calls",
        "error",
        "isinstance",
        "parse",
        "process_node",
        "read_text",
        "splitlines",
        "str",
        "update",
        "update_cli_entry_points"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "self",
        "filepath",
        "domain_mapper"
      ],
      "last_updated": "2025-08-24T09:27:08.766664+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_analyzer.py::ASTAnalyzer",
      "structural_hash": "27033c6ab0efdc4cae5704e7a7cbc3925b9f3a898772794fd123b30e9854bed0"
    },
    "src/system/tools/ast_analyzer.py::_process_class_methods": {
      "key": "src/system/tools/ast_analyzer.py::_process_class_methods",
      "name": "_process_class_methods",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_analyzer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Process all methods within a class.",
      "docstring": "Process all methods within a class.",
      "calls": [
        "ProcessingContext",
        "isinstance",
        "process_node"
      ],
      "line_number": 93,
      "is_async": false,
      "parameters": [
        "self",
        "class_node",
        "context",
        "parent_key"
      ],
      "last_updated": "2025-08-24T09:27:08.767605+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_analyzer.py::ASTAnalyzer",
      "structural_hash": "f2039d7b82fd8f1d3508b06903a2409d125d32159642f47ab43d74fbf520b18c"
    },
    "src/system/guard/discovery/from_source_scan.py::_parse_inline_meta": {
      "key": "src/system/guard/discovery/from_source_scan.py::_parse_inline_meta",
      "name": "_parse_inline_meta",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Parse inline [key=value] metadata from trailing text.",
      "docstring": "Parse inline [key=value] metadata from trailing text.",
      "calls": [
        "findall",
        "group",
        "search"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "trailing"
      ],
      "last_updated": "2025-08-24T09:27:08.769455+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "04e919d1580e0efe6c93a7e34d7b4adfd2afb95339c5246dd0ec1006bf3bca54"
    },
    "src/system/guard/discovery/from_source_scan.py::_iter_source_files": {
      "key": "src/system/guard/discovery/from_source_scan.py::_iter_source_files",
      "name": "_iter_source_files",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Yields repository files to be scanned.",
      "docstring": "Yields repository files to be scanned.",
      "calls": [
        "any",
        "is_file",
        "match",
        "rglob",
        "wanted"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs"
      ],
      "last_updated": "2025-08-24T09:27:08.770622+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b5b675110e61cfb12eaf9fd7630d3b5493e662dd45521e6a570d58b4362ade36"
    },
    "src/system/guard/discovery/from_source_scan.py::collect_from_source_scan": {
      "key": "src/system/guard/discovery/from_source_scan.py::collect_from_source_scan",
      "name": "collect_from_source_scan",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Scans for '# CAPABILITY:' tags with optional inline metadata.",
      "docstring": "Scans for '# CAPABILITY:' tags with optional inline metadata.",
      "calls": [
        "CapabilityMeta",
        "_iter_source_files",
        "_parse_inline_meta",
        "get",
        "group",
        "match",
        "read_text",
        "splitlines",
        "strip"
      ],
      "line_number": 45,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs"
      ],
      "last_updated": "2025-08-24T09:27:08.771892+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f68a4883d0b1d8129540c80e3007b4123c6fc828fe6240a8c5d087c8268fb313"
    },
    "src/system/guard/discovery/from_manifest.py::load_manifest_capabilities": {
      "key": "src/system/guard/discovery/from_manifest.py::load_manifest_capabilities",
      "name": "load_manifest_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_manifest.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads, parses, and normalizes capabilities by aggregating all domain-specific manifests.",
      "docstring": "Loads, parses, and normalizes capabilities by aggregating all domain-specific manifests.",
      "calls": [
        "CapabilityMeta",
        "FileNotFoundError",
        "exists",
        "get",
        "list",
        "open",
        "read_text",
        "safe_load",
        "set",
        "sorted",
        "update"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "root",
        "explicit_path"
      ],
      "last_updated": "2025-08-24T09:27:08.774541+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "1445cbac1e44b1abf289904b7388e4267bcac6442c7012fad9f8f10f42e7b5f0"
    },
    "src/system/guard/discovery/from_kgb.py::_try_import_kgb": {
      "key": "src/system/guard/discovery/from_kgb.py::_try_import_kgb",
      "name": "_try_import_kgb",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Attempts to access KnowledgeGraphBuilder without a static cross-domain import.",
      "docstring": "Attempts to access KnowledgeGraphBuilder without a static cross-domain import.",
      "calls": [
        "getattr",
        "import_module"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.775910+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c5ede0ba8cbfe280f6be73af3858ad2da1470b31ac0bbec0a2bab297a805a134"
    },
    "src/system/guard/discovery/from_kgb.py::_extract_cap_meta_from_node": {
      "key": "src/system/guard/discovery/from_kgb.py::_extract_cap_meta_from_node",
      "name": "_extract_cap_meta_from_node",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Extracts capability metadata from a Knowledge Graph node.",
      "docstring": "Extracts capability metadata from a Knowledge Graph node.",
      "calls": [
        "CapabilityMeta",
        "get",
        "str"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-24T09:27:08.776830+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b385da546dbc6c856c4048d18354072a90fb09870ff89f366757e4db9aaf9dee"
    },
    "src/system/guard/discovery/from_kgb.py::collect_from_kgb": {
      "key": "src/system/guard/discovery/from_kgb.py::collect_from_kgb",
      "name": "collect_from_kgb",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Uses KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "docstring": "Uses KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "calls": [
        "KGB",
        "_extract_cap_meta_from_node",
        "_try_import_kgb",
        "build",
        "get",
        "isinstance",
        "values"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "root"
      ],
      "last_updated": "2025-08-24T09:27:08.777950+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5240a9678f95db483d886d2ceb5a9f288efd705684e7496b06c7ea94b3fce821"
    },
    "src/system/governance/checks/quality_checks.py::QualityChecks": {
      "key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "name": "QualityChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for code quality constitutional checks.",
      "docstring": "Container for code quality constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 7,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.781974+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "b43e4683bb6582ecf1397eb6065567f8fe53f9828d8958b41782f5a893a0adb8"
    },
    "src/system/governance/checks/quality_checks.py::__init__": {
      "key": "src/system/governance/checks/quality_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 10,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.782358+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "474c67c3ad417e92e0a5cfe962deb537f55c550a1fd8b27eca415afbdf6a6986"
    },
    "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents": {
      "key": "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents",
      "name": "check_docstrings_and_intents",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.docstrings",
      "intent": "Finds symbols missing docstrings or having generic intents.",
      "docstring": "Finds symbols missing docstrings or having generic intents.",
      "calls": [
        "AuditFinding",
        "append",
        "get"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.783958+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "26909ce55bf9e823775eff9afee451d43f85a43e46039c61dee69cf39825702d"
    },
    "src/system/governance/checks/quality_checks.py::check_for_dead_code": {
      "key": "src/system/governance/checks/quality_checks.py::check_for_dead_code",
      "name": "check_for_dead_code",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.dead_code",
      "intent": "Detects unreferenced public symbols.",
      "docstring": "Detects unreferenced public symbols.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.785383+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "bb685c54a606e923f512ea3413c9a9567d6dbc9451b9d1cf0d3ce949e6836ad4"
    },
    "src/system/governance/checks/security_checks.py::SecurityChecks": {
      "key": "src/system/governance/checks/security_checks.py::SecurityChecks",
      "name": "SecurityChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/security_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for security-related constitutional checks.",
      "docstring": "Container for security-related constitutional checks.",
      "calls": [
        "AuditFinding",
        "Path",
        "any",
        "append",
        "compile",
        "enumerate",
        "get",
        "load_config",
        "match",
        "next",
        "read_text",
        "search",
        "set",
        "splitlines",
        "str"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.789223+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "afd08501765515a7f6ad4565d9dce3a6f68f23da08822ae000966534d0a86f37"
    },
    "src/system/governance/checks/security_checks.py::__init__": {
      "key": "src/system/governance/checks/security_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/security_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [
        "load_config"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.789747+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/security_checks.py::SecurityChecks",
      "structural_hash": "d609ebf2f5063400021d85393ed766550d4d97d15988fc0c6bcd9493ab9cbfbe"
    },
    "src/system/governance/checks/security_checks.py::check_for_hardcoded_secrets": {
      "key": "src/system/governance/checks/security_checks.py::check_for_hardcoded_secrets",
      "name": "check_for_hardcoded_secrets",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/security_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.secrets",
      "intent": "Scans source code for patterns that look like hardcoded secrets.",
      "docstring": "Scans source code for patterns that look like hardcoded secrets.",
      "calls": [
        "AuditFinding",
        "Path",
        "any",
        "append",
        "compile",
        "enumerate",
        "get",
        "match",
        "next",
        "read_text",
        "search",
        "set",
        "splitlines",
        "str"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.792126+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/security_checks.py::SecurityChecks",
      "structural_hash": "050ed958ff0df5885a958f76a310ffd31a33003c9d138950297db3e90a419c1b"
    },
    "src/system/governance/checks/file_checks.py::FileChecks": {
      "key": "src/system/governance/checks/file_checks.py::FileChecks",
      "name": "FileChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for file-based constitutional checks.",
      "docstring": "Container for file-based constitutional checks.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "add",
        "any",
        "append",
        "exists",
        "extend",
        "get_all_constitutional_paths",
        "is_file",
        "len",
        "read_text",
        "relative_to",
        "replace",
        "rglob",
        "sorted",
        "str",
        "validate_code"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.799028+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "47e0e7988a28e5d0e93b4e5da6760ca217bdaed6f9dbcd2ad9b3aeb8ca6d34f5"
    },
    "src/system/governance/checks/file_checks.py::__init__": {
      "key": "src/system/governance/checks/file_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initialize with a shared auditor context.",
      "docstring": "Initialize with a shared auditor context.",
      "calls": [],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.799507+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "b6ae2e2a72f0cbc823f1b1d48c7f7bd2baf4951e23a7ce717cef727fad61f62f"
    },
    "src/system/governance/checks/file_checks.py::check_required_files": {
      "key": "src/system/governance/checks/file_checks.py::check_required_files",
      "name": "check_required_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.required_files",
      "intent": "Verify that all files declared in meta.yaml exist on disk.",
      "docstring": "Verify that all files declared in meta.yaml exist on disk.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "append",
        "exists",
        "len",
        "sorted"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.800944+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "fdae6956729ff51a7d86d64d26ed9b47addb932b1245bb77ee3105a4eb15d3ea"
    },
    "src/system/governance/checks/file_checks.py::check_syntax": {
      "key": "src/system/governance/checks/file_checks.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.syntax",
      "intent": "Validate syntax of all .intent YAML/JSON files (including proposals).",
      "docstring": "Validate syntax of all .intent YAML/JSON files (including proposals).",
      "calls": [
        "AuditFinding",
        "append",
        "extend",
        "is_file",
        "len",
        "read_text",
        "relative_to",
        "rglob",
        "str",
        "validate_code"
      ],
      "line_number": 64,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.802918+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "d87bd10847da7311d1bfd947eb9bdf5ee37fe24b91210911282750f2f5b666ac"
    },
    "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files": {
      "key": "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files",
      "name": "check_for_orphaned_intent_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.orphaned_intent_files",
      "intent": "Find .intent files not referenced in meta.yaml.",
      "docstring": "Find .intent files not referenced in meta.yaml.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "any",
        "append",
        "is_file",
        "relative_to",
        "replace",
        "rglob",
        "sorted",
        "str"
      ],
      "line_number": 113,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.804478+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "6b2a3183b90690eb9c504a74ace938c99c823f3b12bb87c64b19ff79ce9d1ad1"
    },
    "src/system/governance/checks/file_checks.py::_get_known_files_from_meta": {
      "key": "src/system/governance/checks/file_checks.py::_get_known_files_from_meta",
      "name": "_get_known_files_from_meta",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Build a set of known intent files by delegating to the shared constitutional parser.",
      "docstring": "Build a set of known intent files by delegating to the shared constitutional parser.",
      "calls": [
        "add",
        "get_all_constitutional_paths"
      ],
      "line_number": 156,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.804977+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "8d7d722bb5a921049c576c5908b3af25b66a94b63a5e70a585841273faa88b29"
    },
    "src/system/governance/checks/proposal_checks.py::ProposalChecks": {
      "key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "name": "ProposalChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for proposal-related constitutional checks.",
      "docstring": "Container for proposal-related constitutional checks.",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "ValueError",
        "_expected_token_for_content",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "encode",
        "exists",
        "get",
        "glob",
        "hexdigest",
        "iter_errors",
        "join",
        "len",
        "list",
        "load_schema",
        "loads",
        "lower",
        "read_text",
        "relative_to",
        "safe_load",
        "sha256",
        "sorted",
        "str"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.814255+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "9510407f227ba8eff042eda320dd70853fb788c119ab310f7e5fb361eca6e203"
    },
    "src/system/governance/checks/proposal_checks.py::__init__": {
      "key": "src/system/governance/checks/proposal_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context, setting `repo_root` and `proposals_dir` paths.",
      "docstring": "Initializes the check with a shared auditor context, setting `repo_root` and `proposals_dir` paths.",
      "calls": [],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.814825+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "f42bed7d1ba05e6fe8a2f84e7c2c517156ba700333341d9b93c6776c30aed2b1"
    },
    "src/system/governance/checks/proposal_checks.py::_proposal_paths": {
      "key": "src/system/governance/checks/proposal_checks.py::_proposal_paths",
      "name": "_proposal_paths",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Return all cr-* proposals (both YAML and JSON).",
      "docstring": "Return all cr-* proposals (both YAML and JSON).",
      "calls": [
        "exists",
        "glob",
        "list",
        "sorted"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-24T09:27:08.815545+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "45acc357733e03d9acffc43a6324d7c82493c1675a37c38efc6c2854eb7ef773"
    },
    "src/system/governance/checks/proposal_checks.py::_load_proposal": {
      "key": "src/system/governance/checks/proposal_checks.py::_load_proposal",
      "name": "_load_proposal",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Load proposal preserving its format.",
      "docstring": "Load proposal preserving its format.",
      "calls": [
        "ValueError",
        "loads",
        "lower",
        "read_text",
        "safe_load"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "last_updated": "2025-08-24T09:27:08.816407+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "5c4a272b51f2ef2f388a2c0840c6e0fea194cf5ec94855341d4dc470197a96c2"
    },
    "src/system/governance/checks/proposal_checks.py::_expected_token_for_content": {
      "key": "src/system/governance/checks/proposal_checks.py::_expected_token_for_content",
      "name": "_expected_token_for_content",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Mirror admin token format: 'core-proposal-v1:<sha256hex>'.",
      "docstring": "Mirror admin token format: 'core-proposal-v1:<sha256hex>'.",
      "calls": [
        "encode",
        "hexdigest",
        "sha256"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "content"
      ],
      "last_updated": "2025-08-24T09:27:08.816961+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "618f4bc1a467b5afc49985379fdcd400846ec57967c9521639469ae8644eecc8"
    },
    "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema": {
      "key": "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema",
      "name": "check_proposal_files_match_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_schema",
      "intent": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "docstring": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "exists",
        "iter_errors",
        "join",
        "list",
        "load_schema",
        "relative_to",
        "str"
      ],
      "line_number": 62,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.819071+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "569b864bc65c9f4ba49206c8705e0651883c76d32c90a279d7d08d658e4a4eb6"
    },
    "src/system/governance/checks/proposal_checks.py::check_signatures_match_content": {
      "key": "src/system/governance/checks/proposal_checks.py::check_signatures_match_content",
      "name": "check_signatures_match_content",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_drift",
      "intent": "Detect content/signature drift:",
      "docstring": "Detect content/signature drift:\n- warn if a proposal has no signatures\n- warn if any signature token does not match the current content",
      "calls": [
        "AuditFinding",
        "_expected_token_for_content",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "get",
        "join",
        "len",
        "relative_to",
        "str"
      ],
      "line_number": 130,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.821424+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "4b1a1687b6ec1981a6921d118a5da303a04249b7f4478eb8dd403e5bfe35c9dd"
    },
    "src/system/governance/checks/proposal_checks.py::list_pending_proposals": {
      "key": "src/system/governance/checks/proposal_checks.py::list_pending_proposals",
      "name": "list_pending_proposals",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_list",
      "intent": "Emit a friendly summary of pending proposals.",
      "docstring": "Emit a friendly summary of pending proposals.",
      "calls": [
        "AuditFinding",
        "_proposal_paths",
        "append",
        "exists",
        "relative_to",
        "str"
      ],
      "line_number": 201,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.822460+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "a9d673c41b327a1adc161a7e5820c6ffacf0b65b7acd6659064f7a72d8dd881e"
    },
    "src/system/governance/checks/architecture_checks.py::ArchitectureChecks": {
      "key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "name": "ArchitectureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for architectural integrity checks.",
      "docstring": "Container for architectural integrity checks.",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.825047+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "3e86306196f142ddf5bcd347356aa6c44d43631e1c9b363ef6a034f3a6929d74"
    },
    "src/system/governance/checks/architecture_checks.py::__init__": {
      "key": "src/system/governance/checks/architecture_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.825430+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "structural_hash": "474c67c3ad417e92e0a5cfe962deb537f55c550a1fd8b27eca415afbdf6a6986"
    },
    "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication": {
      "key": "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication",
      "name": "check_for_structural_duplication",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.duplication",
      "intent": "Finds symbols with identical structural hashes, violating `dry_by_design`, using content-addressed knowledge graph for accurate duplication detection.",
      "docstring": "Finds symbols with identical structural hashes, violating `dry_by_design`, using content-addressed knowledge graph for accurate duplication detection.",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.827159+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "structural_hash": "a5491626bace384a0a7450b715272d5c098d2f217b9a4c1cc53aec7d372cb36d"
    },
    "src/system/governance/checks/dev_fastpath_check.py::run_check": {
      "key": "src/system/governance/checks/dev_fastpath_check.py::run_check",
      "name": "run_check",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/dev_fastpath_check.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "This check is currently disabled. It performs no actions.",
      "docstring": "This check is currently disabled. It performs no actions.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "repo_root"
      ],
      "last_updated": "2025-08-24T09:27:08.827695+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e1eb98e89eee91e11eafbf87c11f0d65d5d35a8005e5015b8837e71c7fd456d8"
    },
    "src/system/governance/checks/structure_checks.py::StructureChecks": {
      "key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "name": "StructureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for structural constitutional checks.",
      "docstring": "Container for structural constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "items",
        "joinpath",
        "len",
        "list",
        "load_config",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "sorted",
        "split",
        "startswith",
        "validate_manifest_entry",
        "with_suffix"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.837115+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "5a73a9fcdd51ff3ae1d7426c1b0f17c85e28284db3a0302a2f83df2770ee9391"
    },
    "src/system/governance/checks/structure_checks.py::__init__": {
      "key": "src/system/governance/checks/structure_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 12,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.837513+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "474c67c3ad417e92e0a5cfe962deb537f55c550a1fd8b27eca415afbdf6a6986"
    },
    "src/system/governance/checks/structure_checks.py::check_project_manifest": {
      "key": "src/system/governance/checks/structure_checks.py::check_project_manifest",
      "name": "check_project_manifest",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.project_manifest",
      "intent": "Validates the integrity of project_manifest.yaml.",
      "docstring": "Validates the integrity of project_manifest.yaml.",
      "calls": [
        "AuditFinding",
        "append"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.838542+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "330055588e86adabc8ecefef8531dd2c828b106982869750b6d678b8e2808a90"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_coverage": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_coverage",
      "name": "check_capability_coverage",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_coverage",
      "intent": "Ensures all required capabilities are implemented.",
      "docstring": "Ensures all required capabilities are implemented.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "set",
        "sorted"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.839743+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "0f0007f98aa1b951bcb9625f47e29c38d7eb241b8b3a27044adfc71cdfc9b872"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_definitions": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_definitions",
      "name": "check_capability_definitions",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_definitions",
      "intent": "Ensures all implemented capabilities are valid.",
      "docstring": "Ensures all implemented capabilities are valid.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "load_config",
        "sorted"
      ],
      "line_number": 78,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.841162+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "1cb7e76f476b8cc87382eee14d06ffda9869b54aca27a18c92f50722f4942f81"
    },
    "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema": {
      "key": "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema",
      "name": "check_knowledge_graph_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.knowledge_graph_schema",
      "intent": "Validates all knowledge graph symbols against the schema.",
      "docstring": "Validates all knowledge graph symbols against the schema.",
      "calls": [
        "AuditFinding",
        "append",
        "items",
        "len",
        "validate_manifest_entry"
      ],
      "line_number": 115,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.842443+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "1595abdcfc3a59ec7c1bde58699f35224b13cfbee0cf24df81b4d80e0a435d79"
    },
    "src/system/governance/checks/structure_checks.py::check_domain_integrity": {
      "key": "src/system/governance/checks/structure_checks.py::check_domain_integrity",
      "name": "check_domain_integrity",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.domain_integrity",
      "intent": "Checks for domain mismatches and illegal imports.",
      "docstring": "Checks for domain mismatches and illegal imports.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "joinpath",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "split",
        "startswith",
        "with_suffix"
      ],
      "line_number": 147,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.845318+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "158a997003c23c750115175d143367e3c9539ea143365e34f1d9f4a0ce02f9a3"
    },
    "src/system/governance/checks/health_checks.py::HealthChecks": {
      "key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "name": "HealthChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for codebase health constitutional checks.",
      "docstring": "Container for codebase health constitutional checks.",
      "calls": [
        "AuditFinding",
        "_get_logical_lines_of_code",
        "append",
        "endswith",
        "extend",
        "from_ast",
        "get",
        "items",
        "len",
        "list",
        "load_config",
        "mean",
        "parse",
        "read_text",
        "relative_to",
        "splitlines",
        "startswith",
        "stdev",
        "strip",
        "values"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.850625+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "dc4094cf311674d8302d4193243abbfeeba30d61ddd34811b39f849d9e55a7bb"
    },
    "src/system/governance/checks/health_checks.py::__init__": {
      "key": "src/system/governance/checks/health_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [
        "load_config"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.851136+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "structural_hash": "72e35c9130203912e2a03a46408bf68a845d509cf8563766821f36549693aebb"
    },
    "src/system/governance/checks/health_checks.py::_get_logical_lines_of_code": {
      "key": "src/system/governance/checks/health_checks.py::_get_logical_lines_of_code",
      "name": "_get_logical_lines_of_code",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates the Logical Lines of Code (LLOC), ignoring comments and blank lines.",
      "docstring": "Calculates the Logical Lines of Code (LLOC), ignoring comments and blank lines.",
      "calls": [
        "len",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self",
        "source_code"
      ],
      "last_updated": "2025-08-24T09:27:08.851747+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "structural_hash": "a790caa3a6ae6c7e8af0b040561f7c4f4dbaf3ac73c80023c67311b7e9f89d70"
    },
    "src/system/governance/checks/health_checks.py::check_codebase_health": {
      "key": "src/system/governance/checks/health_checks.py::check_codebase_health",
      "name": "check_codebase_health",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.codebase_health",
      "intent": "Measures code complexity and atomicity against defined policies.",
      "docstring": "Measures code complexity and atomicity against defined policies.",
      "calls": [
        "AuditFinding",
        "_get_logical_lines_of_code",
        "append",
        "endswith",
        "extend",
        "from_ast",
        "get",
        "items",
        "len",
        "list",
        "mean",
        "parse",
        "read_text",
        "relative_to",
        "stdev",
        "values"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.854780+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "structural_hash": "1b9f38a97bb5dcc7c011930e6868997d140bb0389eb802f332e58c829e06867d"
    },
    "src/system/governance/checks/environment_checks.py::EnvironmentChecks": {
      "key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "name": "EnvironmentChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for environment and runtime configuration checks.",
      "docstring": "Container for environment and runtime configuration checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "load_config"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.857339+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "b015f829400a7cbb2277000e730b7be820b5242c7bbe211d846422397fd3a34d"
    },
    "src/system/governance/checks/environment_checks.py::__init__": {
      "key": "src/system/governance/checks/environment_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-24T09:27:08.857715+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "structural_hash": "474c67c3ad417e92e0a5cfe962deb537f55c550a1fd8b27eca415afbdf6a6986"
    },
    "src/system/governance/checks/environment_checks.py::check_runtime_environment": {
      "key": "src/system/governance/checks/environment_checks.py::check_runtime_environment",
      "name": "check_runtime_environment",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.environment",
      "intent": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "docstring": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "load_config"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.859419+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "structural_hash": "69c78373d6d784751125b189d281ed33c291f8220e1143451a3040940525543f"
    },
    "src/system/tools/config/builder_config.py::BuilderConfig": {
      "key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "name": "BuilderConfig",
      "type": "ClassDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Centralized configuration for the knowledge graph builder.",
      "docstring": "Centralized configuration for the knowledge graph builder.",
      "calls": [
        "Path",
        "_infer_domains_from_directory_structure",
        "_load_cli_entry_points",
        "_load_domain_map",
        "_load_exclude_patterns",
        "_load_patterns",
        "as_posix",
        "cls",
        "error",
        "exists",
        "findall",
        "get",
        "group",
        "info",
        "is_dir",
        "iterdir",
        "len",
        "load_config",
        "read_text",
        "resolve",
        "search",
        "set",
        "startswith",
        "warning"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.865278+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "8a3590f36ee1aaee3b60616ec6ed8def4f3c7463b2b7cb71733bc68d68372d46"
    },
    "src/system/tools/config/builder_config.py::from_project": {
      "key": "src/system/tools/config/builder_config.py::from_project",
      "name": "from_project",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Factory method to load configuration from project files.",
      "docstring": "Factory method to load configuration from project files.",
      "calls": [
        "_load_cli_entry_points",
        "_load_domain_map",
        "_load_exclude_patterns",
        "_load_patterns",
        "cls",
        "resolve"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "cls",
        "root_path"
      ],
      "last_updated": "2025-08-24T09:27:08.865988+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "838312d7bcbf58e32d35b8568a1eabca7ec932cbfebc245616f052f2d583e190"
    },
    "src/system/tools/config/builder_config.py::_load_exclude_patterns": {
      "key": "src/system/tools/config/builder_config.py::_load_exclude_patterns",
      "name": "_load_exclude_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Load default exclude patterns.",
      "docstring": "Load default exclude patterns.",
      "calls": [],
      "line_number": 40,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-24T09:27:08.866431+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "d934d5ff26d4579d3545274f4c1afd39c1b909bf9a000fc059ecc0dc707d68b4"
    },
    "src/system/tools/config/builder_config.py::_load_patterns": {
      "key": "src/system/tools/config/builder_config.py::_load_patterns",
      "name": "_load_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Load entry point detection patterns from configuration.",
      "docstring": "Load entry point detection patterns from configuration.",
      "calls": [
        "exists",
        "get",
        "load_config",
        "warning"
      ],
      "line_number": 45,
      "is_async": false,
      "parameters": [
        "root_path"
      ],
      "last_updated": "2025-08-24T09:27:08.867098+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "a031ff0757bd2fcfaf22772321250b4a0f4014be460fbfbe9049ed464112cf5b"
    },
    "src/system/tools/config/builder_config.py::_load_cli_entry_points": {
      "key": "src/system/tools/config/builder_config.py::_load_cli_entry_points",
      "name": "_load_cli_entry_points",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parse pyproject.toml to find declared command-line entry points.",
      "docstring": "Parse pyproject.toml to find declared command-line entry points.",
      "calls": [
        "error",
        "exists",
        "findall",
        "group",
        "read_text",
        "search",
        "set"
      ],
      "line_number": 54,
      "is_async": false,
      "parameters": [
        "root_path"
      ],
      "last_updated": "2025-08-24T09:27:08.868113+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "ea3550d025e8714dcad92d05bbd2c9c9eabc4e9da2cdc2bba64729d65995338b"
    },
    "src/system/tools/config/builder_config.py::_load_domain_map": {
      "key": "src/system/tools/config/builder_config.py::_load_domain_map",
      "name": "_load_domain_map",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Load domain-to-path mapping from configuration.",
      "docstring": "Load domain-to-path mapping from configuration.",
      "calls": [
        "Path",
        "_infer_domains_from_directory_structure",
        "as_posix",
        "get",
        "load_config"
      ],
      "line_number": 71,
      "is_async": false,
      "parameters": [
        "root_path",
        "src_root"
      ],
      "last_updated": "2025-08-24T09:27:08.869052+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "d28081dcb9987cfd5b1544b85b8f1dc8cd7cfedf0d94f53c5119843980a83821"
    },
    "src/system/tools/config/builder_config.py::_infer_domains_from_directory_structure": {
      "key": "src/system/tools/config/builder_config.py::_infer_domains_from_directory_structure",
      "name": "_infer_domains_from_directory_structure",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Heuristic to guess domains from directory structure.",
      "docstring": "Heuristic to guess domains from directory structure.",
      "calls": [
        "Path",
        "as_posix",
        "info",
        "is_dir",
        "iterdir",
        "len",
        "startswith",
        "warning"
      ],
      "line_number": 87,
      "is_async": false,
      "parameters": [
        "src_root"
      ],
      "last_updated": "2025-08-24T09:27:08.870290+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "a9b0e9b821ed76420b495acf8fed3f9e3af6ccfa94ff88867ade31509cef2fdd"
    },
    "src/core/cli/risk_gates.py::ReviewContext": {
      "key": "src/core/cli/risk_gates.py::ReviewContext",
      "name": "ReviewContext",
      "type": "ClassDef",
      "file": "src/core/cli/risk_gates.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "A data structure holding the context for a governance review.",
      "docstring": "A data structure holding the context for a governance review.",
      "calls": [],
      "line_number": 30,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-24T09:27:08.873938+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "1e82be3a32278f59e5cceb61baac51c2b9f8ebbf307b746e434d22857722d277"
    },
    "src/core/cli/risk_gates.py::_safe_eval": {
      "key": "src/core/cli/risk_gates.py::_safe_eval",
      "name": "_safe_eval",
      "type": "FunctionDef",
      "file": "src/core/cli/risk_gates.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Safely evaluates a simple boolean expression from a string, allowing only a small subset of Python's AST nodes.",
      "docstring": "Safely evaluates a simple boolean expression from a string, allowing only a small subset of Python's AST nodes.",
      "calls": [
        "ValueError",
        "bool",
        "compile",
        "eval",
        "isinstance",
        "parse",
        "replace",
        "type",
        "walk"
      ],
      "line_number": 62,
      "is_async": false,
      "parameters": [
        "expr",
        "ctx"
      ],
      "last_updated": "2025-08-24T09:27:08.875238+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3bc67586fd89d7c1c091280d2e4b8c58070833bfc7e3ad8082a2125737ca287b"
    },
    "src/core/cli/risk_gates.py::_load_yaml": {
      "key": "src/core/cli/risk_gates.py::_load_yaml",
      "name": "_load_yaml",
      "type": "FunctionDef",
      "file": "src/core/cli/risk_gates.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load YAML content from a file using the shared utility function.",
      "docstring": "Load YAML content from a file using the shared utility function.",
      "calls": [
        "load_yaml_file"
      ],
      "line_number": 75,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-24T09:27:08.875679+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "50c947b29eb9e3a8ccf80d005200755e8ab6f90d7ee9c8d46e6a29213d1041b1"
    },
    "src/core/cli/risk_gates.py::_merge": {
      "key": "src/core/cli/risk_gates.py::_merge",
      "name": "_merge",
      "type": "FunctionDef",
      "file": "src/core/cli/risk_gates.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Merges two ReviewContext objects, preferring non-default values from `b` when available.",
      "docstring": "Merges two ReviewContext objects, preferring non-default values from `b` when available.",
      "calls": [
        "ReviewContext"
      ],
      "line_number": 80,
      "is_async": false,
      "parameters": [
        "a",
        "b"
      ],
      "last_updated": "2025-08-24T09:27:08.876458+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3418fd055791110019aa9a7a2986511623d2ba4fd3776340ab9700583008ddbb"
    },
    "src/core/cli/risk_gates.py::check": {
      "key": "src/core/cli/risk_gates.py::check",
      "name": "check",
      "type": "FunctionDef",
      "file": "src/core/cli/risk_gates.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Enforce the gates defined in evaluation/score_policy.yaml using the given context.",
      "docstring": "Enforce the gates defined in evaluation/score_policy.yaml using the given context.\nFails (exit 1) if any requirement is not satisfied.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "ReviewContext",
        "_load_yaml",
        "_merge",
        "_safe_eval",
        "add",
        "append",
        "bool",
        "command",
        "echo",
        "exists",
        "float",
        "get",
        "getattr",
        "isinstance",
        "lower",
        "require_if",
        "set",
        "sorted",
        "str"
      ],
      "line_number": 94,
      "is_async": false,
      "parameters": [
        "mind_path",
        "context",
        "risk_tier",
        "score",
        "touches_critical_paths",
        "checkpoint",
        "canary",
        "approver_quorum"
      ],
      "entry_point_type": "fastapi_route_command",
      "last_updated": "2025-08-24T09:27:08.887873+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "94c7c5d764a8f4981f3af5abe2f8017fa65fd2e6351ca53c660c77a2970abb15"
    },
    "src/core/cli/intent_validate.py::_load_yaml": {
      "key": "src/core/cli/intent_validate.py::_load_yaml",
      "name": "_load_yaml",
      "type": "FunctionDef",
      "file": "src/core/cli/intent_validate.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load YAML content from a file.",
      "docstring": "Load YAML content from a file.\n\nArgs:\n    file_path: Path to the YAML file\n\nReturns:\n    Parsed YAML content as dictionary\n\nRaises:\n    FileNotFoundError: If the file doesn't exist\n    yaml.YAMLError: If the YAML is invalid",
      "calls": [
        "load_yaml_file"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-24T09:27:08.889744+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3068f31b3094b27879d10068c2b2ee71df09f1e30815bdacf4c0c857ad47453e"
    },
    "src/core/cli/intent_validate.py::_load_json": {
      "key": "src/core/cli/intent_validate.py::_load_json",
      "name": "_load_json",
      "type": "FunctionDef",
      "file": "src/core/cli/intent_validate.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and returns a JSON dictionary from the specified file path.",
      "docstring": "Loads and returns a JSON dictionary from the specified file path.",
      "calls": [
        "load",
        "open"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "path"
      ],
      "last_updated": "2025-08-24T09:27:08.890220+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "02c318416cfcaa54c205ac81b39731e3425173c52ec560282026d62a1bda356c"
    },
    "src/core/cli/intent_validate.py::_check": {
      "key": "src/core/cli/intent_validate.py::_check",
      "name": "_check",
      "type": "FunctionDef",
      "file": "src/core/cli/intent_validate.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Validates a YAML file against a JSON Schema, returning an error message if validation fails or files are missing, or None if successful.",
      "docstring": "Validates a YAML file against a JSON Schema, returning an error message if validation fails or files are missing, or None if successful.",
      "calls": [
        "_load_json",
        "_load_yaml",
        "echo",
        "exists",
        "join",
        "map",
        "validate"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "pair"
      ],
      "last_updated": "2025-08-24T09:27:08.891756+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "4ea28c1f29a3fae4d249303b4355c0f4a2aa17c12baa132b868c6ad34be2dae1"
    },
    "src/core/cli/intent_validate.py::run": {
      "key": "src/core/cli/intent_validate.py::run",
      "name": "run",
      "type": "FunctionDef",
      "file": "src/core/cli/intent_validate.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Validate policy YAMLs under .intent using JSON Schemas.",
      "docstring": "Validate policy YAMLs under .intent using JSON Schemas.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "_check",
        "command",
        "echo",
        "filter",
        "join",
        "list"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [
        "mind_path"
      ],
      "entry_point_type": "fastapi_route_command",
      "last_updated": "2025-08-24T09:27:08.893122+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "03da59d28862d5f4c8b9168f790267c4e19af08ca2d92a0159a03154cfa6dfaa"
    },
    "src/shared/schemas/manifest_validator.py::load_schema": {
      "key": "src/shared/schemas/manifest_validator.py::load_schema",
      "name": "load_schema",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load a JSON schema from the .intent/schemas/ directory.",
      "docstring": "Load a JSON schema from the .intent/schemas/ directory.\n\nArgs:\n    schema_name (str): The filename of the schema (e.g., 'knowledge_graph_entry.schema.json').\n\nReturns:\n    Dict[str, Any]: The loaded JSON schema.\n\nRaises:\n    FileNotFoundError: If the schema file is not found.\n    json.JSONDecodeError: If the schema file is not valid JSON.",
      "calls": [
        "FileNotFoundError",
        "JSONDecodeError",
        "exists",
        "load",
        "open"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "schema_name"
      ],
      "last_updated": "2025-08-24T09:27:08.895041+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6e3b8465838bb871ec1cd9f626c92298765c571cba61170572d50151c662f9be"
    },
    "src/shared/schemas/manifest_validator.py::validate_manifest_entry": {
      "key": "src/shared/schemas/manifest_validator.py::validate_manifest_entry",
      "name": "validate_manifest_entry",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Validate a single manifest entry against a schema.",
      "docstring": "Validate a single manifest entry against a schema.\n\nArgs:\n    entry: The dictionary representing a single function/class entry.\n    schema_name: The filename of the schema to validate against.\n\nReturns:\n    A tuple of (is_valid: bool, list_of_error_messages: List[str]).",
      "calls": [
        "Draft7Validator",
        "append",
        "iter_errors",
        "join",
        "load_schema",
        "str"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "entry",
        "schema_name"
      ],
      "last_updated": "2025-08-24T09:27:08.896417+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "df3df9d690f9e5aebdbffadea221df68a0ebfd500aaafa86a2205e3e452dedd2"
    },
    "src/shared/utils/manifest_aggregator.py::aggregate_manifests": {
      "key": "src/shared/utils/manifest_aggregator.py::aggregate_manifests",
      "name": "aggregate_manifests",
      "type": "FunctionDef",
      "file": "src/shared/utils/manifest_aggregator.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds all domain-specific manifest.yaml files and merges them.",
      "docstring": "Finds all domain-specific manifest.yaml files and merges them.\n\nThis function is the heart of the modular manifest system. It reads the\nsource structure to find all domains, then searches for a manifest in each\ndomain's directory, aggregating their contents.\n\nArgs:\n    repo_root (Path): The absolute path to the repository root.\n\nReturns:\n    A dictionary representing the aggregated manifest, primarily focused\n    on compiling a unified list of 'required_capabilities'.",
      "calls": [
        "debug",
        "error",
        "exists",
        "extend",
        "get",
        "info",
        "list",
        "read_text",
        "safe_load",
        "set",
        "sorted"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "repo_root"
      ],
      "last_updated": "2025-08-24T09:27:08.899849+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3424b54f3633ba0a128f765512d3694b531ca5dc1d7218058d3dfedb8b9e5880"
    },
    "src/shared/utils/constitutional_parser.py::get_all_constitutional_paths": {
      "key": "src/shared/utils/constitutional_parser.py::get_all_constitutional_paths",
      "name": "get_all_constitutional_paths",
      "type": "FunctionDef",
      "file": "src/shared/utils/constitutional_parser.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Reads meta.yaml and recursively discovers all declared constitutional file paths.",
      "docstring": "Reads meta.yaml and recursively discovers all declared constitutional file paths.\nReturns a set of repo-relative paths (e.g., '.intent/policies/safety.yaml').",
      "calls": [
        "Path",
        "_recursive_find",
        "add",
        "exists",
        "isinstance",
        "read_text",
        "replace",
        "safe_load",
        "set",
        "str",
        "values"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [
        "intent_dir"
      ],
      "last_updated": "2025-08-24T09:27:08.901932+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "835dd983ebd08a72aff877b565603f043ec5bdbb7c6ddbdf240553e54e2f8e03"
    },
    "src/shared/utils/import_scanner.py::scan_imports_for_file": {
      "key": "src/shared/utils/import_scanner.py::scan_imports_for_file",
      "name": "scan_imports_for_file",
      "type": "FunctionDef",
      "file": "src/shared/utils/import_scanner.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Parse a Python file and extract all imported module paths.",
      "docstring": "Parse a Python file and extract all imported module paths.\n\nArgs:\n    file_path (Path): Path to the file.\n\nReturns:\n    List[str]: List of imported module paths.",
      "calls": [
        "append",
        "isinstance",
        "parse",
        "read_text",
        "walk",
        "warning"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-24T09:27:08.903638+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "42bb5532dfbc0b03134979db387ac69dab213de0539724e125ec4cdb88080722"
    },
    "src/shared/utils/yaml_loader.py::load_yaml": {
      "key": "src/shared/utils/yaml_loader.py::load_yaml",
      "name": "load_yaml",
      "type": "FunctionDef",
      "file": "src/shared/utils/yaml_loader.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "yaml_loading",
      "intent": "Load and parse a YAML file from the given path.",
      "docstring": "Load and parse a YAML file from the given path.\n\nArgs:\n    file_path: Path to the YAML file to load\n\nReturns:\n    Parsed YAML content as a dictionary\n\nRaises:\n    FileNotFoundError: If the specified file doesn't exist\n    yaml.YAMLError: If the YAML content is malformed",
      "calls": [
        "FileNotFoundError",
        "YAMLError",
        "exists",
        "open",
        "safe_load"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-24T09:27:08.904961+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "df36fb11c262a48d393a874a9df8f1454bebc01e681b7f8c1817758534b8c82b"
    },
    "src/shared/utils/parsing.py::extract_json_from_response": {
      "key": "src/shared/utils/parsing.py::extract_json_from_response",
      "name": "extract_json_from_response",
      "type": "FunctionDef",
      "file": "src/shared/utils/parsing.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Extracts a JSON object or array from a raw text response.",
      "docstring": "Extracts a JSON object or array from a raw text response.\nHandles markdown code blocks (```json) and raw JSON.\nReturns None if no valid JSON is found.",
      "calls": [
        "JSONDecoder",
        "find",
        "group",
        "loads",
        "raw_decode",
        "search"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "text"
      ],
      "last_updated": "2025-08-24T09:27:08.906905+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c43317d6d97515ab1773956642b8de3a0cbba200e22c46a54f88d62899f34719"
    }
  }
}