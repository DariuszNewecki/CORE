{
  "schema_version": "2.0.0",
  "metadata": {
    "files_scanned": 57,
    "total_symbols": 243,
    "timestamp_utc": "2025-08-13T19:16:34.881991+00:00"
  },
  "symbols": {
    "src/core/clients.py::BaseLLMClient": {
      "key": "src/core/clients.py::BaseLLMClient",
      "name": "BaseLLMClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Base class for LLM clients, handling common request logic for Chat APIs.",
      "docstring": "Base class for LLM clients, handling common request logic for Chat APIs.\nProvides shared initialization and error handling for all LLM clients.",
      "calls": [
        "AsyncClient",
        "ValueError",
        "debug",
        "endswith",
        "error",
        "json",
        "post",
        "raise_for_status",
        "rstrip"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "base_class",
      "last_updated": "2025-08-13T19:16:34.207637+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "framework_base_class",
      "structural_hash": "38408b13a298d9bb537d3728a9c4a6ea2a3275c017328a7d183c5be076b4ee76"
    },
    "src/core/clients.py::__init__": {
      "key": "src/core/clients.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize the LLM client with API URL, key, and model name, setting up headers and async client.",
      "docstring": "Initialize the LLM client with API URL, key, and model name, setting up headers and async client.",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "line_number": 111,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.223834+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/clients.py::GeneratorClient",
      "structural_hash": "b403a0adf5809d21d773a4460434cb99a9302d32c855cccb6cd5cf64e2da6ed1"
    },
    "src/core/clients.py::make_request": {
      "key": "src/core/clients.py::make_request",
      "name": "make_request",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt to the configured Chat Completions API. (Synchronous)",
      "docstring": "Sends a prompt to the configured Chat Completions API. (Synchronous)",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "last_updated": "2025-08-13T19:16:34.216624+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "f86839876ec208ce0f0efec9a1ee80bba0eccb140e30ccaa94c499b45e182a73"
    },
    "src/core/clients.py::make_request_async": {
      "key": "src/core/clients.py::make_request_async",
      "name": "make_request_async",
      "type": "AsyncFunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt asynchronously to the configured Chat Completions API.",
      "docstring": "Sends a prompt asynchronously to the configured Chat Completions API.",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "line_number": 70,
      "is_async": true,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "last_updated": "2025-08-13T19:16:34.219022+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "244c179b6450a2b51fe6ac2a7f7366217c04e6c2be3d75099bea845645be5224"
    },
    "src/core/clients.py::OrchestratorClient": {
      "key": "src/core/clients.py::OrchestratorClient",
      "name": "OrchestratorClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Client for the Orchestrator LLM (e.g., GPT-4, Claude 3).",
      "docstring": "Client for the Orchestrator LLM (e.g., GPT-4, Claude 3).\nResponsible for high-level planning and intent interpretation.",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "line_number": 93,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.220096+00:00",
      "is_class": true,
      "base_classes": [
        "BaseLLMClient"
      ],
      "structural_hash": "a9a57b0c8143719c4fdc119649f1c145ab237e70c343b272671aa2cea24d2299"
    },
    "src/core/clients.py::GeneratorClient": {
      "key": "src/core/clients.py::GeneratorClient",
      "name": "GeneratorClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Client for the Generator LLM (e.g., a specialized coding model).",
      "docstring": "Client for the Generator LLM (e.g., a specialized coding model).\nResponsible for code generation and detailed implementation.",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "line_number": 106,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.222342+00:00",
      "is_class": true,
      "base_classes": [
        "BaseLLMClient"
      ],
      "structural_hash": "4595b0780cd78486b917e5401a7827f3fe1b1ee5ec9fa7dfd131fe42ab6e1df6"
    },
    "src/core/validation_pipeline.py::_load_safety_policies": {
      "key": "src/core/validation_pipeline.py::_load_safety_policies",
      "name": "_load_safety_policies",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and caches the safety policies from the .intent directory.",
      "docstring": "Loads and caches the safety policies from the .intent directory.",
      "calls": [
        "get",
        "get_repo_root",
        "load_config"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.227843+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "cab90bc1e8a1e8e5ffececda4a227e4b8a931edb4fe02be9ce5a23bfae8d222f"
    },
    "src/core/validation_pipeline.py::_get_full_attribute_name": {
      "key": "src/core/validation_pipeline.py::_get_full_attribute_name",
      "name": "_get_full_attribute_name",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "docstring": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "calls": [
        "insert",
        "isinstance",
        "join"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-13T19:16:34.228816+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "72bf270f183300199553865489182c447b5a4ccdc1ea03a3d5b94d95b162322e"
    },
    "src/core/validation_pipeline.py::_find_dangerous_patterns": {
      "key": "src/core/validation_pipeline.py::_find_dangerous_patterns",
      "name": "_find_dangerous_patterns",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans the AST for calls and imports forbidden by safety policies.",
      "docstring": "Scans the AST for calls and imports forbidden by safety policies.",
      "calls": [
        "Path",
        "_get_full_attribute_name",
        "_load_safety_policies",
        "any",
        "append",
        "get",
        "isinstance",
        "match",
        "replace",
        "set",
        "split",
        "update",
        "walk"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "tree",
        "file_path"
      ],
      "last_updated": "2025-08-13T19:16:34.232303+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "514dbf39224ab1741a836c6c28cab2e277f75d6d7c6d3671596cfc61f59efccf"
    },
    "src/core/validation_pipeline.py::_check_for_todo_comments": {
      "key": "src/core/validation_pipeline.py::_check_for_todo_comments",
      "name": "_check_for_todo_comments",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans source code for TODO/FIXME comments and returns them as violations.",
      "docstring": "Scans source code for TODO/FIXME comments and returns them as violations.",
      "calls": [
        "append",
        "enumerate",
        "split",
        "splitlines",
        "strip"
      ],
      "line_number": 103,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-13T19:16:34.234029+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c5b46c2eff257ea4efe9df4b282875ab698168db224abe219bf9f3ef4276594d"
    },
    "src/core/validation_pipeline.py::_check_semantics": {
      "key": "src/core/validation_pipeline.py::_check_semantics",
      "name": "_check_semantics",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "semantic_validation",
      "intent": "Runs all policy-aware semantic checks on a string of Python code.",
      "docstring": "Runs all policy-aware semantic checks on a string of Python code.",
      "calls": [
        "_find_dangerous_patterns",
        "parse"
      ],
      "line_number": 119,
      "is_async": false,
      "parameters": [
        "code",
        "file_path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.234860+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "68336360a8c01eee656ceab907a3d3dcb6b61fef29f42c2c891428148a818f3a"
    },
    "src/core/validation_pipeline.py::_validate_python_code": {
      "key": "src/core/validation_pipeline.py::_validate_python_code",
      "name": "_validate_python_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Internal pipeline for Python code validation.",
      "docstring": "Internal pipeline for Python code validation.\nReturns the final code and a list of all found violations.",
      "calls": [
        "_check_for_todo_comments",
        "_check_semantics",
        "any",
        "append",
        "check_syntax",
        "extend",
        "fix_and_lint_code_with_ruff",
        "format_code_with_black",
        "str"
      ],
      "line_number": 128,
      "is_async": false,
      "parameters": [
        "path_hint",
        "code"
      ],
      "last_updated": "2025-08-13T19:16:34.236448+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e96751308fac71051ef307581c6143cebf0852d2a595604b122d0c380c8f37fc"
    },
    "src/core/validation_pipeline.py::_validate_yaml": {
      "key": "src/core/validation_pipeline.py::_validate_yaml",
      "name": "_validate_yaml",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Internal pipeline for YAML validation.",
      "docstring": "Internal pipeline for YAML validation.",
      "calls": [
        "append",
        "safe_load"
      ],
      "line_number": 161,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-13T19:16:34.237646+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c1cc9b3495cf7da110b274799aa0d90947cbb9d1605a43719d7aa6ecfb877cef"
    },
    "src/core/validation_pipeline.py::_get_file_classification": {
      "key": "src/core/validation_pipeline.py::_get_file_classification",
      "name": "_get_file_classification",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Determines the file type based on its extension.",
      "docstring": "Determines the file type based on its extension.",
      "calls": [
        "Path",
        "lower"
      ],
      "line_number": 175,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-13T19:16:34.238599+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5389b48f5dc1b1c94a0a73168977c056aad4c0d85a4843163538780ff9c3cb91"
    },
    "src/core/validation_pipeline.py::validate_code": {
      "key": "src/core/validation_pipeline.py::validate_code",
      "name": "validate_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "code_quality_analysis",
      "intent": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type, returning a standardized dictionary with status, violations, and processed code.",
      "docstring": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type, returning a standardized dictionary with status, violations, and processed code.",
      "calls": [
        "_get_file_classification",
        "_validate_python_code",
        "_validate_yaml",
        "any",
        "debug",
        "get"
      ],
      "line_number": 184,
      "is_async": false,
      "parameters": [
        "file_path",
        "code",
        "quiet"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.240190+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "89de86f90da79d40f54b96d243b439f94dda7e1e0fe83ad3867e582947830cb0"
    },
    "src/core/git_service.py::GitService": {
      "key": "src/core/git_service.py::GitService",
      "name": "GitService",
      "type": "ClassDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Encapsulates Git operations for the CORE system.",
      "docstring": "Encapsulates Git operations for the CORE system.\nEnsures all file changes are committed with traceable messages.",
      "calls": [
        "Path",
        "RuntimeError",
        "ValueError",
        "_run_command",
        "debug",
        "error",
        "info",
        "is_dir",
        "is_git_repo",
        "join",
        "lower",
        "resolve",
        "run",
        "str",
        "strip",
        "warning"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.245416+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "ccc7b74514266784da6391edb69daa742b4ccb839f991520bf4bcd5f53f8bee9"
    },
    "src/core/git_service.py::__init__": {
      "key": "src/core/git_service.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize GitService with the resolved absolute path to the Git repository; raises ValueError if path is not a valid Git repo.",
      "docstring": "Initialize GitService with the resolved absolute path to the Git repository; raises ValueError if path is not a valid Git repo.",
      "calls": [
        "Path",
        "ValueError",
        "info",
        "is_git_repo",
        "resolve"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.252373+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "2ee6f0bbab7a85e07997d95684c60764cdff44ca12bd88dd923c9ba41636ac16"
    },
    "src/core/git_service.py::_run_command": {
      "key": "src/core/git_service.py::_run_command",
      "name": "_run_command",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "change_safety_enforcement",
      "intent": "Run a Git command and return stdout.",
      "docstring": "Run a Git command and return stdout.\n\nArgs:\n    command (list): Git command as a list (e.g., ['git', 'status']).\n\nReturns:\n    str: Command output, or raises RuntimeError on failure.",
      "calls": [
        "RuntimeError",
        "debug",
        "error",
        "join",
        "run",
        "strip"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "self",
        "command"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.253583+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "244f6b0c9edc75d143c4779dec692c478d7a6308ed924c4e1eb77a9c6f1f8185"
    },
    "src/core/git_service.py::add": {
      "key": "src/core/git_service.py::add",
      "name": "add",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stage a file or directory for commit.",
      "docstring": "Stage a file or directory for commit.\n\nArgs:\n    file_path (str): Path to stage. Defaults to '.' (all changes).",
      "calls": [
        "ValueError",
        "_run_command",
        "resolve"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-13T19:16:34.254624+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "bf69c45ada0dfc032626720fafc60b9784d1b6f7671472abf04bbef419e3d3b2"
    },
    "src/core/git_service.py::commit": {
      "key": "src/core/git_service.py::commit",
      "name": "commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Commit staged changes with a message.",
      "docstring": "Commit staged changes with a message.\nIf there are no changes to commit, this operation is a no-op and will not raise an error.\n\nArgs:\n    message (str): Commit message explaining the change.",
      "calls": [
        "_run_command",
        "info",
        "lower",
        "str"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [
        "self",
        "message"
      ],
      "last_updated": "2025-08-13T19:16:34.255833+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "28aacd32f8f933e003487892fc29991fec80707c4431f9d84ee198f07158791b"
    },
    "src/core/git_service.py::is_git_repo": {
      "key": "src/core/git_service.py::is_git_repo",
      "name": "is_git_repo",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Check if the configured path is a valid Git repository.",
      "docstring": "Check if the configured path is a valid Git repository.\n\nReturns:\n    bool: True if it's a Git repo, False otherwise.",
      "calls": [
        "is_dir"
      ],
      "line_number": 96,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.256567+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "44bf21e77508b2285243dbd4a291ad962face3886f645477a69fb5b1af1f182e"
    },
    "src/core/git_service.py::get_current_commit": {
      "key": "src/core/git_service.py::get_current_commit",
      "name": "get_current_commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Gets the full SHA hash of the current commit (HEAD).",
      "docstring": "Gets the full SHA hash of the current commit (HEAD).",
      "calls": [
        "_run_command"
      ],
      "line_number": 106,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.257144+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "9591cea61e11db1150d7179ac28a550cc2eba183bfc3d60f297b6a304022122a"
    },
    "src/core/git_service.py::reset_to_commit": {
      "key": "src/core/git_service.py::reset_to_commit",
      "name": "reset_to_commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Performs a hard reset to a specific commit hash.",
      "docstring": "Performs a hard reset to a specific commit hash.\nThis will discard all current changes.",
      "calls": [
        "_run_command",
        "info",
        "warning"
      ],
      "line_number": 112,
      "is_async": false,
      "parameters": [
        "self",
        "commit_hash"
      ],
      "last_updated": "2025-08-13T19:16:34.258033+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "949dc4328418bf308315afed23d47b25af2965af4c69af006041795f2264b0da"
    },
    "src/core/syntax_checker.py::check_syntax": {
      "key": "src/core/syntax_checker.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/core/syntax_checker.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "syntax_validation",
      "intent": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "docstring": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "calls": [
        "endswith",
        "parse",
        "strip"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [
        "file_path",
        "code"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.259729+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "1364f88841c69497e8e60da5590e605cb9abe2023ed6c7914d4834889565c54c"
    },
    "src/core/black_formatter.py::format_code_with_black": {
      "key": "src/core/black_formatter.py::format_code_with_black",
      "name": "format_code_with_black",
      "type": "FunctionDef",
      "file": "src/core/black_formatter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "docstring": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "calls": [
        "Exception",
        "FileMode",
        "InvalidInput",
        "format_str"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-13T19:16:34.261155+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "67aa7b50532f6c25f84285da5bbf9430a54f3b594a386a3299c19b82faa15fbf"
    },
    "src/core/test_runner.py::run_tests": {
      "key": "src/core/test_runner.py::run_tests",
      "name": "run_tests",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "test_execution",
      "intent": "Executes pytest on the tests/ directory, capturing stdout, stderr, exit code, and a summary, returning results as a structured dict.",
      "docstring": "Executes pytest on the tests/ directory, capturing stdout, stderr, exit code, and a summary, returning results as a structured dict.",
      "calls": [
        "Path",
        "_log_test_result",
        "_store_failure_if_any",
        "_summarize",
        "error",
        "getenv",
        "info",
        "int",
        "isoformat",
        "resolve",
        "run",
        "str",
        "strip",
        "utcnow",
        "warning"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "silent"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.266550+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "ba644ef6c99cd06ae026c79160b5c664e2431f68e64c12072df63f8657585802"
    },
    "src/core/test_runner.py::_summarize": {
      "key": "src/core/test_runner.py::_summarize",
      "name": "_summarize",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Error: Could not connect to LLM endpoint. Details: HTTPSConnectionPool(host='api.deepseek.com', port=443): Read timed out. (read timeout=180)",
      "docstring": "Error: Could not connect to LLM endpoint. Details: HTTPSConnectionPool(host='api.deepseek.com', port=443): Read timed out. (read timeout=180)",
      "calls": [
        "reversed",
        "splitlines",
        "strip"
      ],
      "line_number": 86,
      "is_async": false,
      "parameters": [
        "output"
      ],
      "last_updated": "2025-08-13T19:16:34.267861+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f0041948b221eba6f0250d312fac9725763d7fc96366472200a926664cd55d73"
    },
    "src/core/test_runner.py::_log_test_result": {
      "key": "src/core/test_runner.py::_log_test_result",
      "name": "_log_test_result",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Appends a JSON record of a test run to the persistent log file.",
      "docstring": "Appends a JSON record of a test run to the persistent log file.",
      "calls": [
        "dumps",
        "open",
        "warning",
        "write"
      ],
      "line_number": 95,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "last_updated": "2025-08-13T19:16:34.268856+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d463a0df6b72cd39d7a4ba062de2ab6977e10aac179157ed69494ee335c3e6d6"
    },
    "src/core/test_runner.py::_store_failure_if_any": {
      "key": "src/core/test_runner.py::_store_failure_if_any",
      "name": "_store_failure_if_any",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Saves the details of a failed test run to a dedicated file for easy access.",
      "docstring": "Saves the details of a failed test run to a dedicated file for easy access.",
      "calls": [
        "dump",
        "exists",
        "get",
        "open",
        "remove",
        "warning"
      ],
      "line_number": 104,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "last_updated": "2025-08-13T19:16:34.270134+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "11d45c32f9fef8ece358e4f07965af7c3796063656cb71a16759c57e803ff104"
    },
    "src/core/main.py::lifespan": {
      "key": "src/core/main.py::lifespan",
      "name": "lifespan",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "docstring": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "calls": [
        "GeneratorClient",
        "GitService",
        "IntentGuard",
        "OrchestratorClient",
        "Path",
        "info",
        "introspection",
        "warning"
      ],
      "line_number": 33,
      "is_async": true,
      "parameters": [
        "app"
      ],
      "entry_point_type": "context_manager",
      "last_updated": "2025-08-13T19:16:34.272611+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "be2a255ca4ba1cf1bd74a8c125b1b73ed58d63777ef3eb6f1aa6635a091a6a9a"
    },
    "src/core/main.py::GoalRequest": {
      "key": "src/core/main.py::GoalRequest",
      "name": "GoalRequest",
      "type": "ClassDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Defines the request body for the /execute_goal endpoint.",
      "docstring": "Defines the request body for the /execute_goal endpoint.",
      "calls": [],
      "line_number": 55,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-13T19:16:34.273183+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "baef49e36501b61b15656d480f800aab9f0809207c1960e8f92b972db387e383"
    },
    "src/core/main.py::execute_goal": {
      "key": "src/core/main.py::execute_goal",
      "name": "execute_goal",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Execute a high-level goal by planning and generating code.",
      "docstring": "Execute a high-level goal by planning and generating code.",
      "calls": [
        "FileHandler",
        "HTTPException",
        "JSONResponse",
        "PlannerAgent",
        "error",
        "execute_plan",
        "info",
        "post",
        "str"
      ],
      "line_number": 60,
      "is_async": true,
      "parameters": [
        "request_data",
        "request"
      ],
      "entry_point_type": "fastapi_route_post",
      "last_updated": "2025-08-13T19:16:34.275109+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "35c32ac2bd4b62c5018ada127d9db98bda21a1a214371ea6f358933f3790268f"
    },
    "src/core/main.py::root": {
      "key": "src/core/main.py::root",
      "name": "root",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Root endpoint \u2014 returns system status.",
      "docstring": "Root endpoint \u2014 returns system status.",
      "calls": [
        "get"
      ],
      "line_number": 95,
      "is_async": true,
      "parameters": [],
      "entry_point_type": "fastapi_route_get",
      "last_updated": "2025-08-13T19:16:34.275877+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0f4ab9b7486b424e3726a154118bc8d237af730580bf891e8f58b65ba9fd8713"
    },
    "src/core/prompt_pipeline.py::PromptPipeline": {
      "key": "src/core/prompt_pipeline.py::PromptPipeline",
      "name": "PromptPipeline",
      "type": "ClassDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].",
      "docstring": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].\nEnsures the LLM receives full context before generating code.",
      "calls": [
        "Path",
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest",
        "compile",
        "dump",
        "exists",
        "get",
        "group",
        "is_file",
        "isinstance",
        "read_text",
        "resolve",
        "safe_load",
        "split",
        "stat",
        "str",
        "strip",
        "sub"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.283646+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "643ffeca004f05935522cc4d1c1b568539b9a36dd0ab361acf09bb0e399dec65"
    },
    "src/core/prompt_pipeline.py::__init__": {
      "key": "src/core/prompt_pipeline.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize PromptPipeline with repository root.",
      "docstring": "Initialize PromptPipeline with repository root.\n\nArgs:\n    repo_path (Path): Root path of the repository.",
      "calls": [
        "Path",
        "compile",
        "resolve"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.294029+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "bda8f0237a381f0ea54c8b1c95a94d352f76364cb12916f96b97e8481887259a"
    },
    "src/core/prompt_pipeline.py::_replace_context_match": {
      "key": "src/core/prompt_pipeline.py::_replace_context_match",
      "name": "_replace_context_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "docstring": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-13T19:16:34.295650+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "69c3e72e7b03b25521273e77c42e156d65772c262f59ee1b25bcce6d70863bff"
    },
    "src/core/prompt_pipeline.py::_inject_context": {
      "key": "src/core/prompt_pipeline.py::_inject_context",
      "name": "_inject_context",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[context:file.py]] directives with actual file content.",
      "docstring": "Replaces [[context:file.py]] directives with actual file content.",
      "calls": [
        "sub"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-13T19:16:34.296322+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "11fb0fa702d480e49fbad9fe7eaede86611b3cfb9b8944f520892ae15dffc7b0"
    },
    "src/core/prompt_pipeline.py::_replace_include_match": {
      "key": "src/core/prompt_pipeline.py::_replace_include_match",
      "name": "_replace_include_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "docstring": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "line_number": 64,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-13T19:16:34.297850+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "3df3436cee404f0d98540037203c0e84c11e0f56cb31540ca3fe85350eeacdd8"
    },
    "src/core/prompt_pipeline.py::_inject_includes": {
      "key": "src/core/prompt_pipeline.py::_inject_includes",
      "name": "_inject_includes",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[include:file.py]] directives with file content.",
      "docstring": "Replaces [[include:file.py]] directives with file content.",
      "calls": [
        "sub"
      ],
      "line_number": 78,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-13T19:16:34.298579+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "6f77e4347ebd4b2deab3eace2798b591c4243c4cc43686cd319c0a1f5ff0c2ca"
    },
    "src/core/prompt_pipeline.py::_replace_analysis_match": {
      "key": "src/core/prompt_pipeline.py::_replace_analysis_match",
      "name": "_replace_analysis_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "docstring": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "calls": [
        "group",
        "strip"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-13T19:16:34.299398+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "34274a0f7415695348ba0437bb6be2b7c6a211608372ea21fcf87b7bb7057f58"
    },
    "src/core/prompt_pipeline.py::_inject_analysis": {
      "key": "src/core/prompt_pipeline.py::_inject_analysis",
      "name": "_inject_analysis",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[analysis:file.py]] directives with code analysis.",
      "docstring": "Replaces [[analysis:file.py]] directives with code analysis.",
      "calls": [
        "sub"
      ],
      "line_number": 89,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-13T19:16:34.299995+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "c503ae0368651ed52d0af07a2028044a4635852b4262fbe0b292a6de1fef9a74"
    },
    "src/core/prompt_pipeline.py::_replace_manifest_match": {
      "key": "src/core/prompt_pipeline.py::_replace_manifest_match",
      "name": "_replace_manifest_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "docstring": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "calls": [
        "dump",
        "exists",
        "get",
        "group",
        "isinstance",
        "read_text",
        "safe_load",
        "split",
        "str",
        "strip"
      ],
      "line_number": 93,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-13T19:16:34.301916+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "4937c71be594f5ada7675be42dc716678817daa722e49398deafa963ac35acad"
    },
    "src/core/prompt_pipeline.py::_inject_manifest": {
      "key": "src/core/prompt_pipeline.py::_inject_manifest",
      "name": "_inject_manifest",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "docstring": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "calls": [
        "sub"
      ],
      "line_number": 119,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-13T19:16:34.302681+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "77f28434e5ad8ebaf00e1d6081b399fd2a9d7c90dac7829bbde092e51da55a4f"
    },
    "src/core/prompt_pipeline.py::process": {
      "key": "src/core/prompt_pipeline.py::process",
      "name": "process",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "prompt_interpretation",
      "intent": "Processes the full prompt by sequentially resolving all directives.",
      "docstring": "Processes the full prompt by sequentially resolving all directives.\nThis is the main entry point for prompt enrichment.",
      "calls": [
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest"
      ],
      "line_number": 124,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.303436+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "7beac5b33fa702f09356b6bd12d514990e13c314587f87580dee342387278a1a"
    },
    "src/core/capabilities.py::introspection": {
      "key": "src/core/capabilities.py::introspection",
      "name": "introspection",
      "type": "FunctionDef",
      "file": "src/core/capabilities.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "introspection",
      "intent": "Runs a full self-analysis cycle to inspect system structure and health.",
      "docstring": "Runs a full self-analysis cycle to inspect system structure and health.\nThis orchestrates the execution of the system's own introspection tools\nas separate, governed processes.",
      "calls": [
        "Path",
        "error",
        "info",
        "print",
        "resolve",
        "run",
        "warning"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-13T19:16:34.306709+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "65c205885812932a8159baa16c02658ee3be9c35f7e536cee2a1799fa9a682b7"
    },
    "src/core/ruff_linter.py::fix_and_lint_code_with_ruff": {
      "key": "src/core/ruff_linter.py::fix_and_lint_code_with_ruff",
      "name": "fix_and_lint_code_with_ruff",
      "type": "FunctionDef",
      "file": "src/core/ruff_linter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Fix and lint the provided Python code using Ruff's JSON output format.",
      "docstring": "Fix and lint the provided Python code using Ruff's JSON output format.\n\nArgs:\n    code (str): Source code to fix and lint.\n    display_filename (str): Optional display name for readable error messages.\n\nReturns:\n    A tuple containing:\n    - The potentially fixed code as a string.\n    - A list of structured violation dictionaries for any remaining issues.",
      "calls": [
        "NamedTemporaryFile",
        "append",
        "error",
        "exists",
        "get",
        "loads",
        "open",
        "read",
        "remove",
        "run",
        "write"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "code",
        "display_filename"
      ],
      "last_updated": "2025-08-13T19:16:34.310486+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "43ca55ae34afc29c10e967766b01252dae62b0efe0b5e8f024d0d5f07d1cc287"
    },
    "src/core/file_handler.py::FileHandler": {
      "key": "src/core/file_handler.py::FileHandler",
      "name": "FileHandler",
      "type": "ClassDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Central class for safe, auditable file operations in CORE.",
      "docstring": "Central class for safe, auditable file operations in CORE.\nAll writes are staged first and require confirmation. Validation is handled\nby the calling agent via the validation_pipeline.",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "as_posix",
        "dumps",
        "exists",
        "info",
        "is_dir",
        "is_relative_to",
        "isoformat",
        "mkdir",
        "now",
        "pop",
        "resolve",
        "str",
        "unlink",
        "uuid4",
        "write_text"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.316183+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "cf22b57d0019b89065c46a812e22e93b4b7115c5a8708f14c806b9a1d98a402f"
    },
    "src/core/file_handler.py::__init__": {
      "key": "src/core/file_handler.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize FileHandler with repository root.",
      "docstring": "Initialize FileHandler with repository root.",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "is_dir",
        "mkdir",
        "resolve"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.322444+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "a391bbf69fe28cb6f7dd819585d77edd303092eba98bfedd2829d91a0675d620"
    },
    "src/core/file_handler.py::add_pending_write": {
      "key": "src/core/file_handler.py::add_pending_write",
      "name": "add_pending_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stages a pending write operation for later confirmation.",
      "docstring": "Stages a pending write operation for later confirmation.",
      "calls": [
        "Path",
        "as_posix",
        "dumps",
        "isoformat",
        "now",
        "str",
        "uuid4",
        "write_text"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "suggested_path",
        "code"
      ],
      "last_updated": "2025-08-13T19:16:34.323853+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "97f53770943022e923da2c61ba40c8b032523785a1466c467746c7cf52a50e8f"
    },
    "src/core/file_handler.py::confirm_write": {
      "key": "src/core/file_handler.py::confirm_write",
      "name": "confirm_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "docstring": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "calls": [
        "ValueError",
        "dumps",
        "exists",
        "info",
        "is_relative_to",
        "mkdir",
        "pop",
        "resolve",
        "str",
        "unlink",
        "write_text"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "self",
        "pending_id"
      ],
      "last_updated": "2025-08-13T19:16:34.326333+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "541b4ae3111b2b97acd6b799bddb038018fc5ddaf06d45bd53757acdbbe26688"
    },
    "src/core/intent_model.py::IntentModel": {
      "key": "src/core/intent_model.py::IntentModel",
      "name": "IntentModel",
      "type": "ClassDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and provides an queryable interface to the source code structure",
      "docstring": "Loads and provides an queryable interface to the source code structure\ndefined in .intent/knowledge/source_structure.yaml.",
      "calls": [
        "FileNotFoundError",
        "Path",
        "ValueError",
        "_load_structure",
        "exists",
        "get",
        "isinstance",
        "items",
        "len",
        "read_text",
        "resolve",
        "safe_load",
        "sorted"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.330675+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "44a97788e0f0dfef7fda9ee25c657d52b67e7dad28c1042de8a32d1f58d7bd5c"
    },
    "src/core/intent_model.py::__init__": {
      "key": "src/core/intent_model.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initializes the model by loading the source structure definition from the repository, inferring the root if not provided.",
      "docstring": "Initializes the model by loading the source structure definition from the repository, inferring the root if not provided.",
      "calls": [
        "Path",
        "_load_structure",
        "resolve"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.335702+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "b6a00bdb4d20cab52b39f280147b910b87f17475e126165f66b105aeaf41d245"
    },
    "src/core/intent_model.py::_load_structure": {
      "key": "src/core/intent_model.py::_load_structure",
      "name": "_load_structure",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load the domain structure from .intent/knowledge/source_structure.yaml.",
      "docstring": "Load the domain structure from .intent/knowledge/source_structure.yaml.\n\nReturns:\n    Dict[str, dict]: Mapping of domain names to metadata (path, permissions, etc.).",
      "calls": [
        "FileNotFoundError",
        "ValueError",
        "exists",
        "isinstance",
        "read_text",
        "safe_load"
      ],
      "line_number": 37,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.336943+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "d9d85a3511a3996305a17ef31d8a47cdf054ee8f8b4a19dc102131db38c7b44f"
    },
    "src/core/intent_model.py::resolve_domain_for_path": {
      "key": "src/core/intent_model.py::resolve_domain_for_path",
      "name": "resolve_domain_for_path",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Given an absolute or relative path, determine which domain it belongs to.",
      "docstring": "Given an absolute or relative path, determine which domain it belongs to.\nPrefers deeper (more specific) paths over shorter ones.",
      "calls": [
        "items",
        "len",
        "resolve",
        "sorted"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-13T19:16:34.338251+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "7233e373175714977e544959c79a24ce93db7915c6a103e729b62d514d42216c"
    },
    "src/core/intent_model.py::get_domain_permissions": {
      "key": "src/core/intent_model.py::get_domain_permissions",
      "name": "get_domain_permissions",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Return a list of allowed domains that the given domain can import from.",
      "docstring": "Return a list of allowed domains that the given domain can import from.\n\nArgs:\n    domain (str): The domain to query.\n\nReturns:\n    List[str]: List of allowed domain names, or empty list if not defined.",
      "calls": [
        "get",
        "isinstance"
      ],
      "line_number": 77,
      "is_async": false,
      "parameters": [
        "self",
        "domain"
      ],
      "last_updated": "2025-08-13T19:16:34.339166+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "16a9b7ddeb463171579a3fbc9d32982a49bdb7faefbe080378a345cbbfda5698"
    },
    "src/core/intent_guard.py::IntentGuard": {
      "key": "src/core/intent_guard.py::IntentGuard",
      "name": "IntentGuard",
      "type": "ClassDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "intent_guarding",
      "intent": "Central enforcement engine for CORE's safety and governance policies.",
      "docstring": "Central enforcement engine for CORE's safety and governance policies.\nEnsures all proposed file changes comply with declared rules and classifications.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "append",
        "exists",
        "extend",
        "get",
        "glob",
        "info",
        "is_dir",
        "isinstance",
        "len",
        "list",
        "load_config",
        "loads",
        "read_text",
        "resolve",
        "sorted",
        "values"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.343696+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "3309152ca64bbda67c94f9a5af5a51607261c757cce7a1d4bed6225bf443bf69"
    },
    "src/core/intent_guard.py::__init__": {
      "key": "src/core/intent_guard.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize IntentGuard with repository path and load all policies.",
      "docstring": "Initialize IntentGuard with repository path and load all policies.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "info",
        "len",
        "resolve"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.349421+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "1237769acc55b0d16734a3cc7c8a35a433527896ea598b163d555399fc1577fc"
    },
    "src/core/intent_guard.py::_load_policies": {
      "key": "src/core/intent_guard.py::_load_policies",
      "name": "_load_policies",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "docstring": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "calls": [
        "extend",
        "glob",
        "is_dir",
        "isinstance",
        "load_config"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.350461+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "58ca81c87b60fa11ae873bbb67dd836b4bd82e1f065b14967d0a6b10c724ff1a"
    },
    "src/core/intent_guard.py::_load_source_manifest": {
      "key": "src/core/intent_guard.py::_load_source_manifest",
      "name": "_load_source_manifest",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load the list of all known source files from the knowledge graph.",
      "docstring": "Load the list of all known source files from the knowledge graph.",
      "calls": [
        "exists",
        "get",
        "list",
        "loads",
        "read_text",
        "sorted",
        "values"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.351782+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "192c2a51474b035387b5dd1d0b9b0c1ea56903c550b8ec5f2ca40f40b69679cb"
    },
    "src/core/intent_guard.py::check_transaction": {
      "key": "src/core/intent_guard.py::check_transaction",
      "name": "check_transaction",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Check if a proposed set of file changes complies with all active rules.",
      "docstring": "Check if a proposed set of file changes complies with all active rules.\nThis is the primary enforcement point for constitutional integrity.",
      "calls": [
        "append",
        "resolve"
      ],
      "line_number": 67,
      "is_async": false,
      "parameters": [
        "self",
        "proposed_paths"
      ],
      "last_updated": "2025-08-13T19:16:34.353136+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "92924a1f132945e81b93a5ca688d1a218e3da14b4441bdea14f3888550cc533d"
    },
    "src/core/self_correction_engine.py::attempt_correction": {
      "key": "src/core/self_correction_engine.py::attempt_correction",
      "name": "attempt_correction",
      "type": "FunctionDef",
      "file": "src/core/self_correction_engine.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "self_correction",
      "intent": "Attempts to fix a failed validation or test result by generating corrected code via an LLM prompt based on the provided failure context.",
      "docstring": "Attempts to fix a failed validation or test result by generating corrected code via an LLM prompt based on the provided failure context.",
      "calls": [
        "GeneratorClient",
        "add_pending_write",
        "dumps",
        "get",
        "items",
        "list",
        "make_request",
        "parse_write_blocks",
        "process",
        "strip",
        "validate_code"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "failure_context"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.356479+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "fc3bfe1e9f114f7f1bccde372d3b2693ca57d29af66cf5355194f411e0d42718"
    },
    "src/agents/plan_executor.py::PlanExecutionError": {
      "key": "src/agents/plan_executor.py::PlanExecutionError",
      "name": "PlanExecutionError",
      "type": "ClassDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Custom exception for failures during plan execution.",
      "docstring": "Custom exception for failures during plan execution.",
      "calls": [
        "__init__",
        "super"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.359880+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "3c61acd4cb84afb806dec357db8093d8aef20d4eb1c8c25ffc6463f6f880e4de"
    },
    "src/agents/plan_executor.py::__init__": {
      "key": "src/agents/plan_executor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the executor with necessary dependencies.",
      "docstring": "Initializes the executor with necessary dependencies.",
      "calls": [
        "CodeEditor",
        "SymbolLocator",
        "get_event_loop"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self",
        "file_handler",
        "git_service",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.379771+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "0b30bc730c4ba6a3a1b8b392d6c763435afbc3a0bf2a124d3c408c05148d2456"
    },
    "src/agents/plan_executor.py::PlanExecutor": {
      "key": "src/agents/plan_executor.py::PlanExecutor",
      "name": "PlanExecutor",
      "type": "ClassDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "A service that takes a list of ExecutionTasks and executes them sequentially.",
      "docstring": "A service that takes a list of ExecutionTasks and executes them sequentially.",
      "calls": [
        "CodeEditor",
        "FileExistsError",
        "FileNotFoundError",
        "PlanExecutionError",
        "SymbolLocator",
        "_execute_task",
        "_execute_task_with_timeout",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "enumerate",
        "exists",
        "get_event_loop",
        "info",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "read_text",
        "replace_symbol_in_code",
        "splitlines",
        "validate_code",
        "wait_for",
        "warning"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.368857+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "17735db12ab7b0a74cdffea83961886204476d970edac95c771a3ad3a5274554"
    },
    "src/agents/plan_executor.py::execute_plan": {
      "key": "src/agents/plan_executor.py::execute_plan",
      "name": "execute_plan",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the entire plan, one task at a time.",
      "docstring": "Executes the entire plan, one task at a time.",
      "calls": [
        "_execute_task_with_timeout",
        "enumerate",
        "info",
        "len"
      ],
      "line_number": 39,
      "is_async": true,
      "parameters": [
        "self",
        "plan"
      ],
      "last_updated": "2025-08-13T19:16:34.380768+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "8ab199f27dd1071d219d6c48bea8bd7a3d2fdf4eedef7cfc8b84368e2888ac41"
    },
    "src/agents/plan_executor.py::_execute_task_with_timeout": {
      "key": "src/agents/plan_executor.py::_execute_task_with_timeout",
      "name": "_execute_task_with_timeout",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Execute task with timeout protection.",
      "docstring": "Execute task with timeout protection.",
      "calls": [
        "PlanExecutionError",
        "_execute_task",
        "wait_for"
      ],
      "line_number": 45,
      "is_async": true,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-13T19:16:34.381697+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "2b19751daf33b16818e0df3ee50ab15cb04a6b011160ffe645b7763f6a2b17d1"
    },
    "src/agents/plan_executor.py::_execute_task": {
      "key": "src/agents/plan_executor.py::_execute_task",
      "name": "_execute_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Dispatcher that executes a single task from a plan based on its action type.",
      "docstring": "Dispatcher that executes a single task from a plan based on its action type.",
      "calls": [
        "warning"
      ],
      "line_number": 53,
      "is_async": true,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-13T19:16:34.382683+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "142e7b01a2be8c7c8b602cc730558908a88986ef92ded59e5898efb9d3f2d4ce"
    },
    "src/agents/plan_executor.py::_execute_add_tag": {
      "key": "src/agents/plan_executor.py::_execute_add_tag",
      "name": "_execute_add_tag",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the surgical 'add_capability_tag' action.",
      "docstring": "Executes the surgical 'add_capability_tag' action.",
      "calls": [
        "PlanExecutionError",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "read_text",
        "splitlines",
        "validate_code"
      ],
      "line_number": 65,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-13T19:16:34.385296+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "92d0f7ab18897042061d91682aa174be9b4838e02c9cd239fd3531296aac57a7"
    },
    "src/agents/plan_executor.py::_execute_create_file": {
      "key": "src/agents/plan_executor.py::_execute_create_file",
      "name": "_execute_create_file",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'create_file' action.",
      "docstring": "Executes the 'create_file' action.",
      "calls": [
        "FileExistsError",
        "PlanExecutionError",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "validate_code"
      ],
      "line_number": 94,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-13T19:16:34.387291+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "4bb5563cf1361275428d4d0b4fec8e2fb191b87359137ff4a4827a076b7515f6"
    },
    "src/agents/plan_executor.py::_execute_edit_function": {
      "key": "src/agents/plan_executor.py::_execute_edit_function",
      "name": "_execute_edit_function",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'edit_function' action using the CodeEditor.",
      "docstring": "Executes the 'edit_function' action using the CodeEditor.",
      "calls": [
        "FileNotFoundError",
        "PlanExecutionError",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "replace_symbol_in_code",
        "validate_code"
      ],
      "line_number": 114,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-13T19:16:34.389685+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "cd92f69e3aa453220e21b7be41d28f3af1dcd95af46dc15c7e67902679562f94"
    },
    "src/agents/utils.py::CodeEditor": {
      "key": "src/agents/utils.py::CodeEditor",
      "name": "CodeEditor",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Provides capabilities to surgically edit code files.",
      "docstring": "Provides capabilities to surgically edit code files.",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "hasattr",
        "isinstance",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip",
        "walk"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.393994+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "5eca4842cfee268823a13fb1d553a0c5931ee0c77194f4c37dbedfa00bfffccd"
    },
    "src/agents/utils.py::_get_symbol_start_end_lines": {
      "key": "src/agents/utils.py::_get_symbol_start_end_lines",
      "name": "_get_symbol_start_end_lines",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the 1-based start and end line numbers of a symbol.",
      "docstring": "Finds the 1-based start and end line numbers of a symbol.",
      "calls": [
        "hasattr",
        "isinstance",
        "walk"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "self",
        "tree",
        "symbol_name"
      ],
      "last_updated": "2025-08-13T19:16:34.397945+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/utils.py::CodeEditor",
      "structural_hash": "e1f209cb8a4ecc20429ae00376a97016fce78fac28e7722e1c75c53a474bc3d2"
    },
    "src/agents/utils.py::replace_symbol_in_code": {
      "key": "src/agents/utils.py::replace_symbol_in_code",
      "name": "replace_symbol_in_code",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Error: Could not connect to LLM endpoint. Details: HTTPSConnectionPool(host='api.deepseek.com', port=443): Read timed out. (read timeout=180)",
      "docstring": "Error: Could not connect to LLM endpoint. Details: HTTPSConnectionPool(host='api.deepseek.com', port=443): Read timed out. (read timeout=180)",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self",
        "original_code",
        "symbol_name",
        "new_code_str"
      ],
      "last_updated": "2025-08-13T19:16:34.399987+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/utils.py::CodeEditor",
      "structural_hash": "62673f9c95f7faa06fc5b1de53b594c695ca9e21de611f363425d6488600af24"
    },
    "src/agents/utils.py::SymbolLocator": {
      "key": "src/agents/utils.py::SymbolLocator",
      "name": "SymbolLocator",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Dedicated class for finding symbols in code files.",
      "docstring": "Dedicated class for finding symbols in code files.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 69,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.401735+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "b81d8ed35b74c4eae80ee7232fe9fa14e7736c56390be056b5869d5f7a3f9a2b"
    },
    "src/agents/utils.py::find_symbol_line": {
      "key": "src/agents/utils.py::find_symbol_line",
      "name": "find_symbol_line",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the line number of a function, async function, or class definition matching `symbol_name` in the file at `file_path`, or None if not found.",
      "docstring": "Finds the line number of a function, async function, or class definition matching `symbol_name` in the file at `file_path`, or None if not found.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 73,
      "is_async": false,
      "parameters": [
        "file_path",
        "symbol_name"
      ],
      "last_updated": "2025-08-13T19:16:34.404618+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/utils.py::SymbolLocator",
      "structural_hash": "7d43a869d06a5557decfe938b5b3033b6d5041653d1ed83dadd1380f0c68d1a1"
    },
    "src/agents/utils.py::PlanExecutionContext": {
      "key": "src/agents/utils.py::PlanExecutionContext",
      "name": "PlanExecutionContext",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Context manager for safe plan execution with rollback.",
      "docstring": "Context manager for safe plan execution with rollback.",
      "calls": [
        "error",
        "get_current_commit",
        "is_git_repo",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 90,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.406227+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "746974f99275530082a816c35d716e58bf90d20343d6eb6a37b0d707a44328a3"
    },
    "src/agents/utils.py::__init__": {
      "key": "src/agents/utils.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the context with a reference to the calling agent.",
      "docstring": "Initializes the context with a reference to the calling agent.",
      "calls": [],
      "line_number": 93,
      "is_async": false,
      "parameters": [
        "self",
        "planner_agent"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.409012+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "fafcb1cb094bb533524f3238777203a6aeccb38b9ef9eb81c43ed78113a22eaa"
    },
    "src/agents/utils.py::__enter__": {
      "key": "src/agents/utils.py::__enter__",
      "name": "__enter__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Sets up the execution context, capturing the initial git commit hash.",
      "docstring": "Sets up the execution context, capturing the initial git commit hash.",
      "calls": [
        "get_current_commit",
        "is_git_repo",
        "warning"
      ],
      "line_number": 98,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.409846+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "7deddad923581a42e2ee1da5933c78b9292a2a08ebaa37d8da2a0964a658e9d3"
    },
    "src/agents/utils.py::__exit__": {
      "key": "src/agents/utils.py::__exit__",
      "name": "__exit__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Cleans up and handles rollback on failure.",
      "docstring": "Cleans up and handles rollback on failure.",
      "calls": [
        "error",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 107,
      "is_async": false,
      "parameters": [
        "self",
        "exc_type",
        "exc_val",
        "exc_tb"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.410812+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "4590d053495df9da291da19def9216b256f4a762897b189706c436b3859fcd9c"
    },
    "src/agents/planner_agent.py::PlannerAgent": {
      "key": "src/agents/planner_agent.py::PlannerAgent",
      "name": "PlannerAgent",
      "type": "ClassDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "code_generation",
      "intent": "Decomposes goals into plans, generates code for each step, and then",
      "docstring": "Decomposes goals into plans, generates code for each step, and then\ndelegates execution to the PlanExecutor.",
      "calls": [
        "ExecutionTask",
        "JSONDecoder",
        "PlanExecutionContext",
        "PlanExecutionError",
        "PlanExecutor",
        "PlannerConfig",
        "PromptPipeline",
        "ValueError",
        "_extract_json_from_response",
        "_generate_code_for_task",
        "_log_plan_summary",
        "_setup_logging_context",
        "_validate_task_params",
        "all",
        "create_execution_plan",
        "dedent",
        "enumerate",
        "error",
        "execute_plan",
        "find",
        "format",
        "get",
        "getattr",
        "group",
        "hasattr",
        "info",
        "isinstance",
        "isoformat",
        "len",
        "loads",
        "make_request",
        "now",
        "process",
        "range",
        "raw_decode",
        "search",
        "set",
        "str",
        "strftime",
        "strip",
        "warning"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.422792+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "bbeea25d8250680f3217bbfc49fd03216fa242781ce80fc5dbe15862f5f74956"
    },
    "src/agents/planner_agent.py::__init__": {
      "key": "src/agents/planner_agent.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Initializes the PlannerAgent with service dependencies.",
      "docstring": "Initializes the PlannerAgent with service dependencies.",
      "calls": [
        "PlanExecutor",
        "PlannerConfig",
        "PromptPipeline"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "self",
        "orchestrator_client",
        "generator_client",
        "file_handler",
        "git_service",
        "intent_guard",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.435196+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "8c7aee3e3c7af60ad55d52b288f63acaf72660ad41b5e56eb00cfca823427593"
    },
    "src/agents/planner_agent.py::_setup_logging_context": {
      "key": "src/agents/planner_agent.py::_setup_logging_context",
      "name": "_setup_logging_context",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Setup structured logging context for better observability.",
      "docstring": "Setup structured logging context for better observability.",
      "calls": [
        "isoformat",
        "now",
        "set"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "self",
        "goal",
        "plan_id"
      ],
      "last_updated": "2025-08-13T19:16:34.435957+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "59a96cbfb2dca8f5653d7a9a4255ea9f20aae428732c8e7605bda8e6fb129170"
    },
    "src/agents/planner_agent.py::_extract_json_from_response": {
      "key": "src/agents/planner_agent.py::_extract_json_from_response",
      "name": "_extract_json_from_response",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Extracts a JSON object or array from a raw text response.",
      "docstring": "Extracts a JSON object or array from a raw text response.",
      "calls": [
        "JSONDecoder",
        "error",
        "find",
        "group",
        "loads",
        "raw_decode",
        "search",
        "warning"
      ],
      "line_number": 58,
      "is_async": false,
      "parameters": [
        "self",
        "text"
      ],
      "last_updated": "2025-08-13T19:16:34.437479+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "49d1b1ca05800c37b3d8f60c468003df123d59ba697f3a8b88d3bb010d5eb8ea"
    },
    "src/agents/planner_agent.py::_log_plan_summary": {
      "key": "src/agents/planner_agent.py::_log_plan_summary",
      "name": "_log_plan_summary",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Log a readable summary of the execution plan.",
      "docstring": "Log a readable summary of the execution plan.",
      "calls": [
        "enumerate",
        "info",
        "len"
      ],
      "line_number": 81,
      "is_async": false,
      "parameters": [
        "self",
        "plan"
      ],
      "last_updated": "2025-08-13T19:16:34.438647+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "8dc5acc38cbf9becc59b88c68b3d4ae8eb6e605e3cdde45f0f4eb329070f3000"
    },
    "src/agents/planner_agent.py::_validate_task_params": {
      "key": "src/agents/planner_agent.py::_validate_task_params",
      "name": "_validate_task_params",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Validates that a task has all the logically required parameters for its action.",
      "docstring": "Validates that a task has all the logically required parameters for its action.",
      "calls": [
        "PlanExecutionError",
        "all",
        "getattr"
      ],
      "line_number": 87,
      "is_async": false,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-13T19:16:34.439948+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "afd1d06983857e3e9e9d8a54f8a8e9f305349b1146be66dbaa53699822ae667a"
    },
    "src/agents/planner_agent.py::create_execution_plan": {
      "key": "src/agents/planner_agent.py::create_execution_plan",
      "name": "create_execution_plan",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "llm_orchestration",
      "intent": "Creates a high-level, code-agnostic execution plan.",
      "docstring": "Creates a high-level, code-agnostic execution plan.",
      "calls": [
        "ExecutionTask",
        "PlanExecutionError",
        "ValueError",
        "_extract_json_from_response",
        "_log_plan_summary",
        "_setup_logging_context",
        "_validate_task_params",
        "dedent",
        "format",
        "info",
        "isinstance",
        "make_request",
        "now",
        "process",
        "range",
        "strftime",
        "strip",
        "warning"
      ],
      "line_number": 99,
      "is_async": false,
      "parameters": [
        "self",
        "high_level_goal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.442213+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "087b23b8b6ac05904189257a663f47b74ca83039a495075b8661f63761795087"
    },
    "src/agents/planner_agent.py::_generate_code_for_task": {
      "key": "src/agents/planner_agent.py::_generate_code_for_task",
      "name": "_generate_code_for_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Generates the code content for a single task.",
      "docstring": "Generates the code content for a single task.",
      "calls": [
        "dedent",
        "format",
        "info",
        "make_request",
        "process",
        "strip"
      ],
      "line_number": 142,
      "is_async": true,
      "parameters": [
        "self",
        "task",
        "goal"
      ],
      "last_updated": "2025-08-13T19:16:34.443722+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "7e2dc7d2d4313497dcfca0851606bf2057e7f0ce5db006927821a2842aa0f5a6"
    },
    "src/agents/planner_agent.py::execute_plan": {
      "key": "src/agents/planner_agent.py::execute_plan",
      "name": "execute_plan",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Creates a plan, generates code for it, and orchestrates its execution.",
      "docstring": "Creates a plan, generates code for it, and orchestrates its execution.",
      "calls": [
        "PlanExecutionContext",
        "_generate_code_for_task",
        "create_execution_plan",
        "error",
        "execute_plan",
        "get",
        "hasattr",
        "info",
        "str"
      ],
      "line_number": 164,
      "is_async": true,
      "parameters": [
        "self",
        "high_level_goal"
      ],
      "last_updated": "2025-08-13T19:16:34.446226+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "9757c408d9a0b991554d8dc59bf8277b71a1c30841339fb5c622459adca91ce3"
    },
    "src/agents/models.py::TaskStatus": {
      "key": "src/agents/models.py::TaskStatus",
      "name": "TaskStatus",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Enumeration of possible states for an ExecutionTask.",
      "docstring": "Enumeration of possible states for an ExecutionTask.",
      "calls": [],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-13T19:16:34.447769+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition",
      "structural_hash": "d8ad3bccb3971670ad07d88d486e0340daa4f998de5ee01d303682e6a57c29be"
    },
    "src/agents/models.py::ExecutionProgress": {
      "key": "src/agents/models.py::ExecutionProgress",
      "name": "ExecutionProgress",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents the progress of a plan's execution.",
      "docstring": "Represents the progress of a plan's execution.",
      "calls": [],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-13T19:16:34.448689+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "a44fc776b69d95d57f15bdc224984da00807cb6bdfe0849ad23d40964fc6d9a8"
    },
    "src/agents/models.py::completion_percentage": {
      "key": "src/agents/models.py::completion_percentage",
      "name": "completion_percentage",
      "type": "FunctionDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates the completion percentage of the plan as a float, returning 0 if there are no tasks.",
      "docstring": "Calculates the completion percentage of the plan as a float, returning 0 if there are no tasks.",
      "calls": [],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.450028+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/models.py::ExecutionProgress",
      "structural_hash": "d101ab8c655802b187262c9f5903e00ac183fdeb8301e2ae136d4f279d4b027a"
    },
    "src/agents/models.py::PlannerConfig": {
      "key": "src/agents/models.py::PlannerConfig",
      "name": "PlannerConfig",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Configuration settings for the PlannerAgent's behavior.",
      "docstring": "Configuration settings for the PlannerAgent's behavior.",
      "calls": [],
      "line_number": 33,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-13T19:16:34.450688+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "1b2dddc2040c6b9e91ef612bf7c9b521900fc8b84be4017844e987d806fad45e"
    },
    "src/agents/models.py::TaskParams": {
      "key": "src/agents/models.py::TaskParams",
      "name": "TaskParams",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for the parameters of a single task in an execution plan.",
      "docstring": "Data model for the parameters of a single task in an execution plan.",
      "calls": [],
      "line_number": 42,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-13T19:16:34.451350+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "1c8868970c18e1b5772d7685996e7441deb79454a884f2769ac55a9f19f35f98"
    },
    "src/agents/models.py::ExecutionTask": {
      "key": "src/agents/models.py::ExecutionTask",
      "name": "ExecutionTask",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for a single, executable step in a plan.",
      "docstring": "Data model for a single, executable step in a plan.",
      "calls": [],
      "line_number": 49,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-13T19:16:34.451934+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "b0c8bd81c4be39c825ade5c681d80f88680c30b65c0dd7b7a03271ac2788b825"
    },
    "src/shared/path_utils.py::get_repo_root": {
      "key": "src/shared/path_utils.py::get_repo_root",
      "name": "get_repo_root",
      "type": "FunctionDef",
      "file": "src/shared/path_utils.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "docstring": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "calls": [
        "Path",
        "RuntimeError",
        "cwd",
        "exists",
        "resolve"
      ],
      "line_number": 6,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "last_updated": "2025-08-13T19:16:34.453155+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "edc71d0c31594afdd9eea55c11cfb962e028462f15c08972f1a1d9cf1796ed79"
    },
    "src/shared/config_loader.py::load_config": {
      "key": "src/shared/config_loader.py::load_config",
      "name": "load_config",
      "type": "FunctionDef",
      "file": "src/shared/config_loader.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Loads a JSON or YAML file into a dictionary, handling missing files, invalid formats, and parsing errors by returning an empty dict.",
      "docstring": "Loads a JSON or YAML file into a dictionary, handling missing files, invalid formats, and parsing errors by returning an empty dict.",
      "calls": [
        "Path",
        "error",
        "exists",
        "isinstance",
        "load",
        "lower",
        "open",
        "safe_load",
        "warning"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "file_path",
        "file_type"
      ],
      "last_updated": "2025-08-13T19:16:34.456030+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7124b13af5cffa8a06961f6fb04e4cad8794f6e029db463269b09ae500e68353"
    },
    "src/shared/config.py::Settings": {
      "key": "src/shared/config.py::Settings",
      "name": "Settings",
      "type": "ClassDef",
      "file": "src/shared/config.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "A Pydantic settings model that loads configuration from the environment.",
      "docstring": "A Pydantic settings model that loads configuration from the environment.\nIt provides a typed, validated access to all system settings.",
      "calls": [
        "Path",
        "home"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.457629+00:00",
      "is_class": true,
      "base_classes": [
        "BaseSettings"
      ],
      "structural_hash": "5568d379b08168ca41ca89c70fa966ca1d00e376ec055d5dc12711302dc01820"
    },
    "src/shared/config.py::Config": {
      "key": "src/shared/config.py::Config",
      "name": "Config",
      "type": "ClassDef",
      "file": "src/shared/config.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Defines Pydantic's behavior for the Settings model.",
      "docstring": "Defines Pydantic's behavior for the Settings model.",
      "calls": [],
      "line_number": 37,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.458166+00:00",
      "is_class": true,
      "base_classes": [
        "BaseSettings",
        "BaseSettings",
        "BaseSettings"
      ],
      "parent_class_key": "src/shared/config.py::Settings",
      "structural_hash": "4edb43f88e586a01a9525a5743a19d0589ccef2f5d257ae1e9a4bf75af91e8ba"
    },
    "src/shared/logger.py::getLogger": {
      "key": "src/shared/logger.py::getLogger",
      "name": "getLogger",
      "type": "FunctionDef",
      "file": "src/shared/logger.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "system_logging",
      "intent": "Returns a pre-configured logger instance with the given name.",
      "docstring": "Returns a pre-configured logger instance with the given name.",
      "calls": [
        "getLogger"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "name"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.459283+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "5c6f3d9067a28ed8b1274e2bc25fac32142f9ebce99fa57aea4a8ce44bf2edd9"
    },
    "src/system/guard/capability_discovery.py::collect_code_capabilities": {
      "key": "src/system/guard/capability_discovery.py::collect_code_capabilities",
      "name": "collect_code_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/capability_discovery.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Unified discovery entrypoint that tries the live KnowledgeGraphBuilder first,",
      "docstring": "Unified discovery entrypoint that tries the live KnowledgeGraphBuilder first,\nthen falls back to a direct source scan.",
      "calls": [
        "RuntimeError",
        "collect_from_kgb",
        "collect_from_source_scan"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs",
        "require_kgb"
      ],
      "last_updated": "2025-08-13T19:16:34.460863+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e48f7c87ea6b26ad0a7235a1de21d5d681fb9d602b84bc197e8e488ee74f9d56"
    },
    "src/system/guard/capability_discovery.py::load_manifest_capabilities": {
      "key": "src/system/guard/capability_discovery.py::load_manifest_capabilities",
      "name": "load_manifest_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/capability_discovery.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "docstring": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "calls": [
        "load_manifest_capabilities"
      ],
      "line_number": 34,
      "is_async": false,
      "parameters": [
        "root",
        "explicit_path"
      ],
      "last_updated": "2025-08-13T19:16:34.461623+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7424757e7242faf2787f618be65139b5771145e1148c99ca1bd7844759895507"
    },
    "src/system/guard/drift_detector.py::detect_capability_drift": {
      "key": "src/system/guard/drift_detector.py::detect_capability_drift",
      "name": "detect_capability_drift",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Computes missing, undeclared, and mismatched capabilities between manifest and code.",
      "docstring": "Computes missing, undeclared, and mismatched capabilities between manifest and code.",
      "calls": [
        "DriftReport",
        "append",
        "keys",
        "list",
        "set",
        "sorted"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "manifest_caps",
        "code_caps"
      ],
      "last_updated": "2025-08-13T19:16:34.463959+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "fb9cc3adce19b9962fed21968390bc8fd63447ff630b4742636e98c8fb796d14"
    },
    "src/system/guard/drift_detector.py::write_report": {
      "key": "src/system/guard/drift_detector.py::write_report",
      "name": "write_report",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Persists the drift report to disk for evidence and CI.",
      "docstring": "Persists the drift report to disk for evidence and CI.",
      "calls": [
        "dumps",
        "mkdir",
        "to_dict",
        "write_text"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [
        "report_path",
        "report"
      ],
      "last_updated": "2025-08-13T19:16:34.464916+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f470e15b680e9bda6d15592a0bcb69254df8aef37a8400043fda5abc2a84ec49"
    },
    "src/system/guard/models.py::CapabilityMeta": {
      "key": "src/system/guard/models.py::CapabilityMeta",
      "name": "CapabilityMeta",
      "type": "ClassDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "A minimal, shared data container for capability metadata.",
      "docstring": "A minimal, shared data container for capability metadata.",
      "calls": [
        "dataclass"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-13T19:16:34.465976+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "16c4f81415492ed8331c9a206c1f55a0e7ac37b46f777a803d4ae45901b86124"
    },
    "src/system/guard/models.py::DriftReport": {
      "key": "src/system/guard/models.py::DriftReport",
      "name": "DriftReport",
      "type": "ClassDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Structured result for capability drift suitable for JSON emission and CI gating.",
      "docstring": "Structured result for capability drift suitable for JSON emission and CI gating.",
      "calls": [
        "sorted"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-13T19:16:34.466946+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "7921fd074f563aace637ec680097dd26facb5aa61c3fd8ca7ce69782c1a818a8"
    },
    "src/system/guard/models.py::to_dict": {
      "key": "src/system/guard/models.py::to_dict",
      "name": "to_dict",
      "type": "FunctionDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Converts the drift report into a stable JSON-serializable dict.",
      "docstring": "Converts the drift report into a stable JSON-serializable dict.",
      "calls": [
        "sorted"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.468299+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/guard/models.py::DriftReport",
      "structural_hash": "485033d9fffb5828ea2f692bf9505bb59c7f33d9d7cec1bd11506141277667e2"
    },
    "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor": {
      "key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "name": "ConstitutionalAuditor",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "alignment_checking",
      "intent": "Orchestrates the discovery and execution of constitutional checks.",
      "docstring": "Orchestrates the discovery and execution of constitutional checks.",
      "calls": [
        "AuditFinding",
        "AuditorContext",
        "Console",
        "IntentModel",
        "Panel",
        "Path",
        "_LoggingBridge",
        "_discover_checks",
        "_report_final_status",
        "aggregate_manifests",
        "any",
        "append",
        "check_fn",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "exists",
        "extend",
        "get",
        "get_repo_root",
        "getmembers",
        "glob",
        "import_module",
        "info",
        "len",
        "list",
        "load_config",
        "load_dotenv",
        "print",
        "sort",
        "split",
        "startswith",
        "strip",
        "sum",
        "values",
        "warning"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.478960+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "276d65072a44d39e837b067caadf20adae2e3751ceb8a2a638a93832a2afbee3"
    },
    "src/system/governance/constitutional_auditor.py::__init__": {
      "key": "src/system/governance/constitutional_auditor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize context with repository paths and configurations.",
      "docstring": "Initialize context with repository paths and configurations.",
      "calls": [
        "IntentModel",
        "aggregate_manifests",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "line_number": 60,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.493881+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::AuditorContext",
      "structural_hash": "b453ef345b77a84fe4ada63f4ab873aef53f6f582679ed75aa18acc8a11871d4"
    },
    "src/system/governance/constitutional_auditor.py::_discover_checks": {
      "key": "src/system/governance/constitutional_auditor.py::_discover_checks",
      "name": "_discover_checks",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Discover check methods from modules in the 'checks' directory.",
      "docstring": "Discover check methods from modules in the 'checks' directory.",
      "calls": [
        "Path",
        "append",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "get",
        "getmembers",
        "glob",
        "import_module",
        "len",
        "sort",
        "split",
        "startswith",
        "warning"
      ],
      "line_number": 72,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.496777+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "e0c78bae4bd9ebac3e0af66fb766ac489691f007c6a9ca33313b5c69189f6fab"
    },
    "src/system/governance/constitutional_auditor.py::run_full_audit": {
      "key": "src/system/governance/constitutional_auditor.py::run_full_audit",
      "name": "run_full_audit",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Run all discovered validation checks and return overall status.",
      "docstring": "Run all discovered validation checks and return overall status.",
      "calls": [
        "AuditFinding",
        "Panel",
        "_report_final_status",
        "any",
        "append",
        "check_fn",
        "error",
        "extend",
        "info",
        "print",
        "split",
        "warning"
      ],
      "line_number": 108,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.499353+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "0e5a342921730b79160f6b87b9173dfa7dbf260c69799dd33923b277d38d661f"
    },
    "src/system/governance/constitutional_auditor.py::_report_final_status": {
      "key": "src/system/governance/constitutional_auditor.py::_report_final_status",
      "name": "_report_final_status",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Print final audit summary to the console.",
      "docstring": "Print final audit summary to the console.",
      "calls": [
        "Panel",
        "print",
        "sum"
      ],
      "line_number": 139,
      "is_async": false,
      "parameters": [
        "self",
        "passed"
      ],
      "last_updated": "2025-08-13T19:16:34.500977+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "24f3456c07f2542af03ec4f96aab424a76aa133c1bfbab1b7b85fdcae32cd7ea"
    },
    "src/system/governance/constitutional_auditor.py::_LoggingBridge": {
      "key": "src/system/governance/constitutional_auditor.py::_LoggingBridge",
      "name": "_LoggingBridge",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Redirects console output to the logger.",
      "docstring": "Redirects console output to the logger.",
      "calls": [
        "info",
        "strip"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.487574+00:00",
      "is_class": true,
      "base_classes": [
        "StringIO"
      ],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "accbf7162a4d8000d9e089db10a6b222a78133e2eb9926efcb837c89fe869927"
    },
    "src/system/governance/constitutional_auditor.py::write": {
      "key": "src/system/governance/constitutional_auditor.py::write",
      "name": "write",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Redirects writes to the logger info stream.",
      "docstring": "Redirects writes to the logger info stream.",
      "calls": [
        "info",
        "strip"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "self",
        "s"
      ],
      "last_updated": "2025-08-13T19:16:34.488762+00:00",
      "is_class": false,
      "base_classes": [
        "StringIO",
        "StringIO",
        "StringIO"
      ],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::_LoggingBridge",
      "structural_hash": "32a110e0afaf2a1e54639b543cfc4509a1c00712e7244004cba4900925c2f79c"
    },
    "src/system/governance/constitutional_auditor.py::AuditorContext": {
      "key": "src/system/governance/constitutional_auditor.py::AuditorContext",
      "name": "AuditorContext",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Shared state container for audit checks.",
      "docstring": "Shared state container for audit checks.",
      "calls": [
        "IntentModel",
        "aggregate_manifests",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "line_number": 58,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.491701+00:00",
      "is_class": true,
      "base_classes": [],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "cdfb4eb71dd5acccbbd35233cc44232c7cc839cda3cd11df6058ea4dba5b1dd2"
    },
    "src/system/governance/constitutional_auditor.py::main": {
      "key": "src/system/governance/constitutional_auditor.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "CLI entry point for the Constitutional Auditor.",
      "docstring": "CLI entry point for the Constitutional Auditor.",
      "calls": [
        "ConstitutionalAuditor",
        "error",
        "exit",
        "load_dotenv",
        "run_full_audit"
      ],
      "line_number": 153,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-13T19:16:34.502279+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f6fdbaa6bfe1e6124c035255bac2283c42602332b190a0302133de3a8620c2b6"
    },
    "src/system/governance/models.py::AuditSeverity": {
      "key": "src/system/governance/models.py::AuditSeverity",
      "name": "AuditSeverity",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Severity levels for audit findings.",
      "docstring": "Severity levels for audit findings.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-13T19:16:34.503232+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition",
      "structural_hash": "28f79c27c1ebb4978fd62cdbbe31ddb7e431f470ef3a59a801b0f7b146fdab17"
    },
    "src/system/governance/models.py::AuditFinding": {
      "key": "src/system/governance/models.py::AuditFinding",
      "name": "AuditFinding",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents a single audit finding.",
      "docstring": "Represents a single audit finding.",
      "calls": [],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-13T19:16:34.503822+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "a77333291b4a5559fadebab11ad48cd08bc5847c3142d31af4b41d0a2b4ef394"
    },
    "src/system/admin/fixer.py::register": {
      "key": "src/system/admin/fixer.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/fixer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register fixer commands under the admin CLI.",
      "docstring": "Intent: Register fixer commands under the admin CLI.",
      "calls": [
        "Typer",
        "add_typer",
        "command"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.504782+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "d0ae582702a2b2c6909b50733bb0512725c7da502b0c14afe4d908c46d4e2ef4"
    },
    "src/system/admin/scaffolder.py::new_project": {
      "key": "src/system/admin/scaffolder.py::new_project",
      "name": "new_project",
      "type": "FunctionDef",
      "file": "src/system/admin/scaffolder.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Scaffolds a new, constitutionally-governed \"Mind/Body\" application.",
      "docstring": "Scaffolds a new, constitutionally-governed \"Mind/Body\" application.",
      "calls": [
        "Argument",
        "Exit",
        "Option",
        "copy",
        "dump",
        "echo",
        "error",
        "exists",
        "format",
        "glob",
        "info",
        "is_dir",
        "mkdir",
        "read_text",
        "replace",
        "safe_load",
        "secho",
        "write_text"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "name",
        "profile",
        "dry_run"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.510677+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "c37234c2860f6ea30bb18af6bcc43ac7a4d2f14eba04731b60f764046b895e13"
    },
    "src/system/admin/scaffolder.py::register": {
      "key": "src/system/admin/scaffolder.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/scaffolder.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register scaffolding commands under the admin CLI.",
      "docstring": "Intent: Register scaffolding commands under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 108,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.511868+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "358ca9667b776207e550b217e6f9933316ae2f21c94becefe3425c018fd562b8"
    },
    "src/system/admin/migrator.py::register": {
      "key": "src/system/admin/migrator.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/migrator.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register migration commands (manifest-migrator) under the admin CLI.",
      "docstring": "Register migration commands (manifest-migrator) under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.512751+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "b5aa9163afdf378f45afb8a26ceecb71fe3dc7e8949a7907aee98b0c2eb40a7f"
    },
    "src/system/admin/utils.py::should_fail": {
      "key": "src/system/admin/utils.py::should_fail",
      "name": "should_fail",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "docstring": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "calls": [
        "bool",
        "get"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "report",
        "fail_on"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.514895+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "000eebabe9fa6b9446176bf177433632bbc06c377c98043a29cde9737cf551fb"
    },
    "src/system/admin/utils.py::load_yaml_file": {
      "key": "src/system/admin/utils.py::load_yaml_file",
      "name": "load_yaml_file",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "docstring": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "calls": [
        "read_text",
        "safe_load"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "path"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.515707+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "0ab7061acf65b528fe98f1fa2c23c790dd47609f32b6af7ce4f9161f9fd636f1"
    },
    "src/system/admin/utils.py::save_yaml_file": {
      "key": "src/system/admin/utils.py::save_yaml_file",
      "name": "save_yaml_file",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Persist YAML with stable ordering disabled to preserve human readability.",
      "docstring": "Intent: Persist YAML with stable ordering disabled to preserve human readability.",
      "calls": [
        "safe_dump",
        "write_text"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "path",
        "data"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.516437+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "ccaf07602c00f1121e12286d587578113fff47ffa979777f3f56fc72b7b50d43"
    },
    "src/system/admin/utils.py::generate_approval_token": {
      "key": "src/system/admin/utils.py::generate_approval_token",
      "name": "generate_approval_token",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Produce a deterministic content-bound token for cryptographic proposal approvals.",
      "docstring": "Intent: Produce a deterministic content-bound token for cryptographic proposal approvals.",
      "calls": [
        "Hash",
        "SHA256",
        "encode",
        "finalize",
        "hex",
        "update"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [
        "proposal_content"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.517291+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "b812d8f4ee822852784cddc63eec917b8ac79f1d39182e5fe39be263cd0cc228"
    },
    "src/system/admin/utils.py::load_private_key": {
      "key": "src/system/admin/utils.py::load_private_key",
      "name": "load_private_key",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "docstring": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "calls": [
        "SystemExit",
        "error",
        "exists",
        "load_pem_private_key",
        "read_bytes"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.518159+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "b6d60526dff1c12451a8afba8b9316796326d6a4c5f427391793de7a113ae500"
    },
    "src/system/admin/utils.py::archive_rollback_plan": {
      "key": "src/system/admin/utils.py::archive_rollback_plan",
      "name": "archive_rollback_plan",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Persist a rollback plan snapshot for approved proposals under .intent/constitution/rollbacks/.",
      "docstring": "Intent: Persist a rollback plan snapshot for approved proposals under .intent/constitution/rollbacks/.",
      "calls": [
        "dumps",
        "get",
        "info",
        "mkdir",
        "strftime",
        "utcnow",
        "write_text"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [
        "proposal_name",
        "proposal"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.519684+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "3fee477cc6e1a83e51d223a8844378614d3e379c846ae8b2b008ac59063dd680"
    },
    "src/system/admin/reviewer.py::_is_ignored": {
      "key": "src/system/admin/reviewer.py::_is_ignored",
      "name": "_is_ignored",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Checks if a given file path should be ignored based on IGNORE_PATTERNS.",
      "docstring": "Checks if a given file path should be ignored based on IGNORE_PATTERNS.",
      "calls": [
        "any"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "path_str"
      ],
      "last_updated": "2025-08-13T19:16:34.522285+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b0dcdbc5bcd3fad88dd29308c2d078febb3f76f3ca1abda9f84b84759ba7568d"
    },
    "src/system/admin/reviewer.py::_get_bundle_content": {
      "key": "src/system/admin/reviewer.py::_get_bundle_content",
      "name": "_get_bundle_content",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Gathers and bundles the content of all constitutional files.",
      "docstring": "Gathers and bundles the content of all constitutional files.",
      "calls": [
        "Exit",
        "_is_ignored",
        "append",
        "error",
        "exists",
        "extend",
        "find_paths_in_meta",
        "info",
        "is_file",
        "isinstance",
        "join",
        "len",
        "list",
        "read_text",
        "safe_load",
        "set",
        "sorted",
        "values"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.524872+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "47a9e252ee6d00c1d63bb7b8ea1322c3335c77c9b3e9c9ddc0f381c0210bfecd"
    },
    "src/system/admin/reviewer.py::find_paths_in_meta": {
      "key": "src/system/admin/reviewer.py::find_paths_in_meta",
      "name": "find_paths_in_meta",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Recursively extracts all strings containing '/' from nested dictionaries, lists, or strings in `data`.",
      "docstring": "Recursively extracts all strings containing '/' from nested dictionaries, lists, or strings in `data`.",
      "calls": [
        "append",
        "extend",
        "find_paths_in_meta",
        "isinstance",
        "values"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.525984+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "255da73b20e290e0b58012f6bfab50667316e3e22fa34c15e51acf93d0752e60"
    },
    "src/system/admin/reviewer.py::export_constitution": {
      "key": "src/system/admin/reviewer.py::export_constitution",
      "name": "export_constitution",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Packages the full .intent/ directory into a single bundle for external analysis.",
      "docstring": "Packages the full .intent/ directory into a single bundle for external analysis.\nThis command reads the meta.yaml file to discover all constitutional files\nand concatenates them into a single, LLM-friendly text file.",
      "calls": [
        "Option",
        "Path",
        "_get_bundle_content",
        "info",
        "mkdir",
        "write_text"
      ],
      "line_number": 67,
      "is_async": false,
      "parameters": [
        "output"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.527204+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "686b1c150edec5ed4602dd73ddb2fec5bc73ac70ac18d987f29b95650830b3a1"
    },
    "src/system/admin/reviewer.py::peer_review": {
      "key": "src/system/admin/reviewer.py::peer_review",
      "name": "peer_review",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Orchestrates sending the constitutional bundle to an external LLM for critique.",
      "docstring": "Orchestrates sending the constitutional bundle to an external LLM for critique.",
      "calls": [
        "Exit",
        "Option",
        "OrchestratorClient",
        "Path",
        "_get_bundle_content",
        "echo",
        "error",
        "exists",
        "info",
        "make_request",
        "mkdir",
        "read_text",
        "secho",
        "write_text"
      ],
      "line_number": 86,
      "is_async": false,
      "parameters": [
        "output",
        "no_send"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.529793+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "8ea05ee4ce32f7e48bc94f1c17c97db1054d2bac7b6065ec14242ccf28bfe6af"
    },
    "src/system/admin/reviewer.py::register": {
      "key": "src/system/admin/reviewer.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Registers the 'review' command group and its subcommands.",
      "docstring": "Registers the 'review' command group and its subcommands.",
      "calls": [
        "Typer",
        "add_typer",
        "command"
      ],
      "line_number": 146,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.530892+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "50564ec3cb9525beb4d7a7142754651f6778e34d74f9c147b4d99fb3d7f73464"
    },
    "src/system/admin/byor.py::initialize_repository": {
      "key": "src/system/admin/byor.py::initialize_repository",
      "name": "initialize_repository",
      "type": "FunctionDef",
      "file": "src/system/admin/byor.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "docstring": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "calls": [
        "Argument",
        "Exit",
        "KnowledgeGraphBuilder",
        "Option",
        "build",
        "dump",
        "echo",
        "error",
        "get",
        "info",
        "isinstance",
        "items",
        "len",
        "list",
        "mkdir",
        "read_text",
        "secho",
        "set",
        "sorted",
        "values",
        "write_text"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "path",
        "dry_run"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.536571+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "0a9689eaf0e4bac87de825084b2ff0395207e7f11add07b2dff90079d729bbd9"
    },
    "src/system/admin/byor.py::register": {
      "key": "src/system/admin/byor.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/byor.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "docstring": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 120,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.537729+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "9b62691ef90f3390c625b2239aa9e80250dc156e4deba0ed1740245705a1dbf6"
    },
    "src/system/admin/proposals.py::register": {
      "key": "src/system/admin/proposals.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register proposal lifecycle commands under the admin CLI.",
      "docstring": "Intent: Register proposal lifecycle commands under the admin CLI.",
      "calls": [
        "Argument",
        "ConstitutionalAuditor",
        "Exit",
        "Path",
        "TemporaryDirectory",
        "Typer",
        "add_typer",
        "any",
        "append",
        "archive_rollback_plan",
        "b64decode",
        "b64encode",
        "command",
        "copy",
        "decode",
        "encode",
        "endswith",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "glob",
        "info",
        "isinstance",
        "isoformat",
        "len",
        "load_pem_public_key",
        "load_private_key",
        "load_yaml_file",
        "mkdir",
        "prompt",
        "proposals_approve",
        "proposals_list",
        "proposals_sign",
        "run",
        "run_full_audit",
        "save_yaml_file",
        "setdefault",
        "sign",
        "sorted",
        "str",
        "strip",
        "unlink",
        "utcnow",
        "verify",
        "warning",
        "write_text"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.552232+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "207f283b9b0553d316ef158aa3af1a31b6b03c02c74ab5d7a2861b0e0c2a5696"
    },
    "src/system/admin/proposals.py::proposals_list": {
      "key": "src/system/admin/proposals.py::proposals_list",
      "name": "proposals_list",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "List pending constitutional proposals and display their justification, target path, and signature/quorum status.",
      "docstring": "List pending constitutional proposals and display their justification, target path, and signature/quorum status.",
      "calls": [
        "any",
        "command",
        "endswith",
        "get",
        "glob",
        "info",
        "len",
        "load_yaml_file",
        "mkdir",
        "sorted",
        "strip"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.554917+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "945118437b13733f1f4454a9627aad994be50dd4ab90f26e8864619ac3e58aeb"
    },
    "src/system/admin/proposals.py::proposals_sign": {
      "key": "src/system/admin/proposals.py::proposals_sign",
      "name": "proposals_sign",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Sign a proposal with the operator's private key (content-bound token).",
      "docstring": "Intent: Sign a proposal with the operator's private key (content-bound token).",
      "calls": [
        "Argument",
        "Exit",
        "append",
        "b64encode",
        "command",
        "decode",
        "encode",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "isoformat",
        "load_private_key",
        "load_yaml_file",
        "prompt",
        "save_yaml_file",
        "setdefault",
        "sign",
        "utcnow"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.557247+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "75643a1ccd37846afc5bde0854052dd498273d8530339a876b0f5ae40280ee19"
    },
    "src/system/admin/proposals.py::proposals_approve": {
      "key": "src/system/admin/proposals.py::proposals_approve",
      "name": "proposals_approve",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Verify signatures/quorum, run a canary constitutional audit, then apply the proposal if valid.",
      "docstring": "Verify signatures/quorum, run a canary constitutional audit, then apply the proposal if valid.",
      "calls": [
        "Argument",
        "ConstitutionalAuditor",
        "Exit",
        "Path",
        "TemporaryDirectory",
        "any",
        "archive_rollback_plan",
        "b64decode",
        "command",
        "copy",
        "decode",
        "encode",
        "endswith",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "isinstance",
        "load_pem_public_key",
        "load_yaml_file",
        "mkdir",
        "run",
        "run_full_audit",
        "str",
        "unlink",
        "verify",
        "warning",
        "write_text"
      ],
      "line_number": 101,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.563699+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "51ce2f86d45e571c30f8620ce81474ccc257b9e240419716ee99a33031d21bef"
    },
    "src/system/admin/proposals.py::_group_list": {
      "key": "src/system/admin/proposals.py::_group_list",
      "name": "_group_list",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Group alias for proposals-list (namespaced UX).",
      "docstring": "Intent: Group alias for proposals-list (namespaced UX).",
      "calls": [
        "command",
        "proposals_list"
      ],
      "line_number": 208,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.565236+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "34be9e205bf189f73a23a3f924302ae389a50e6077a5c21f0ba2a9434c7c6719"
    },
    "src/system/admin/proposals.py::_group_sign": {
      "key": "src/system/admin/proposals.py::_group_sign",
      "name": "_group_sign",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Group alias for proposals-sign (namespaced UX).",
      "docstring": "Intent: Group alias for proposals-sign (namespaced UX).",
      "calls": [
        "command",
        "proposals_sign"
      ],
      "line_number": 213,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "last_updated": "2025-08-13T19:16:34.565827+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b396b6f5503656c08b53427b7512373529f51fd58486e0963dd6e02b8da42b6d"
    },
    "src/system/admin/proposals.py::_group_approve": {
      "key": "src/system/admin/proposals.py::_group_approve",
      "name": "_group_approve",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Group alias for proposals-approve (namespaced UX).",
      "docstring": "Intent: Group alias for proposals-approve (namespaced UX).",
      "calls": [
        "command",
        "proposals_approve"
      ],
      "line_number": 218,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "last_updated": "2025-08-13T19:16:34.566426+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "66cd61441455b892ddb893806e070f5a018e8bacab2a44aa55ef3859c9bc4e1b"
    },
    "src/system/admin/guard.py::_find_manifest_path": {
      "key": "src/system/admin/guard.py::_find_manifest_path",
      "name": "_find_manifest_path",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Locate and return the path to the project manifest file.",
      "docstring": "Locate and return the path to the project manifest file.",
      "calls": [
        "FileNotFoundError",
        "exists"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "last_updated": "2025-08-13T19:16:34.570231+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "997cbcca37c4970ac2860b084efd79c6cf4ea2d5095ecc95b4902b248687abb7"
    },
    "src/system/admin/guard.py::_load_raw_manifest": {
      "key": "src/system/admin/guard.py::_load_raw_manifest",
      "name": "_load_raw_manifest",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads and parses a YAML manifest file.",
      "docstring": "Loads and parses a YAML manifest file.",
      "calls": [
        "_find_manifest_path",
        "read_text",
        "safe_load"
      ],
      "line_number": 34,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "last_updated": "2025-08-13T19:16:34.571094+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7e41ce8438650c70d35208a79ab3d382ff23a33d6aded9037454bcbd17d86db9"
    },
    "src/system/admin/guard.py::_ux_defaults": {
      "key": "src/system/admin/guard.py::_ux_defaults",
      "name": "_ux_defaults",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Extracts and returns UX-related default values from the manifest.",
      "docstring": "Extracts and returns UX-related default values from the manifest.",
      "calls": [
        "_load_raw_manifest",
        "bool",
        "get"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "last_updated": "2025-08-13T19:16:34.572474+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "62452ac1b181264f3d8f59bbcc99a76562f815b7bbd08e00e4257649cdee4f25"
    },
    "src/system/admin/guard.py::_is_clean": {
      "key": "src/system/admin/guard.py::_is_clean",
      "name": "_is_clean",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Determines if a report is clean.",
      "docstring": "Determines if a report is clean.",
      "calls": [
        "get"
      ],
      "line_number": 55,
      "is_async": false,
      "parameters": [
        "report"
      ],
      "last_updated": "2025-08-13T19:16:34.573325+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "37959f8d821c2b4ca6b6146c0399c2561fc8e567a07025b5ba8ddaf66176f4d5"
    },
    "src/system/admin/guard.py::_print_table": {
      "key": "src/system/admin/guard.py::_print_table",
      "name": "_print_table",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Prints a formatted table of the drift report.",
      "docstring": "Prints a formatted table of the drift report.",
      "calls": [
        "Table",
        "_is_clean",
        "add_column",
        "add_row",
        "fit",
        "get",
        "join",
        "row",
        "rprint"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "report_dict",
        "labels"
      ],
      "last_updated": "2025-08-13T19:16:34.575922+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8adb51eb76846db20ba682e57e97adc72ecb9a3dea4d84079e99507b35534913"
    },
    "src/system/admin/guard.py::row": {
      "key": "src/system/admin/guard.py::row",
      "name": "row",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Adds a row to a table with a title and formatted list of items, showing '[none]' if items is empty.",
      "docstring": "Adds a row to a table with a title and formatted list of items, showing '[none]' if items is empty.",
      "calls": [
        "add_row",
        "join"
      ],
      "line_number": 65,
      "is_async": false,
      "parameters": [
        "title",
        "items"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.577016+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "359aaf2552cc5a7c19baedfdcc091b6a7f22a2f3681b15dd3db1743539c53ce1"
    },
    "src/system/admin/guard.py::_print_pretty": {
      "key": "src/system/admin/guard.py::_print_pretty",
      "name": "_print_pretty",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Prints a user-friendly summary of the drift report.",
      "docstring": "Prints a user-friendly summary of the drift report.",
      "calls": [
        "_print_table"
      ],
      "line_number": 85,
      "is_async": false,
      "parameters": [
        "report_dict",
        "labels"
      ],
      "last_updated": "2025-08-13T19:16:34.577862+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "76f6ca2a3c5b52f7a6e59c006de9011d04cee89af176fc0e53f1feb7d5a739b6"
    },
    "src/system/admin/guard.py::register": {
      "key": "src/system/admin/guard.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Registers the 'guard' command group with the CLI.",
      "docstring": "Registers the 'guard' command group with the CLI.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "Typer",
        "_print_pretty",
        "_ux_defaults",
        "add_typer",
        "collect_code_capabilities",
        "command",
        "detect_capability_drift",
        "dumps",
        "echo",
        "items",
        "len",
        "load_manifest_capabilities",
        "lower",
        "mkdir",
        "rprint",
        "should_fail",
        "sorted",
        "to_dict",
        "write_report",
        "write_text"
      ],
      "line_number": 89,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.582108+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "aff390b80bca5c2df654546dfbafe044a60be6d6c1c7bf0dbc61bd10b02b3375"
    },
    "src/system/admin/guard.py::drift": {
      "key": "src/system/admin/guard.py::drift",
      "name": "drift",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Compares manifest vs code to detect capability drift.",
      "docstring": "Compares manifest vs code to detect capability drift.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "_print_pretty",
        "_ux_defaults",
        "collect_code_capabilities",
        "command",
        "detect_capability_drift",
        "dumps",
        "echo",
        "load_manifest_capabilities",
        "lower",
        "should_fail",
        "to_dict",
        "write_report"
      ],
      "line_number": 95,
      "is_async": false,
      "parameters": [
        "root",
        "manifest_path",
        "output",
        "format",
        "fail_on",
        "include",
        "exclude",
        "strict_intent"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.584621+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "6a47a28cff9a76d5276b035fe8940e239dad488a2393eb91564d6dafaf5c0154"
    },
    "src/system/admin/guard.py::kg_export": {
      "key": "src/system/admin/guard.py::kg_export",
      "name": "kg_export",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Emits a minimal knowledge-graph artifact with capability nodes.",
      "docstring": "Emits a minimal knowledge-graph artifact with capability nodes.",
      "calls": [
        "Option",
        "Path",
        "collect_code_capabilities",
        "command",
        "dumps",
        "items",
        "len",
        "lower",
        "mkdir",
        "rprint",
        "sorted",
        "write_text"
      ],
      "line_number": 128,
      "is_async": false,
      "parameters": [
        "root",
        "output",
        "include",
        "exclude",
        "prefer"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.586927+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "97ec20f57d5c65f3413a7f3cbeb6895c4ed11199d7d1f9df88c2de2f2d55ffda"
    },
    "src/system/admin/keys.py::register": {
      "key": "src/system/admin/keys.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/keys.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register key management commands under the admin CLI.",
      "docstring": "Intent: Register key management commands under the admin CLI.",
      "calls": [
        "Argument",
        "NoEncryption",
        "chmod",
        "command",
        "confirm",
        "decode",
        "dump",
        "exists",
        "generate",
        "info",
        "mkdir",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "write_bytes"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.589955+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "c339a1d72ef8deb18d44a4acc776d4540fc2b0bda8e197e7f50ec64d9f4292b1"
    },
    "src/system/admin/keys.py::keygen": {
      "key": "src/system/admin/keys.py::keygen",
      "name": "keygen",
      "type": "FunctionDef",
      "file": "src/system/admin/keys.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Generate a new Ed25519 key pair and print an approver YAML block.",
      "docstring": "Intent: Generate a new Ed25519 key pair and print an approver YAML block.",
      "calls": [
        "Argument",
        "NoEncryption",
        "chmod",
        "command",
        "confirm",
        "decode",
        "dump",
        "exists",
        "generate",
        "info",
        "mkdir",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "write_bytes"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "identity"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-13T19:16:34.591893+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "5edbabd97e85a046b570023d6ec7330b5b9ce1e29657ade7ab78cf207ddb7f26"
    },
    "src/system/tools/change_log_updater.py::load_existing_log": {
      "key": "src/system/tools/change_log_updater.py::load_existing_log",
      "name": "load_existing_log",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads the existing change log from disk or returns a new structure.",
      "docstring": "Loads the existing change log from disk or returns a new structure.",
      "calls": [
        "load_config"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.593506+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "617e44205e9e392dcf047c13cf3fd9d88d9568ae09b5c487f92733eaf6167426"
    },
    "src/system/tools/change_log_updater.py::append_change_entry": {
      "key": "src/system/tools/change_log_updater.py::append_change_entry",
      "name": "append_change_entry",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Appends a new, structured entry to the metacode change log.",
      "docstring": "Appends a new, structured entry to the metacode change log.",
      "calls": [
        "append",
        "dumps",
        "info",
        "isoformat",
        "load_existing_log",
        "mkdir",
        "utcnow",
        "write_text"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "task",
        "step",
        "modified_files",
        "score",
        "violations"
      ],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-13T19:16:34.594854+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "810699914d469cb08496ca059f28f88fc261f95546655275a5821abcca68cdce"
    },
    "src/system/tools/codegraph_builder.py::_strip_docstrings": {
      "key": "src/system/tools/codegraph_builder.py::_strip_docstrings",
      "name": "_strip_docstrings",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Recursively remove docstring nodes from an AST tree for structural hashing.",
      "docstring": "Recursively remove docstring nodes from an AST tree for structural hashing.",
      "calls": [
        "_strip_docstrings",
        "isinstance",
        "iter_child_nodes"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-13T19:16:34.602939+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "424a26c746133086ed62a6a74682a190322accd0e679d38aae06a16a26e147ca"
    },
    "src/system/tools/codegraph_builder.py::FunctionInfo": {
      "key": "src/system/tools/codegraph_builder.py::FunctionInfo",
      "name": "FunctionInfo",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A data structure holding all analyzed information about a single symbol (function, method, or class).",
      "docstring": "A data structure holding all analyzed information about a single symbol (function, method, or class).",
      "calls": [
        "field"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-13T19:16:34.604364+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "d8c3fbd14dd6721420770299c61be330eb98b0989c0250317c2f6e0f9b656974"
    },
    "src/system/tools/codegraph_builder.py::ProjectStructureError": {
      "key": "src/system/tools/codegraph_builder.py::ProjectStructureError",
      "name": "ProjectStructureError",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Custom exception for when the project's root cannot be determined.",
      "docstring": "Custom exception for when the project's root cannot be determined.",
      "calls": [],
      "line_number": 56,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.604987+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "2f13e6e5a0eb3f0c4f02e9a457c18dba96ed08cc8c805bed8008ebab96d432b6"
    },
    "src/system/tools/codegraph_builder.py::find_project_root": {
      "key": "src/system/tools/codegraph_builder.py::find_project_root",
      "name": "find_project_root",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Traverses upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "docstring": "Traverses upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "calls": [
        "ProjectStructureError",
        "exists",
        "resolve"
      ],
      "line_number": 60,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "last_updated": "2025-08-13T19:16:34.605785+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e730a8c97bbf62a3563d99cd7b52e176fcb2add0ee57994783e82f6fd4170b24"
    },
    "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder": {
      "key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "name": "KnowledgeGraphBuilder",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "manifest_updating",
      "intent": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "docstring": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "calls": [
        "ContextAwareVisitor",
        "FunctionCallVisitor",
        "FunctionInfo",
        "Path",
        "_apply_entry_point_patterns",
        "_detect_docstring",
        "_determine_domain",
        "_get_cli_entry_points",
        "_get_domain_map",
        "_get_entry_point_type",
        "_infer_agent_from_path",
        "_infer_domains_from_directory_structure",
        "_load_patterns",
        "_parse_metadata_comment",
        "_process_symbol_node",
        "_should_exclude_path",
        "_strip_docstrings",
        "any",
        "append",
        "as_posix",
        "asdict",
        "encode",
        "error",
        "exists",
        "extend",
        "findall",
        "get",
        "get_docstring",
        "group",
        "hasattr",
        "hexdigest",
        "info",
        "is_dir",
        "isinstance",
        "isoformat",
        "items",
        "iterdir",
        "len",
        "list",
        "load_config",
        "lower",
        "match",
        "max",
        "now",
        "parse",
        "read_text",
        "relative_to",
        "replace",
        "resolve",
        "rglob",
        "scan_file",
        "search",
        "set",
        "sha256",
        "sorted",
        "split",
        "splitlines",
        "startswith",
        "str",
        "strip",
        "unparse",
        "update",
        "values",
        "visit",
        "walk",
        "warning"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.622819+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "b159bebb4118372423ad2c03310833eb84ef3c4af163f25e6ee794719fedbe1e"
    },
    "src/system/tools/codegraph_builder.py::__init__": {
      "key": "src/system/tools/codegraph_builder.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the builder, loading patterns and project configuration.",
      "docstring": "Initializes the builder, loading patterns and project configuration.",
      "calls": [
        "_get_cli_entry_points",
        "_get_domain_map",
        "_load_patterns",
        "resolve"
      ],
      "line_number": 73,
      "is_async": false,
      "parameters": [
        "self",
        "root_path",
        "exclude_patterns"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.646703+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "e9e219620d75b50949edccd0a532caaeb4c6ae4d528e8dbed224b26f75c84268"
    },
    "src/system/tools/codegraph_builder.py::_load_patterns": {
      "key": "src/system/tools/codegraph_builder.py::_load_patterns",
      "name": "_load_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads entry point detection patterns from the intent file.",
      "docstring": "Loads entry point detection patterns from the intent file.",
      "calls": [
        "exists",
        "get",
        "load_config",
        "warning"
      ],
      "line_number": 86,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.647659+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "b990dc18517858326a6d879abac99f124565e2df585e953c83da94fa4ba3adf9"
    },
    "src/system/tools/codegraph_builder.py::_get_cli_entry_points": {
      "key": "src/system/tools/codegraph_builder.py::_get_cli_entry_points",
      "name": "_get_cli_entry_points",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parses pyproject.toml to find declared command-line entry points.",
      "docstring": "Parses pyproject.toml to find declared command-line entry points.",
      "calls": [
        "exists",
        "findall",
        "group",
        "read_text",
        "search",
        "set"
      ],
      "line_number": 94,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.648691+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "ec2b5d9d14d7f0e86e7d5e9e3a72f364cece95d854c0ee6752b7da7d8ffc2abe"
    },
    "src/system/tools/codegraph_builder.py::_should_exclude_path": {
      "key": "src/system/tools/codegraph_builder.py::_should_exclude_path",
      "name": "_should_exclude_path",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determines if a given path should be excluded from scanning.",
      "docstring": "Determines if a given path should be excluded from scanning.",
      "calls": [
        "any"
      ],
      "line_number": 103,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "last_updated": "2025-08-13T19:16:34.649423+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "5145a7d39126ded20f01b9113a9867d92bc443bbccfe6b7c0155aec3a6044fd3"
    },
    "src/system/tools/codegraph_builder.py::_infer_domains_from_directory_structure": {
      "key": "src/system/tools/codegraph_builder.py::_infer_domains_from_directory_structure",
      "name": "_infer_domains_from_directory_structure",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A heuristic to guess domains if source_structure.yaml is missing.",
      "docstring": "A heuristic to guess domains if source_structure.yaml is missing.",
      "calls": [
        "Path",
        "as_posix",
        "info",
        "is_dir",
        "iterdir",
        "len",
        "startswith",
        "warning"
      ],
      "line_number": 107,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.650792+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "ca9f8084cdedab5eb89d74d4b56f934cfc83e8065f89f6236fbc263a0d6d9ffe"
    },
    "src/system/tools/codegraph_builder.py::_get_domain_map": {
      "key": "src/system/tools/codegraph_builder.py::_get_domain_map",
      "name": "_get_domain_map",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads the domain-to-path mapping from the constitution.",
      "docstring": "Loads the domain-to-path mapping from the constitution.",
      "calls": [
        "Path",
        "_infer_domains_from_directory_structure",
        "as_posix",
        "get",
        "load_config"
      ],
      "line_number": 124,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.651972+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "0528d3931282a278b126f86b3516ea20662c0b4bad0bb69b25fa437ccaf6125f"
    },
    "src/system/tools/codegraph_builder.py::_determine_domain": {
      "key": "src/system/tools/codegraph_builder.py::_determine_domain",
      "name": "_determine_domain",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determines the logical domain for a file path based on the longest matching prefix.",
      "docstring": "Determines the logical domain for a file path based on the longest matching prefix.",
      "calls": [
        "as_posix",
        "get",
        "max",
        "startswith"
      ],
      "line_number": 135,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-13T19:16:34.652880+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "8f5420507b705fbf2e93fe0882332ddfb7b081a8b592814cc185433b5bcd27d1"
    },
    "src/system/tools/codegraph_builder.py::_infer_agent_from_path": {
      "key": "src/system/tools/codegraph_builder.py::_infer_agent_from_path",
      "name": "_infer_agent_from_path",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Infers the most likely responsible agent based on keywords in the file path.",
      "docstring": "Infers the most likely responsible agent based on keywords in the file path.",
      "calls": [
        "any",
        "lower",
        "str"
      ],
      "line_number": 141,
      "is_async": false,
      "parameters": [
        "self",
        "relative_path"
      ],
      "last_updated": "2025-08-13T19:16:34.653981+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "270bbb48ebdc3e03b701f151094cf89c350ea0e6df2f50fd33792cad508eff40"
    },
    "src/system/tools/codegraph_builder.py::_parse_metadata_comment": {
      "key": "src/system/tools/codegraph_builder.py::_parse_metadata_comment",
      "name": "_parse_metadata_comment",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parses the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "docstring": "Parses the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "calls": [
        "group",
        "search",
        "startswith",
        "strip"
      ],
      "line_number": 151,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "source_lines"
      ],
      "last_updated": "2025-08-13T19:16:34.655148+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "5845244671c6b417a36b6de0eabaf4594a3d5efff46673c53d969391abba15db"
    },
    "src/system/tools/codegraph_builder.py::_get_entry_point_type": {
      "key": "src/system/tools/codegraph_builder.py::_get_entry_point_type",
      "name": "_get_entry_point_type",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Identifies decorator or CLI-based entry points for a function.",
      "docstring": "Identifies decorator or CLI-based entry points for a function.",
      "calls": [
        "isinstance"
      ],
      "line_number": 160,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-13T19:16:34.656666+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "82f6689877f134f55e87dc1f76ec60baa75b0c1e4b45447dcbbff49abec896d3"
    },
    "src/system/tools/codegraph_builder.py::_detect_docstring": {
      "key": "src/system/tools/codegraph_builder.py::_detect_docstring",
      "name": "_detect_docstring",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Detects both standard and non-standard docstrings for a node.",
      "docstring": "Detects both standard and non-standard docstrings for a node.",
      "calls": [
        "get_docstring",
        "isinstance"
      ],
      "line_number": 171,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-13T19:16:34.657885+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "cd2c9d87e906bfd867b78d2e537a04f1d078a38e92ad278739929c974b024306"
    },
    "src/system/tools/codegraph_builder.py::scan_file": {
      "key": "src/system/tools/codegraph_builder.py::scan_file",
      "name": "scan_file",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Scans a single Python file, parsing its AST to extract all symbols.",
      "docstring": "Scans a single Python file, parsing its AST to extract all symbols.",
      "calls": [
        "ContextAwareVisitor",
        "FunctionCallVisitor",
        "error",
        "isinstance",
        "parse",
        "read_text",
        "set",
        "splitlines",
        "str",
        "update",
        "visit",
        "walk"
      ],
      "line_number": 182,
      "is_async": false,
      "parameters": [
        "self",
        "filepath"
      ],
      "last_updated": "2025-08-13T19:16:34.660515+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "d4264b9a2ca7a44c6d870364d5ffe8dad02d731179f3371893667d0d3da0a1fb"
    },
    "src/system/tools/codegraph_builder.py::_process_symbol_node": {
      "key": "src/system/tools/codegraph_builder.py::_process_symbol_node",
      "name": "_process_symbol_node",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Extracts and stores metadata from a single function or class AST node, including nested methods.",
      "docstring": "Extracts and stores metadata from a single function or class AST node, including nested methods.",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "_detect_docstring",
        "_determine_domain",
        "_get_entry_point_type",
        "_infer_agent_from_path",
        "_parse_metadata_comment",
        "_process_symbol_node",
        "_strip_docstrings",
        "append",
        "as_posix",
        "encode",
        "get",
        "hasattr",
        "hexdigest",
        "isinstance",
        "isoformat",
        "now",
        "parse",
        "relative_to",
        "replace",
        "sha256",
        "split",
        "strip",
        "unparse",
        "visit"
      ],
      "line_number": 209,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "filepath",
        "source_lines",
        "parent_key"
      ],
      "last_updated": "2025-08-13T19:16:34.664189+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "21041ffc9e1c910b37e47be7dc9083588d9f07ae3841fea54164a634506840dc"
    },
    "src/system/tools/codegraph_builder.py::_apply_entry_point_patterns": {
      "key": "src/system/tools/codegraph_builder.py::_apply_entry_point_patterns",
      "name": "_apply_entry_point_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Applies declarative patterns to identify non-obvious entry points.",
      "docstring": "Applies declarative patterns to identify non-obvious entry points.",
      "calls": [
        "any",
        "extend",
        "get",
        "match",
        "read_text",
        "splitlines",
        "startswith",
        "strip",
        "values"
      ],
      "line_number": 266,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.667554+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "4b2dedbfd7a6a1e29d60e1a17c7725d3ddba71d981db20d0275dbb5fea679fd0"
    },
    "src/system/tools/codegraph_builder.py::build": {
      "key": "src/system/tools/codegraph_builder.py::build",
      "name": "build",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Orchestrates the full knowledge graph generation process.",
      "docstring": "Orchestrates the full knowledge graph generation process.",
      "calls": [
        "_apply_entry_point_patterns",
        "_should_exclude_path",
        "asdict",
        "info",
        "isoformat",
        "items",
        "len",
        "list",
        "now",
        "rglob",
        "scan_file",
        "sorted",
        "values"
      ],
      "line_number": 307,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.670138+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "db88eaa2363662bf4d0203902a2da5e6132073d87d69ccc002a8e4f167d9b3f4"
    },
    "src/system/tools/codegraph_builder.py::main": {
      "key": "src/system/tools/codegraph_builder.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "CLI entry point to run the knowledge graph builder and save the output.",
      "docstring": "CLI entry point to run the knowledge graph builder and save the output.",
      "calls": [
        "FileLock",
        "KnowledgeGraphBuilder",
        "build",
        "cwd",
        "dumps",
        "error",
        "find_project_root",
        "info",
        "len",
        "load_dotenv",
        "mkdir",
        "str",
        "write_text"
      ],
      "line_number": 336,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-13T19:16:34.671976+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "af7babc3453097925778f631d2642faab007f6a38ac6ae7ee51f9c47226e87d8"
    },
    "src/system/tools/manifest_migrator.py::migrate_manifest": {
      "key": "src/system/tools/manifest_migrator.py::migrate_manifest",
      "name": "migrate_manifest",
      "type": "FunctionDef",
      "file": "src/system/tools/manifest_migrator.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Reads the monolithic manifest and splits it into per-domain manifests.",
      "docstring": "Reads the monolithic manifest and splits it into per-domain manifests.",
      "calls": [
        "Exit",
        "Option",
        "all",
        "append",
        "dump",
        "echo",
        "enumerate",
        "error",
        "exists",
        "get",
        "info",
        "items",
        "loads",
        "mkdir",
        "next",
        "read_text",
        "safe_load",
        "secho",
        "values",
        "warning",
        "write_text"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "dry_run"
      ],
      "last_updated": "2025-08-13T19:16:34.678154+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "ec4fdbcf778a03ddf923e5e7cd854d8665eeb680179b86c267b67848374f3291"
    },
    "src/system/tools/ast_visitor.py::FunctionCallVisitor": {
      "key": "src/system/tools/ast_visitor.py::FunctionCallVisitor",
      "name": "FunctionCallVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "An AST visitor that collects the names of all functions being called within a node.",
      "docstring": "An AST visitor that collects the names of all functions being called within a node.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance",
        "set"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.680696+00:00",
      "is_class": true,
      "base_classes": [
        "NodeVisitor"
      ],
      "structural_hash": "1d7392083a2be98b2d882157167d40075ee0a30a3b4cabc691ebb598e26250c9"
    },
    "src/system/tools/ast_visitor.py::__init__": {
      "key": "src/system/tools/ast_visitor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the instance with the given builder, filepath, source lines, and an empty context stack.",
      "docstring": "Initialize the instance with the given builder, filepath, source lines, and an empty context stack.",
      "calls": [],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self",
        "builder",
        "filepath",
        "source_lines"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.689851+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "e5203c6e20bf02e7644590a063ce5e5db0ab69b9ef4dfca433a71816b361bc47"
    },
    "src/system/tools/ast_visitor.py::visit_Call": {
      "key": "src/system/tools/ast_visitor.py::visit_Call",
      "name": "visit_Call",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "docstring": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-13T19:16:34.683442+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::FunctionCallVisitor",
      "structural_hash": "6bd1e8e30a8e89ac8a9e78b12c02e5d78b2cf0b9187ff32da75aeedd1c8161af"
    },
    "src/system/tools/ast_visitor.py::ContextAwareVisitor": {
      "key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "name": "ContextAwareVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A stateful AST visitor that understands nested class and function contexts.",
      "docstring": "A stateful AST visitor that understands nested class and function contexts.",
      "calls": [
        "_process_and_visit",
        "_process_symbol_node",
        "append",
        "generic_visit",
        "pop"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.685553+00:00",
      "is_class": true,
      "base_classes": [
        "NodeVisitor"
      ],
      "structural_hash": "b28d049bdc95acaee71cbe5ad02878514d81fd1e88ffc7a23724204684c5c3ef"
    },
    "src/system/tools/ast_visitor.py::_process_and_visit": {
      "key": "src/system/tools/ast_visitor.py::_process_and_visit",
      "name": "_process_and_visit",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Helper to process a symbol and manage the context stack.",
      "docstring": "Helper to process a symbol and manage the context stack.",
      "calls": [
        "_process_symbol_node",
        "append",
        "generic_visit",
        "pop"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "node_type"
      ],
      "last_updated": "2025-08-13T19:16:34.691092+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor",
        "NodeVisitor",
        "NodeVisitor"
      ],
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "72ed2d2e224dfe5a9879f157b463bde0bf9109eb7ccef5316baac6b310ae6c96"
    },
    "src/system/tools/ast_visitor.py::visit_ClassDef": {
      "key": "src/system/tools/ast_visitor.py::visit_ClassDef",
      "name": "visit_ClassDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a class definition node, and visits its children.",
      "docstring": "Processes a class definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-13T19:16:34.691792+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "5fc309bc3b69e72b37ff19e6a7a79f9a377eae0dc1ec0f9e826863e744406929"
    },
    "src/system/tools/ast_visitor.py::visit_FunctionDef": {
      "key": "src/system/tools/ast_visitor.py::visit_FunctionDef",
      "name": "visit_FunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a function definition node, and visits its children.",
      "docstring": "Processes a function definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 57,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-13T19:16:34.692352+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "3f2d3b5171306dce35ba70a697fe9bc954cd498e4d514ee7488742bb2cf1905c"
    },
    "src/system/tools/ast_visitor.py::visit_AsyncFunctionDef": {
      "key": "src/system/tools/ast_visitor.py::visit_AsyncFunctionDef",
      "name": "visit_AsyncFunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes an async function definition node, and visits its children.",
      "docstring": "Processes an async function definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 61,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-13T19:16:34.692916+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "ce568d79cf5bf2713454e3eb1f44137b0c2105b15ee76686ba9f48fcda3e23e2"
    },
    "src/system/tools/docstring_adder.py::add_docstring_to_function_line_based": {
      "key": "src/system/tools/docstring_adder.py::add_docstring_to_function_line_based",
      "name": "add_docstring_to_function_line_based",
      "type": "FunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Surgically inserts a docstring into source code using a line-based method.",
      "docstring": "Surgically inserts a docstring into source code using a line-based method.",
      "calls": [
        "error",
        "insert",
        "join",
        "len",
        "lstrip",
        "splitlines",
        "strip",
        "warning"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "source_code",
        "line_number",
        "docstring"
      ],
      "last_updated": "2025-08-13T19:16:34.697743+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "fd8f7f040998d45099bef706eaa87e421ebe821e8dbf4eb52efeaa3fde8fbbdc"
    },
    "src/system/tools/docstring_adder.py::generate_and_apply_docstring": {
      "key": "src/system/tools/docstring_adder.py::generate_and_apply_docstring",
      "name": "generate_and_apply_docstring",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Generates and applies a docstring for a single function, precisely locating it using AST.",
      "docstring": "Generates and applies a docstring for a single function, precisely locating it using AST.",
      "calls": [
        "add_docstring_to_function_line_based",
        "error",
        "exists",
        "get",
        "get_docstring",
        "info",
        "isinstance",
        "make_request_async",
        "parse",
        "read_text",
        "replace",
        "secho",
        "strip",
        "unparse",
        "walk",
        "warning",
        "write_text"
      ],
      "line_number": 54,
      "is_async": true,
      "parameters": [
        "target",
        "generator",
        "dry_run"
      ],
      "last_updated": "2025-08-13T19:16:34.701915+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c02300ddbdd3fbb67c39b3f6f2f599302f2176d3b46c4e869d96b1293b4f560a"
    },
    "src/system/tools/docstring_adder.py::_async_main": {
      "key": "src/system/tools/docstring_adder.py::_async_main",
      "name": "_async_main",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "The core asynchronous logic for finding and fixing docstrings.",
      "docstring": "The core asynchronous logic for finding and fixing docstrings.",
      "calls": [
        "GeneratorClient",
        "KnowledgeGraphBuilder",
        "Semaphore",
        "as_completed",
        "build",
        "cwd",
        "dumps",
        "error",
        "find_project_root",
        "generate_and_apply_docstring",
        "get",
        "info",
        "len",
        "track",
        "values",
        "worker",
        "write_text"
      ],
      "line_number": 123,
      "is_async": true,
      "parameters": [
        "dry_run"
      ],
      "last_updated": "2025-08-13T19:16:34.704691+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "4fa8138c37be3c0aeb8d1e61d7444db05e38b5a0fbcbd0a5a45a7cbb6d03f319"
    },
    "src/system/tools/docstring_adder.py::worker": {
      "key": "src/system/tools/docstring_adder.py::worker",
      "name": "worker",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes the target asynchronously within a semaphore, generating and applying a docstring using the provided generator (dry run if specified).",
      "docstring": "Processes the target asynchronously within a semaphore, generating and applying a docstring using the provided generator (dry run if specified).",
      "calls": [
        "generate_and_apply_docstring"
      ],
      "line_number": 155,
      "is_async": true,
      "parameters": [
        "target"
      ],
      "last_updated": "2025-08-13T19:16:34.705502+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "bf227975be6db77562124c68865894e9d5ac82e03cb2cacf17189d59183d48df"
    },
    "src/system/tools/docstring_adder.py::fix_missing_docstrings": {
      "key": "src/system/tools/docstring_adder.py::fix_missing_docstrings",
      "name": "fix_missing_docstrings",
      "type": "FunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "add_missing_docstrings",
      "intent": "Finds all functions with missing docstrings and uses an LLM to generate them.",
      "docstring": "Finds all functions with missing docstrings and uses an LLM to generate them.",
      "calls": [
        "KnowledgeGraphBuilder",
        "Option",
        "_async_main",
        "build",
        "cwd",
        "dumps",
        "error",
        "find_project_root",
        "info",
        "run",
        "write_text"
      ],
      "line_number": 168,
      "is_async": false,
      "parameters": [
        "dry_run"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.706944+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "149cb503ba066c746c5e20e5bab29ac84e57106ee40fdacd5fea26c4be9b3b1d"
    },
    "src/system/guard/discovery/from_source_scan.py::_parse_inline_meta": {
      "key": "src/system/guard/discovery/from_source_scan.py::_parse_inline_meta",
      "name": "_parse_inline_meta",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Parse inline [key=value] metadata from trailing text.",
      "docstring": "Parse inline [key=value] metadata from trailing text.",
      "calls": [
        "findall",
        "group",
        "search"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "trailing"
      ],
      "last_updated": "2025-08-13T19:16:34.708960+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "04e919d1580e0efe6c93a7e34d7b4adfd2afb95339c5246dd0ec1006bf3bca54"
    },
    "src/system/guard/discovery/from_source_scan.py::_iter_source_files": {
      "key": "src/system/guard/discovery/from_source_scan.py::_iter_source_files",
      "name": "_iter_source_files",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Yields repository files to be scanned.",
      "docstring": "Yields repository files to be scanned.",
      "calls": [
        "any",
        "is_file",
        "match",
        "rglob",
        "wanted"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs"
      ],
      "last_updated": "2025-08-13T19:16:34.710356+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b5b675110e61cfb12eaf9fd7630d3b5493e662dd45521e6a570d58b4362ade36"
    },
    "src/system/guard/discovery/from_source_scan.py::wanted": {
      "key": "src/system/guard/discovery/from_source_scan.py::wanted",
      "name": "wanted",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Return True if the path matches include_globs (if any) or has a .py suffix, and does not match exclude_globs.",
      "docstring": "Return True if the path matches include_globs (if any) or has a .py suffix, and does not match exclude_globs.",
      "calls": [
        "any",
        "match"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "p"
      ],
      "last_updated": "2025-08-13T19:16:34.711241+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5345aca39bfbb4edb9ef0d4011c61efa4c1c44757af84f97b1221aedc6165256"
    },
    "src/system/guard/discovery/from_source_scan.py::collect_from_source_scan": {
      "key": "src/system/guard/discovery/from_source_scan.py::collect_from_source_scan",
      "name": "collect_from_source_scan",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Scans for '# CAPABILITY:' tags with optional inline metadata.",
      "docstring": "Scans for '# CAPABILITY:' tags with optional inline metadata.",
      "calls": [
        "CapabilityMeta",
        "_iter_source_files",
        "_parse_inline_meta",
        "get",
        "group",
        "match",
        "read_text",
        "splitlines",
        "strip"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs"
      ],
      "last_updated": "2025-08-13T19:16:34.712802+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f68a4883d0b1d8129540c80e3007b4123c6fc828fe6240a8c5d087c8268fb313"
    },
    "src/system/guard/discovery/from_manifest.py::_normalize_cap_list": {
      "key": "src/system/guard/discovery/from_manifest.py::_normalize_cap_list",
      "name": "_normalize_cap_list",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_manifest.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Normalizes various list/dict shapes into a standard {cap: Meta} dictionary.",
      "docstring": "Normalizes various list/dict shapes into a standard {cap: Meta} dictionary.",
      "calls": [
        "CapabilityMeta",
        "get",
        "isinstance",
        "items"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "items"
      ],
      "last_updated": "2025-08-13T19:16:34.715685+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8034e0df53d1fc805acba6cc59b1bdbcfaed5b6f43b108e453d77102c727acef"
    },
    "src/system/guard/discovery/from_manifest.py::_find_manifest": {
      "key": "src/system/guard/discovery/from_manifest.py::_find_manifest",
      "name": "_find_manifest",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_manifest.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Locates the authoritative .intent manifest file.",
      "docstring": "Locates the authoritative .intent manifest file.",
      "calls": [
        "FileNotFoundError",
        "exists"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "start"
      ],
      "last_updated": "2025-08-13T19:16:34.716649+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "4f158801cffc65b78cdf085755317868a5774eb7aab641bd4430a89467b2242f"
    },
    "src/system/guard/discovery/from_manifest.py::_normalize_manifest_caps": {
      "key": "src/system/guard/discovery/from_manifest.py::_normalize_manifest_caps",
      "name": "_normalize_manifest_caps",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_manifest.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Normalizes different manifest shapes into a {capability: Meta} map.",
      "docstring": "Normalizes different manifest shapes into a {capability: Meta} map.",
      "calls": [
        "_normalize_cap_list",
        "deque",
        "extend",
        "isinstance",
        "popleft",
        "values"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "raw"
      ],
      "last_updated": "2025-08-13T19:16:34.717920+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c8b250d00cc3b32e389a6565089f89153c1da6b89eadf90a2a5a99b21cf9d05c"
    },
    "src/system/guard/discovery/from_manifest.py::load_manifest_capabilities": {
      "key": "src/system/guard/discovery/from_manifest.py::load_manifest_capabilities",
      "name": "load_manifest_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_manifest.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "docstring": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "calls": [
        "RuntimeError",
        "_find_manifest",
        "_normalize_manifest_caps",
        "open",
        "safe_load"
      ],
      "line_number": 54,
      "is_async": false,
      "parameters": [
        "root",
        "explicit_path"
      ],
      "last_updated": "2025-08-13T19:16:34.719048+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e8c822ad152d5fd0ac2df2f08c8eaa8763cb5e391691f2dec9ebceb444bf0b92"
    },
    "src/system/guard/discovery/from_kgb.py::_try_import_kgb": {
      "key": "src/system/guard/discovery/from_kgb.py::_try_import_kgb",
      "name": "_try_import_kgb",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Attempts to access KnowledgeGraphBuilder without a static cross-domain import.",
      "docstring": "Attempts to access KnowledgeGraphBuilder without a static cross-domain import.",
      "calls": [
        "getattr",
        "import_module"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.720552+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c5ede0ba8cbfe280f6be73af3858ad2da1470b31ac0bbec0a2bab297a805a134"
    },
    "src/system/guard/discovery/from_kgb.py::_extract_cap_meta_from_node": {
      "key": "src/system/guard/discovery/from_kgb.py::_extract_cap_meta_from_node",
      "name": "_extract_cap_meta_from_node",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Extracts capability metadata from a Knowledge Graph node.",
      "docstring": "Extracts capability metadata from a Knowledge Graph node.",
      "calls": [
        "CapabilityMeta",
        "get",
        "str"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-13T19:16:34.721663+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b385da546dbc6c856c4048d18354072a90fb09870ff89f366757e4db9aaf9dee"
    },
    "src/system/guard/discovery/from_kgb.py::collect_from_kgb": {
      "key": "src/system/guard/discovery/from_kgb.py::collect_from_kgb",
      "name": "collect_from_kgb",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Uses KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "docstring": "Uses KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "calls": [
        "KGB",
        "_extract_cap_meta_from_node",
        "_try_import_kgb",
        "build",
        "get",
        "isinstance",
        "values"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "root"
      ],
      "last_updated": "2025-08-13T19:16:34.723048+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5240a9678f95db483d886d2ceb5a9f288efd705684e7496b06c7ea94b3fce821"
    },
    "src/system/governance/checks/quality_checks.py::QualityChecks": {
      "key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "name": "QualityChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for code quality constitutional checks.",
      "docstring": "Container for code quality constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 6,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.727079+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "b43e4683bb6582ecf1397eb6065567f8fe53f9828d8958b41782f5a893a0adb8"
    },
    "src/system/governance/checks/quality_checks.py::__init__": {
      "key": "src/system/governance/checks/quality_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.731561+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "474c67c3ad417e92e0a5cfe962deb537f55c550a1fd8b27eca415afbdf6a6986"
    },
    "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents": {
      "key": "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents",
      "name": "check_docstrings_and_intents",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.docstrings",
      "intent": "Finds symbols missing docstrings or having generic intents.",
      "docstring": "Finds symbols missing docstrings or having generic intents.",
      "calls": [
        "AuditFinding",
        "append",
        "get"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.733310+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "26909ce55bf9e823775eff9afee451d43f85a43e46039c61dee69cf39825702d"
    },
    "src/system/governance/checks/quality_checks.py::check_for_dead_code": {
      "key": "src/system/governance/checks/quality_checks.py::check_for_dead_code",
      "name": "check_for_dead_code",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.dead_code",
      "intent": "Detects unreferenced public symbols.",
      "docstring": "Detects unreferenced public symbols.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.735097+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "bb685c54a606e923f512ea3413c9a9567d6dbc9451b9d1cf0d3ce949e6836ad4"
    },
    "src/system/governance/checks/file_checks.py::FileChecks": {
      "key": "src/system/governance/checks/file_checks.py::FileChecks",
      "name": "FileChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for file-based constitutional checks.",
      "docstring": "Container for file-based constitutional checks.",
      "calls": [
        "AuditFinding",
        "Path",
        "_get_known_files_from_meta",
        "_recursive_find_paths",
        "add",
        "any",
        "append",
        "exists",
        "extend",
        "glob",
        "is_file",
        "isinstance",
        "len",
        "load_config",
        "read_text",
        "relative_to",
        "replace",
        "rglob",
        "set",
        "sorted",
        "str",
        "validate_code",
        "values"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.743702+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "61d944532c2bcab998aeaa6b9cedd6338b95bfabb509fea0ac905f65f7c7665d"
    },
    "src/system/governance/checks/file_checks.py::__init__": {
      "key": "src/system/governance/checks/file_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initialize with a shared auditor context.",
      "docstring": "Initialize with a shared auditor context.",
      "calls": [],
      "line_number": 12,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.752546+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "b6ae2e2a72f0cbc823f1b1d48c7f7bd2baf4951e23a7ce717cef727fad61f62f"
    },
    "src/system/governance/checks/file_checks.py::check_required_files": {
      "key": "src/system/governance/checks/file_checks.py::check_required_files",
      "name": "check_required_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.required_files",
      "intent": "Verify that all files declared in meta.yaml exist on disk.",
      "docstring": "Verify that all files declared in meta.yaml exist on disk.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "append",
        "exists",
        "len",
        "sorted"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.754160+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "fdae6956729ff51a7d86d64d26ed9b47addb932b1245bb77ee3105a4eb15d3ea"
    },
    "src/system/governance/checks/file_checks.py::check_syntax": {
      "key": "src/system/governance/checks/file_checks.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.syntax",
      "intent": "Validate syntax of all .intent YAML/JSON files (including proposals).",
      "docstring": "Validate syntax of all .intent YAML/JSON files (including proposals).",
      "calls": [
        "AuditFinding",
        "append",
        "extend",
        "is_file",
        "len",
        "read_text",
        "relative_to",
        "rglob",
        "str",
        "validate_code"
      ],
      "line_number": 55,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.756495+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "d87bd10847da7311d1bfd947eb9bdf5ee37fe24b91210911282750f2f5b666ac"
    },
    "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files": {
      "key": "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files",
      "name": "check_for_orphaned_intent_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.orphaned_intent_files",
      "intent": "Find .intent files not referenced in meta.yaml.",
      "docstring": "Find .intent files not referenced in meta.yaml.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "any",
        "append",
        "is_file",
        "relative_to",
        "replace",
        "rglob",
        "sorted",
        "str"
      ],
      "line_number": 98,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.758463+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "552a2c32abf61e300ae6ccf8bcf3f3a2fdd7d592fbd902eaa3413a8bf98f1509"
    },
    "src/system/governance/checks/file_checks.py::_get_known_files_from_meta": {
      "key": "src/system/governance/checks/file_checks.py::_get_known_files_from_meta",
      "name": "_get_known_files_from_meta",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Build a set of known intent files from .intent/meta.yaml.",
      "docstring": "Build a set of known intent files from .intent/meta.yaml.",
      "calls": [
        "Path",
        "_recursive_find_paths",
        "add",
        "exists",
        "glob",
        "isinstance",
        "load_config",
        "relative_to",
        "replace",
        "set",
        "str",
        "values"
      ],
      "line_number": 131,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.760698+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "4774448a60fa843a17dbfb7aa3d3e3f680febc481c29ceb12c7221f930ec4dfb"
    },
    "src/system/governance/checks/file_checks.py::_recursive_find_paths": {
      "key": "src/system/governance/checks/file_checks.py::_recursive_find_paths",
      "name": "_recursive_find_paths",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Recursively find all file paths in meta configuration.",
      "docstring": "Recursively find all file paths in meta configuration.",
      "calls": [
        "Path",
        "_recursive_find_paths",
        "add",
        "isinstance",
        "replace",
        "str",
        "values"
      ],
      "line_number": 144,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "last_updated": "2025-08-13T19:16:34.761902+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c1d75135008e7db5a93e9140b98a36354272718041dcb0ba7ec8be3675f204a5"
    },
    "src/system/governance/checks/proposal_checks.py::ProposalChecks": {
      "key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "name": "ProposalChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for proposal-related constitutional checks.",
      "docstring": "Container for proposal-related constitutional checks.",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "ValueError",
        "_expected_token_for_content",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "encode",
        "exists",
        "get",
        "glob",
        "hexdigest",
        "iter_errors",
        "join",
        "len",
        "list",
        "load_schema",
        "loads",
        "lower",
        "read_text",
        "relative_to",
        "safe_load",
        "sha256",
        "sorted",
        "str"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.771136+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "9510407f227ba8eff042eda320dd70853fb788c119ab310f7e5fb361eca6e203"
    },
    "src/system/governance/checks/proposal_checks.py::__init__": {
      "key": "src/system/governance/checks/proposal_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context, setting `repo_root` and `proposals_dir` paths.",
      "docstring": "Initializes the check with a shared auditor context, setting `repo_root` and `proposals_dir` paths.",
      "calls": [],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.781296+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "f42bed7d1ba05e6fe8a2f84e7c2c517156ba700333341d9b93c6776c30aed2b1"
    },
    "src/system/governance/checks/proposal_checks.py::_proposal_paths": {
      "key": "src/system/governance/checks/proposal_checks.py::_proposal_paths",
      "name": "_proposal_paths",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Return all cr-* proposals (both YAML and JSON).",
      "docstring": "Return all cr-* proposals (both YAML and JSON).",
      "calls": [
        "exists",
        "glob",
        "list",
        "sorted"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-13T19:16:34.782216+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "45acc357733e03d9acffc43a6324d7c82493c1675a37c38efc6c2854eb7ef773"
    },
    "src/system/governance/checks/proposal_checks.py::_load_proposal": {
      "key": "src/system/governance/checks/proposal_checks.py::_load_proposal",
      "name": "_load_proposal",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Load proposal preserving its format.",
      "docstring": "Load proposal preserving its format.",
      "calls": [
        "ValueError",
        "loads",
        "lower",
        "read_text",
        "safe_load"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "last_updated": "2025-08-13T19:16:34.783320+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "5c4a272b51f2ef2f388a2c0840c6e0fea194cf5ec94855341d4dc470197a96c2"
    },
    "src/system/governance/checks/proposal_checks.py::_expected_token_for_content": {
      "key": "src/system/governance/checks/proposal_checks.py::_expected_token_for_content",
      "name": "_expected_token_for_content",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Mirror admin token format: 'core-proposal-v1:<sha256hex>'.",
      "docstring": "Mirror admin token format: 'core-proposal-v1:<sha256hex>'.",
      "calls": [
        "encode",
        "hexdigest",
        "sha256"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "content"
      ],
      "last_updated": "2025-08-13T19:16:34.784125+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "618f4bc1a467b5afc49985379fdcd400846ec57967c9521639469ae8644eecc8"
    },
    "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema": {
      "key": "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema",
      "name": "check_proposal_files_match_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_schema",
      "intent": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "docstring": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "exists",
        "iter_errors",
        "join",
        "list",
        "load_schema",
        "relative_to",
        "str"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.786460+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "569b864bc65c9f4ba49206c8705e0651883c76d32c90a279d7d08d658e4a4eb6"
    },
    "src/system/governance/checks/proposal_checks.py::check_signatures_match_content": {
      "key": "src/system/governance/checks/proposal_checks.py::check_signatures_match_content",
      "name": "check_signatures_match_content",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_drift",
      "intent": "Detect content/signature drift:",
      "docstring": "Detect content/signature drift:\n- warn if a proposal has no signatures\n- warn if any signature token does not match the current content",
      "calls": [
        "AuditFinding",
        "_expected_token_for_content",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "get",
        "join",
        "len",
        "relative_to",
        "str"
      ],
      "line_number": 127,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.789197+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "4b1a1687b6ec1981a6921d118a5da303a04249b7f4478eb8dd403e5bfe35c9dd"
    },
    "src/system/governance/checks/proposal_checks.py::list_pending_proposals": {
      "key": "src/system/governance/checks/proposal_checks.py::list_pending_proposals",
      "name": "list_pending_proposals",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_list",
      "intent": "Emit a friendly summary of pending proposals.",
      "docstring": "Emit a friendly summary of pending proposals.",
      "calls": [
        "AuditFinding",
        "_proposal_paths",
        "append",
        "exists",
        "relative_to",
        "str"
      ],
      "line_number": 198,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.790700+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "a9d673c41b327a1adc161a7e5820c6ffacf0b65b7acd6659064f7a72d8dd881e"
    },
    "src/system/governance/checks/architecture_checks.py::ArchitectureChecks": {
      "key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "name": "ArchitectureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for architectural integrity checks.",
      "docstring": "Container for architectural integrity checks.",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.793377+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "3e86306196f142ddf5bcd347356aa6c44d43631e1c9b363ef6a034f3a6929d74"
    },
    "src/system/governance/checks/architecture_checks.py::__init__": {
      "key": "src/system/governance/checks/architecture_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 12,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.796330+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "structural_hash": "474c67c3ad417e92e0a5cfe962deb537f55c550a1fd8b27eca415afbdf6a6986"
    },
    "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication": {
      "key": "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication",
      "name": "check_for_structural_duplication",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.duplication",
      "intent": "Finds symbols with identical structural hashes, violating `dry_by_design`, using content-addressed knowledge graph for accurate duplication detection.",
      "docstring": "Finds symbols with identical structural hashes, violating `dry_by_design`, using content-addressed knowledge graph for accurate duplication detection.",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.798190+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "structural_hash": "a5491626bace384a0a7450b715272d5c098d2f217b9a4c1cc53aec7d372cb36d"
    },
    "src/system/governance/checks/structure_checks.py::StructureChecks": {
      "key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "name": "StructureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for structural constitutional checks.",
      "docstring": "Container for structural constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "items",
        "joinpath",
        "len",
        "list",
        "load_config",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "sorted",
        "split",
        "startswith",
        "validate_manifest_entry",
        "with_suffix"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.807320+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "5a73a9fcdd51ff3ae1d7426c1b0f17c85e28284db3a0302a2f83df2770ee9391"
    },
    "src/system/governance/checks/structure_checks.py::__init__": {
      "key": "src/system/governance/checks/structure_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.817110+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "474c67c3ad417e92e0a5cfe962deb537f55c550a1fd8b27eca415afbdf6a6986"
    },
    "src/system/governance/checks/structure_checks.py::check_project_manifest": {
      "key": "src/system/governance/checks/structure_checks.py::check_project_manifest",
      "name": "check_project_manifest",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.project_manifest",
      "intent": "Validates the integrity of project_manifest.yaml.",
      "docstring": "Validates the integrity of project_manifest.yaml.",
      "calls": [
        "AuditFinding",
        "append"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.818319+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "330055588e86adabc8ecefef8531dd2c828b106982869750b6d678b8e2808a90"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_coverage": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_coverage",
      "name": "check_capability_coverage",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_coverage",
      "intent": "Ensures all required capabilities are implemented.",
      "docstring": "Ensures all required capabilities are implemented.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "set",
        "sorted"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.819792+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "0f0007f98aa1b951bcb9625f47e29c38d7eb241b8b3a27044adfc71cdfc9b872"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_definitions": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_definitions",
      "name": "check_capability_definitions",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_definitions",
      "intent": "Ensures all implemented capabilities are valid.",
      "docstring": "Ensures all implemented capabilities are valid.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "load_config",
        "sorted"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.821568+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "1cb7e76f476b8cc87382eee14d06ffda9869b54aca27a18c92f50722f4942f81"
    },
    "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema": {
      "key": "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema",
      "name": "check_knowledge_graph_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.knowledge_graph_schema",
      "intent": "Validates all knowledge graph symbols against the schema.",
      "docstring": "Validates all knowledge graph symbols against the schema.",
      "calls": [
        "AuditFinding",
        "append",
        "items",
        "len",
        "validate_manifest_entry"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.823178+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "1595abdcfc3a59ec7c1bde58699f35224b13cfbee0cf24df81b4d80e0a435d79"
    },
    "src/system/governance/checks/structure_checks.py::check_domain_integrity": {
      "key": "src/system/governance/checks/structure_checks.py::check_domain_integrity",
      "name": "check_domain_integrity",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.domain_integrity",
      "intent": "Checks for domain mismatches and illegal imports.",
      "docstring": "Checks for domain mismatches and illegal imports.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "joinpath",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "split",
        "startswith",
        "with_suffix"
      ],
      "line_number": 84,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.826498+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "158a997003c23c750115175d143367e3c9539ea143365e34f1d9f4a0ce02f9a3"
    },
    "src/system/governance/checks/health_checks.py::HealthChecks": {
      "key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "name": "HealthChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for codebase health constitutional checks.",
      "docstring": "Container for codebase health constitutional checks.",
      "calls": [
        "AuditFinding",
        "_get_logical_lines_of_code",
        "append",
        "endswith",
        "extend",
        "from_ast",
        "get",
        "items",
        "len",
        "list",
        "load_config",
        "mean",
        "parse",
        "read_text",
        "relative_to",
        "splitlines",
        "startswith",
        "stdev",
        "strip",
        "values"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.832382+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "dc4094cf311674d8302d4193243abbfeeba30d61ddd34811b39f849d9e55a7bb"
    },
    "src/system/governance/checks/health_checks.py::__init__": {
      "key": "src/system/governance/checks/health_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [
        "load_config"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.837980+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "structural_hash": "72e35c9130203912e2a03a46408bf68a845d509cf8563766821f36549693aebb"
    },
    "src/system/governance/checks/health_checks.py::_get_logical_lines_of_code": {
      "key": "src/system/governance/checks/health_checks.py::_get_logical_lines_of_code",
      "name": "_get_logical_lines_of_code",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates the Logical Lines of Code (LLOC), ignoring comments and blank lines.",
      "docstring": "Calculates the Logical Lines of Code (LLOC), ignoring comments and blank lines.",
      "calls": [
        "len",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "self",
        "source_code"
      ],
      "last_updated": "2025-08-13T19:16:34.838831+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "structural_hash": "a790caa3a6ae6c7e8af0b040561f7c4f4dbaf3ac73c80023c67311b7e9f89d70"
    },
    "src/system/governance/checks/health_checks.py::check_codebase_health": {
      "key": "src/system/governance/checks/health_checks.py::check_codebase_health",
      "name": "check_codebase_health",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.codebase_health",
      "intent": "Measures code complexity and atomicity against defined policies.",
      "docstring": "Measures code complexity and atomicity against defined policies.",
      "calls": [
        "AuditFinding",
        "_get_logical_lines_of_code",
        "append",
        "endswith",
        "extend",
        "from_ast",
        "get",
        "items",
        "len",
        "list",
        "mean",
        "parse",
        "read_text",
        "relative_to",
        "stdev",
        "values"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.842175+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "structural_hash": "1b9f38a97bb5dcc7c011930e6868997d140bb0389eb802f332e58c829e06867d"
    },
    "src/system/governance/checks/environment_checks.py::EnvironmentChecks": {
      "key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "name": "EnvironmentChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for environment and runtime configuration checks.",
      "docstring": "Container for environment and runtime configuration checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "load_config"
      ],
      "line_number": 6,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-13T19:16:34.845343+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "b015f829400a7cbb2277000e730b7be820b5242c7bbe211d846422397fd3a34d"
    },
    "src/system/governance/checks/environment_checks.py::__init__": {
      "key": "src/system/governance/checks/environment_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-13T19:16:34.848435+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "structural_hash": "474c67c3ad417e92e0a5cfe962deb537f55c550a1fd8b27eca415afbdf6a6986"
    },
    "src/system/governance/checks/environment_checks.py::check_runtime_environment": {
      "key": "src/system/governance/checks/environment_checks.py::check_runtime_environment",
      "name": "check_runtime_environment",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.environment",
      "intent": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "docstring": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "load_config"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-13T19:16:34.850233+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "structural_hash": "69c78373d6d784751125b189d281ed33c291f8220e1143451a3040940525543f"
    },
    "src/shared/schemas/manifest_validator.py::load_schema": {
      "key": "src/shared/schemas/manifest_validator.py::load_schema",
      "name": "load_schema",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load a JSON schema from the .intent/schemas/ directory.",
      "docstring": "Load a JSON schema from the .intent/schemas/ directory.\n\nArgs:\n    schema_name (str): The filename of the schema (e.g., 'knowledge_graph_entry.schema.json').\n    \nReturns:\n    Dict[str, Any]: The loaded JSON schema.\n    \nRaises:\n    FileNotFoundError: If the schema file is not found.\n    json.JSONDecodeError: If the schema file is not valid JSON.",
      "calls": [
        "FileNotFoundError",
        "JSONDecodeError",
        "exists",
        "load",
        "open"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [
        "schema_name"
      ],
      "last_updated": "2025-08-13T19:16:34.852403+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6e3b8465838bb871ec1cd9f626c92298765c571cba61170572d50151c662f9be"
    },
    "src/shared/schemas/manifest_validator.py::validate_manifest_entry": {
      "key": "src/shared/schemas/manifest_validator.py::validate_manifest_entry",
      "name": "validate_manifest_entry",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Validate a single manifest entry against a schema.",
      "docstring": "Validate a single manifest entry against a schema.\n\nArgs:\n    entry: The dictionary representing a single function/class entry.\n    schema_name: The filename of the schema to validate against.\n    \nReturns:\n    A tuple of (is_valid: bool, list_of_error_messages: List[str]).",
      "calls": [
        "Draft7Validator",
        "append",
        "iter_errors",
        "join",
        "load_schema",
        "str"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "entry",
        "schema_name"
      ],
      "last_updated": "2025-08-13T19:16:34.854016+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "df3df9d690f9e5aebdbffadea221df68a0ebfd500aaafa86a2205e3e452dedd2"
    },
    "src/shared/utils/manifest_aggregator.py::aggregate_manifests": {
      "key": "src/shared/utils/manifest_aggregator.py::aggregate_manifests",
      "name": "aggregate_manifests",
      "type": "FunctionDef",
      "file": "src/shared/utils/manifest_aggregator.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds all domain-specific manifest.yaml files and merges them.",
      "docstring": "Finds all domain-specific manifest.yaml files and merges them.\n\nThis function is the heart of the modular manifest system. It reads the\nsource structure to find all domains, then searches for a manifest in each\ndomain's directory, aggregating their contents.\n\nArgs:\n    repo_root (Path): The absolute path to the repository root.\n\nReturns:\n    A dictionary representing the aggregated manifest, primarily focused\n    on compiling a unified list of 'required_capabilities'.",
      "calls": [
        "debug",
        "error",
        "exists",
        "extend",
        "get",
        "info",
        "list",
        "read_text",
        "safe_load",
        "set",
        "sorted"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "repo_root"
      ],
      "last_updated": "2025-08-13T19:16:34.857531+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3424b54f3633ba0a128f765512d3694b531ca5dc1d7218058d3dfedb8b9e5880"
    },
    "src/shared/utils/import_scanner.py::scan_imports_for_file": {
      "key": "src/shared/utils/import_scanner.py::scan_imports_for_file",
      "name": "scan_imports_for_file",
      "type": "FunctionDef",
      "file": "src/shared/utils/import_scanner.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Parse a Python file and extract all imported module paths.",
      "docstring": "Parse a Python file and extract all imported module paths.\n\nArgs:\n    file_path (Path): Path to the file.\n\nReturns:\n    List[str]: List of imported module paths.",
      "calls": [
        "append",
        "isinstance",
        "parse",
        "read_text",
        "walk",
        "warning"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-13T19:16:34.859649+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "42bb5532dfbc0b03134979db387ac69dab213de0539724e125ec4cdb88080722"
    },
    "src/shared/utils/parsing.py::parse_write_blocks": {
      "key": "src/shared/utils/parsing.py::parse_write_blocks",
      "name": "parse_write_blocks",
      "type": "FunctionDef",
      "file": "src/shared/utils/parsing.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Extracts all [[write:...]] blocks from LLM output.",
      "docstring": "Extracts all [[write:...]] blocks from LLM output.\n\nThis function is robust and handles both [[end]] and [[/write]] as valid terminators\nto accommodate different LLM habits.\n\nArgs:\n    llm_output (str): The raw text output from a language model.\n\nReturns:\n    A dictionary mapping file paths to their corresponding code content.",
      "calls": [
        "findall",
        "strip"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [
        "llm_output"
      ],
      "last_updated": "2025-08-13T19:16:34.860880+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "37291692a6c893a9df4f553fd55414349bd2ec0142680181140f7d6990e94a74"
    }
  }
}