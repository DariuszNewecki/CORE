{
  "schema_version": "2.0.0",
  "metadata": {
    "files_scanned": 33,
    "total_symbols": 157,
    "timestamp_utc": "2025-08-05T20:05:07.018677+00:00"
  },
  "symbols": {
    "src/system/admin_cli.py::_generate_approval_token": {
      "key": "src/system/admin_cli.py::_generate_approval_token",
      "name": "_generate_approval_token",
      "type": "FunctionDef",
      "file": "src/system/admin_cli.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Creates a unique, deterministic token for proposal content using a secure hash.",
      "docstring": "Creates a unique, deterministic token for proposal content using a secure hash.",
      "calls": [
        "Hash",
        "SHA256",
        "encode",
        "finalize",
        "hex",
        "update"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [
        "proposal_content"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.876598+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/admin_cli.py::_load_private_key": {
      "key": "src/system/admin_cli.py::_load_private_key",
      "name": "_load_private_key",
      "type": "FunctionDef",
      "file": "src/system/admin_cli.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Loads the user's private key from the secure storage location.",
      "docstring": "Loads the user's private key from the secure storage location.",
      "calls": [
        "error",
        "exists",
        "exit",
        "load_pem_private_key",
        "open",
        "read"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.877055+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/admin_cli.py::keygen": {
      "key": "src/system/admin_cli.py::keygen",
      "name": "keygen",
      "type": "FunctionDef",
      "file": "src/system/admin_cli.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Generates a new cryptographic key pair for a user.",
      "docstring": "Generates a new cryptographic key pair for a user.",
      "calls": [
        "NoEncryption",
        "chmod",
        "decode",
        "dumps",
        "exists",
        "generate",
        "info",
        "input",
        "lower",
        "mkdir",
        "open",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "str",
        "strip",
        "warning",
        "write"
      ],
      "line_number": 61,
      "is_async": false,
      "parameters": [
        "identity"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.877713+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/admin_cli.py::sign_proposal": {
      "key": "src/system/admin_cli.py::sign_proposal",
      "name": "sign_proposal",
      "type": "FunctionDef",
      "file": "src/system/admin_cli.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Signs a proposal and adds the signature to the proposal file.",
      "docstring": "Signs a proposal and adds the signature to the proposal file.",
      "calls": [
        "_generate_approval_token",
        "_load_private_key",
        "any",
        "append",
        "b64encode",
        "decode",
        "dump",
        "encode",
        "error",
        "exists",
        "get",
        "info",
        "input",
        "isoformat",
        "load_config",
        "open",
        "sign",
        "strip",
        "utcnow",
        "warning"
      ],
      "line_number": 101,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.878678+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/admin_cli.py::list_proposals": {
      "key": "src/system/admin_cli.py::list_proposals",
      "name": "list_proposals",
      "type": "FunctionDef",
      "file": "src/system/admin_cli.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Lists all pending constitutional amendment proposals.",
      "docstring": "Lists all pending constitutional amendment proposals.",
      "calls": [
        "any",
        "endswith",
        "get",
        "glob",
        "info",
        "len",
        "list",
        "load_config",
        "mkdir",
        "sorted"
      ],
      "line_number": 141,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.879665+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/admin_cli.py::_archive_rollback_plan": {
      "key": "src/system/admin_cli.py::_archive_rollback_plan",
      "name": "_archive_rollback_plan",
      "type": "FunctionDef",
      "file": "src/system/admin_cli.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Saves the rollback plan to a dedicated archive.",
      "docstring": "Saves the rollback plan to a dedicated archive.",
      "calls": [
        "dump",
        "get",
        "info",
        "mkdir",
        "open",
        "strftime",
        "utcnow"
      ],
      "line_number": 169,
      "is_async": false,
      "parameters": [
        "proposal_name",
        "proposal"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.880415+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/admin_cli.py::approve_proposal": {
      "key": "src/system/admin_cli.py::approve_proposal",
      "name": "approve_proposal",
      "type": "FunctionDef",
      "file": "src/system/admin_cli.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Approves and applies a proposal after successful canary check and signature verification.",
      "docstring": "Approves and applies a proposal after successful canary check and signature verification.",
      "calls": [
        "ConstitutionalAuditor",
        "Path",
        "TemporaryDirectory",
        "_archive_rollback_plan",
        "_generate_approval_token",
        "any",
        "b64decode",
        "copytree",
        "encode",
        "endswith",
        "error",
        "exists",
        "get",
        "info",
        "load_config",
        "load_pem_public_key",
        "mkdir",
        "run_full_audit",
        "unlink",
        "verify",
        "warning",
        "write_text"
      ],
      "line_number": 186,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.881591+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/admin_cli.py::main": {
      "key": "src/system/admin_cli.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/admin_cli.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Main entry point for the admin CLI.",
      "docstring": "Main entry point for the admin CLI.",
      "calls": [
        "approve_proposal",
        "error",
        "exit",
        "keygen",
        "len",
        "list_proposals",
        "print",
        "sign_proposal"
      ],
      "line_number": 268,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-05T20:05:06.882820+00:00",
      "is_class": false,
      "base_classes": []
    },
    "src/core/clients.py::BaseLLMClient": {
      "key": "src/core/clients.py::BaseLLMClient",
      "name": "BaseLLMClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Base class for LLM clients, handling common request logic for Chat APIs.",
      "docstring": "Base class for LLM clients, handling common request logic for Chat APIs.\nProvides shared initialization and error handling for all LLM clients.",
      "calls": [
        "ValueError",
        "debug",
        "endswith",
        "error",
        "json",
        "post",
        "raise_for_status",
        "rstrip"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "base_class",
      "last_updated": "2025-08-05T20:05:06.884941+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "framework_base_class"
    },
    "src/core/clients.py::__init__": {
      "key": "src/core/clients.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize the GeneratorClient using environment variables.",
      "docstring": "Initialize the GeneratorClient using environment variables.",
      "calls": [
        "__init__",
        "getenv",
        "info",
        "super"
      ],
      "line_number": 119,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.887826+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/clients.py::GeneratorClient"
    },
    "src/core/clients.py::make_request": {
      "key": "src/core/clients.py::make_request",
      "name": "make_request",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt to the configured Chat Completions API.",
      "docstring": "Sends a prompt to the configured Chat Completions API.\n\nArgs:\n    prompt (str): The prompt to send to the LLM. It will be wrapped as a\n        'user' message.\n    user_id (str): Optional identifier for the requester (used by some APIs\n        for moderation).\n\nReturns:\n    str: The text content from the LLM's response, or an error message.\n\nRaises:\n    requests.HTTPError: If the API returns a non-200 status code.",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.886034+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/clients.py::BaseLLMClient"
    },
    "src/core/clients.py::OrchestratorClient": {
      "key": "src/core/clients.py::OrchestratorClient",
      "name": "OrchestratorClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Client for the Orchestrator LLM (e.g., GPT-4, Claude 3).",
      "docstring": "Client for the Orchestrator LLM (e.g., GPT-4, Claude 3).\nResponsible for high-level planning and intent interpretation.",
      "calls": [
        "__init__",
        "getenv",
        "info",
        "super"
      ],
      "line_number": 95,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.886653+00:00",
      "is_class": true,
      "base_classes": [
        "BaseLLMClient"
      ],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/clients.py::GeneratorClient": {
      "key": "src/core/clients.py::GeneratorClient",
      "name": "GeneratorClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Client for the Generator LLM (e.g., a specialized coding model).",
      "docstring": "Client for the Generator LLM (e.g., a specialized coding model).\nResponsible for code generation and detailed implementation.",
      "calls": [
        "__init__",
        "getenv",
        "info",
        "super"
      ],
      "line_number": 113,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.887469+00:00",
      "is_class": true,
      "base_classes": [
        "BaseLLMClient"
      ],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/validation_pipeline.py::_load_safety_policies": {
      "key": "src/core/validation_pipeline.py::_load_safety_policies",
      "name": "_load_safety_policies",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and caches the safety policies from the .intent directory.",
      "docstring": "Loads and caches the safety policies from the .intent directory.",
      "calls": [
        "get",
        "get_repo_root",
        "load_config"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.890799+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/validation_pipeline.py::_get_full_attribute_name": {
      "key": "src/core/validation_pipeline.py::_get_full_attribute_name",
      "name": "_get_full_attribute_name",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "docstring": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "calls": [
        "insert",
        "isinstance",
        "join"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.891245+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/validation_pipeline.py::_find_dangerous_patterns": {
      "key": "src/core/validation_pipeline.py::_find_dangerous_patterns",
      "name": "_find_dangerous_patterns",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans the AST for calls to functions and imports forbidden by safety policies.",
      "docstring": "Scans the AST for calls to functions and imports forbidden by safety policies.",
      "calls": [
        "Path",
        "_get_full_attribute_name",
        "_load_safety_policies",
        "any",
        "append",
        "get",
        "isinstance",
        "match",
        "replace",
        "set",
        "split",
        "update",
        "walk"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [
        "tree",
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.892071+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/validation_pipeline.py::_check_semantics": {
      "key": "src/core/validation_pipeline.py::_check_semantics",
      "name": "_check_semantics",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "semantic_validation",
      "intent": "Runs all policy-aware semantic checks on a string of Python code.",
      "docstring": "Runs all policy-aware semantic checks on a string of Python code.",
      "calls": [
        "_find_dangerous_patterns",
        "parse"
      ],
      "line_number": 86,
      "is_async": false,
      "parameters": [
        "code",
        "file_path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.892940+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation"
    },
    "src/core/validation_pipeline.py::_validate_python_code": {
      "key": "src/core/validation_pipeline.py::_validate_python_code",
      "name": "_validate_python_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Runs the full validation suite for Python code: format, lint, syntax, and semantics.",
      "docstring": "Runs the full validation suite for Python code: format, lint, syntax, and semantics.",
      "calls": [
        "_check_semantics",
        "append",
        "check_syntax",
        "extend",
        "fix_and_lint_code_with_ruff",
        "format_code_with_black"
      ],
      "line_number": 94,
      "is_async": false,
      "parameters": [
        "path_hint",
        "code"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.893541+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/validation_pipeline.py::_validate_yaml": {
      "key": "src/core/validation_pipeline.py::_validate_yaml",
      "name": "_validate_yaml",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Runs validation steps specific to YAML files.",
      "docstring": "Runs validation steps specific to YAML files.",
      "calls": [
        "append",
        "safe_load"
      ],
      "line_number": 118,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.894129+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/validation_pipeline.py::_get_file_classification": {
      "key": "src/core/validation_pipeline.py::_get_file_classification",
      "name": "_get_file_classification",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Determines the file type based on its extension.",
      "docstring": "Determines the file type based on its extension.",
      "calls": [
        "Path",
        "lower"
      ],
      "line_number": 128,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.894595+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/validation_pipeline.py::validate_code": {
      "key": "src/core/validation_pipeline.py::validate_code",
      "name": "validate_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "code_quality_analysis",
      "intent": "The main entry point for validation. It determines the file type",
      "docstring": "The main entry point for validation. It determines the file type\nand routes it to the appropriate, specific validation function.",
      "calls": [
        "_get_file_classification",
        "_validate_python_code",
        "_validate_yaml",
        "debug"
      ],
      "line_number": 137,
      "is_async": false,
      "parameters": [
        "file_path",
        "code",
        "quiet"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.895069+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation"
    },
    "src/core/git_service.py::GitService": {
      "key": "src/core/git_service.py::GitService",
      "name": "GitService",
      "type": "ClassDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Encapsulates Git operations for the CORE system.",
      "docstring": "Encapsulates Git operations for the CORE system.\nEnsures all file changes are committed with traceable messages.",
      "calls": [
        "Path",
        "RuntimeError",
        "ValueError",
        "_run_command",
        "debug",
        "error",
        "info",
        "is_dir",
        "is_git_repo",
        "join",
        "resolve",
        "run",
        "strip",
        "warning"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.896923+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/git_service.py::__init__": {
      "key": "src/core/git_service.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize GitService with repository root.",
      "docstring": "Initialize GitService with repository root.\n\nArgs:\n    repo_path (str): Path to the Git repository.",
      "calls": [
        "Path",
        "ValueError",
        "info",
        "is_git_repo",
        "resolve"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.897296+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/git_service.py::GitService"
    },
    "src/core/git_service.py::_run_command": {
      "key": "src/core/git_service.py::_run_command",
      "name": "_run_command",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "change_safety_enforcement",
      "intent": "Run a Git command and return stdout.",
      "docstring": "Run a Git command and return stdout.\n\nArgs:\n    command (list): Git command as a list (e.g., ['git', 'status']).\n\nReturns:\n    str: Command output, or raises RuntimeError on failure.",
      "calls": [
        "RuntimeError",
        "debug",
        "error",
        "join",
        "run",
        "strip"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "self",
        "command"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.897792+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/core/git_service.py::GitService"
    },
    "src/core/git_service.py::add": {
      "key": "src/core/git_service.py::add",
      "name": "add",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stage a file or directory for commit.",
      "docstring": "Stage a file or directory for commit.\n\nArgs:\n    file_path (str): Path to stage. Defaults to '.' (all changes).",
      "calls": [
        "ValueError",
        "_run_command",
        "resolve"
      ],
      "line_number": 61,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.898292+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/git_service.py::GitService"
    },
    "src/core/git_service.py::commit": {
      "key": "src/core/git_service.py::commit",
      "name": "commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Commit staged changes with a message.",
      "docstring": "Commit staged changes with a message.\n\nArgs:\n    message (str): Commit message explaining the change.",
      "calls": [
        "_run_command",
        "info"
      ],
      "line_number": 73,
      "is_async": false,
      "parameters": [
        "self",
        "message"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.898761+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/git_service.py::GitService"
    },
    "src/core/git_service.py::is_git_repo": {
      "key": "src/core/git_service.py::is_git_repo",
      "name": "is_git_repo",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Check if the configured path is a valid Git repository.",
      "docstring": "Check if the configured path is a valid Git repository.\n\nReturns:\n    bool: True if it's a Git repo, False otherwise.",
      "calls": [
        "is_dir"
      ],
      "line_number": 86,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.899134+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/git_service.py::GitService"
    },
    "src/core/git_service.py::get_current_commit": {
      "key": "src/core/git_service.py::get_current_commit",
      "name": "get_current_commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Gets the full SHA hash of the current commit (HEAD).",
      "docstring": "Gets the full SHA hash of the current commit (HEAD).",
      "calls": [
        "_run_command"
      ],
      "line_number": 96,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.899503+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/git_service.py::GitService"
    },
    "src/core/git_service.py::reset_to_commit": {
      "key": "src/core/git_service.py::reset_to_commit",
      "name": "reset_to_commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Performs a hard reset to a specific commit hash.",
      "docstring": "Performs a hard reset to a specific commit hash.\nThis will discard all current changes.",
      "calls": [
        "_run_command",
        "info",
        "warning"
      ],
      "line_number": 102,
      "is_async": false,
      "parameters": [
        "self",
        "commit_hash"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.899878+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/git_service.py::GitService"
    },
    "src/core/syntax_checker.py::check_syntax": {
      "key": "src/core/syntax_checker.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/core/syntax_checker.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "syntax_validation",
      "intent": "Checks whether the given code has valid syntax.",
      "docstring": "Checks whether the given code has valid syntax.\n\nArgs:\n    file_path (str): File name (used to detect .py files)\n    code (str): Source code string\n\nReturns:\n    (is_valid: bool, message: str)",
      "calls": [
        "endswith",
        "parse",
        "strip"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "file_path",
        "code"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.900745+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation"
    },
    "src/core/black_formatter.py::format_code_with_black": {
      "key": "src/core/black_formatter.py::format_code_with_black",
      "name": "format_code_with_black",
      "type": "FunctionDef",
      "file": "src/core/black_formatter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Attempts to format the given Python code using Black.",
      "docstring": "Attempts to format the given Python code using Black.\n\nReturns:\n    Tuple:\n        - formatted_code (str) if successful, else None\n        - error_message (str) if failed, else None",
      "calls": [
        "FileMode",
        "format_str",
        "str"
      ],
      "line_number": 10,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.901539+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/test_runner.py::run_tests": {
      "key": "src/core/test_runner.py::run_tests",
      "name": "run_tests",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "test_execution",
      "intent": "Executes pytest on the tests/ directory and returns a structured result.",
      "docstring": "Executes pytest on the tests/ directory and returns a structured result.\nThis function captures stdout, stderr, and the exit code, providing a\ncomprehensive summary of the test run for agents to act upon.",
      "calls": [
        "Path",
        "_log_test_result",
        "_store_failure_if_any",
        "_summarize",
        "error",
        "getenv",
        "info",
        "int",
        "isoformat",
        "resolve",
        "run",
        "str",
        "strip",
        "utcnow",
        "warning"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "silent"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.903904+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation"
    },
    "src/core/test_runner.py::_summarize": {
      "key": "src/core/test_runner.py::_summarize",
      "name": "_summarize",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Parses pytest output to find the final summary line.",
      "docstring": "Parses pytest output to find the final summary line.",
      "calls": [
        "reversed",
        "splitlines",
        "strip"
      ],
      "line_number": 85,
      "is_async": false,
      "parameters": [
        "output"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.904692+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/test_runner.py::_log_test_result": {
      "key": "src/core/test_runner.py::_log_test_result",
      "name": "_log_test_result",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Appends a JSON record of a test run to the persistent log file.",
      "docstring": "Appends a JSON record of a test run to the persistent log file.",
      "calls": [
        "dumps",
        "open",
        "warning",
        "write"
      ],
      "line_number": 93,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.905116+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/test_runner.py::_store_failure_if_any": {
      "key": "src/core/test_runner.py::_store_failure_if_any",
      "name": "_store_failure_if_any",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Saves the details of a failed test run to a dedicated file for easy access.",
      "docstring": "Saves the details of a failed test run to a dedicated file for easy access.",
      "calls": [
        "dump",
        "exists",
        "get",
        "open",
        "remove",
        "warning"
      ],
      "line_number": 101,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.905649+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/main.py::lifespan": {
      "key": "src/core/main.py::lifespan",
      "name": "lifespan",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "docstring": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "calls": [
        "FileHandler",
        "GeneratorClient",
        "GitService",
        "IntentGuard",
        "OrchestratorClient",
        "PlannerAgent",
        "info",
        "introspection",
        "warning"
      ],
      "line_number": 34,
      "is_async": true,
      "parameters": [
        "app"
      ],
      "entry_point_type": "context_manager",
      "last_updated": "2025-08-05T20:05:06.907415+00:00",
      "is_class": false,
      "base_classes": []
    },
    "src/core/main.py::execute_goal": {
      "key": "src/core/main.py::execute_goal",
      "name": "execute_goal",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Execute a high-level goal by planning and generating code.",
      "docstring": "Execute a high-level goal by planning and generating code.",
      "calls": [
        "HTTPException",
        "JSONResponse",
        "create_execution_plan",
        "error",
        "execute_plan",
        "get",
        "info",
        "post",
        "str"
      ],
      "line_number": 67,
      "is_async": true,
      "parameters": [
        "request_data",
        "request"
      ],
      "entry_point_type": "fastapi_route_post",
      "last_updated": "2025-08-05T20:05:06.908113+00:00",
      "is_class": false,
      "base_classes": []
    },
    "src/core/main.py::root": {
      "key": "src/core/main.py::root",
      "name": "root",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Root endpoint \u2014 returns system status.",
      "docstring": "Root endpoint \u2014 returns system status.",
      "calls": [
        "get"
      ],
      "line_number": 95,
      "is_async": true,
      "parameters": [],
      "entry_point_type": "fastapi_route_get",
      "last_updated": "2025-08-05T20:05:06.908707+00:00",
      "is_class": false,
      "base_classes": []
    },
    "src/core/prompt_pipeline.py::PromptPipeline": {
      "key": "src/core/prompt_pipeline.py::PromptPipeline",
      "name": "PromptPipeline",
      "type": "ClassDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].",
      "docstring": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].\nEnsures the LLM receives full context before generating code.",
      "calls": [
        "Path",
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest",
        "compile",
        "dump",
        "exists",
        "get",
        "group",
        "is_file",
        "isinstance",
        "read_text",
        "resolve",
        "safe_load",
        "split",
        "str",
        "strip",
        "sub"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.911913+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/prompt_pipeline.py::__init__": {
      "key": "src/core/prompt_pipeline.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize PromptPipeline with repository root.",
      "docstring": "Initialize PromptPipeline with repository root.\n\nArgs:\n    repo_path (Path): Root path of the repository.",
      "calls": [
        "Path",
        "compile",
        "resolve"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.912306+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline"
    },
    "src/core/prompt_pipeline.py::_replace_context_match": {
      "key": "src/core/prompt_pipeline.py::_replace_context_match",
      "name": "_replace_context_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[context:...]] regex match with file content or an error message.",
      "docstring": "Dynamically replaces a [[context:...]] regex match with file content or an error message.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "str",
        "strip"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.912799+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline"
    },
    "src/core/prompt_pipeline.py::_inject_context": {
      "key": "src/core/prompt_pipeline.py::_inject_context",
      "name": "_inject_context",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[context:file.py]] directives with actual file content.",
      "docstring": "Replaces [[context:file.py]] directives with actual file content.",
      "calls": [
        "sub"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.913218+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline"
    },
    "src/core/prompt_pipeline.py::_replace_include_match": {
      "key": "src/core/prompt_pipeline.py::_replace_include_match",
      "name": "_replace_include_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "docstring": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "str",
        "strip"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.913670+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline"
    },
    "src/core/prompt_pipeline.py::_inject_includes": {
      "key": "src/core/prompt_pipeline.py::_inject_includes",
      "name": "_inject_includes",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[include:file.py]] directives with file content.",
      "docstring": "Replaces [[include:file.py]] directives with file content.",
      "calls": [
        "sub"
      ],
      "line_number": 67,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.914094+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline"
    },
    "src/core/prompt_pipeline.py::_replace_analysis_match": {
      "key": "src/core/prompt_pipeline.py::_replace_analysis_match",
      "name": "_replace_analysis_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message.",
      "docstring": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message.",
      "calls": [
        "group",
        "strip"
      ],
      "line_number": 71,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.914471+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline"
    },
    "src/core/prompt_pipeline.py::_inject_analysis": {
      "key": "src/core/prompt_pipeline.py::_inject_analysis",
      "name": "_inject_analysis",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[analysis:file.py]] directives with code analysis.",
      "docstring": "Replaces [[analysis:file.py]] directives with code analysis.",
      "calls": [
        "sub"
      ],
      "line_number": 77,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.914820+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline"
    },
    "src/core/prompt_pipeline.py::_replace_manifest_match": {
      "key": "src/core/prompt_pipeline.py::_replace_manifest_match",
      "name": "_replace_manifest_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "docstring": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "calls": [
        "dump",
        "exists",
        "get",
        "group",
        "isinstance",
        "read_text",
        "safe_load",
        "split",
        "str",
        "strip"
      ],
      "line_number": 81,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.915345+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline"
    },
    "src/core/prompt_pipeline.py::_inject_manifest": {
      "key": "src/core/prompt_pipeline.py::_inject_manifest",
      "name": "_inject_manifest",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "docstring": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "calls": [
        "sub"
      ],
      "line_number": 107,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.915870+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline"
    },
    "src/core/prompt_pipeline.py::process": {
      "key": "src/core/prompt_pipeline.py::process",
      "name": "process",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "prompt_interpretation",
      "intent": "Processes the full prompt by sequentially resolving all directives.",
      "docstring": "Processes the full prompt by sequentially resolving all directives.\nThis is the main entry point for prompt enrichment.",
      "calls": [
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest"
      ],
      "line_number": 112,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.916242+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline"
    },
    "src/core/capabilities.py::introspection": {
      "key": "src/core/capabilities.py::introspection",
      "name": "introspection",
      "type": "FunctionDef",
      "file": "src/core/capabilities.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "introspection",
      "intent": "Runs a full self-analysis cycle to inspect system structure and health.",
      "docstring": "Runs a full self-analysis cycle to inspect system structure and health.\nThis orchestrates the execution of the system's own introspection tools\nas separate, governed processes.",
      "calls": [
        "Path",
        "debug",
        "error",
        "info",
        "resolve",
        "run",
        "warning"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-05T20:05:06.917800+00:00",
      "is_class": false,
      "base_classes": []
    },
    "src/core/ruff_linter.py::fix_and_lint_code_with_ruff": {
      "key": "src/core/ruff_linter.py::fix_and_lint_code_with_ruff",
      "name": "fix_and_lint_code_with_ruff",
      "type": "FunctionDef",
      "file": "src/core/ruff_linter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Fix and lint the provided Python code using Ruff.",
      "docstring": "Fix and lint the provided Python code using Ruff.\n\nArgs:\n    code (str): Source code to fix and lint.\n    display_filename (str): Optional display name (e.g., intended file path).\n\nReturns:\n    (is_clean: bool, message: str, fixed_code: str)",
      "calls": [
        "NamedTemporaryFile",
        "exists",
        "open",
        "read",
        "remove",
        "replace",
        "run",
        "strip",
        "write"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "code",
        "display_filename"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.919322+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/file_handler.py::FileHandler": {
      "key": "src/core/file_handler.py::FileHandler",
      "name": "FileHandler",
      "type": "ClassDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Central class for safe, auditable file operations in CORE.",
      "docstring": "Central class for safe, auditable file operations in CORE.\nAll writes are staged first and require confirmation. Validation is handled\nby the calling agent via the validation_pipeline.",
      "calls": [
        "Path",
        "ValueError",
        "as_posix",
        "dumps",
        "exists",
        "info",
        "is_dir",
        "is_relative_to",
        "isoformat",
        "mkdir",
        "now",
        "pop",
        "resolve",
        "str",
        "unlink",
        "uuid4",
        "write_text"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.921627+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/file_handler.py::__init__": {
      "key": "src/core/file_handler.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize FileHandler with repository root.",
      "docstring": "Initialize FileHandler with repository root.",
      "calls": [
        "Path",
        "ValueError",
        "is_dir",
        "resolve"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.921978+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/file_handler.py::FileHandler"
    },
    "src/core/file_handler.py::add_pending_write": {
      "key": "src/core/file_handler.py::add_pending_write",
      "name": "add_pending_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stages a pending write operation for later confirmation.",
      "docstring": "Stages a pending write operation for later confirmation.",
      "calls": [
        "Path",
        "as_posix",
        "dumps",
        "isoformat",
        "now",
        "str",
        "uuid4",
        "write_text"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "suggested_path",
        "code"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.922477+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/file_handler.py::FileHandler"
    },
    "src/core/file_handler.py::confirm_write": {
      "key": "src/core/file_handler.py::confirm_write",
      "name": "confirm_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "docstring": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "calls": [
        "ValueError",
        "dumps",
        "exists",
        "info",
        "is_relative_to",
        "mkdir",
        "pop",
        "resolve",
        "str",
        "unlink",
        "write_text"
      ],
      "line_number": 67,
      "is_async": false,
      "parameters": [
        "self",
        "pending_id"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.923170+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/file_handler.py::FileHandler"
    },
    "src/core/intent_model.py::IntentModel": {
      "key": "src/core/intent_model.py::IntentModel",
      "name": "IntentModel",
      "type": "ClassDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and provides an queryable interface to the source code structure",
      "docstring": "Loads and provides an queryable interface to the source code structure\ndefined in .intent/knowledge/source_structure.yaml.",
      "calls": [
        "FileNotFoundError",
        "Path",
        "ValueError",
        "_load_structure",
        "exists",
        "get",
        "isinstance",
        "items",
        "len",
        "read_text",
        "resolve",
        "safe_load",
        "sorted"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.925006+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/core/intent_model.py::__init__": {
      "key": "src/core/intent_model.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initializes the model by loading the source structure definition.",
      "docstring": "Initializes the model by loading the source structure definition.\n\nArgs:\n    repo_root (Optional[Path]): The root of the repository. Inferred if not provided.",
      "calls": [
        "Path",
        "_load_structure",
        "resolve"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.925417+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/intent_model.py::IntentModel"
    },
    "src/core/intent_model.py::_load_structure": {
      "key": "src/core/intent_model.py::_load_structure",
      "name": "_load_structure",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load the domain structure from .intent/knowledge/source_structure.yaml.",
      "docstring": "Load the domain structure from .intent/knowledge/source_structure.yaml.\n\nReturns:\n    Dict[str, dict]: Mapping of domain names to metadata (path, permissions, etc.).",
      "calls": [
        "FileNotFoundError",
        "ValueError",
        "exists",
        "isinstance",
        "read_text",
        "safe_load"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.925902+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_model.py::IntentModel"
    },
    "src/core/intent_model.py::resolve_domain_for_path": {
      "key": "src/core/intent_model.py::resolve_domain_for_path",
      "name": "resolve_domain_for_path",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Given an absolute or relative path, determine which domain it belongs to.",
      "docstring": "Given an absolute or relative path, determine which domain it belongs to.\nPrefers deeper (more specific) paths over shorter ones.",
      "calls": [
        "items",
        "len",
        "resolve",
        "sorted"
      ],
      "line_number": 54,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.926477+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_model.py::IntentModel"
    },
    "src/core/intent_model.py::get_domain_permissions": {
      "key": "src/core/intent_model.py::get_domain_permissions",
      "name": "get_domain_permissions",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Return a list of allowed domains that the given domain can import from.",
      "docstring": "Return a list of allowed domains that the given domain can import from.\n\nArgs:\n    domain (str): The domain to query.\n\nReturns:\n    List[str]: List of allowed domain names, or empty list if not defined.",
      "calls": [
        "get",
        "isinstance"
      ],
      "line_number": 75,
      "is_async": false,
      "parameters": [
        "self",
        "domain"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.926979+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_model.py::IntentModel"
    },
    "src/core/intent_guard.py::IntentGuard": {
      "key": "src/core/intent_guard.py::IntentGuard",
      "name": "IntentGuard",
      "type": "ClassDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "intent_guarding",
      "intent": "Central enforcement engine for CORE's safety and governance policies.",
      "docstring": "Central enforcement engine for CORE's safety and governance policies.\nEnsures all proposed file changes comply with declared rules and classifications.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "append",
        "exists",
        "extend",
        "get",
        "glob",
        "info",
        "is_dir",
        "isinstance",
        "len",
        "list",
        "load_config",
        "loads",
        "read_text",
        "resolve",
        "sorted",
        "values"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.928789+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation"
    },
    "src/core/intent_guard.py::__init__": {
      "key": "src/core/intent_guard.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize IntentGuard with repository path and load all policies.",
      "docstring": "Initialize IntentGuard with repository path and load all policies.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "info",
        "len",
        "resolve"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.929301+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard"
    },
    "src/core/intent_guard.py::_load_policies": {
      "key": "src/core/intent_guard.py::_load_policies",
      "name": "_load_policies",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load rules from all YAML files in .intent/policies/.",
      "docstring": "Load rules from all YAML files in .intent/policies/.",
      "calls": [
        "extend",
        "glob",
        "is_dir",
        "isinstance",
        "load_config"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.929843+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard"
    },
    "src/core/intent_guard.py::_load_source_manifest": {
      "key": "src/core/intent_guard.py::_load_source_manifest",
      "name": "_load_source_manifest",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load the list of all known source files from the knowledge graph.",
      "docstring": "Load the list of all known source files from the knowledge graph.",
      "calls": [
        "exists",
        "get",
        "list",
        "loads",
        "read_text",
        "sorted",
        "values"
      ],
      "line_number": 51,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.930345+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard"
    },
    "src/core/intent_guard.py::check_transaction": {
      "key": "src/core/intent_guard.py::check_transaction",
      "name": "check_transaction",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "change_safety_enforcement",
      "intent": "Check if a proposed set of file changes complies with all active rules.",
      "docstring": "Check if a proposed set of file changes complies with all active rules.\nThis is the primary enforcement point for constitutional integrity.",
      "calls": [
        "Path",
        "append",
        "resolve"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [
        "self",
        "proposed_paths"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.930866+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard"
    },
    "src/core/self_correction_engine.py::attempt_correction": {
      "key": "src/core/self_correction_engine.py::attempt_correction",
      "name": "attempt_correction",
      "type": "FunctionDef",
      "file": "src/core/self_correction_engine.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "self_correction",
      "intent": "Attempts to fix a failed validation or test result using an enriched LLM prompt.",
      "docstring": "Attempts to fix a failed validation or test result using an enriched LLM prompt.",
      "calls": [
        "GeneratorClient",
        "add_pending_write",
        "dumps",
        "get",
        "items",
        "list",
        "make_request",
        "parse_write_blocks",
        "process",
        "strip",
        "validate_code"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "failure_context"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.932474+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation"
    },
    "src/agents/utils.py::SymbolLocator": {
      "key": "src/agents/utils.py::SymbolLocator",
      "name": "SymbolLocator",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Dedicated class for finding symbols in code files.",
      "docstring": "Dedicated class for finding symbols in code files.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.933966+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/agents/utils.py::find_symbol_line": {
      "key": "src/agents/utils.py::find_symbol_line",
      "name": "find_symbol_line",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the line number of a function or class definition in a file.",
      "docstring": "Finds the line number of a function or class definition in a file.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "file_path",
        "symbol_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.934421+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/utils.py::SymbolLocator"
    },
    "src/agents/utils.py::PlanExecutionContext": {
      "key": "src/agents/utils.py::PlanExecutionContext",
      "name": "PlanExecutionContext",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Context manager for safe plan execution with rollback.",
      "docstring": "Context manager for safe plan execution with rollback.",
      "calls": [
        "error",
        "get_current_commit",
        "is_git_repo",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.934988+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/agents/utils.py::__init__": {
      "key": "src/agents/utils.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the context with a reference to the calling agent.",
      "docstring": "Initializes the context with a reference to the calling agent.",
      "calls": [],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "self",
        "planner_agent"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.935335+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext"
    },
    "src/agents/utils.py::__enter__": {
      "key": "src/agents/utils.py::__enter__",
      "name": "__enter__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Sets up the execution context, capturing the initial git commit hash.",
      "docstring": "Sets up the execution context, capturing the initial git commit hash.",
      "calls": [
        "get_current_commit",
        "is_git_repo",
        "warning"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.935739+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext"
    },
    "src/agents/utils.py::__exit__": {
      "key": "src/agents/utils.py::__exit__",
      "name": "__exit__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Cleans up and handles rollback on failure.",
      "docstring": "Cleans up and handles rollback on failure.",
      "calls": [
        "error",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "self",
        "exc_type",
        "exc_val",
        "exc_tb"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.936141+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext"
    },
    "src/agents/planner_agent.py::PlannerAgent": {
      "key": "src/agents/planner_agent.py::PlannerAgent",
      "name": "PlannerAgent",
      "type": "ClassDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "code_generation",
      "intent": "The primary agent responsible for decomposing high-level goals into executable plans.",
      "docstring": "The primary agent responsible for decomposing high-level goals into executable plans.\nIt orchestrates the generation, validation, and commitment of code changes.",
      "calls": [
        "ExecutionProgress",
        "ExecutionTask",
        "PlanExecutionContext",
        "PlannerConfig",
        "PromptPipeline",
        "RuntimeError",
        "SymbolLocator",
        "ThreadPoolExecutor",
        "ValueError",
        "_execute_add_tag",
        "_execute_task",
        "_execute_task_with_timeout",
        "_extract_json_from_response",
        "_find_symbol_line_async",
        "_log_plan_summary",
        "_setup_logging_context",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "debug",
        "dedent",
        "enumerate",
        "error",
        "format",
        "get_event_loop",
        "group",
        "info",
        "insert",
        "is_git_repo",
        "isinstance",
        "isoformat",
        "join",
        "len",
        "loads",
        "lstrip",
        "make_request",
        "now",
        "process",
        "range",
        "read_text",
        "run_in_executor",
        "search",
        "set",
        "splitlines",
        "str",
        "strategy",
        "strftime",
        "strip",
        "validate_code",
        "wait_for",
        "warning"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.941319+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation"
    },
    "src/agents/planner_agent.py::__init__": {
      "key": "src/agents/planner_agent.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Initializes the PlannerAgent with all necessary service dependencies.",
      "docstring": "Initializes the PlannerAgent with all necessary service dependencies.",
      "calls": [
        "PlannerConfig",
        "PromptPipeline",
        "SymbolLocator"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "self",
        "orchestrator_client",
        "generator_client",
        "file_handler",
        "git_service",
        "intent_guard",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.941730+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent"
    },
    "src/agents/planner_agent.py::_setup_logging_context": {
      "key": "src/agents/planner_agent.py::_setup_logging_context",
      "name": "_setup_logging_context",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Setup structured logging context for better observability.",
      "docstring": "Setup structured logging context for better observability.",
      "calls": [
        "isoformat",
        "now",
        "set"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "self",
        "goal",
        "plan_id"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.942162+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent"
    },
    "src/agents/planner_agent.py::_extract_json_from_response": {
      "key": "src/agents/planner_agent.py::_extract_json_from_response",
      "name": "_extract_json_from_response",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Extract JSON with multiple strategies and better error handling.",
      "docstring": "Extract JSON with multiple strategies and better error handling.",
      "calls": [
        "debug",
        "enumerate",
        "error",
        "group",
        "loads",
        "search",
        "strategy"
      ],
      "line_number": 67,
      "is_async": false,
      "parameters": [
        "self",
        "text"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.942715+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent"
    },
    "src/agents/planner_agent.py::_log_plan_summary": {
      "key": "src/agents/planner_agent.py::_log_plan_summary",
      "name": "_log_plan_summary",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Log a readable summary of the execution plan.",
      "docstring": "Log a readable summary of the execution plan.",
      "calls": [
        "enumerate",
        "info",
        "len"
      ],
      "line_number": 88,
      "is_async": false,
      "parameters": [
        "self",
        "plan"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.943278+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent"
    },
    "src/agents/planner_agent.py::create_execution_plan": {
      "key": "src/agents/planner_agent.py::create_execution_plan",
      "name": "create_execution_plan",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "llm_orchestration",
      "intent": "Creates a detailed, step-by-step execution plan from a high-level goal.",
      "docstring": "Creates a detailed, step-by-step execution plan from a high-level goal.",
      "calls": [
        "ExecutionTask",
        "ValueError",
        "_extract_json_from_response",
        "_log_plan_summary",
        "_setup_logging_context",
        "dedent",
        "error",
        "format",
        "info",
        "isinstance",
        "make_request",
        "now",
        "process",
        "range",
        "strftime",
        "strip",
        "warning"
      ],
      "line_number": 95,
      "is_async": false,
      "parameters": [
        "self",
        "high_level_goal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.943907+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent"
    },
    "src/agents/planner_agent.py::_find_symbol_line_async": {
      "key": "src/agents/planner_agent.py::_find_symbol_line_async",
      "name": "_find_symbol_line_async",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Async version using thread pool for file I/O.",
      "docstring": "Async version using thread pool for file I/O.",
      "calls": [
        "ThreadPoolExecutor",
        "get_event_loop",
        "run_in_executor"
      ],
      "line_number": 157,
      "is_async": true,
      "parameters": [
        "self",
        "file_path",
        "symbol_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.944524+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent"
    },
    "src/agents/planner_agent.py::_execute_task_with_timeout": {
      "key": "src/agents/planner_agent.py::_execute_task_with_timeout",
      "name": "_execute_task_with_timeout",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Execute task with timeout protection.",
      "docstring": "Execute task with timeout protection.",
      "calls": [
        "RuntimeError",
        "_execute_task",
        "wait_for"
      ],
      "line_number": 166,
      "is_async": true,
      "parameters": [
        "self",
        "task",
        "timeout"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.944942+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent"
    },
    "src/agents/planner_agent.py::execute_plan": {
      "key": "src/agents/planner_agent.py::execute_plan",
      "name": "execute_plan",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Executes a plan, running each task in sequence with progress tracking.",
      "docstring": "Executes a plan, running each task in sequence with progress tracking.",
      "calls": [
        "ExecutionProgress",
        "PlanExecutionContext",
        "_execute_task_with_timeout",
        "enumerate",
        "error",
        "info",
        "len",
        "str"
      ],
      "line_number": 174,
      "is_async": true,
      "parameters": [
        "self",
        "plan",
        "progress_callback"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.945547+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent"
    },
    "src/agents/planner_agent.py::_execute_add_tag": {
      "key": "src/agents/planner_agent.py::_execute_add_tag",
      "name": "_execute_add_tag",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "change_safety_enforcement",
      "intent": "Executes the surgical 'add_capability_tag' action.",
      "docstring": "Executes the surgical 'add_capability_tag' action.",
      "calls": [
        "RuntimeError",
        "_find_symbol_line_async",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "info",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "read_text",
        "splitlines",
        "validate_code"
      ],
      "line_number": 195,
      "is_async": true,
      "parameters": [
        "self",
        "params",
        "step_name"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.946414+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent"
    },
    "src/agents/planner_agent.py::_execute_task": {
      "key": "src/agents/planner_agent.py::_execute_task",
      "name": "_execute_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Dispatcher that executes a single task from a plan based on its action type.",
      "docstring": "Dispatcher that executes a single task from a plan based on its action type.",
      "calls": [
        "_execute_add_tag",
        "warning"
      ],
      "line_number": 226,
      "is_async": true,
      "parameters": [
        "self",
        "task"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.947104+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent"
    },
    "src/agents/models.py::TaskStatus": {
      "key": "src/agents/models.py::TaskStatus",
      "name": "TaskStatus",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Enumeration of possible states for an ExecutionTask.",
      "docstring": "Enumeration of possible states for an ExecutionTask.",
      "calls": [],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-05T20:05:06.948157+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition"
    },
    "src/agents/models.py::ExecutionProgress": {
      "key": "src/agents/models.py::ExecutionProgress",
      "name": "ExecutionProgress",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents the progress of a plan's execution.",
      "docstring": "Represents the progress of a plan's execution.",
      "calls": [],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.948581+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/agents/models.py::completion_percentage": {
      "key": "src/agents/models.py::completion_percentage",
      "name": "completion_percentage",
      "type": "FunctionDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates the completion percentage of the plan.",
      "docstring": "Calculates the completion percentage of the plan.",
      "calls": [],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.948937+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/agents/models.py::ExecutionProgress"
    },
    "src/agents/models.py::PlannerConfig": {
      "key": "src/agents/models.py::PlannerConfig",
      "name": "PlannerConfig",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Configuration settings for the PlannerAgent's behavior.",
      "docstring": "Configuration settings for the PlannerAgent's behavior.",
      "calls": [],
      "line_number": 32,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.949405+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/agents/models.py::TaskParams": {
      "key": "src/agents/models.py::TaskParams",
      "name": "TaskParams",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for the parameters of a single task in an execution plan.",
      "docstring": "Data model for the parameters of a single task in an execution plan.",
      "calls": [],
      "line_number": 40,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.949771+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model"
    },
    "src/agents/models.py::ExecutionTask": {
      "key": "src/agents/models.py::ExecutionTask",
      "name": "ExecutionTask",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for a single, executable step in a plan.",
      "docstring": "Data model for a single, executable step in a plan.",
      "calls": [],
      "line_number": 46,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.950100+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model"
    },
    "src/shared/path_utils.py::get_repo_root": {
      "key": "src/shared/path_utils.py::get_repo_root",
      "name": "get_repo_root",
      "type": "FunctionDef",
      "file": "src/shared/path_utils.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Find and return the repository root by locating the .git directory.",
      "docstring": "Find and return the repository root by locating the .git directory.\nStarts from current directory or provided path.\n\nReturns:\n    Path: Absolute path to repo root.\n\nRaises:\n    RuntimeError: If no .git directory is found.",
      "calls": [
        "Path",
        "RuntimeError",
        "cwd",
        "exists",
        "resolve"
      ],
      "line_number": 6,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.950781+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/shared/config_loader.py::load_config": {
      "key": "src/shared/config_loader.py::load_config",
      "name": "load_config",
      "type": "FunctionDef",
      "file": "src/shared/config_loader.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Loads a JSON or YAML file into a dictionary with consistent error handling.",
      "docstring": "Loads a JSON or YAML file into a dictionary with consistent error handling.\n\nArgs:\n    file_path (Path): Path to the file to load.\n    file_type (str): 'json', 'yaml', or 'auto' to infer from extension.\n\nReturns:\n    Dict[str, Any]: Parsed file content or empty dict if file is missing/invalid.",
      "calls": [
        "Path",
        "error",
        "exists",
        "isinstance",
        "load",
        "lower",
        "open",
        "safe_load",
        "warning"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "file_path",
        "file_type"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.952065+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/shared/logger.py::getLogger": {
      "key": "src/shared/logger.py::getLogger",
      "name": "getLogger",
      "type": "FunctionDef",
      "file": "src/shared/logger.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "system_logging",
      "intent": "Returns a pre-configured logger instance.",
      "docstring": "Returns a pre-configured logger instance.\n\nArgs:\n    name (str): The name of the logger, typically __name__ of the calling module.\n\nReturns:\n    logging.Logger: The configured logger.",
      "calls": [
        "getLogger"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "name"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.953058+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation"
    },
    "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor": {
      "key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "name": "ConstitutionalAuditor",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "alignment_checking",
      "intent": "Orchestrates the discovery and execution of all constitutional checks.",
      "docstring": "Orchestrates the discovery and execution of all constitutional checks.",
      "calls": [
        "AuditFinding",
        "AuditorContext",
        "Class",
        "Console",
        "IntentModel",
        "Panel",
        "Path",
        "Table",
        "_LoggingBridge",
        "_discover_checks",
        "_report_final_status",
        "add_row",
        "any",
        "append",
        "check_fn",
        "debug",
        "endswith",
        "error",
        "extend",
        "get",
        "get_repo_root",
        "getmembers",
        "glob",
        "import_module",
        "info",
        "len",
        "list",
        "load_config",
        "print",
        "sort",
        "startswith",
        "strip",
        "values",
        "warning"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.957143+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation"
    },
    "src/system/governance/constitutional_auditor.py::_LoggingBridge": {
      "key": "src/system/governance/constitutional_auditor.py::_LoggingBridge",
      "name": "_LoggingBridge",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "A file-like object that redirects writes to the logger.",
      "docstring": "A file-like object that redirects writes to the logger.",
      "calls": [
        "info",
        "strip"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.957537+00:00",
      "is_class": true,
      "base_classes": [
        "StringIO"
      ],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/governance/constitutional_auditor.py::write": {
      "key": "src/system/governance/constitutional_auditor.py::write",
      "name": "write",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Redirects the write to the logger info stream.",
      "docstring": "Redirects the write to the logger info stream.",
      "calls": [
        "info",
        "strip"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "self",
        "s"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.957886+00:00",
      "is_class": false,
      "base_classes": [
        "StringIO",
        "StringIO",
        "StringIO"
      ],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::_LoggingBridge"
    },
    "src/system/governance/constitutional_auditor.py::__init__": {
      "key": "src/system/governance/constitutional_auditor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initializes the shared context for all audit checks.",
      "docstring": "Initializes the shared context for all audit checks.",
      "calls": [
        "IntentModel",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.959370+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::AuditorContext"
    },
    "src/system/governance/constitutional_auditor.py::AuditorContext": {
      "key": "src/system/governance/constitutional_auditor.py::AuditorContext",
      "name": "AuditorContext",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "A simple container for shared state that all checks can access.",
      "docstring": "A simple container for shared state that all checks can access.",
      "calls": [
        "IntentModel",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "line_number": 57,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.958916+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/governance/constitutional_auditor.py::_discover_checks": {
      "key": "src/system/governance/constitutional_auditor.py::_discover_checks",
      "name": "_discover_checks",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Dynamically discovers check methods from modules in the 'checks' directory.",
      "docstring": "Dynamically discovers check methods from modules in the 'checks' directory.",
      "calls": [
        "Class",
        "Path",
        "append",
        "debug",
        "endswith",
        "error",
        "get",
        "getmembers",
        "glob",
        "import_module",
        "len",
        "sort",
        "startswith"
      ],
      "line_number": 71,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.960122+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor"
    },
    "src/system/governance/constitutional_auditor.py::run_full_audit": {
      "key": "src/system/governance/constitutional_auditor.py::run_full_audit",
      "name": "run_full_audit",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Run all discovered validation phases and return overall status.",
      "docstring": "Run all discovered validation phases and return overall status.",
      "calls": [
        "AuditFinding",
        "Panel",
        "_report_final_status",
        "any",
        "append",
        "check_fn",
        "error",
        "extend",
        "info",
        "print",
        "warning"
      ],
      "line_number": 102,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.960988+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor"
    },
    "src/system/governance/constitutional_auditor.py::_report_final_status": {
      "key": "src/system/governance/constitutional_auditor.py::_report_final_status",
      "name": "_report_final_status",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Prints the final audit summary to the console.",
      "docstring": "Prints the final audit summary to the console.",
      "calls": [
        "Panel",
        "Table",
        "add_row",
        "len",
        "print"
      ],
      "line_number": 124,
      "is_async": false,
      "parameters": [
        "self",
        "passed"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.961805+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor"
    },
    "src/system/governance/constitutional_auditor.py::main": {
      "key": "src/system/governance/constitutional_auditor.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "CLI entry point for the Constitutional Auditor.",
      "docstring": "CLI entry point for the Constitutional Auditor.",
      "calls": [
        "ConstitutionalAuditor",
        "error",
        "exit",
        "run_full_audit"
      ],
      "line_number": 144,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-05T20:05:06.962479+00:00",
      "is_class": false,
      "base_classes": []
    },
    "src/system/governance/models.py::AuditSeverity": {
      "key": "src/system/governance/models.py::AuditSeverity",
      "name": "AuditSeverity",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Severity levels for audit findings.",
      "docstring": "Severity levels for audit findings.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-05T20:05:06.963232+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition"
    },
    "src/system/governance/models.py::AuditFinding": {
      "key": "src/system/governance/models.py::AuditFinding",
      "name": "AuditFinding",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents a single audit finding.",
      "docstring": "Represents a single audit finding.",
      "calls": [],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.963626+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/tools/change_log_updater.py::load_existing_log": {
      "key": "src/system/tools/change_log_updater.py::load_existing_log",
      "name": "load_existing_log",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads the existing change log from disk or returns a new structure.",
      "docstring": "Loads the existing change log from disk or returns a new structure.",
      "calls": [
        "load_config"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.964728+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/tools/change_log_updater.py::append_change_entry": {
      "key": "src/system/tools/change_log_updater.py::append_change_entry",
      "name": "append_change_entry",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Appends a new, structured entry to the metacode change log.",
      "docstring": "Appends a new, structured entry to the metacode change log.",
      "calls": [
        "append",
        "dumps",
        "info",
        "isoformat",
        "load_existing_log",
        "mkdir",
        "utcnow",
        "write_text"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "task",
        "step",
        "modified_files",
        "score",
        "violations"
      ],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-05T20:05:06.965233+00:00",
      "is_class": false,
      "base_classes": []
    },
    "src/system/tools/codegraph_builder.py::FunctionInfo": {
      "key": "src/system/tools/codegraph_builder.py::FunctionInfo",
      "name": "FunctionInfo",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A data structure holding all analyzed information about a single symbol (function or class).",
      "docstring": "A data structure holding all analyzed information about a single symbol (function or class).",
      "calls": [
        "field"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.971691+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/tools/codegraph_builder.py::ProjectStructureError": {
      "key": "src/system/tools/codegraph_builder.py::ProjectStructureError",
      "name": "ProjectStructureError",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Custom exception for when the project's root cannot be determined.",
      "docstring": "Custom exception for when the project's root cannot be determined.",
      "calls": [],
      "line_number": 38,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.972166+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/tools/codegraph_builder.py::find_project_root": {
      "key": "src/system/tools/codegraph_builder.py::find_project_root",
      "name": "find_project_root",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Traverses upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "docstring": "Traverses upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "calls": [
        "ProjectStructureError",
        "exists",
        "resolve"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.972611+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/tools/codegraph_builder.py::FunctionCallVisitor": {
      "key": "src/system/tools/codegraph_builder.py::FunctionCallVisitor",
      "name": "FunctionCallVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "An AST visitor that collects the names of all functions being called within a node.",
      "docstring": "An AST visitor that collects the names of all functions being called within a node.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance",
        "set"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.973102+00:00",
      "is_class": true,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/tools/codegraph_builder.py::__init__": {
      "key": "src/system/tools/codegraph_builder.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the builder, loading patterns and project configuration.",
      "docstring": "Initializes the builder, loading patterns and project configuration.",
      "calls": [
        "_get_cli_entry_points",
        "_get_domain_map",
        "_load_patterns",
        "resolve"
      ],
      "line_number": 96,
      "is_async": false,
      "parameters": [
        "self",
        "root_path",
        "exclude_patterns"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.979322+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::visit_Call": {
      "key": "src/system/tools/codegraph_builder.py::visit_Call",
      "name": "visit_Call",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Extracts the function name from a Call node.",
      "docstring": "Extracts the function name from a Call node.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-05T20:05:06.973872+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::FunctionCallVisitor"
    },
    "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder": {
      "key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "name": "KnowledgeGraphBuilder",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "manifest_updating",
      "intent": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "docstring": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "calls": [
        "ContextAwareVisitor",
        "FunctionCallVisitor",
        "FunctionInfo",
        "Path",
        "_apply_entry_point_patterns",
        "_determine_domain",
        "_get_cli_entry_points",
        "_get_domain_map",
        "_get_entry_point_type",
        "_infer_agent_from_path",
        "_load_patterns",
        "_parse_metadata_comment",
        "_process_symbol_node",
        "_should_exclude_path",
        "any",
        "append",
        "as_posix",
        "asdict",
        "error",
        "exists",
        "extend",
        "findall",
        "generic_visit",
        "get",
        "get_docstring",
        "group",
        "hasattr",
        "info",
        "isinstance",
        "isoformat",
        "items",
        "len",
        "list",
        "load_config",
        "lower",
        "match",
        "max",
        "now",
        "parse",
        "read_text",
        "relative_to",
        "resolve",
        "rglob",
        "scan_file",
        "search",
        "set",
        "sorted",
        "split",
        "splitlines",
        "startswith",
        "str",
        "strip",
        "update",
        "values",
        "visit",
        "walk",
        "warning"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.976600+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation"
    },
    "src/system/tools/codegraph_builder.py::ContextAwareVisitor": {
      "key": "src/system/tools/codegraph_builder.py::ContextAwareVisitor",
      "name": "ContextAwareVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A stateful AST visitor that understands class context for methods.",
      "docstring": "A stateful AST visitor that understands class context for methods.",
      "calls": [
        "_process_symbol_node",
        "generic_visit"
      ],
      "line_number": 69,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.977120+00:00",
      "is_class": true,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/tools/codegraph_builder.py::visit_ClassDef": {
      "key": "src/system/tools/codegraph_builder.py::visit_ClassDef",
      "name": "visit_ClassDef",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a class definition, setting the context for its methods.",
      "docstring": "Processes a class definition, setting the context for its methods.",
      "calls": [
        "_process_symbol_node",
        "generic_visit"
      ],
      "line_number": 78,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-05T20:05:06.977939+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::ContextAwareVisitor"
    },
    "src/system/tools/codegraph_builder.py::visit_FunctionDef": {
      "key": "src/system/tools/codegraph_builder.py::visit_FunctionDef",
      "name": "visit_FunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a standard function or method within its class context.",
      "docstring": "Processes a standard function or method within its class context.",
      "calls": [
        "_process_symbol_node",
        "generic_visit"
      ],
      "line_number": 86,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-05T20:05:06.978401+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::ContextAwareVisitor"
    },
    "src/system/tools/codegraph_builder.py::visit_AsyncFunctionDef": {
      "key": "src/system/tools/codegraph_builder.py::visit_AsyncFunctionDef",
      "name": "visit_AsyncFunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes an async function or method within its class context.",
      "docstring": "Processes an async function or method within its class context.",
      "calls": [
        "_process_symbol_node",
        "generic_visit"
      ],
      "line_number": 91,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "visitor_method",
      "last_updated": "2025-08-05T20:05:06.978814+00:00",
      "is_class": false,
      "base_classes": [
        "NodeVisitor"
      ],
      "entry_point_justification": "ast_visitor_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::ContextAwareVisitor"
    },
    "src/system/tools/codegraph_builder.py::_load_patterns": {
      "key": "src/system/tools/codegraph_builder.py::_load_patterns",
      "name": "_load_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads entry point detection patterns from the intent file.",
      "docstring": "Loads entry point detection patterns from the intent file.",
      "calls": [
        "exists",
        "get",
        "load_config",
        "warning"
      ],
      "line_number": 109,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.979853+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::_get_cli_entry_points": {
      "key": "src/system/tools/codegraph_builder.py::_get_cli_entry_points",
      "name": "_get_cli_entry_points",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parses pyproject.toml to find declared command-line entry points.",
      "docstring": "Parses pyproject.toml to find declared command-line entry points.",
      "calls": [
        "exists",
        "findall",
        "group",
        "read_text",
        "search",
        "set"
      ],
      "line_number": 117,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.980325+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::_should_exclude_path": {
      "key": "src/system/tools/codegraph_builder.py::_should_exclude_path",
      "name": "_should_exclude_path",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determines if a given path should be excluded from scanning.",
      "docstring": "Determines if a given path should be excluded from scanning.",
      "calls": [
        "any"
      ],
      "line_number": 125,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.980769+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::_get_domain_map": {
      "key": "src/system/tools/codegraph_builder.py::_get_domain_map",
      "name": "_get_domain_map",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads the domain-to-path mapping from the source structure intent file.",
      "docstring": "Loads the domain-to-path mapping from the source structure intent file.",
      "calls": [
        "Path",
        "as_posix",
        "get",
        "load_config"
      ],
      "line_number": 129,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.981195+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::_determine_domain": {
      "key": "src/system/tools/codegraph_builder.py::_determine_domain",
      "name": "_determine_domain",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determines the logical domain for a file path based on the longest matching prefix.",
      "docstring": "Determines the logical domain for a file path based on the longest matching prefix.",
      "calls": [
        "as_posix",
        "get",
        "max",
        "startswith"
      ],
      "line_number": 135,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.981689+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::_infer_agent_from_path": {
      "key": "src/system/tools/codegraph_builder.py::_infer_agent_from_path",
      "name": "_infer_agent_from_path",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Infers the most likely responsible agent based on keywords in the file path.",
      "docstring": "Infers the most likely responsible agent based on keywords in the file path.",
      "calls": [
        "any",
        "lower",
        "str"
      ],
      "line_number": 141,
      "is_async": false,
      "parameters": [
        "self",
        "relative_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.982160+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::_parse_metadata_comment": {
      "key": "src/system/tools/codegraph_builder.py::_parse_metadata_comment",
      "name": "_parse_metadata_comment",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parses the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "docstring": "Parses the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "calls": [
        "group",
        "search",
        "startswith",
        "strip"
      ],
      "line_number": 151,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "source_lines"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.982711+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::_get_entry_point_type": {
      "key": "src/system/tools/codegraph_builder.py::_get_entry_point_type",
      "name": "_get_entry_point_type",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Identifies decorator or CLI-based entry points for a function.",
      "docstring": "Identifies decorator or CLI-based entry points for a function.",
      "calls": [
        "isinstance"
      ],
      "line_number": 160,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.983283+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::scan_file": {
      "key": "src/system/tools/codegraph_builder.py::scan_file",
      "name": "scan_file",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Scans a single Python file, parsing its AST to extract all symbols.",
      "docstring": "Scans a single Python file, parsing its AST to extract all symbols.",
      "calls": [
        "ContextAwareVisitor",
        "FunctionCallVisitor",
        "error",
        "isinstance",
        "parse",
        "read_text",
        "set",
        "splitlines",
        "str",
        "update",
        "visit",
        "walk"
      ],
      "line_number": 171,
      "is_async": false,
      "parameters": [
        "self",
        "filepath"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.984084+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::_process_symbol_node": {
      "key": "src/system/tools/codegraph_builder.py::_process_symbol_node",
      "name": "_process_symbol_node",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Extracts and stores metadata from a single function or class AST node.",
      "docstring": "Extracts and stores metadata from a single function or class AST node.",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "_determine_domain",
        "_get_entry_point_type",
        "_infer_agent_from_path",
        "_parse_metadata_comment",
        "append",
        "as_posix",
        "get",
        "get_docstring",
        "hasattr",
        "isinstance",
        "isoformat",
        "now",
        "relative_to",
        "split",
        "strip",
        "visit"
      ],
      "line_number": 193,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "filepath",
        "source_lines",
        "parent_key"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.985119+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::_apply_entry_point_patterns": {
      "key": "src/system/tools/codegraph_builder.py::_apply_entry_point_patterns",
      "name": "_apply_entry_point_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Applies declarative patterns to identify non-obvious entry points.",
      "docstring": "Applies declarative patterns to identify non-obvious entry points.",
      "calls": [
        "any",
        "extend",
        "get",
        "match",
        "values"
      ],
      "line_number": 223,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.986095+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::build": {
      "key": "src/system/tools/codegraph_builder.py::build",
      "name": "build",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Orchestrates the full knowledge graph generation process.",
      "docstring": "Orchestrates the full knowledge graph generation process.",
      "calls": [
        "_apply_entry_point_patterns",
        "_should_exclude_path",
        "asdict",
        "info",
        "isoformat",
        "items",
        "len",
        "list",
        "now",
        "rglob",
        "scan_file",
        "sorted",
        "values"
      ],
      "line_number": 245,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.986993+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder"
    },
    "src/system/tools/codegraph_builder.py::main": {
      "key": "src/system/tools/codegraph_builder.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "CLI entry point to run the knowledge graph builder and save the output.",
      "docstring": "CLI entry point to run the knowledge graph builder and save the output.",
      "calls": [
        "KnowledgeGraphBuilder",
        "build",
        "cwd",
        "dumps",
        "error",
        "find_project_root",
        "info",
        "len",
        "mkdir",
        "write_text"
      ],
      "line_number": 267,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-05T20:05:06.987857+00:00",
      "is_class": false,
      "base_classes": []
    },
    "src/system/tools/docstring_adder.py::main": {
      "key": "src/system/tools/docstring_adder.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "add_missing_docstrings",
      "intent": "Entry point for the docstring adder tool.",
      "docstring": "Entry point for the docstring adder tool.",
      "calls": [
        "exit",
        "info"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-05T20:05:06.988827+00:00",
      "is_class": false,
      "base_classes": []
    },
    "src/system/governance/checks/quality_checks.py::QualityChecks": {
      "key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "name": "QualityChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for code quality constitutional checks.",
      "docstring": "Container for code quality constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 6,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.990474+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/governance/checks/quality_checks.py::__init__": {
      "key": "src/system/governance/checks/quality_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.990832+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks"
    },
    "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents": {
      "key": "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents",
      "name": "check_docstrings_and_intents",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.docstrings",
      "intent": "Finds symbols missing docstrings or having generic intents.",
      "docstring": "Finds symbols missing docstrings or having generic intents.",
      "calls": [
        "AuditFinding",
        "append",
        "get"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.991431+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks"
    },
    "src/system/governance/checks/quality_checks.py::check_for_dead_code": {
      "key": "src/system/governance/checks/quality_checks.py::check_for_dead_code",
      "name": "check_for_dead_code",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.dead_code",
      "intent": "Detects unreferenced public symbols.",
      "docstring": "Detects unreferenced public symbols.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.992153+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks"
    },
    "src/system/governance/checks/file_checks.py::FileChecks": {
      "key": "src/system/governance/checks/file_checks.py::FileChecks",
      "name": "FileChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for file-based constitutional checks.",
      "docstring": "Container for file-based constitutional checks.",
      "calls": [
        "AuditFinding",
        "Path",
        "_get_known_files_from_meta",
        "_recursive_find_paths",
        "add",
        "any",
        "append",
        "exists",
        "extend",
        "glob",
        "is_file",
        "isinstance",
        "len",
        "list",
        "load_config",
        "read_text",
        "relative_to",
        "replace",
        "rglob",
        "set",
        "sorted",
        "str",
        "validate_code",
        "values"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.995276+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/governance/checks/file_checks.py::__init__": {
      "key": "src/system/governance/checks/file_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:06.995658+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks"
    },
    "src/system/governance/checks/file_checks.py::check_required_files": {
      "key": "src/system/governance/checks/file_checks.py::check_required_files",
      "name": "check_required_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.required_files",
      "intent": "Verifies the existence of critical .intent files.",
      "docstring": "Verifies the existence of critical .intent files.",
      "calls": [
        "AuditFinding",
        "append",
        "exists"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.996140+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks"
    },
    "src/system/governance/checks/file_checks.py::check_syntax": {
      "key": "src/system/governance/checks/file_checks.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.syntax",
      "intent": "Validates the syntax of all .intent YAML/JSON files.",
      "docstring": "Validates the syntax of all .intent YAML/JSON files.",
      "calls": [
        "AuditFinding",
        "append",
        "extend",
        "is_file",
        "len",
        "list",
        "read_text",
        "relative_to",
        "rglob",
        "str",
        "validate_code"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.996845+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks"
    },
    "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files": {
      "key": "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files",
      "name": "check_for_orphaned_intent_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.orphaned_intent_files",
      "intent": "Finds .intent files that are not referenced in meta.yaml.",
      "docstring": "Finds .intent files that are not referenced in meta.yaml.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "any",
        "append",
        "is_file",
        "list",
        "relative_to",
        "replace",
        "rglob",
        "sorted",
        "str"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:06.997653+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks"
    },
    "src/system/governance/checks/file_checks.py::_get_known_files_from_meta": {
      "key": "src/system/governance/checks/file_checks.py::_get_known_files_from_meta",
      "name": "_get_known_files_from_meta",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Builds a set of all known intent files by reading .intent/meta.yaml.",
      "docstring": "Builds a set of all known intent files by reading .intent/meta.yaml.",
      "calls": [
        "Path",
        "_recursive_find_paths",
        "add",
        "exists",
        "glob",
        "isinstance",
        "load_config",
        "relative_to",
        "replace",
        "set",
        "str",
        "values"
      ],
      "line_number": 71,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.998465+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks"
    },
    "src/system/governance/checks/file_checks.py::_recursive_find_paths": {
      "key": "src/system/governance/checks/file_checks.py::_recursive_find_paths",
      "name": "_recursive_find_paths",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Recursively finds all file paths declared in the meta configuration.",
      "docstring": "Recursively finds all file paths declared in the meta configuration.",
      "calls": [
        "Path",
        "_recursive_find_paths",
        "add",
        "isinstance",
        "replace",
        "str",
        "values"
      ],
      "line_number": 79,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.998961+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks"
    },
    "src/system/governance/checks/file_integrity.py::FileIntegrityChecks": {
      "key": "src/system/governance/checks/file_integrity.py::FileIntegrityChecks",
      "name": "FileIntegrityChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/file_integrity.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for file-based constitutional checks.",
      "docstring": "Container for file-based constitutional checks.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:06.999915+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/governance/checks/file_integrity.py::__init__": {
      "key": "src/system/governance/checks/file_integrity.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_integrity.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:07.000312+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/file_integrity.py::FileIntegrityChecks"
    },
    "src/system/governance/checks/file_integrity.py::check_required_files": {
      "key": "src/system/governance/checks/file_integrity.py::check_required_files",
      "name": "check_required_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_integrity.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.required_files",
      "intent": "Verifies the existence of critical .intent files.",
      "docstring": "Verifies the existence of critical .intent files.",
      "calls": [],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:07.000721+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_integrity.py::FileIntegrityChecks"
    },
    "src/system/governance/checks/file_integrity.py::check_syntax": {
      "key": "src/system/governance/checks/file_integrity.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_integrity.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.syntax",
      "intent": "Validates the syntax of all .intent YAML/JSON files.",
      "docstring": "Validates the syntax of all .intent YAML/JSON files.",
      "calls": [],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:07.001075+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_integrity.py::FileIntegrityChecks"
    },
    "src/system/governance/checks/file_integrity.py::check_for_orphaned_intent_files": {
      "key": "src/system/governance/checks/file_integrity.py::check_for_orphaned_intent_files",
      "name": "check_for_orphaned_intent_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_integrity.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.orphaned_intent_files",
      "intent": "Finds .intent files that are not referenced in meta.yaml.",
      "docstring": "Finds .intent files that are not referenced in meta.yaml.",
      "calls": [],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:07.001456+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_integrity.py::FileIntegrityChecks"
    },
    "src/system/governance/checks/structure_checks.py::StructureChecks": {
      "key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "name": "StructureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for structural constitutional checks.",
      "docstring": "Container for structural constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "items",
        "joinpath",
        "len",
        "list",
        "load_config",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "sorted",
        "split",
        "startswith",
        "validate_manifest_entry",
        "with_suffix"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:07.004854+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/system/governance/checks/structure_checks.py::__init__": {
      "key": "src/system/governance/checks/structure_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-05T20:05:07.005215+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks"
    },
    "src/system/governance/checks/structure_checks.py::check_project_manifest": {
      "key": "src/system/governance/checks/structure_checks.py::check_project_manifest",
      "name": "check_project_manifest",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.project_manifest",
      "intent": "Validates the integrity of project_manifest.yaml.",
      "docstring": "Validates the integrity of project_manifest.yaml.",
      "calls": [
        "AuditFinding",
        "append"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:07.005767+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_coverage": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_coverage",
      "name": "check_capability_coverage",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_coverage",
      "intent": "Ensures all required capabilities are implemented.",
      "docstring": "Ensures all required capabilities are implemented.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "set",
        "sorted"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:07.006384+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_definitions": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_definitions",
      "name": "check_capability_definitions",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_definitions",
      "intent": "Ensures all implemented capabilities are valid.",
      "docstring": "Ensures all implemented capabilities are valid.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "load_config",
        "sorted"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:07.007063+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks"
    },
    "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema": {
      "key": "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema",
      "name": "check_knowledge_graph_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.knowledge_graph_schema",
      "intent": "Validates all knowledge graph symbols against the schema.",
      "docstring": "Validates all knowledge graph symbols against the schema.",
      "calls": [
        "AuditFinding",
        "append",
        "items",
        "len",
        "validate_manifest_entry"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:07.007799+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks"
    },
    "src/system/governance/checks/structure_checks.py::check_domain_integrity": {
      "key": "src/system/governance/checks/structure_checks.py::check_domain_integrity",
      "name": "check_domain_integrity",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.domain_integrity",
      "intent": "Checks for domain mismatches and illegal imports.",
      "docstring": "Checks for domain mismatches and illegal imports.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "joinpath",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "split",
        "startswith",
        "with_suffix"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-05T20:05:07.008713+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks"
    },
    "src/shared/schemas/manifest_validator.py::load_schema": {
      "key": "src/shared/schemas/manifest_validator.py::load_schema",
      "name": "load_schema",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load a JSON schema from the .intent/schemas/ directory.",
      "docstring": "Load a JSON schema from the .intent/schemas/ directory.\n\nArgs:\n    schema_name (str): The filename of the schema (e.g., 'knowledge_graph_entry.schema.json').\n    \nReturns:\n    Dict[str, Any]: The loaded JSON schema.\n    \nRaises:\n    FileNotFoundError: If the schema file is not found.\n    json.JSONDecodeError: If the schema file is not valid JSON.",
      "calls": [
        "FileNotFoundError",
        "JSONDecodeError",
        "exists",
        "load",
        "open"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [
        "schema_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:07.010375+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/shared/schemas/manifest_validator.py::validate_manifest_entry": {
      "key": "src/shared/schemas/manifest_validator.py::validate_manifest_entry",
      "name": "validate_manifest_entry",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Validate a single manifest entry against a schema.",
      "docstring": "Validate a single manifest entry against a schema.\n\nArgs:\n    entry: The dictionary representing a single function/class entry.\n    schema_name: The filename of the schema to validate against.\n    \nReturns:\n    A tuple of (is_valid: bool, list_of_error_messages: List[str]).",
      "calls": [
        "Draft7Validator",
        "append",
        "iter_errors",
        "join",
        "load_schema",
        "str"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "entry",
        "schema_name"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:07.011006+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/shared/utils/import_scanner.py::scan_imports_for_file": {
      "key": "src/shared/utils/import_scanner.py::scan_imports_for_file",
      "name": "scan_imports_for_file",
      "type": "FunctionDef",
      "file": "src/shared/utils/import_scanner.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Parse a Python file and extract all imported module paths.",
      "docstring": "Parse a Python file and extract all imported module paths.\n\nArgs:\n    file_path (Path): Path to the file.\n\nReturns:\n    List[str]: List of imported module paths.",
      "calls": [
        "append",
        "isinstance",
        "parse",
        "read_text",
        "walk",
        "warning"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:07.012110+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    },
    "src/shared/utils/parsing.py::parse_write_blocks": {
      "key": "src/shared/utils/parsing.py::parse_write_blocks",
      "name": "parse_write_blocks",
      "type": "FunctionDef",
      "file": "src/shared/utils/parsing.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Extracts all [[write:...]] blocks from LLM output.",
      "docstring": "Extracts all [[write:...]] blocks from LLM output.\n\nThis function is robust and handles both [[end]] and [[/write]] as valid terminators\nto accommodate different LLM habits.\n\nArgs:\n    llm_output (str): The raw text output from a language model.\n\nReturns:\n    A dictionary mapping file paths to their corresponding code content.",
      "calls": [
        "findall",
        "strip"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [
        "llm_output"
      ],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-05T20:05:07.012905+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition"
    }
  }
}