{
  "schema_version": "2.0.0",
  "metadata": {
    "files_scanned": 101,
    "total_symbols": 362,
    "timestamp_utc": "2025-08-31T08:12:11.707046+00:00"
  },
  "symbols": {
    "src/core/knowledge_service.py::KnowledgeService": {
      "key": "src/core/knowledge_service.py::KnowledgeService",
      "name": "KnowledgeService",
      "type": "ClassDef",
      "file": "src/core/knowledge_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "introspection",
      "intent": "A read-only service to access the system's knowledge graph.",
      "docstring": "A read-only service to access the system's knowledge graph.",
      "calls": [
        "exists",
        "get",
        "info",
        "list",
        "load_config",
        "load_graph",
        "sorted",
        "values",
        "warning"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.273963+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "d9850557067fccec3ababc04ca912753d4b72cf09f56890feb4431e8573bab65"
    },
    "src/core/knowledge_service.py::__init__": {
      "key": "src/core/knowledge_service.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/knowledge_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initializes the service and loads the knowledge graph.",
      "docstring": "Initializes the service and loads the knowledge graph.",
      "calls": [
        "load_graph"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.274351+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/knowledge_service.py::KnowledgeService",
      "structural_hash": "54c4a1e7ceb3c36cc938fd89e9e1e1025b2059519179eebc2c10eb52c7a1de22"
    },
    "src/core/knowledge_service.py::load_graph": {
      "key": "src/core/knowledge_service.py::load_graph",
      "name": "load_graph",
      "type": "FunctionDef",
      "file": "src/core/knowledge_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads or reloads the knowledge graph from disk.",
      "docstring": "Loads or reloads the knowledge graph from disk.",
      "calls": [
        "exists",
        "info",
        "load_config",
        "warning"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.274696+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/knowledge_service.py::KnowledgeService",
      "structural_hash": "b5a76952453037a2b2f347f78154c618505d134c4a4edc33284e7cbcf529a938"
    },
    "src/core/knowledge_service.py::list_capabilities": {
      "key": "src/core/knowledge_service.py::list_capabilities",
      "name": "list_capabilities",
      "type": "FunctionDef",
      "file": "src/core/knowledge_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Returns a sorted list of all unique, declared capabilities.",
      "docstring": "Returns a sorted list of all unique, declared capabilities.",
      "calls": [
        "get",
        "list",
        "sorted",
        "values"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.275163+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/knowledge_service.py::KnowledgeService",
      "structural_hash": "cef055957d08da2556082c246ff44ba3e0f4464b18f751fc3b3273ac03a8bf67"
    },
    "src/core/clients.py::BaseLLMClient": {
      "key": "src/core/clients.py::BaseLLMClient",
      "name": "BaseLLMClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "llm_orchestration",
      "intent": "Base class for LLM clients, handling common request logic for Chat APIs.",
      "docstring": "Base class for LLM clients, handling common request logic for Chat APIs.\nProvides shared initialization and error handling for all LLM clients.",
      "calls": [
        "AsyncClient",
        "ValueError",
        "_parse_response",
        "_prepare_payload",
        "debug",
        "error",
        "get",
        "getattr",
        "json",
        "post",
        "raise_for_status",
        "rstrip",
        "str"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.280153+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "93ffdf2cf1f709110a89f0b2fc67684a2588973e51f6eb0248b3ea47eed678e9"
    },
    "src/core/clients.py::__init__": {
      "key": "src/core/clients.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize the LLM client with API credentials and endpoint.",
      "docstring": "Initialize the LLM client with API credentials and endpoint.",
      "calls": [
        "AsyncClient",
        "ValueError",
        "debug",
        "rstrip"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self",
        "api_url",
        "api_key",
        "model_name"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.280940+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "95d4365d96104ecda7ed919682f5ad000d09fd6b588b93328a6a29d6d6101daf"
    },
    "src/core/clients.py::_prepare_payload": {
      "key": "src/core/clients.py::_prepare_payload",
      "name": "_prepare_payload",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Prepares the request payload based on the API type.",
      "docstring": "Prepares the request payload based on the API type.",
      "calls": [],
      "line_number": 55,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "last_updated": "2025-08-31T08:12:11.281357+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "8003c337db300951ef7745c9ba5678c52c7a61cb9c771d53a4232a6a8b73907f"
    },
    "src/core/clients.py::_parse_response": {
      "key": "src/core/clients.py::_parse_response",
      "name": "_parse_response",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Parses the response to extract the content based on API type.",
      "docstring": "Parses the response to extract the content based on API type.",
      "calls": [
        "error",
        "get"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "self",
        "response_data"
      ],
      "last_updated": "2025-08-31T08:12:11.281847+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "cc0843088eff613388186faf8074fc51a50fc4e2366e5f4be8c9afb0dd35a4cd"
    },
    "src/core/clients.py::make_request": {
      "key": "src/core/clients.py::make_request",
      "name": "make_request",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt to the configured API. (Synchronous)",
      "docstring": "Sends a prompt to the configured API. (Synchronous)",
      "calls": [
        "_parse_response",
        "_prepare_payload",
        "debug",
        "error",
        "getattr",
        "json",
        "post",
        "raise_for_status",
        "str"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "last_updated": "2025-08-31T08:12:11.282620+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "e8cbdae2678c17d3363257ad60e6aeff8e2c970dba19346c63fb6a96b374e92a"
    },
    "src/core/clients.py::make_request_async": {
      "key": "src/core/clients.py::make_request_async",
      "name": "make_request_async",
      "type": "AsyncFunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt asynchronously to the configured API.",
      "docstring": "Sends a prompt asynchronously to the configured API.",
      "calls": [
        "_parse_response",
        "_prepare_payload",
        "debug",
        "error",
        "getattr",
        "json",
        "post",
        "raise_for_status",
        "str"
      ],
      "line_number": 114,
      "is_async": true,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "last_updated": "2025-08-31T08:12:11.283486+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/clients.py::BaseLLMClient",
      "structural_hash": "1e053886223479fc4af12073ab16b97bd891170b47a76552abe92a0a49baece9"
    },
    "src/core/cognitive_service.py::CognitiveService": {
      "key": "src/core/cognitive_service.py::CognitiveService",
      "name": "CognitiveService",
      "type": "ClassDef",
      "file": "src/core/cognitive_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "cognitive_service.management",
      "intent": "Manages the lifecycle and provision of role-based LLM clients.",
      "docstring": "Manages the lifecycle and provision of role-based LLM clients.",
      "calls": [
        "BaseLLMClient",
        "ValueError",
        "all",
        "get",
        "getattr",
        "info",
        "len",
        "load_config",
        "upper"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.286237+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "10b23612092eb6675bf4d735a8706c09351ef9f0d3b8dcdd526a41069e09a471"
    },
    "src/core/cognitive_service.py::__init__": {
      "key": "src/core/cognitive_service.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/cognitive_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initializes the service by loading and parsing the cognitive architecture from the constitution.",
      "docstring": "Initializes the service by loading and parsing the cognitive architecture from the constitution.",
      "calls": [
        "get",
        "info",
        "len",
        "load_config"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.286879+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/cognitive_service.py::CognitiveService",
      "structural_hash": "287d97978f6da146c0d782219bb9c7f825bd3c7bcb60ed7745b37a613f84b6e1"
    },
    "src/core/cognitive_service.py::get_client_for_role": {
      "key": "src/core/cognitive_service.py::get_client_for_role",
      "name": "get_client_for_role",
      "type": "FunctionDef",
      "file": "src/core/cognitive_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Gets a configured LLM client for a specific cognitive role using the central settings object.",
      "docstring": "Gets a configured LLM client for a specific cognitive role using the central settings object.",
      "calls": [
        "BaseLLMClient",
        "ValueError",
        "all",
        "get",
        "getattr",
        "info",
        "upper"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "self",
        "role_name"
      ],
      "last_updated": "2025-08-31T08:12:11.287886+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/cognitive_service.py::CognitiveService",
      "structural_hash": "dd45eaa58169bb360d9ecbfee27eb837d318f1ba98d2eff947c6ced5a2f1cc5d"
    },
    "src/core/validation_pipeline.py::validate_code": {
      "key": "src/core/validation_pipeline.py::validate_code",
      "name": "validate_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "route_files_to_appropriate_validation_pipeline",
      "intent": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type.",
      "docstring": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type.\n\nThis is the main entry point for validation. It determines the file type\nand routes it to the appropriate validation pipeline, returning a\nstandardized dictionary with status, violations, and processed code.\n\nArgs:\n    file_path: Path to the file being validated\n    code: The source code to validate\n    quiet: If True, suppress debug logging\n\nReturns:\n    A dictionary containing validation status, violations list, and processed code",
      "calls": [
        "any",
        "debug",
        "get",
        "get_file_classification",
        "validate_python_code",
        "validate_yaml_code"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "file_path",
        "code",
        "quiet"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.289314+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "15cc183065a0f04d99881960da449c295775d657e51f3ee7b3b596a29ed1644b"
    },
    "src/core/git_service.py::GitService": {
      "key": "src/core/git_service.py::GitService",
      "name": "GitService",
      "type": "ClassDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "change_safety_enforcement",
      "intent": "Provides basic git operations for agents and services.",
      "docstring": "Provides basic git operations for agents and services.",
      "calls": [
        "Path",
        "RuntimeError",
        "ValueError",
        "_run_command",
        "add_all",
        "debug",
        "error",
        "exists",
        "info",
        "join",
        "lower",
        "resolve",
        "run",
        "status_porcelain",
        "str",
        "strip"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.292309+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "176751157f1d4cee939007b9f35ecce36c1ced1a68844e8c060b8dadce279425"
    },
    "src/core/git_service.py::__init__": {
      "key": "src/core/git_service.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the core domain.",
      "calls": [
        "Path",
        "ValueError",
        "exists",
        "info",
        "resolve",
        "str"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.292796+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "b1324fa8559378f0f8e8fcd57d8b4914e228a1b3bd1a7b310589245993995ca0"
    },
    "src/core/git_service.py::_run_command": {
      "key": "src/core/git_service.py::_run_command",
      "name": "_run_command",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Runs a git command and returns stdout; raises RuntimeError on failure.",
      "docstring": "Runs a git command and returns stdout; raises RuntimeError on failure.",
      "calls": [
        "RuntimeError",
        "debug",
        "error",
        "join",
        "run",
        "strip"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "self",
        "command"
      ],
      "last_updated": "2025-08-31T08:12:11.293372+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "658dfc6c48a97da5644274214c88c2f1cd6f639882191fee8f59b06f76c5f037"
    },
    "src/core/git_service.py::is_git_repo": {
      "key": "src/core/git_service.py::is_git_repo",
      "name": "is_git_repo",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Returns True if a '.git' directory exists (lightweight check for tests).",
      "docstring": "Returns True if a '.git' directory exists (lightweight check for tests).",
      "calls": [
        "Path",
        "exists"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.293653+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "47516352c9c393a24667863545cc02e8e065fa630fb9747f0f05b2d0edfe8140"
    },
    "src/core/git_service.py::status_porcelain": {
      "key": "src/core/git_service.py::status_porcelain",
      "name": "status_porcelain",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Returns the porcelain status output.",
      "docstring": "Returns the porcelain status output.",
      "calls": [
        "_run_command"
      ],
      "line_number": 57,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.293950+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "f30bf5b3c97f237db2b137c25b7dafb6536d63108bbdfc16cca79758dbdb3104"
    },
    "src/core/git_service.py::add": {
      "key": "src/core/git_service.py::add",
      "name": "add",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stages a file (or path).",
      "docstring": "Stages a file (or path).",
      "calls": [
        "_run_command"
      ],
      "line_number": 61,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-31T08:12:11.294225+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "852af36ba16ccf21eab7091e85a08063bec9bc1b158464e4751055fcd6f467f4"
    },
    "src/core/git_service.py::add_all": {
      "key": "src/core/git_service.py::add_all",
      "name": "add_all",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stages all changes, including untracked files.",
      "docstring": "Stages all changes, including untracked files.",
      "calls": [
        "_run_command"
      ],
      "line_number": 65,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.294489+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "eb5fb1fafdffe0db5d8b580ce4be241683cf8970d340ef76498488a4dcb784e1"
    },
    "src/core/git_service.py::commit": {
      "key": "src/core/git_service.py::commit",
      "name": "commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Commits staged changes with the provided message.",
      "docstring": "Commits staged changes with the provided message.\nRobust behavior:\n- If there are changes but some are untracked, auto-stage everything.\n- If there are no changes, exit gracefully.",
      "calls": [
        "_run_command",
        "add_all",
        "info",
        "lower",
        "status_porcelain",
        "str",
        "strip"
      ],
      "line_number": 69,
      "is_async": false,
      "parameters": [
        "self",
        "message"
      ],
      "last_updated": "2025-08-31T08:12:11.295144+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/git_service.py::GitService",
      "structural_hash": "a5812fbe41b32951057af6e1580f4c7d5a0707d84df6cdf57db0ec853a714ef7"
    },
    "src/core/validation_quality.py::QualityChecker": {
      "key": "src/core/validation_quality.py::QualityChecker",
      "name": "QualityChecker",
      "type": "ClassDef",
      "file": "src/core/validation_quality.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Handles code quality and clarity validation checks.",
      "docstring": "Handles code quality and clarity validation checks.",
      "calls": [
        "append",
        "enumerate",
        "split",
        "splitlines",
        "strip"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.296368+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "44c4c9216a6e71e538354d5bd9d7e20f16fd0efdb8f05b672adcece2ea5c47c5"
    },
    "src/core/validation_quality.py::check_for_todo_comments": {
      "key": "src/core/validation_quality.py::check_for_todo_comments",
      "name": "check_for_todo_comments",
      "type": "FunctionDef",
      "file": "src/core/validation_quality.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans source code for TODO/FIXME comments and returns them as violations.",
      "docstring": "Scans source code for TODO/FIXME comments and returns them as violations.\n\nArgs:\n    code: The source code to scan for TODO comments\n\nReturns:\n    List of violations for each TODO/FIXME comment found",
      "calls": [
        "append",
        "enumerate",
        "split",
        "splitlines",
        "strip"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "self",
        "code"
      ],
      "last_updated": "2025-08-31T08:12:11.297012+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/validation_quality.py::QualityChecker",
      "structural_hash": "531d8afbc183a2c37b3e28c644176690757a4a329fd5e0cb0a48d2fb3e783e62"
    },
    "src/core/file_classifier.py::get_file_classification": {
      "key": "src/core/file_classifier.py::get_file_classification",
      "name": "get_file_classification",
      "type": "FunctionDef",
      "file": "src/core/file_classifier.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "classify_files_by_extension_for_validation_routing",
      "intent": "Determines the file type based on its extension.",
      "docstring": "Determines the file type based on its extension.\n\nArgs:\n    file_path: Path to the file to classify\n\nReturns:\n    A string representing the file type ('python', 'yaml', 'text', or 'unknown')",
      "calls": [
        "Path",
        "lower"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.297788+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "8b7cbdf549ef948b63c1109043c1f506de9c8705c57967be751ce0403bdee60e"
    },
    "src/core/syntax_checker.py::check_syntax": {
      "key": "src/core/syntax_checker.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/core/syntax_checker.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "syntax_validation",
      "intent": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "docstring": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "calls": [
        "endswith",
        "parse",
        "strip"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "file_path",
        "code"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.298819+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "4815cb4132c9af819261e05ad28e94f389bb386689303424cb24b1f4ef35eb51"
    },
    "src/core/yaml_validator.py::validate_yaml_code": {
      "key": "src/core/yaml_validator.py::validate_yaml_code",
      "name": "validate_yaml_code",
      "type": "FunctionDef",
      "file": "src/core/yaml_validator.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "validate_yaml_syntax_and_structure",
      "intent": "Validation pipeline for YAML code.",
      "docstring": "Validation pipeline for YAML code.\n\nThis function validates YAML syntax and structure, returning any violations\nfound during the validation process.\n\nArgs:\n    code: The YAML code to validate\n\nReturns:\n    A tuple containing the original code and list of violations",
      "calls": [
        "append",
        "safe_load"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.299785+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "82b538b1fa26d821796161ed444ec38bdd903eb5a61cdb878f6a28f21b266fd1"
    },
    "src/core/python_validator.py::validate_python_code": {
      "key": "src/core/python_validator.py::validate_python_code",
      "name": "validate_python_code",
      "type": "FunctionDef",
      "file": "src/core/python_validator.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "code_quality_analysis",
      "intent": "Comprehensive validation pipeline for Python code.",
      "docstring": "Comprehensive validation pipeline for Python code.\n\nThis function performs a multi-step validation process including formatting,\nlinting, syntax checking, and semantic analysis. Each step builds upon the\nprevious one, with early termination on critical errors.\n\nArgs:\n    path_hint: Path hint for the code being validated\n    code: The Python code to validate\n\nReturns:\n    A tuple containing the final processed code and list of violations",
      "calls": [
        "PolicyValidator",
        "QualityChecker",
        "any",
        "append",
        "check_for_todo_comments",
        "check_semantics",
        "check_syntax",
        "extend",
        "fix_and_lint_code_with_ruff",
        "format_code_with_black",
        "str"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "path_hint",
        "code"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.301375+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "cb3a8ca114934063ea24d1039d41e602911d101a1a1afd300f6559ec522e1954"
    },
    "src/core/black_formatter.py::format_code_with_black": {
      "key": "src/core/black_formatter.py::format_code_with_black",
      "name": "format_code_with_black",
      "type": "FunctionDef",
      "file": "src/core/black_formatter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "docstring": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "calls": [
        "Exception",
        "FileMode",
        "InvalidInput",
        "format_str"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-31T08:12:11.302227+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8c85e8d83fc560709cd6ed713f415edee356ba8428ecec64914e328e9f8df8c0"
    },
    "src/core/test_runner.py::run_tests": {
      "key": "src/core/test_runner.py::run_tests",
      "name": "run_tests",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "test_execution",
      "intent": "Executes pytest on the tests/ directory and returns a structured result.",
      "docstring": "Executes pytest on the tests/ directory and returns a structured result.",
      "calls": [
        "Path",
        "_log_test_result",
        "_store_failure_if_any",
        "_summarize",
        "error",
        "getenv",
        "info",
        "int",
        "isoformat",
        "resolve",
        "run",
        "str",
        "strip",
        "utcnow",
        "warning"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "silent"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.306080+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "8a6e80e5f4d75ece5c7c55e3571303acf63cac795cf28c3d0666f772e77469a3"
    },
    "src/core/test_runner.py::_summarize": {
      "key": "src/core/test_runner.py::_summarize",
      "name": "_summarize",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Parses pytest output to find the final summary line.",
      "docstring": "Parses pytest output to find the final summary line.",
      "calls": [
        "reversed",
        "splitlines",
        "strip"
      ],
      "line_number": 81,
      "is_async": false,
      "parameters": [
        "output"
      ],
      "last_updated": "2025-08-31T08:12:11.306482+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8c0d11c470b2f2e028e8c955ab9369e0e41946c7fbd2c243fdf0140337c2ae84"
    },
    "src/core/test_runner.py::_log_test_result": {
      "key": "src/core/test_runner.py::_log_test_result",
      "name": "_log_test_result",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Appends a JSON record of a test run to the persistent log file.",
      "docstring": "Appends a JSON record of a test run to the persistent log file.",
      "calls": [
        "Path",
        "dumps",
        "mkdir",
        "open",
        "warning",
        "write"
      ],
      "line_number": 90,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "last_updated": "2025-08-31T08:12:11.307007+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d939dba06682745b79ff6efa270e1c69edfe3648e616319b8e8ac10d0734f755"
    },
    "src/core/test_runner.py::_store_failure_if_any": {
      "key": "src/core/test_runner.py::_store_failure_if_any",
      "name": "_store_failure_if_any",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Saves the details of a failed test run to a dedicated file for easy access.",
      "docstring": "Saves the details of a failed test run to a dedicated file for easy access.",
      "calls": [
        "Path",
        "dumps",
        "exists",
        "get",
        "mkdir",
        "unlink",
        "warning",
        "write_text"
      ],
      "line_number": 101,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "last_updated": "2025-08-31T08:12:11.307626+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f11b5cf792e916ea85778fd953f13ea50c432ecc8978ce3790b3bc5cbace2c9a"
    },
    "src/core/main.py::lifespan": {
      "key": "src/core/main.py::lifespan",
      "name": "lifespan",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "docstring": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "calls": [
        "CognitiveService",
        "KnowledgeService",
        "Path",
        "info",
        "introspection",
        "warning"
      ],
      "line_number": 31,
      "is_async": true,
      "parameters": [
        "app"
      ],
      "entry_point_type": "context_manager",
      "last_updated": "2025-08-31T08:12:11.309740+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5c03bb00fcc555a9adaf9bd2a4b9abb7bfce43f68096af8b9512806c0ef3aff8"
    },
    "src/core/main.py::GoalRequest": {
      "key": "src/core/main.py::GoalRequest",
      "name": "GoalRequest",
      "type": "ClassDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Defines the request body for the /execute_goal endpoint.",
      "docstring": "Defines the request body for the /execute_goal endpoint.",
      "calls": [
        "Field"
      ],
      "line_number": 62,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.310032+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "6e6bbbf134d5683d8ba2716dc950bd419c5d1988ab2fe712e2404d172614780b"
    },
    "src/core/main.py::AlignmentRequest": {
      "key": "src/core/main.py::AlignmentRequest",
      "name": "AlignmentRequest",
      "type": "ClassDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Request schema for /guard/align.",
      "docstring": "Request schema for /guard/align.",
      "calls": [
        "Field"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.310379+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "2f6df5e6da99d43fefe353014b6aee147a444443409637a732f053c216ae97ec"
    },
    "src/core/main.py::guard_align": {
      "key": "src/core/main.py::guard_align",
      "name": "guard_align",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Evaluate a goal against the NorthStar and optional blocklist.",
      "docstring": "Evaluate a goal against the NorthStar and optional blocklist.",
      "calls": [
        "JSONResponse",
        "Path",
        "append",
        "check_goal_alignment",
        "get",
        "post"
      ],
      "line_number": 76,
      "is_async": true,
      "parameters": [
        "payload"
      ],
      "entry_point_type": "fastapi_route_post",
      "last_updated": "2025-08-31T08:12:11.310981+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f98363f38be13e9dcdd50114dc5ece9385edea66565df019f127fe6974cf0031"
    },
    "src/core/main.py::list_capabilities": {
      "key": "src/core/main.py::list_capabilities",
      "name": "list_capabilities",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Returns a list of all capabilities the system has declared.",
      "docstring": "Returns a list of all capabilities the system has declared.",
      "calls": [
        "get",
        "list_capabilities"
      ],
      "line_number": 92,
      "is_async": true,
      "parameters": [
        "request"
      ],
      "entry_point_type": "fastapi_route_get",
      "last_updated": "2025-08-31T08:12:11.311287+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "2583e06e0e5f029e83c7406c57e550f4a614f4d70ba6626ddc52714af7551a37"
    },
    "src/core/main.py::execute_goal": {
      "key": "src/core/main.py::execute_goal",
      "name": "execute_goal",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Execute a high-level goal by planning and generating code.",
      "docstring": "Execute a high-level goal by planning and generating code.\nThis endpoint is a simple wrapper around the core development cycle logic.",
      "calls": [
        "HTTPException",
        "JSONResponse",
        "error",
        "info",
        "post",
        "run_development_cycle"
      ],
      "line_number": 99,
      "is_async": true,
      "parameters": [
        "request_data"
      ],
      "entry_point_type": "fastapi_route_post",
      "last_updated": "2025-08-31T08:12:11.311871+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "dcc24191000a473b2caf52200efcbbc4c879d5ff1cee21ba334c5cb8c774f39b"
    },
    "src/core/main.py::root": {
      "key": "src/core/main.py::root",
      "name": "root",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Root endpoint \u2014 returns system status.",
      "docstring": "Root endpoint \u2014 returns system status.",
      "calls": [
        "get"
      ],
      "line_number": 129,
      "is_async": true,
      "parameters": [],
      "entry_point_type": "fastapi_route_get",
      "last_updated": "2025-08-31T08:12:11.312135+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "9b6912c4f5de58552a3bdf66d1c4caa528c56655f21a092f869c0e09ff78760e"
    },
    "src/core/prompt_pipeline.py::PromptPipeline": {
      "key": "src/core/prompt_pipeline.py::PromptPipeline",
      "name": "PromptPipeline",
      "type": "ClassDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].",
      "docstring": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].\nEnsures the LLM receives full context before generating code.",
      "calls": [
        "Path",
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest",
        "compile",
        "dump",
        "exists",
        "get",
        "group",
        "is_file",
        "isinstance",
        "read_text",
        "resolve",
        "safe_load",
        "split",
        "stat",
        "str",
        "strip",
        "sub"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.317454+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "0da73b986acf995014bc75bfc99792b36ee19e2aae897d6afd1d316a27eba8f6"
    },
    "src/core/prompt_pipeline.py::__init__": {
      "key": "src/core/prompt_pipeline.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize PromptPipeline with repository root.",
      "docstring": "Initialize PromptPipeline with repository root.\n\nArgs:\n    repo_path (Path): Root path of the repository.",
      "calls": [
        "Path",
        "compile",
        "resolve"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.317901+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "18368307510178d5e1d6ae1017110fd923fa1204396e973c7f1689aba97f8c6c"
    },
    "src/core/prompt_pipeline.py::_replace_context_match": {
      "key": "src/core/prompt_pipeline.py::_replace_context_match",
      "name": "_replace_context_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "docstring": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-31T08:12:11.318631+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "dc7e9e9433c26c82be33117d7e010df666b93f11bb40fbd28677302536b5138a"
    },
    "src/core/prompt_pipeline.py::_inject_context": {
      "key": "src/core/prompt_pipeline.py::_inject_context",
      "name": "_inject_context",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[context:file.py]] directives with actual file content.",
      "docstring": "Replaces [[context:file.py]] directives with actual file content.",
      "calls": [
        "sub"
      ],
      "line_number": 62,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-31T08:12:11.318933+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "2a88caf35ac09a4a38eacabdd039f8a97a6a4aeb698d7d079e6dc1e1073f49e7"
    },
    "src/core/prompt_pipeline.py::_replace_include_match": {
      "key": "src/core/prompt_pipeline.py::_replace_include_match",
      "name": "_replace_include_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "docstring": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-31T08:12:11.319650+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "1e0d755c88af61643261a78a8819036e304048e9567d986c38d19a9461f93a68"
    },
    "src/core/prompt_pipeline.py::_inject_includes": {
      "key": "src/core/prompt_pipeline.py::_inject_includes",
      "name": "_inject_includes",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[include:file.py]] directives with file content.",
      "docstring": "Replaces [[include:file.py]] directives with file content.",
      "calls": [
        "sub"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-31T08:12:11.319947+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "1bf687b3ef35ee19e8a8119039b3b0dd0673ef2280439bc75f63f2bd2adc86a4"
    },
    "src/core/prompt_pipeline.py::_replace_analysis_match": {
      "key": "src/core/prompt_pipeline.py::_replace_analysis_match",
      "name": "_replace_analysis_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "docstring": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "calls": [
        "group",
        "strip"
      ],
      "line_number": 86,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-31T08:12:11.320301+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "5dc6ccad1a14f36f5473ac20f7b274f514cd82636f43599f2dc6f9795b49b296"
    },
    "src/core/prompt_pipeline.py::_inject_analysis": {
      "key": "src/core/prompt_pipeline.py::_inject_analysis",
      "name": "_inject_analysis",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[analysis:file.py]] directives with code analysis.",
      "docstring": "Replaces [[analysis:file.py]] directives with code analysis.",
      "calls": [
        "sub"
      ],
      "line_number": 93,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-31T08:12:11.320564+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "fed2eadf73b99b232534f7a30d3461609816593d3257f2f19825a34e2962fd77"
    },
    "src/core/prompt_pipeline.py::_replace_manifest_match": {
      "key": "src/core/prompt_pipeline.py::_replace_manifest_match",
      "name": "_replace_manifest_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "docstring": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "calls": [
        "dump",
        "exists",
        "get",
        "group",
        "isinstance",
        "read_text",
        "safe_load",
        "split",
        "str",
        "strip"
      ],
      "line_number": 97,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-31T08:12:11.321486+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "12d294f0c2870c353f2a0dd88795cc0395497a20587230d407d3f0941b281f68"
    },
    "src/core/prompt_pipeline.py::_inject_manifest": {
      "key": "src/core/prompt_pipeline.py::_inject_manifest",
      "name": "_inject_manifest",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "docstring": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "calls": [
        "sub"
      ],
      "line_number": 127,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-31T08:12:11.321777+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "d52018453918b1422de7f791357e22047d00b372fe7804f5e3f64a21b35f1155"
    },
    "src/core/prompt_pipeline.py::process": {
      "key": "src/core/prompt_pipeline.py::process",
      "name": "process",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "prompt_interpretation",
      "intent": "Processes the full prompt by sequentially resolving all directives.",
      "docstring": "Processes the full prompt by sequentially resolving all directives.\nThis is the main entry point for prompt enrichment.",
      "calls": [
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest"
      ],
      "line_number": 132,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.322144+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/core/prompt_pipeline.py::PromptPipeline",
      "structural_hash": "b0a94a87d0f8c976f9a25f9f2e986d0d410e80a4193e474435a3421ce857e21f"
    },
    "src/core/intent_alignment.py::_read_text_first": {
      "key": "src/core/intent_alignment.py::_read_text_first",
      "name": "_read_text_first",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Finds and reads the first existing file from a list of candidate paths.",
      "docstring": "Finds and reads the first existing file from a list of candidate paths.",
      "calls": [
        "debug",
        "exists",
        "read_text"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "paths"
      ],
      "last_updated": "2025-08-31T08:12:11.324017+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "de745e3a921b17dc1ecf47bcc247ec876f16a1f5e8bb04986e837bb793e1718f"
    },
    "src/core/intent_alignment.py::_read_blocklist": {
      "key": "src/core/intent_alignment.py::_read_blocklist",
      "name": "_read_blocklist",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Reads the blocklist file, returning a list of lowercased, stripped terms.",
      "docstring": "Reads the blocklist file, returning a list of lowercased, stripped terms.",
      "calls": [
        "debug",
        "exists",
        "lower",
        "read_text",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.324492+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b7bb9cc45b4d4e9a0cd5a180c769e42ccbaff424fa34a1f9df26ec34016e94bd"
    },
    "src/core/intent_alignment.py::_tokenize": {
      "key": "src/core/intent_alignment.py::_tokenize",
      "name": "_tokenize",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Converts a string into a list of lowercase alphanumeric tokens.",
      "docstring": "Converts a string into a list of lowercase alphanumeric tokens.",
      "calls": [
        "findall",
        "lower"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "text"
      ],
      "last_updated": "2025-08-31T08:12:11.324791+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "60a1d5fb4fae6a3c960e178fdf907910410a406715706ef76939d7742811eaef"
    },
    "src/core/intent_alignment.py::check_goal_alignment": {
      "key": "src/core/intent_alignment.py::check_goal_alignment",
      "name": "check_goal_alignment",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Returns (ok, details). details = { 'coverage': float|None, 'violations': [codes...] }",
      "docstring": "Returns (ok, details). details = { 'coverage': float|None, 'violations': [codes...] }\nViolations codes: 'blocked_topic', 'low_mission_overlap'",
      "calls": [
        "Path",
        "_read_blocklist",
        "_read_text_first",
        "_tokenize",
        "any",
        "append",
        "len",
        "lower",
        "max",
        "round",
        "set"
      ],
      "line_number": 61,
      "is_async": false,
      "parameters": [
        "goal",
        "project_root"
      ],
      "last_updated": "2025-08-31T08:12:11.325574+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6aef975605fc581eca29da3ddb88bd5b411c02a553cf7a6a130109732c9563b9"
    },
    "src/core/capabilities.py::introspection": {
      "key": "src/core/capabilities.py::introspection",
      "name": "introspection",
      "type": "FunctionDef",
      "file": "src/core/capabilities.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "introspection",
      "intent": "Runs a full self-analysis cycle to inspect system structure and health.",
      "docstring": "Runs a full self-analysis cycle to inspect system structure and health.\nThis orchestrates the execution of the system's own introspection tools\nas separate, governed processes.",
      "calls": [
        "Path",
        "error",
        "info",
        "print",
        "resolve",
        "run",
        "warning"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-31T08:12:11.328075+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6e205949f79f7c4d8e330f159e58d5e621480a5e04a7c33ea3bbfbd1056813c6"
    },
    "src/core/validation_policies.py::PolicyValidator": {
      "key": "src/core/validation_policies.py::PolicyValidator",
      "name": "PolicyValidator",
      "type": "ClassDef",
      "file": "src/core/validation_policies.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Handles policy-aware validation including safety checks and forbidden patterns.",
      "docstring": "Handles policy-aware validation including safety checks and forbidden patterns.",
      "calls": [
        "Path",
        "_find_dangerous_patterns",
        "_get_full_attribute_name",
        "_load_safety_policies",
        "any",
        "append",
        "get",
        "get_repo_root",
        "insert",
        "isinstance",
        "join",
        "load_config",
        "match",
        "parse",
        "replace",
        "set",
        "split",
        "update",
        "walk"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.332755+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "ac2021c38b20f1930ab9f4e3208d4f38d7f834e4b1b65ab06bd09f5129e6928c"
    },
    "src/core/validation_policies.py::__init__": {
      "key": "src/core/validation_policies.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/validation_policies.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize the policy validator with cached policies.",
      "docstring": "Initialize the policy validator with cached policies.",
      "calls": [],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.333059+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/validation_policies.py::PolicyValidator",
      "structural_hash": "24cea0d4349a747e9b53fa659cc1de05763f49913611747daec85e9a20deda9f"
    },
    "src/core/validation_policies.py::_load_safety_policies": {
      "key": "src/core/validation_policies.py::_load_safety_policies",
      "name": "_load_safety_policies",
      "type": "FunctionDef",
      "file": "src/core/validation_policies.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and caches the safety policies from the .intent directory.",
      "docstring": "Loads and caches the safety policies from the .intent directory.\n\nReturns:\n    List of safety policy dictionaries loaded from YAML configuration",
      "calls": [
        "get",
        "get_repo_root",
        "load_config"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.333484+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/validation_policies.py::PolicyValidator",
      "structural_hash": "8960582e8eb5dd627131b7fd524bbd25f96c3bc860704de3820995a452cc51da"
    },
    "src/core/validation_policies.py::_get_full_attribute_name": {
      "key": "src/core/validation_policies.py::_get_full_attribute_name",
      "name": "_get_full_attribute_name",
      "type": "FunctionDef",
      "file": "src/core/validation_policies.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Recursively builds the full name of an attribute call.",
      "docstring": "Recursively builds the full name of an attribute call.\n\nArgs:\n    node: AST Attribute node to process\n\nReturns:\n    Full dotted name of the attribute (e.g., 'os.path.join')",
      "calls": [
        "insert",
        "isinstance",
        "join"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.333971+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/validation_policies.py::PolicyValidator",
      "structural_hash": "5c6cd70e5db7270a517192c68deb1ea192c47b8f4d4db608734b32e69c519c2a"
    },
    "src/core/validation_policies.py::_find_dangerous_patterns": {
      "key": "src/core/validation_policies.py::_find_dangerous_patterns",
      "name": "_find_dangerous_patterns",
      "type": "FunctionDef",
      "file": "src/core/validation_policies.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans the AST for calls and imports forbidden by safety policies.",
      "docstring": "Scans the AST for calls and imports forbidden by safety policies.\n\nArgs:\n    tree: Parsed AST to scan\n    file_path: Path to the file being analyzed (for exclusion matching)\n\nReturns:\n    List of violations found in the code",
      "calls": [
        "Path",
        "_get_full_attribute_name",
        "_load_safety_policies",
        "any",
        "append",
        "get",
        "isinstance",
        "match",
        "replace",
        "set",
        "split",
        "update",
        "walk"
      ],
      "line_number": 64,
      "is_async": false,
      "parameters": [
        "self",
        "tree",
        "file_path"
      ],
      "last_updated": "2025-08-31T08:12:11.335574+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/validation_policies.py::PolicyValidator",
      "structural_hash": "44f8166c8787f02b3c567f46718ae0c78f507ff4fbf7cc2edbed22325ed668c7"
    },
    "src/core/validation_policies.py::check_semantics": {
      "key": "src/core/validation_policies.py::check_semantics",
      "name": "check_semantics",
      "type": "FunctionDef",
      "file": "src/core/validation_policies.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Runs all policy-aware semantic checks on a string of Python code.",
      "docstring": "Runs all policy-aware semantic checks on a string of Python code.\n\nArgs:\n    code: The Python source code to analyze\n    file_path: Path to the file being analyzed\n\nReturns:\n    List of policy violations found in the code",
      "calls": [
        "_find_dangerous_patterns",
        "parse"
      ],
      "line_number": 149,
      "is_async": false,
      "parameters": [
        "self",
        "code",
        "file_path"
      ],
      "last_updated": "2025-08-31T08:12:11.335974+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/validation_policies.py::PolicyValidator",
      "structural_hash": "c9bcb23cba6d81825dbd15bfedf3295d1e9594cbbca15382484e2afba88acd92"
    },
    "src/core/ruff_linter.py::fix_and_lint_code_with_ruff": {
      "key": "src/core/ruff_linter.py::fix_and_lint_code_with_ruff",
      "name": "fix_and_lint_code_with_ruff",
      "type": "FunctionDef",
      "file": "src/core/ruff_linter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Fix and lint the provided Python code using Ruff's JSON output format.",
      "docstring": "Fix and lint the provided Python code using Ruff's JSON output format.\n\nArgs:\n    code (str): Source code to fix and lint.\n    display_filename (str): Optional display name for readable error messages.\n\nReturns:\n    A tuple containing:\n    - The potentially fixed code as a string.\n    - A list of structured violation dictionaries for any remaining issues.",
      "calls": [
        "NamedTemporaryFile",
        "append",
        "error",
        "exists",
        "get",
        "loads",
        "open",
        "read",
        "remove",
        "run",
        "write"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "code",
        "display_filename"
      ],
      "last_updated": "2025-08-31T08:12:11.338423+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f38b93f59974f754542be500db7ad251aab85fe628d132f76b4fc1a8c0ffc8ae"
    },
    "src/core/file_handler.py::FileHandler": {
      "key": "src/core/file_handler.py::FileHandler",
      "name": "FileHandler",
      "type": "ClassDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Central class for safe, auditable file operations in CORE.",
      "docstring": "Central class for safe, auditable file operations in CORE.\nAll writes are staged first and require confirmation. Validation is handled\nby the calling agent via the validation_pipeline.",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "as_posix",
        "dumps",
        "exists",
        "info",
        "is_dir",
        "is_relative_to",
        "isoformat",
        "mkdir",
        "now",
        "pop",
        "resolve",
        "str",
        "unlink",
        "uuid4",
        "write_text"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.342018+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "7f83bc78d6c59e88623581fced1fa007545bd247e95f064453159385a4eecf03"
    },
    "src/core/file_handler.py::__init__": {
      "key": "src/core/file_handler.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize FileHandler with repository root.",
      "docstring": "Initialize FileHandler with repository root.",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "is_dir",
        "mkdir",
        "resolve"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.342606+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "7d1104f82dd6be77f001435887a5d41ed0edb9b349c7f409701adba634a2938d"
    },
    "src/core/file_handler.py::add_pending_write": {
      "key": "src/core/file_handler.py::add_pending_write",
      "name": "add_pending_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stages a pending write operation for later confirmation.",
      "docstring": "Stages a pending write operation for later confirmation.",
      "calls": [
        "Path",
        "as_posix",
        "dumps",
        "isoformat",
        "now",
        "str",
        "uuid4",
        "write_text"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "suggested_path",
        "code"
      ],
      "last_updated": "2025-08-31T08:12:11.343185+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "c8766d91e04379a1b3da722a61408ba41ada5eb6e8e8455da776875fa3b6a2dd"
    },
    "src/core/file_handler.py::confirm_write": {
      "key": "src/core/file_handler.py::confirm_write",
      "name": "confirm_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "docstring": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "calls": [
        "ValueError",
        "dumps",
        "exists",
        "info",
        "is_relative_to",
        "mkdir",
        "pop",
        "resolve",
        "str",
        "unlink",
        "write_text"
      ],
      "line_number": 71,
      "is_async": false,
      "parameters": [
        "self",
        "pending_id"
      ],
      "last_updated": "2025-08-31T08:12:11.344233+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/file_handler.py::FileHandler",
      "structural_hash": "a8694f3240b06d46293d1217b2b94fe82feba49e5dcd3417814ca040476fce73"
    },
    "src/core/intent_model.py::IntentModel": {
      "key": "src/core/intent_model.py::IntentModel",
      "name": "IntentModel",
      "type": "ClassDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and provides an queryable interface to the source code structure",
      "docstring": "Loads and provides an queryable interface to the source code structure\ndefined in .intent/knowledge/source_structure.yaml.",
      "calls": [
        "FileNotFoundError",
        "Path",
        "ValueError",
        "_load_structure",
        "exists",
        "get",
        "isinstance",
        "items",
        "len",
        "read_text",
        "resolve",
        "safe_load",
        "sorted"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.346888+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "3eab30bf8af40419acae73d999d71be41f957cbe2c041cec4e5b85071caa6729"
    },
    "src/core/intent_model.py::__init__": {
      "key": "src/core/intent_model.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initializes the model by loading the source structure definition from the repository, inferring the root if not provided.",
      "docstring": "Initializes the model by loading the source structure definition from the repository, inferring the root if not provided.",
      "calls": [
        "Path",
        "_load_structure",
        "resolve"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.347331+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "30a1fe676aab7db1476b1e5e5336571a6c07cd2135279650d360f85c70abe1a7"
    },
    "src/core/intent_model.py::_load_structure": {
      "key": "src/core/intent_model.py::_load_structure",
      "name": "_load_structure",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load the domain structure from .intent/knowledge/source_structure.yaml.",
      "docstring": "Load the domain structure from .intent/knowledge/source_structure.yaml.\n\nReturns:\n    Dict[str, dict]: Mapping of domain names to metadata (path, permissions, etc.).",
      "calls": [
        "FileNotFoundError",
        "ValueError",
        "exists",
        "isinstance",
        "read_text",
        "safe_load"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.347894+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "b7e19569e4aaca8e0914d60fd4ee2982b34f26d83ec5e974bc49288c3c85033a"
    },
    "src/core/intent_model.py::resolve_domain_for_path": {
      "key": "src/core/intent_model.py::resolve_domain_for_path",
      "name": "resolve_domain_for_path",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Given an absolute or relative path, determine which domain it belongs to.",
      "docstring": "Given an absolute or relative path, determine which domain it belongs to.\nPrefers deeper (more specific) paths over shorter ones.",
      "calls": [
        "items",
        "len",
        "resolve",
        "sorted"
      ],
      "line_number": 55,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-31T08:12:11.348482+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "2b2f0563668038a90438e5c19cca8263be2e91c8956421081897f925359446b9"
    },
    "src/core/intent_model.py::get_domain_permissions": {
      "key": "src/core/intent_model.py::get_domain_permissions",
      "name": "get_domain_permissions",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Return a list of allowed domains that the given domain can import from.",
      "docstring": "Return a list of allowed domains that the given domain can import from.\n\nArgs:\n    domain (str): The domain to query.\n\nReturns:\n    List[str]: List of allowed domain names, or empty list if not defined.",
      "calls": [
        "get",
        "isinstance"
      ],
      "line_number": 76,
      "is_async": false,
      "parameters": [
        "self",
        "domain"
      ],
      "last_updated": "2025-08-31T08:12:11.348909+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_model.py::IntentModel",
      "structural_hash": "4e0b210a381becd52fac80b0a743274986151449b8229ff9ab792f03b2d48640"
    },
    "src/core/errors.py::register_exception_handlers": {
      "key": "src/core/errors.py::register_exception_handlers",
      "name": "register_exception_handlers",
      "type": "FunctionDef",
      "file": "src/core/errors.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Registers custom exception handlers with the FastAPI application.",
      "docstring": "Registers custom exception handlers with the FastAPI application.",
      "calls": [
        "JSONResponse",
        "exception",
        "exception_handler",
        "info",
        "warning"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "last_updated": "2025-08-31T08:12:11.350373+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "61bc91707f7cef52a64b10bb253434a4888dfe83da71ba3ae7ecf90914a1a331"
    },
    "src/core/intent_guard.py::IntentGuard": {
      "key": "src/core/intent_guard.py::IntentGuard",
      "name": "IntentGuard",
      "type": "ClassDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "intent_guarding",
      "intent": "Central enforcement engine for CORE's safety and governance policies.",
      "docstring": "Central enforcement engine for CORE's safety and governance policies.\nEnsures all proposed file changes comply with declared rules and classifications.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "append",
        "exists",
        "extend",
        "get",
        "glob",
        "info",
        "is_dir",
        "isinstance",
        "len",
        "list",
        "load_config",
        "loads",
        "read_text",
        "resolve",
        "sorted",
        "values"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.353369+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "43059ac93bcdb676b3dd1d2f0b75084e597a2aa898be2d82a651997a44eb7642"
    },
    "src/core/intent_guard.py::__init__": {
      "key": "src/core/intent_guard.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize IntentGuard with repository path and load all policies.",
      "docstring": "Initialize IntentGuard with repository path and load all policies.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "info",
        "len",
        "resolve"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.353985+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "b2c47c815acf7a987516af87b501981850783c5c5b354b056ec701e5d71116ef"
    },
    "src/core/intent_guard.py::_load_policies": {
      "key": "src/core/intent_guard.py::_load_policies",
      "name": "_load_policies",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "docstring": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "calls": [
        "extend",
        "glob",
        "is_dir",
        "isinstance",
        "load_config"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.354413+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "6ae56b7aaca3229983d803b922ac715658f8c1684456e946ce616897758984a8"
    },
    "src/core/intent_guard.py::_load_source_manifest": {
      "key": "src/core/intent_guard.py::_load_source_manifest",
      "name": "_load_source_manifest",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load the list of all known source files from the knowledge graph.",
      "docstring": "Load the list of all known source files from the knowledge graph.",
      "calls": [
        "exists",
        "get",
        "list",
        "loads",
        "read_text",
        "sorted",
        "values"
      ],
      "line_number": 55,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.354968+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "27ec63d72ae5c1a5c7ee66c9105cd7888a6b16b17075534145415bbb3ccfa174"
    },
    "src/core/intent_guard.py::check_transaction": {
      "key": "src/core/intent_guard.py::check_transaction",
      "name": "check_transaction",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Check if a proposed set of file changes complies with all active rules.",
      "docstring": "Check if a proposed set of file changes complies with all active rules.\nThis is the primary enforcement point for constitutional integrity.",
      "calls": [
        "append",
        "resolve"
      ],
      "line_number": 75,
      "is_async": false,
      "parameters": [
        "self",
        "proposed_paths"
      ],
      "last_updated": "2025-08-31T08:12:11.355550+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/core/intent_guard.py::IntentGuard",
      "structural_hash": "83a42c69ae4fd3e6358590232908856d6586041237b8e537a234b33c7358360b"
    },
    "src/core/self_correction_engine.py::attempt_correction": {
      "key": "src/core/self_correction_engine.py::attempt_correction",
      "name": "attempt_correction",
      "type": "FunctionDef",
      "file": "src/core/self_correction_engine.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "self_correction",
      "intent": "Attempts to fix a failed validation or test result using an enriched LLM prompt.",
      "docstring": "Attempts to fix a failed validation or test result using an enriched LLM prompt.",
      "calls": [
        "add_pending_write",
        "all",
        "dumps",
        "get",
        "get_client_for_role",
        "items",
        "list",
        "make_request",
        "parse_write_blocks",
        "process",
        "strip",
        "validate_code"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "failure_context",
        "cognitive_service"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.357598+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "839e1d3c9fa16436a83ba3f2a0de6a5e828c7503fd6c894c8b8111c7e3ea1c12"
    },
    "src/agents/development_cycle.py::PlanExecutionError": {
      "key": "src/agents/development_cycle.py::PlanExecutionError",
      "name": "PlanExecutionError",
      "type": "ClassDef",
      "file": "src/agents/development_cycle.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Custom exception for errors during the planning or execution phase.",
      "docstring": "Custom exception for errors during the planning or execution phase.",
      "calls": [],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.359175+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "16f33e8e04636f8f8b53fd5bb9e20865159764788a26d74a1c2340a40768832b"
    },
    "src/agents/development_cycle.py::run_development_cycle": {
      "key": "src/agents/development_cycle.py::run_development_cycle",
      "name": "run_development_cycle",
      "type": "AsyncFunctionDef",
      "file": "src/agents/development_cycle.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Runs the full development cycle for a given goal.",
      "docstring": "Runs the full development cycle for a given goal.\n\nArgs:\n    goal: The high-level goal to be achieved.\n    auto_commit: Whether to automatically commit the changes on success.\n\nReturns:\n    A tuple containing (success: bool, message: str).",
      "calls": [
        "CognitiveService",
        "ExecutionAgent",
        "FileHandler",
        "GitService",
        "PlanExecutor",
        "PlannerAgent",
        "PlannerConfig",
        "PromptPipeline",
        "ReconnaissanceAgent",
        "commit",
        "create_execution_plan",
        "error",
        "execute_plan",
        "generate_report",
        "get_repo_root",
        "info",
        "str"
      ],
      "line_number": 29,
      "is_async": true,
      "parameters": [
        "goal",
        "auto_commit"
      ],
      "last_updated": "2025-08-31T08:12:11.360543+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "1f16e1033cb222efdf7ee0dfe3faaa2de7a40f24e6944aa89a7e307faf6ed5d1"
    },
    "src/agents/plan_executor.py::PlanExecutionError": {
      "key": "src/agents/plan_executor.py::PlanExecutionError",
      "name": "PlanExecutionError",
      "type": "ClassDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Custom exception for failures during plan execution.",
      "docstring": "Custom exception for failures during plan execution.",
      "calls": [
        "__init__",
        "super"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.365939+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "c662cf4d2b60109edc5f27ddee7d70b9daf1fd33f4b44326763aeda8c6ea1a4b"
    },
    "src/agents/plan_executor.py::__init__": {
      "key": "src/agents/plan_executor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the executor with necessary dependencies.",
      "docstring": "Initializes the executor with necessary dependencies.",
      "calls": [
        "CodeEditor",
        "SymbolLocator",
        "get_event_loop"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "self",
        "file_handler",
        "git_service",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.371363+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "001b39cbf7caa57ff2fcfaefb6b954a0d17277b4de45d75f1993dd1f98322229"
    },
    "src/agents/plan_executor.py::PlanExecutor": {
      "key": "src/agents/plan_executor.py::PlanExecutor",
      "name": "PlanExecutor",
      "type": "ClassDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "A service that takes a list of ExecutionTasks and executes them sequentially.",
      "docstring": "A service that takes a list of ExecutionTasks and executes them sequentially.",
      "calls": [
        "CodeEditor",
        "FileExistsError",
        "FileNotFoundError",
        "PlanExecutionError",
        "SymbolLocator",
        "_execute_task",
        "_execute_task_with_timeout",
        "_executor",
        "_run_command",
        "add",
        "add_pending_write",
        "all",
        "commit",
        "confirm_write",
        "dump",
        "enumerate",
        "exists",
        "get_event_loop",
        "info",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "mkdir",
        "read_text",
        "replace",
        "replace_symbol_in_code",
        "split",
        "splitlines",
        "str",
        "unlink",
        "uuid4",
        "validate_code",
        "wait_for",
        "warning",
        "write_text"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.370985+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "bc47f9b6f8a4d6b93496294e1771893c23c5b763df27cc1ca156993d00d23e04"
    },
    "src/agents/plan_executor.py::execute_plan": {
      "key": "src/agents/plan_executor.py::execute_plan",
      "name": "execute_plan",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the entire plan, one task at a time.",
      "docstring": "Executes the entire plan, one task at a time.",
      "calls": [
        "_execute_task_with_timeout",
        "enumerate",
        "info",
        "len"
      ],
      "line_number": 47,
      "is_async": true,
      "parameters": [
        "self",
        "plan"
      ],
      "last_updated": "2025-08-31T08:12:11.371829+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "123e8dc8e60b5a330aa20142c4e6837fc348c57992c16dd60c7a9afd9790150c"
    },
    "src/agents/plan_executor.py::_execute_task_with_timeout": {
      "key": "src/agents/plan_executor.py::_execute_task_with_timeout",
      "name": "_execute_task_with_timeout",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Execute task with timeout protection.",
      "docstring": "Execute task with timeout protection.",
      "calls": [
        "PlanExecutionError",
        "_execute_task",
        "wait_for"
      ],
      "line_number": 53,
      "is_async": true,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-31T08:12:11.372253+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "46d8c71e22643dea07b09a07dedcef15f01b1911bf7c97dcee3991eb1571ea53"
    },
    "src/agents/plan_executor.py::_execute_task": {
      "key": "src/agents/plan_executor.py::_execute_task",
      "name": "_execute_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Dispatcher that executes a single task from a plan based on its action type.",
      "docstring": "Dispatcher that executes a single task from a plan based on its action type.",
      "calls": [
        "warning"
      ],
      "line_number": 61,
      "is_async": true,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-31T08:12:11.372700+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "8a0bf626706ca5ecd81232fbec1f1a2aad2550ac91069acf04e18b4208e1d588"
    },
    "src/agents/plan_executor.py::_execute_delete_file": {
      "key": "src/agents/plan_executor.py::_execute_delete_file",
      "name": "_execute_delete_file",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'delete_file' action.",
      "docstring": "Executes the 'delete_file' action.",
      "calls": [
        "PlanExecutionError",
        "_run_command",
        "commit",
        "exists",
        "info",
        "is_git_repo",
        "unlink",
        "warning"
      ],
      "line_number": 76,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-31T08:12:11.373344+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "bd8d32d4ef8cbcd0e68e1b1fa3848b97862e6cda49ebc0ee44fcb6d9b8341176"
    },
    "src/agents/plan_executor.py::_execute_create_proposal": {
      "key": "src/agents/plan_executor.py::_execute_create_proposal",
      "name": "_execute_create_proposal",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'create_proposal' action.",
      "docstring": "Executes the 'create_proposal' action.",
      "calls": [
        "PlanExecutionError",
        "add",
        "all",
        "commit",
        "dump",
        "info",
        "is_git_repo",
        "mkdir",
        "replace",
        "split",
        "str",
        "uuid4",
        "write_text"
      ],
      "line_number": 101,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-31T08:12:11.374284+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "722322416ece4226aa4e126aaa1acf2af4456c2512e5cf37d14dd20a8103d71b"
    },
    "src/agents/plan_executor.py::_execute_add_tag": {
      "key": "src/agents/plan_executor.py::_execute_add_tag",
      "name": "_execute_add_tag",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the surgical 'add_capability_tag' action.",
      "docstring": "Executes the surgical 'add_capability_tag' action.",
      "calls": [
        "PlanExecutionError",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "read_text",
        "splitlines",
        "validate_code"
      ],
      "line_number": 137,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-31T08:12:11.375458+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "92dc52cc760e4c357aa906dfe2b2f6f87d2b7571f726243f943c23afd4b4ab4b"
    },
    "src/agents/plan_executor.py::_execute_create_file": {
      "key": "src/agents/plan_executor.py::_execute_create_file",
      "name": "_execute_create_file",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'create_file' action.",
      "docstring": "Executes the 'create_file' action.",
      "calls": [
        "FileExistsError",
        "PlanExecutionError",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "validate_code"
      ],
      "line_number": 184,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-31T08:12:11.376240+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "259a9af0381b07cc29313564e945e16cb51a5c68e18aa21ee9a0f0a2772adace"
    },
    "src/agents/plan_executor.py::_execute_edit_function": {
      "key": "src/agents/plan_executor.py::_execute_edit_function",
      "name": "_execute_edit_function",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'edit_function' action using the CodeEditor.",
      "docstring": "Executes the 'edit_function' action using the CodeEditor.",
      "calls": [
        "FileNotFoundError",
        "PlanExecutionError",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "replace_symbol_in_code",
        "validate_code"
      ],
      "line_number": 211,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-31T08:12:11.377241+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/plan_executor.py::PlanExecutor",
      "structural_hash": "cfd5bfb0a071a8e464e1938952c7387f2eba018bc4f52c86560d33f30cd78758"
    },
    "src/agents/utils.py::CodeEditor": {
      "key": "src/agents/utils.py::CodeEditor",
      "name": "CodeEditor",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Provides capabilities to surgically edit code files.",
      "docstring": "Provides capabilities to surgically edit code files.",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "hasattr",
        "isinstance",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip",
        "walk"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.380508+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "7947af633beefa364778c4d4c50371e62d874f16d5094a276c68e25acc189d6e"
    },
    "src/agents/utils.py::_get_symbol_start_end_lines": {
      "key": "src/agents/utils.py::_get_symbol_start_end_lines",
      "name": "_get_symbol_start_end_lines",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the 1-based start and end line numbers of a symbol.",
      "docstring": "Finds the 1-based start and end line numbers of a symbol.",
      "calls": [
        "hasattr",
        "isinstance",
        "walk"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "self",
        "tree",
        "symbol_name"
      ],
      "last_updated": "2025-08-31T08:12:11.381009+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/utils.py::CodeEditor",
      "structural_hash": "32f100fc80abd43b11fb127d45f8bfe3b5c5cbdc473c4b17f61c0e0d461b45aa"
    },
    "src/agents/utils.py::replace_symbol_in_code": {
      "key": "src/agents/utils.py::replace_symbol_in_code",
      "name": "replace_symbol_in_code",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Replaces a function/method in code with a new version using a line-based strategy.",
      "docstring": "Replaces a function/method in code with a new version using a line-based strategy.",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "self",
        "original_code",
        "symbol_name",
        "new_code_str"
      ],
      "last_updated": "2025-08-31T08:12:11.381858+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/utils.py::CodeEditor",
      "structural_hash": "44c865f663f73935a3f4c27e5792add75aa3abedde57b8e0bc3b45eacd89da8e"
    },
    "src/agents/utils.py::SymbolLocator": {
      "key": "src/agents/utils.py::SymbolLocator",
      "name": "SymbolLocator",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Dedicated class for finding symbols in code files.",
      "docstring": "Dedicated class for finding symbols in code files.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 72,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.382481+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "e8ddeca0b7c8f687b882988a916ef103d92905fc089ab350a94ffb35a090cf6d"
    },
    "src/agents/utils.py::find_symbol_line": {
      "key": "src/agents/utils.py::find_symbol_line",
      "name": "find_symbol_line",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the line number of a function or class definition in a file.",
      "docstring": "Finds the line number of a function or class definition in a file.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 76,
      "is_async": false,
      "parameters": [
        "file_path",
        "symbol_name"
      ],
      "last_updated": "2025-08-31T08:12:11.383127+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/utils.py::SymbolLocator",
      "structural_hash": "6f664818dd24e2bf7d088437ea5760a5b20e7852b512f421631dfb41a5d29e90"
    },
    "src/agents/utils.py::PlanExecutionContext": {
      "key": "src/agents/utils.py::PlanExecutionContext",
      "name": "PlanExecutionContext",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Context manager for safe plan execution with rollback.",
      "docstring": "Context manager for safe plan execution with rollback.",
      "calls": [
        "error",
        "get_current_commit",
        "is_git_repo",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 95,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.383801+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "0d9bf5400c5fee8b76f29b17735cd29d69907369f2c4ebe8616ffc440424975d"
    },
    "src/agents/utils.py::__init__": {
      "key": "src/agents/utils.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the context with the required services.",
      "docstring": "Initializes the context with the required services.",
      "calls": [],
      "line_number": 98,
      "is_async": false,
      "parameters": [
        "self",
        "git_service",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.384095+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "c15b44e96f6830a5acc0b68ff90fc27349034fbe96b16493f28334967fcfb8a4"
    },
    "src/agents/utils.py::__enter__": {
      "key": "src/agents/utils.py::__enter__",
      "name": "__enter__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Sets up the execution context, capturing the initial git commit hash.",
      "docstring": "Sets up the execution context, capturing the initial git commit hash.",
      "calls": [
        "get_current_commit",
        "is_git_repo",
        "warning"
      ],
      "line_number": 104,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.384445+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "e1af3d774ac7b186830036521480da3517d9d9c869ab487e32aea8439d43b7b8"
    },
    "src/agents/utils.py::__exit__": {
      "key": "src/agents/utils.py::__exit__",
      "name": "__exit__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Cleans up and handles rollback on failure.",
      "docstring": "Cleans up and handles rollback on failure.",
      "calls": [
        "error",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 113,
      "is_async": false,
      "parameters": [
        "self",
        "exc_type",
        "exc_val",
        "exc_tb"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.384862+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/utils.py::PlanExecutionContext",
      "structural_hash": "6338600fd9446ac4ad06ad82856f2d1611775deb232b23ef99c01f8f017f5106"
    },
    "src/agents/planner_agent.py::PlanExecutionError": {
      "key": "src/agents/planner_agent.py::PlanExecutionError",
      "name": "PlanExecutionError",
      "type": "ClassDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Custom exception for errors during plan execution.",
      "docstring": "Custom exception for errors during plan execution.",
      "calls": [],
      "line_number": 26,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.387513+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "aa83259a25ec81ebd889786436c21e1c608146b6507e62d9894b235f39ea5ac9"
    },
    "src/agents/planner_agent.py::PlannerAgent": {
      "key": "src/agents/planner_agent.py::PlannerAgent",
      "name": "PlannerAgent",
      "type": "ClassDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "planning",
      "intent": "Decomposes goals into executable plans.",
      "docstring": "Decomposes goals into executable plans.",
      "calls": [
        "Console",
        "ExecutionTask",
        "FileNotFoundError",
        "Path",
        "PlanExecutionError",
        "Syntax",
        "ValueError",
        "_build_planning_prompt",
        "_get_available_actions",
        "_load_prompt_template",
        "_log_plan_summary",
        "_validate_task_params",
        "dumps",
        "enumerate",
        "exists",
        "find",
        "format",
        "get",
        "get_client_for_role",
        "getattr",
        "info",
        "isinstance",
        "join",
        "loads",
        "make_request",
        "model_dump",
        "open",
        "print",
        "range",
        "read_text",
        "rfind",
        "safe_load",
        "warning"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.390076+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "2bfe06032467dd59445f47e81f9c32e3f43337d8e05e88459233612be53c2b56"
    },
    "src/agents/planner_agent.py::__init__": {
      "key": "src/agents/planner_agent.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Initializes the PlannerAgent.",
      "docstring": "Initializes the PlannerAgent.",
      "calls": [
        "_load_prompt_template"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "self",
        "cognitive_service"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.390364+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "0f195877029acf75e78fdd1159c1bbd881c304c8a46b641e793a70753de3facd"
    },
    "src/agents/planner_agent.py::_load_prompt_template": {
      "key": "src/agents/planner_agent.py::_load_prompt_template",
      "name": "_load_prompt_template",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Loads the planner prompt from the constitution.",
      "docstring": "Loads the planner prompt from the constitution.",
      "calls": [
        "FileNotFoundError",
        "Path",
        "exists",
        "read_text"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.390772+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "54f27a75f00067d3b4a27f8d8d45d04684bb62f5166d0862f2d7fb1c81310f74"
    },
    "src/agents/planner_agent.py::_get_available_actions": {
      "key": "src/agents/planner_agent.py::_get_available_actions",
      "name": "_get_available_actions",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Loads the available actions from the constitution.",
      "docstring": "Loads the available actions from the constitution.",
      "calls": [
        "FileNotFoundError",
        "Path",
        "exists",
        "get",
        "open",
        "safe_load"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.391240+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "d37c0415276be5b75bc32b3fdd0017de5b1236bbf6a9c7c2db04d3b1445324f3"
    },
    "src/agents/planner_agent.py::_build_planning_prompt": {
      "key": "src/agents/planner_agent.py::_build_planning_prompt",
      "name": "_build_planning_prompt",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Builds the detailed prompt for the planning LLM.",
      "docstring": "Builds the detailed prompt for the planning LLM.",
      "calls": [
        "_get_available_actions",
        "format",
        "join"
      ],
      "line_number": 57,
      "is_async": false,
      "parameters": [
        "self",
        "goal"
      ],
      "last_updated": "2025-08-31T08:12:11.391648+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "0c7846f66c8fb8e602a41c19d260661e95d87675119b12a581cf124c7e330e76"
    },
    "src/agents/planner_agent.py::_validate_task_params": {
      "key": "src/agents/planner_agent.py::_validate_task_params",
      "name": "_validate_task_params",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Validates that all required parameters for a task's action are present.",
      "docstring": "Validates that all required parameters for a task's action are present.",
      "calls": [
        "PlanExecutionError",
        "get",
        "getattr"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "self",
        "task",
        "actions"
      ],
      "last_updated": "2025-08-31T08:12:11.392289+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "5b867444a0a14760ce9182620102511a810052db4e89c4f72d02082a9ffd48e9"
    },
    "src/agents/planner_agent.py::_log_plan_summary": {
      "key": "src/agents/planner_agent.py::_log_plan_summary",
      "name": "_log_plan_summary",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Logs a human-readable summary of the execution plan.",
      "docstring": "Logs a human-readable summary of the execution plan.",
      "calls": [
        "Console",
        "Syntax",
        "dumps",
        "enumerate",
        "info",
        "model_dump",
        "print",
        "warning"
      ],
      "line_number": 88,
      "is_async": false,
      "parameters": [
        "self",
        "plan"
      ],
      "last_updated": "2025-08-31T08:12:11.392926+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "e349c025d55ab089a80775be80c898c5c86a6e49c869da0b4ad9119f2b0e45a1"
    },
    "src/agents/planner_agent.py::create_execution_plan": {
      "key": "src/agents/planner_agent.py::create_execution_plan",
      "name": "create_execution_plan",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Creates an execution plan from a user goal.",
      "docstring": "Creates an execution plan from a user goal.",
      "calls": [
        "ExecutionTask",
        "PlanExecutionError",
        "ValueError",
        "_build_planning_prompt",
        "_get_available_actions",
        "_log_plan_summary",
        "_validate_task_params",
        "find",
        "get_client_for_role",
        "getattr",
        "info",
        "isinstance",
        "loads",
        "make_request",
        "range",
        "rfind",
        "warning"
      ],
      "line_number": 101,
      "is_async": false,
      "parameters": [
        "self",
        "goal"
      ],
      "last_updated": "2025-08-31T08:12:11.393848+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/planner_agent.py::PlannerAgent",
      "structural_hash": "a4c114da77372cbe0a77d9fa69192e4d194760b6f2862d0cd9a0d7ae1f04666f"
    },
    "src/agents/execution_agent.py::ExecutionAgent": {
      "key": "src/agents/execution_agent.py::ExecutionAgent",
      "name": "ExecutionAgent",
      "type": "ClassDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "code_generation",
      "intent": "Orchestrates the execution of a plan, including code generation and validation.",
      "docstring": "Orchestrates the execution of a plan, including code generation and validation.",
      "calls": [
        "Path",
        "PlanExecutionContext",
        "_generate_code_for_proposal",
        "_generate_code_for_task",
        "attempt_correction",
        "dedent",
        "error",
        "execute_plan",
        "format",
        "get",
        "get_client_for_role",
        "info",
        "make_request_async",
        "process",
        "range",
        "read_text",
        "str",
        "strip",
        "validate_code",
        "warning"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.399621+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "33a52a32dec7a209b3d8b4fc9a1fa45fd5ff8b8dfe051267c91dc9309fcecd2c"
    },
    "src/agents/execution_agent.py::__init__": {
      "key": "src/agents/execution_agent.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the ExecutionAgent with its required tools.",
      "docstring": "Initializes the ExecutionAgent with its required tools.",
      "calls": [
        "get_client_for_role"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self",
        "cognitive_service",
        "prompt_pipeline",
        "plan_executor"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.400027+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/execution_agent.py::ExecutionAgent",
      "structural_hash": "f8ec5521fb2ecd2ba36821898a0a5a9647cc2b4626d47305859cf413105b54c9"
    },
    "src/agents/execution_agent.py::_generate_code_for_proposal": {
      "key": "src/agents/execution_agent.py::_generate_code_for_proposal",
      "name": "_generate_code_for_proposal",
      "type": "AsyncFunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Generates the full file content for a create_proposal task.",
      "docstring": "Generates the full file content for a create_proposal task.",
      "calls": [
        "Path",
        "dedent",
        "error",
        "format",
        "info",
        "make_request_async",
        "read_text",
        "strip",
        "warning"
      ],
      "line_number": 44,
      "is_async": true,
      "parameters": [
        "self",
        "task",
        "goal"
      ],
      "last_updated": "2025-08-31T08:12:11.400749+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/execution_agent.py::ExecutionAgent",
      "structural_hash": "794aedd7fd2293224eac183d0b975c356382cc475bbde047915b7da0818ca359"
    },
    "src/agents/execution_agent.py::_generate_code_for_task": {
      "key": "src/agents/execution_agent.py::_generate_code_for_task",
      "name": "_generate_code_for_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Generates the code content for a single task using a generator LLM.",
      "docstring": "Generates the code content for a single task using a generator LLM.",
      "calls": [
        "dedent",
        "format",
        "info",
        "make_request_async",
        "process",
        "strip"
      ],
      "line_number": 85,
      "is_async": true,
      "parameters": [
        "self",
        "task",
        "goal"
      ],
      "last_updated": "2025-08-31T08:12:11.401320+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/execution_agent.py::ExecutionAgent",
      "structural_hash": "f9a9b5461896dfbc4e51c9b9e6129cdb94eb5f02b27176e0ddb38c0ae0c8c549"
    },
    "src/agents/execution_agent.py::execute_plan": {
      "key": "src/agents/execution_agent.py::execute_plan",
      "name": "execute_plan",
      "type": "AsyncFunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Takes a plan, generates code for each step, validates it, attempts",
      "docstring": "Takes a plan, generates code for each step, validates it, attempts\nself-correction on failure, and then executes the fully-populated plan.",
      "calls": [
        "PlanExecutionContext",
        "_generate_code_for_proposal",
        "_generate_code_for_task",
        "attempt_correction",
        "error",
        "execute_plan",
        "get",
        "info",
        "range",
        "str",
        "validate_code",
        "warning"
      ],
      "line_number": 114,
      "is_async": true,
      "parameters": [
        "self",
        "high_level_goal",
        "plan"
      ],
      "last_updated": "2025-08-31T08:12:11.403178+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/execution_agent.py::ExecutionAgent",
      "structural_hash": "475696b171008413cd44ba378c8e805ae0e4d14675a987fdbb7ddb8a79fe50a3"
    },
    "src/agents/intent_translator.py::IntentTranslator": {
      "key": "src/agents/intent_translator.py::IntentTranslator",
      "name": "IntentTranslator",
      "type": "ClassDef",
      "file": "src/agents/intent_translator.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "An agent that translates natural language into structured goals.",
      "docstring": "An agent that translates natural language into structured goals.",
      "calls": [
        "FileNotFoundError",
        "PromptPipeline",
        "exists",
        "format",
        "get_client_for_role",
        "info",
        "make_request",
        "process",
        "read_text"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.404736+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "2869c4c5c044ebfff0f6546df65c12525cf749a1c99e384a14d5ee917f2a76ac"
    },
    "src/agents/intent_translator.py::__init__": {
      "key": "src/agents/intent_translator.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/intent_translator.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the translator with the CognitiveService.",
      "docstring": "Initializes the translator with the CognitiveService.",
      "calls": [
        "FileNotFoundError",
        "PromptPipeline",
        "exists",
        "read_text"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self",
        "cognitive_service"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.405198+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/intent_translator.py::IntentTranslator",
      "structural_hash": "b0473be6a58ffdd8705adf4ae8a9d79776859b2898b9319f8315299d000c1442"
    },
    "src/agents/intent_translator.py::translate": {
      "key": "src/agents/intent_translator.py::translate",
      "name": "translate",
      "type": "FunctionDef",
      "file": "src/agents/intent_translator.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "natural_language_understanding",
      "intent": "Takes a user's natural language input and translates it into a",
      "docstring": "Takes a user's natural language input and translates it into a\nstructured goal for the PlannerAgent.",
      "calls": [
        "format",
        "get_client_for_role",
        "info",
        "make_request",
        "process"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "self",
        "user_input"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.405697+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/agents/intent_translator.py::IntentTranslator",
      "structural_hash": "0fde9091fe387fe56d3905f9df187386d82032276c02b9d00cafc03ae50d215c"
    },
    "src/agents/models.py::TaskStatus": {
      "key": "src/agents/models.py::TaskStatus",
      "name": "TaskStatus",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Enumeration of possible states for an ExecutionTask.",
      "docstring": "Enumeration of possible states for an ExecutionTask.",
      "calls": [],
      "line_number": 15,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-31T08:12:11.406799+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition",
      "structural_hash": "cf6795e1ee645e2103f5aaacb85ec46dd2cbb369b6aba7035b4607eb3eda91df"
    },
    "src/agents/models.py::ExecutionProgress": {
      "key": "src/agents/models.py::ExecutionProgress",
      "name": "ExecutionProgress",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents the progress of a plan's execution.",
      "docstring": "Represents the progress of a plan's execution.",
      "calls": [],
      "line_number": 25,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.407234+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "90d133f833242bdf3a6fe568fb54a06e4f0d85dd86e2f157e9d3b9813d8fff9c"
    },
    "src/agents/models.py::completion_percentage": {
      "key": "src/agents/models.py::completion_percentage",
      "name": "completion_percentage",
      "type": "FunctionDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates the completion percentage of the plan as a float,",
      "docstring": "Calculates the completion percentage of the plan as a float,\nreturning 0 if there are no tasks.",
      "calls": [],
      "line_number": 34,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.407568+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/models.py::ExecutionProgress",
      "structural_hash": "98b3e8af54043a14b07f7676caf51d6630f920ae703635928d0672eb5616965e"
    },
    "src/agents/models.py::PlannerConfig": {
      "key": "src/agents/models.py::PlannerConfig",
      "name": "PlannerConfig",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Configuration settings for the PlannerAgent's behavior.",
      "docstring": "Configuration settings for the PlannerAgent's behavior.",
      "calls": [],
      "line_number": 47,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.407915+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "7da4088d9b7e683d91c4419aacb68419d74a55f76714d684a05021aa6efd64e9"
    },
    "src/agents/models.py::TaskParams": {
      "key": "src/agents/models.py::TaskParams",
      "name": "TaskParams",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for the parameters of a single task in an execution plan.",
      "docstring": "Data model for the parameters of a single task in an execution plan.",
      "calls": [],
      "line_number": 57,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.408266+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "a8ca463d421d48f858d1ce8ed4e8805919a61311632f68723a5de9a6f303879b"
    },
    "src/agents/models.py::ExecutionTask": {
      "key": "src/agents/models.py::ExecutionTask",
      "name": "ExecutionTask",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for a single, executable step in a plan.",
      "docstring": "Data model for a single, executable step in a plan.",
      "calls": [],
      "line_number": 67,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.408531+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "48165d303a2abcfbb43defdb47d5a69e69d1dae0adb9e3b011d85db0e895cc57"
    },
    "src/agents/reconnaissance_agent.py::ReconnaissanceAgent": {
      "key": "src/agents/reconnaissance_agent.py::ReconnaissanceAgent",
      "name": "ReconnaissanceAgent",
      "type": "ClassDef",
      "file": "src/agents/reconnaissance_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Queries the knowledge graph to build a focused context for a task.",
      "docstring": "Queries the knowledge graph to build a focused context for a task.",
      "calls": [
        "_find_callers",
        "_find_symbol_data",
        "append",
        "endswith",
        "findall",
        "get",
        "info",
        "items",
        "join",
        "replace",
        "values"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.411537+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "5281070bc5961c720dd640ef153933878baad84baf149c3030115689d42fe708"
    },
    "src/agents/reconnaissance_agent.py::__init__": {
      "key": "src/agents/reconnaissance_agent.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/reconnaissance_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes with the full knowledge graph.",
      "docstring": "Initializes with the full knowledge graph.",
      "calls": [
        "get"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self",
        "knowledge_graph"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.411890+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/agents/reconnaissance_agent.py::ReconnaissanceAgent",
      "structural_hash": "20aadf8013367da2e641fce6b6e2c8c6d8930428bf05f9310e7534a13d1557b7"
    },
    "src/agents/reconnaissance_agent.py::generate_report": {
      "key": "src/agents/reconnaissance_agent.py::generate_report",
      "name": "generate_report",
      "type": "FunctionDef",
      "file": "src/agents/reconnaissance_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "reconnaissance",
      "intent": "Analyzes a goal, queries the graph, and generates a surgical context report.",
      "docstring": "Analyzes a goal, queries the graph, and generates a surgical context report.",
      "calls": [
        "_find_callers",
        "_find_symbol_data",
        "append",
        "findall",
        "info",
        "join",
        "replace"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self",
        "goal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.413086+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/agents/reconnaissance_agent.py::ReconnaissanceAgent",
      "structural_hash": "4359adc8ab4d3ab9d58af5c6887a3d0fedb493253d506d4898eff6f0f7d3f8da"
    },
    "src/agents/reconnaissance_agent.py::_find_symbol_data": {
      "key": "src/agents/reconnaissance_agent.py::_find_symbol_data",
      "name": "_find_symbol_data",
      "type": "FunctionDef",
      "file": "src/agents/reconnaissance_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the main data entry for a symbol by name or key.",
      "docstring": "Finds the main data entry for a symbol by name or key.",
      "calls": [
        "endswith",
        "get",
        "items"
      ],
      "line_number": 73,
      "is_async": false,
      "parameters": [
        "self",
        "symbol_name"
      ],
      "last_updated": "2025-08-31T08:12:11.413477+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/reconnaissance_agent.py::ReconnaissanceAgent",
      "structural_hash": "9e8bfec631f2a7648febbf92e17dbdb562a0679ea05b14be9100a57a972ab68a"
    },
    "src/agents/reconnaissance_agent.py::_find_callers": {
      "key": "src/agents/reconnaissance_agent.py::_find_callers",
      "name": "_find_callers",
      "type": "FunctionDef",
      "file": "src/agents/reconnaissance_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds all symbols in the graph that call the target symbol.",
      "docstring": "Finds all symbols in the graph that call the target symbol.",
      "calls": [
        "get",
        "values"
      ],
      "line_number": 80,
      "is_async": false,
      "parameters": [
        "self",
        "symbol_name"
      ],
      "last_updated": "2025-08-31T08:12:11.413841+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/agents/reconnaissance_agent.py::ReconnaissanceAgent",
      "structural_hash": "e4f95c3096b105a6b5e8ced6c772cbe55edbaa28b693cbead67df1612e695c97"
    },
    "src/shared/path_utils.py::get_repo_root": {
      "key": "src/shared/path_utils.py::get_repo_root",
      "name": "get_repo_root",
      "type": "FunctionDef",
      "file": "src/shared/path_utils.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "docstring": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "calls": [
        "Path",
        "RuntimeError",
        "cwd",
        "exists",
        "resolve"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "last_updated": "2025-08-31T08:12:11.414647+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d673142bdfb5cfb9aa80f8fdb59d183f6f285cc929824663b8227872366693c2"
    },
    "src/shared/config_loader.py::load_config": {
      "key": "src/shared/config_loader.py::load_config",
      "name": "load_config",
      "type": "FunctionDef",
      "file": "src/shared/config_loader.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "config.load",
      "intent": "Loads a YAML or JSON config file safely, with consistent error handling.",
      "docstring": "Loads a YAML or JSON config file safely, with consistent error handling.\n\nArgs:\n    file_path: Path to the configuration file (must be .yaml, .yml, or .json).\n\nReturns:\n    A dictionary containing the parsed configuration data.\n\nRaises:\n    FileNotFoundError: If the file does not exist.\n    ValueError: If the file format is unsupported or parsing fails.",
      "calls": [
        "FileNotFoundError",
        "ValueError",
        "error",
        "exists",
        "loads",
        "read_text",
        "safe_load"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.416442+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "0499a5529190baff29e084bfac1fc7ccbf6594590cea466c849cac726f4265f1"
    },
    "src/shared/config.py::Settings": {
      "key": "src/shared/config.py::Settings",
      "name": "Settings",
      "type": "ClassDef",
      "file": "src/shared/config.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Loads and validates system settings for CORE, ensuring safe configuration.",
      "docstring": "Loads and validates system settings for CORE, ensuring safe configuration.\nSupports paths, logging, and LLM resources for cognitive_roles.yaml and resource_manifest.yaml.",
      "calls": [
        "ConfigDict",
        "Path"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.418255+00:00",
      "is_class": true,
      "base_classes": [
        "BaseSettings"
      ],
      "structural_hash": "ae934b4804908ccad8ea8bfb86ca1c88e4b32ed90a87c8b6339a51d737ed0c54"
    },
    "src/shared/logger.py::getLogger": {
      "key": "src/shared/logger.py::getLogger",
      "name": "getLogger",
      "type": "FunctionDef",
      "file": "src/shared/logger.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "system_logging",
      "intent": "Returns a pre-configured logger instance with the given name.",
      "docstring": "Returns a pre-configured logger instance with the given name.",
      "calls": [
        "getLogger"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "name"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.419104+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "db773cd3d07a46e66487a37c2b246877a57e7d50d67fe213071f56447d42263e"
    },
    "src/shared/ast_utility.py::FunctionCallVisitor": {
      "key": "src/shared/ast_utility.py::FunctionCallVisitor",
      "name": "FunctionCallVisitor",
      "type": "ClassDef",
      "file": "src/shared/ast_utility.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "AST visitor to collect function calls.",
      "docstring": "AST visitor to collect function calls.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance",
        "set"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.420677+00:00",
      "is_class": true,
      "base_classes": [
        ""
      ],
      "structural_hash": "5c9508868156771944a3457ff4c903c645c6ecbcae45faaf3202ec06477f7221"
    },
    "src/shared/ast_utility.py::__init__": {
      "key": "src/shared/ast_utility.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/shared/ast_utility.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the shared domain.",
      "calls": [
        "set"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.420953+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/shared/ast_utility.py::FunctionCallVisitor",
      "structural_hash": "4493d2fb0b3a2385fc82d5a75517b557046e2fae1dfc5831cc48ad0f0e91573a"
    },
    "src/shared/ast_utility.py::visit_Call": {
      "key": "src/shared/ast_utility.py::visit_Call",
      "name": "visit_Call",
      "type": "FunctionDef",
      "file": "src/shared/ast_utility.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Provides functionality for the shared domain.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.421296+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/shared/ast_utility.py::FunctionCallVisitor",
      "structural_hash": "bab8953d0f192e3ad33731686353b006217f77d7d00d45c684d77c0b6d248dc7"
    },
    "src/shared/ast_utility.py::extract_docstring": {
      "key": "src/shared/ast_utility.py::extract_docstring",
      "name": "extract_docstring",
      "type": "FunctionDef",
      "file": "src/shared/ast_utility.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Extracts the docstring from an AST node.",
      "docstring": "Extracts the docstring from an AST node.",
      "calls": [
        "get_docstring"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.421567+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "886e4ac18eba82a616623ecda303a1d96afdd43de280edc377c7968683bfb60b"
    },
    "src/shared/ast_utility.py::extract_parameters": {
      "key": "src/shared/ast_utility.py::extract_parameters",
      "name": "extract_parameters",
      "type": "FunctionDef",
      "file": "src/shared/ast_utility.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Extracts parameter names from a function definition.",
      "docstring": "Extracts parameter names from a function definition.",
      "calls": [],
      "line_number": 37,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.421898+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b823cf2bba9394df77038fae33d2032dc3afdfd6a0a2a57a60eb761a780d090d"
    },
    "src/shared/ast_utility.py::extract_base_classes": {
      "key": "src/shared/ast_utility.py::extract_base_classes",
      "name": "extract_base_classes",
      "type": "FunctionDef",
      "file": "src/shared/ast_utility.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Extracts base class names from a class definition.",
      "docstring": "Extracts base class names from a class definition.",
      "calls": [
        "isinstance"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.422229+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "2ec218d399343ffaa8969b535564c8d791919fbce002c6f69fc3131a15a1ed3c"
    },
    "src/shared/ast_utility.py::calculate_structural_hash": {
      "key": "src/shared/ast_utility.py::calculate_structural_hash",
      "name": "calculate_structural_hash",
      "type": "FunctionDef",
      "file": "src/shared/ast_utility.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates a structural hash for an AST node.",
      "docstring": "Calculates a structural hash for an AST node.",
      "calls": [
        "encode",
        "hexdigest",
        "sha256",
        "unparse"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.422529+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "bbc313b9d0bee4f8a55ec8e75d5a18c8013b1eb1feea291d264b5b5629fe5e32"
    },
    "src/shared/ast_utility.py::parse_metadata_comment": {
      "key": "src/shared/ast_utility.py::parse_metadata_comment",
      "name": "parse_metadata_comment",
      "type": "FunctionDef",
      "file": "src/shared/ast_utility.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Parses metadata comments above a node (e.g., # CAPABILITY:).",
      "docstring": "Parses metadata comments above a node (e.g., # CAPABILITY:).",
      "calls": [
        "len",
        "split",
        "startswith",
        "strip"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [
        "node",
        "lines"
      ],
      "last_updated": "2025-08-31T08:12:11.423066+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e3f70231c4094070d4f2c6b4d58f1eb7a317d3444f6497023acf4a5ec72b8b66"
    },
    "src/system/guard/capability_discovery.py::collect_code_capabilities": {
      "key": "src/system/guard/capability_discovery.py::collect_code_capabilities",
      "name": "collect_code_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/capability_discovery.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Unified discovery entrypoint that tries the live KnowledgeGraphBuilder first,",
      "docstring": "Unified discovery entrypoint that tries the live KnowledgeGraphBuilder first,\nthen falls back to a direct source scan.",
      "calls": [
        "RuntimeError",
        "collect_from_kgb",
        "collect_from_source_scan"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs",
        "require_kgb"
      ],
      "last_updated": "2025-08-31T08:12:11.424214+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "a5c0c6aa713fd89f4674dfebc7c2ac9f7c5eb876808c00ea8f37f8cc3b371d6c"
    },
    "src/system/guard/capability_discovery.py::load_manifest_capabilities": {
      "key": "src/system/guard/capability_discovery.py::load_manifest_capabilities",
      "name": "load_manifest_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/capability_discovery.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "docstring": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "calls": [
        "load_manifest_capabilities"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "root",
        "explicit_path"
      ],
      "last_updated": "2025-08-31T08:12:11.424528+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6e1eca8c5e5357315e89b8783380a34aa0ca89594b6f700ead40758ce3565bd5"
    },
    "src/system/guard/drift_detector.py::detect_capability_drift": {
      "key": "src/system/guard/drift_detector.py::detect_capability_drift",
      "name": "detect_capability_drift",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Computes missing, undeclared, and mismatched capabilities between manifest and code.",
      "docstring": "Computes missing, undeclared, and mismatched capabilities between manifest and code.",
      "calls": [
        "DriftReport",
        "append",
        "keys",
        "list",
        "set",
        "sorted"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "manifest_caps",
        "code_caps"
      ],
      "last_updated": "2025-08-31T08:12:11.426229+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "41c33139d74ee57b811159044413214eb52e21c1c965b987ccf42762a5a7d437"
    },
    "src/system/guard/drift_detector.py::write_report": {
      "key": "src/system/guard/drift_detector.py::write_report",
      "name": "write_report",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Persists the drift report to disk for evidence and CI.",
      "docstring": "Persists the drift report to disk for evidence and CI.",
      "calls": [
        "dumps",
        "mkdir",
        "to_dict",
        "write_text"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "report_path",
        "report"
      ],
      "last_updated": "2025-08-31T08:12:11.426611+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0c01bafc107f6f955b885df8831d19c89578d12633007b4346648ac1c2737a54"
    },
    "src/system/guard/models.py::CapabilityMeta": {
      "key": "src/system/guard/models.py::CapabilityMeta",
      "name": "CapabilityMeta",
      "type": "ClassDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "A minimal, shared data container for capability metadata.",
      "docstring": "A minimal, shared data container for capability metadata.",
      "calls": [
        "dataclass"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.427461+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "495ac06574f3c1cb1dc7f04ecab6b0f93f5f82f0f9081f50e3abd33419c1af97"
    },
    "src/system/guard/models.py::DriftReport": {
      "key": "src/system/guard/models.py::DriftReport",
      "name": "DriftReport",
      "type": "ClassDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Structured result for capability drift suitable for JSON emission and CI gating.",
      "docstring": "Structured result for capability drift suitable for JSON emission and CI gating.",
      "calls": [
        "sorted"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.427947+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "25d44a7c22bb5a94ffada2b69bba56668ff9647dcf9352fecc85ea7f4bc0f1a3"
    },
    "src/system/guard/models.py::to_dict": {
      "key": "src/system/guard/models.py::to_dict",
      "name": "to_dict",
      "type": "FunctionDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Converts the drift report into a stable JSON-serializable dict.",
      "docstring": "Converts the drift report into a stable JSON-serializable dict.",
      "calls": [
        "sorted"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.428268+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/guard/models.py::DriftReport",
      "structural_hash": "428afb647fa19ab19be8aed1636fc620d3630613432f2b5737faaf4b357c9cf6"
    },
    "src/system/governance/audit_context.py::AuditorContext": {
      "key": "src/system/governance/audit_context.py::AuditorContext",
      "name": "AuditorContext",
      "type": "ClassDef",
      "file": "src/system/governance/audit_context.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Shared state container for audit checks.",
      "docstring": "Shared state container for audit checks.",
      "calls": [
        "IntentModel",
        "aggregate_manifests",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.429334+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "ce638c0ce8dfcbdca357012084f8b911296231ac73b99f56090e694a189dfe6a"
    },
    "src/system/governance/audit_context.py::__init__": {
      "key": "src/system/governance/audit_context.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/audit_context.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize context with repository paths and configurations.",
      "docstring": "Initialize context with repository paths and configurations.\n\nArgs:\n    repo_root: Root directory of the repository.",
      "calls": [
        "IntentModel",
        "aggregate_manifests",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.429883+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/audit_context.py::AuditorContext",
      "structural_hash": "2d1a62d9ed0c7d587c4b6dc45832dbeb166f92bbbbb1f6204339892dc464f7f3"
    },
    "src/system/governance/audit_execution.py::AuditExecutor": {
      "key": "src/system/governance/audit_execution.py::AuditExecutor",
      "name": "AuditExecutor",
      "type": "ClassDef",
      "file": "src/system/governance/audit_execution.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Handles the execution of constitutional audit checks.",
      "docstring": "Handles the execution of constitutional audit checks.",
      "calls": [
        "AuditFinding",
        "Console",
        "Panel",
        "_LoggingBridge",
        "_log_finding",
        "append",
        "check_fn",
        "error",
        "extend",
        "get",
        "info",
        "print",
        "split",
        "strip",
        "sum",
        "warning"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.433422+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "ac128d8a1d9b8ae8a63632154c9e2109e860ca70d09c64d34e829f3144a4e8e1"
    },
    "src/system/governance/audit_execution.py::__init__": {
      "key": "src/system/governance/audit_execution.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/audit_execution.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize the audit executor.",
      "docstring": "Initialize the audit executor.\n\nArgs:\n    context: Shared audit context containing repository state and configuration.",
      "calls": [
        "Console",
        "_LoggingBridge"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.433773+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/audit_execution.py::AuditExecutor",
      "structural_hash": "e0dfba54d11a85f345949f08a3436685054ed8c9fafcfe965723cc074d45a0f2"
    },
    "src/system/governance/audit_execution.py::execute_checks": {
      "key": "src/system/governance/audit_execution.py::execute_checks",
      "name": "execute_checks",
      "type": "FunctionDef",
      "file": "src/system/governance/audit_execution.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Execute all provided audit checks and collect findings.",
      "docstring": "Execute all provided audit checks and collect findings.\n\nArgs:\n    checks: List of tuples containing check names and callable functions.\n\nReturns:\n    List of audit findings from all executed checks.",
      "calls": [
        "AuditFinding",
        "_log_finding",
        "append",
        "check_fn",
        "error",
        "extend",
        "info",
        "split"
      ],
      "line_number": 54,
      "is_async": false,
      "parameters": [
        "self",
        "checks"
      ],
      "last_updated": "2025-08-31T08:12:11.434530+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/audit_execution.py::AuditExecutor",
      "structural_hash": "fb0764f35deb183e272850f11c1aadeae8ffd4067e5f9c21e7482c397e4dea24"
    },
    "src/system/governance/audit_execution.py::_log_finding": {
      "key": "src/system/governance/audit_execution.py::_log_finding",
      "name": "_log_finding",
      "type": "FunctionDef",
      "file": "src/system/governance/audit_execution.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Log an individual audit finding with appropriate severity level.",
      "docstring": "Log an individual audit finding with appropriate severity level.\n\nArgs:\n    finding: The audit finding to log.",
      "calls": [
        "error",
        "info",
        "warning"
      ],
      "line_number": 89,
      "is_async": false,
      "parameters": [
        "self",
        "finding"
      ],
      "last_updated": "2025-08-31T08:12:11.435058+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/audit_execution.py::AuditExecutor",
      "structural_hash": "172a5c3710c662f118a6635bd97c8a58e84579c48c0955d4ce77e9b65dc3c920"
    },
    "src/system/governance/audit_execution.py::report_final_status": {
      "key": "src/system/governance/audit_execution.py::report_final_status",
      "name": "report_final_status",
      "type": "FunctionDef",
      "file": "src/system/governance/audit_execution.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Print final audit summary to the console, including the unassigned capability count.",
      "docstring": "Print final audit summary to the console, including the unassigned capability count.\n\nArgs:\n    findings: List of all audit findings to summarize.\n    passed: Whether all checks passed without errors.\n    symbols_list: The list of all symbols from the knowledge graph.",
      "calls": [
        "Panel",
        "get",
        "print",
        "sum"
      ],
      "line_number": 104,
      "is_async": false,
      "parameters": [
        "self",
        "findings",
        "passed",
        "symbols_list"
      ],
      "last_updated": "2025-08-31T08:12:11.435849+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/audit_execution.py::AuditExecutor",
      "structural_hash": "8cc666143e60ce54018c3d14eb2a88fd8a4b935d45b0dfac3ad02d3d365f7ce2"
    },
    "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor": {
      "key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "name": "ConstitutionalAuditor",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "alignment_checking",
      "intent": "Orchestrates the discovery and execution of constitutional checks.",
      "docstring": "Orchestrates the discovery and execution of constitutional checks.",
      "calls": [
        "AuditExecutor",
        "AuditFinding",
        "AuditorContext",
        "Console",
        "FunctionCallVisitor",
        "IntentModel",
        "Panel",
        "Path",
        "ProposalLoader",
        "ProposalSignatureChecker",
        "ProposalSummarizer",
        "ProposalValidator",
        "_LoggingBridge",
        "_discover_checks",
        "aggregate_manifests",
        "any",
        "append",
        "check_fn",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "exists",
        "extend",
        "get",
        "get_repo_root",
        "getmembers",
        "glob",
        "import_module",
        "info",
        "iter_child_nodes",
        "len",
        "list",
        "load_config",
        "load_dotenv",
        "parse",
        "parse_metadata_comment",
        "print",
        "read_text",
        "report_final_status",
        "sort",
        "split",
        "splitlines",
        "startswith",
        "str",
        "strip",
        "values",
        "visit",
        "warning"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.444127+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "bf00bd0828af8be6abf952902cae4d022cb9738cc6d94c1d07f960f37de70279"
    },
    "src/system/governance/constitutional_auditor.py::__init__": {
      "key": "src/system/governance/constitutional_auditor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize the auditor, loading configuration and knowledge files.",
      "docstring": "Initialize the auditor, loading configuration and knowledge files.\n\nArgs:\n    repo_root_override: If provided, use this directory as the repo root (used for canary validation).",
      "calls": [
        "AuditorContext",
        "Console",
        "_LoggingBridge",
        "_discover_checks",
        "exists",
        "get_repo_root",
        "info",
        "load_dotenv"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root_override"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.444843+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "bc4287993c2764e86409f5a80f21f7f30d0ed53ca1b9151a171211514d22c671"
    },
    "src/system/governance/constitutional_auditor.py::_discover_checks": {
      "key": "src/system/governance/constitutional_auditor.py::_discover_checks",
      "name": "_discover_checks",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Discover check methods from modules in the 'checks' directory.",
      "docstring": "Discover check methods from modules in the 'checks' directory.",
      "calls": [
        "Path",
        "ProposalLoader",
        "ProposalSignatureChecker",
        "ProposalSummarizer",
        "ProposalValidator",
        "append",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "get",
        "getmembers",
        "glob",
        "import_module",
        "len",
        "sort",
        "split",
        "startswith",
        "warning"
      ],
      "line_number": 86,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.446304+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "085644c5b3261ab6322ce84970a780e57b6f9f8c4c783cb6a1ef81b51704c307"
    },
    "src/system/governance/constitutional_auditor.py::validate_capability_tags": {
      "key": "src/system/governance/constitutional_auditor.py::validate_capability_tags",
      "name": "validate_capability_tags",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Validates capability tags in a file using shared AST utilities.",
      "docstring": "Validates capability tags in a file using shared AST utilities.",
      "calls": [
        "AuditFinding",
        "FunctionCallVisitor",
        "append",
        "error",
        "get",
        "iter_child_nodes",
        "parse",
        "parse_metadata_comment",
        "read_text",
        "splitlines",
        "str",
        "visit"
      ],
      "line_number": 150,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-31T08:12:11.447099+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "3fb5e0547309396547f075b7485c4a38211ca54cd4ee8460404517770b62fb56"
    },
    "src/system/governance/constitutional_auditor.py::run_full_audit": {
      "key": "src/system/governance/constitutional_auditor.py::run_full_audit",
      "name": "run_full_audit",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Run all discovered validation checks and return overall status.",
      "docstring": "Run all discovered validation checks and return overall status.",
      "calls": [
        "AuditExecutor",
        "AuditFinding",
        "Panel",
        "any",
        "append",
        "check_fn",
        "error",
        "extend",
        "info",
        "print",
        "report_final_status",
        "split",
        "warning"
      ],
      "line_number": 187,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.448225+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "structural_hash": "066f0f9ea5e6a62f9202a8fac312d0c6782d5f233642836877f9cca6d6db2e70"
    },
    "src/system/governance/constitutional_auditor.py::main": {
      "key": "src/system/governance/constitutional_auditor.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "CLI entry point for the Constitutional Auditor.",
      "docstring": "CLI entry point for the Constitutional Auditor.",
      "calls": [
        "ConstitutionalAuditor",
        "error",
        "exit",
        "load_dotenv",
        "run_full_audit"
      ],
      "line_number": 243,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-31T08:12:11.448794+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "fd70e9ccbb7175b661419be0db032e5304636a691de0629a381b9cb8c39ccf17"
    },
    "src/system/governance/check_discovery.py::CheckDiscovery": {
      "key": "src/system/governance/check_discovery.py::CheckDiscovery",
      "name": "CheckDiscovery",
      "type": "ClassDef",
      "file": "src/system/governance/check_discovery.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Discovers and instantiates constitutional audit checks with proper dependency injection.",
      "docstring": "Discovers and instantiates constitutional audit checks with proper dependency injection.",
      "calls": [
        "Path",
        "ProposalLoader",
        "ProposalSignatureChecker",
        "ProposalSummarizer",
        "ProposalValidator",
        "_extract_check_methods",
        "_initialize_proposal_dependencies",
        "_instantiate_check_class",
        "_process_check_file",
        "append",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "extend",
        "get",
        "getmembers",
        "glob",
        "import_module",
        "len",
        "sort",
        "split",
        "startswith",
        "warning"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.454023+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "d7b61bf5ba04b29679f6590621d84aeadc6c0f98c97b09fead4397f052de1a54"
    },
    "src/system/governance/check_discovery.py::__init__": {
      "key": "src/system/governance/check_discovery.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/check_discovery.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initialize the check discovery system.",
      "docstring": "Initialize the check discovery system.\n\nArgs:\n    context: The auditor context containing shared state and configurations.\n    repo_root: Root directory of the repository.",
      "calls": [
        "Path"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self",
        "context",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.454402+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/check_discovery.py::CheckDiscovery",
      "structural_hash": "5003682ae6659f31ac402f9285de55c5b3a2ecdfaa38e4e60af2000804bf9253"
    },
    "src/system/governance/check_discovery.py::discover_checks": {
      "key": "src/system/governance/check_discovery.py::discover_checks",
      "name": "discover_checks",
      "type": "FunctionDef",
      "file": "src/system/governance/check_discovery.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Discover check methods from modules in the 'checks' directory.",
      "docstring": "Discover check methods from modules in the 'checks' directory.\n\nReturns:\n    List of tuples containing check names and their callable methods.",
      "calls": [
        "_initialize_proposal_dependencies",
        "_process_check_file",
        "debug",
        "extend",
        "glob",
        "len",
        "sort",
        "split",
        "startswith"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.455120+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/check_discovery.py::CheckDiscovery",
      "structural_hash": "3a0263d5e7df32426d825214e0635092a2dbcc6ae34a0f61df264ef1295fe8cc"
    },
    "src/system/governance/check_discovery.py::_initialize_proposal_dependencies": {
      "key": "src/system/governance/check_discovery.py::_initialize_proposal_dependencies",
      "name": "_initialize_proposal_dependencies",
      "type": "FunctionDef",
      "file": "src/system/governance/check_discovery.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initialize proposal-related dependencies for dependency injection.",
      "docstring": "Initialize proposal-related dependencies for dependency injection.\n\nReturns:\n    Dictionary containing initialized proposal dependencies.",
      "calls": [
        "ProposalLoader",
        "ProposalSignatureChecker",
        "ProposalSummarizer",
        "ProposalValidator",
        "warning"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.455641+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/check_discovery.py::CheckDiscovery",
      "structural_hash": "dc488759ace40d3ab41b0a841ba52229ea6a5920fcad96c240a52eb33cc57446"
    },
    "src/system/governance/check_discovery.py::_process_check_file": {
      "key": "src/system/governance/check_discovery.py::_process_check_file",
      "name": "_process_check_file",
      "type": "FunctionDef",
      "file": "src/system/governance/check_discovery.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Process a single check file and extract check methods.",
      "docstring": "Process a single check file and extract check methods.\n\nArgs:\n    check_file: Path to the check file to process.\n    proposal_dependencies: Pre-initialized proposal dependencies.\n\nReturns:\n    List of check methods found in the file.",
      "calls": [
        "_extract_check_methods",
        "_instantiate_check_class",
        "endswith",
        "error",
        "extend",
        "getmembers",
        "import_module"
      ],
      "line_number": 91,
      "is_async": false,
      "parameters": [
        "self",
        "check_file",
        "proposal_dependencies"
      ],
      "last_updated": "2025-08-31T08:12:11.456466+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/check_discovery.py::CheckDiscovery",
      "structural_hash": "8b34b400ca5184e521fa544d25823f02a9488471f589f9cbcfbd03a29c02a5ac"
    },
    "src/system/governance/check_discovery.py::_instantiate_check_class": {
      "key": "src/system/governance/check_discovery.py::_instantiate_check_class",
      "name": "_instantiate_check_class",
      "type": "FunctionDef",
      "file": "src/system/governance/check_discovery.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Instantiate a check class with appropriate dependencies.",
      "docstring": "Instantiate a check class with appropriate dependencies.\n\nArgs:\n    class_name: Name of the check class.\n    class_obj: The check class object.\n    proposal_dependencies: Pre-initialized proposal dependencies.\n\nReturns:\n    Instantiated check class or None if instantiation failed.",
      "calls": [
        "class_obj",
        "error"
      ],
      "line_number": 130,
      "is_async": false,
      "parameters": [
        "self",
        "class_name",
        "class_obj",
        "proposal_dependencies"
      ],
      "last_updated": "2025-08-31T08:12:11.457012+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/check_discovery.py::CheckDiscovery",
      "structural_hash": "8a196efe20d0592641fcb7b6e4fc66bfae93b5d1ecb292d3cf10284510a0177a"
    },
    "src/system/governance/check_discovery.py::_extract_check_methods": {
      "key": "src/system/governance/check_discovery.py::_extract_check_methods",
      "name": "_extract_check_methods",
      "type": "FunctionDef",
      "file": "src/system/governance/check_discovery.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Extract check methods from an instantiated check class.",
      "docstring": "Extract check methods from an instantiated check class.\n\nArgs:\n    check_instance: Instantiated check class.\n    check_file: Path to the check file (for symbol lookup).\n\nReturns:\n    List of tuples containing check names and methods.",
      "calls": [
        "append",
        "get",
        "getmembers",
        "startswith",
        "warning"
      ],
      "line_number": 156,
      "is_async": false,
      "parameters": [
        "self",
        "check_instance",
        "check_file"
      ],
      "last_updated": "2025-08-31T08:12:11.457799+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/check_discovery.py::CheckDiscovery",
      "structural_hash": "1ad06d60b3161f3c74116c59d0e8f526cf561ca97796681ceee1a284bbd0dca9"
    },
    "src/system/governance/models.py::AuditSeverity": {
      "key": "src/system/governance/models.py::AuditSeverity",
      "name": "AuditSeverity",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Severity levels for audit findings.",
      "docstring": "Severity levels for audit findings.",
      "calls": [],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-31T08:12:11.458523+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition",
      "structural_hash": "16f42919eb2db7f0eb2c11ab2e4f26a4e4ae19c1cc8c403b1f81910ee27896b6"
    },
    "src/system/governance/models.py::AuditFinding": {
      "key": "src/system/governance/models.py::AuditFinding",
      "name": "AuditFinding",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents a single audit finding.",
      "docstring": "Represents a single audit finding.",
      "calls": [],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.458848+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "3586a9ae3626c1bdd4adf153a57d2329f79715a612d974372ead787fbc1f922e"
    },
    "src/system/admin/new.py::register": {
      "key": "src/system/admin/new.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/new.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register the 'new' command with the main CLI app.",
      "docstring": "Register the 'new' command with the main CLI app.",
      "calls": [
        "command"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.459361+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "1ea43e3e6ec2e01b5c2d9649687a8f996380f6bccd68152a4f28017023155ab2"
    },
    "src/system/admin/fixer.py::fix_headers": {
      "key": "src/system/admin/fixer.py::fix_headers",
      "name": "fix_headers",
      "type": "FunctionDef",
      "file": "src/system/admin/fixer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "fix.headers",
      "intent": "A unified tool to enforce all constitutional header conventions on Python files.",
      "docstring": "A unified tool to enforce all constitutional header conventions on Python files.",
      "calls": [
        "Argument",
        "KnowledgeGraphBuilder",
        "Option",
        "_run_header_fix_cycle",
        "append",
        "build",
        "dumps",
        "endswith",
        "get",
        "info",
        "list",
        "relative_to",
        "run",
        "sorted",
        "str",
        "values",
        "write_text"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "file_path",
        "dry_run"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.461369+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "b9d4e6f45afda1223f3acdaa7d1af7d54aa6389217a8e0365db61b7291989881"
    },
    "src/system/admin/fixer.py::register": {
      "key": "src/system/admin/fixer.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/fixer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register fixer commands under the admin CLI.",
      "docstring": "Intent: Register fixer commands under the admin CLI.",
      "calls": [
        "Typer",
        "add_typer",
        "command"
      ],
      "line_number": 73,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.461767+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "8d97cbe68773b09796a556c0a8ecaad655bd9e3b375a2b84469630e0338e4de9"
    },
    "src/system/admin/fixer_header.py::_run_header_fix_cycle": {
      "key": "src/system/admin/fixer_header.py::_run_header_fix_cycle",
      "name": "_run_header_fix_cycle",
      "type": "AsyncFunctionDef",
      "file": "src/system/admin/fixer_header.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "The core async logic for finding and fixing all header style violations.",
      "docstring": "The core async logic for finding and fixing all header style violations.",
      "calls": [
        "CognitiveService",
        "Semaphore",
        "as_completed",
        "error",
        "format",
        "get_client_for_role",
        "info",
        "items",
        "keys",
        "len",
        "make_request_async",
        "read_text",
        "secho",
        "sorted",
        "strip",
        "track",
        "validate_code",
        "warning",
        "worker",
        "write_text"
      ],
      "line_number": 25,
      "is_async": true,
      "parameters": [
        "dry_run",
        "all_py_files"
      ],
      "last_updated": "2025-08-31T08:12:11.464731+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "9bf5b01dc66527e396762ee3246547af079c7c65b0a9d6dbc2341a1fadb5ab5a"
    },
    "src/system/admin/agent.py::_extract_json_from_response": {
      "key": "src/system/admin/agent.py::_extract_json_from_response",
      "name": "_extract_json_from_response",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Helper to extract JSON from LLM responses for scaffolding.",
      "docstring": "Helper to extract JSON from LLM responses for scaffolding.",
      "calls": [
        "group",
        "loads",
        "search"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "text"
      ],
      "last_updated": "2025-08-31T08:12:11.467570+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8a36968355b828d6019372c925e1756f28c07cb217db705126897f497d418295"
    },
    "src/system/admin/agent.py::scaffold_new_application": {
      "key": "src/system/admin/agent.py::scaffold_new_application",
      "name": "scaffold_new_application",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "scaffold_project",
      "intent": "Uses an LLM to plan and generate a new, multi-file application.",
      "docstring": "Uses an LLM to plan and generate a new, multi-file application.",
      "calls": [
        "GitService",
        "Scaffolder",
        "ValueError",
        "_extract_json_from_response",
        "add",
        "commit",
        "dedent",
        "error",
        "exists",
        "format",
        "get_client_for_role",
        "info",
        "isinstance",
        "items",
        "len",
        "make_request",
        "read_text",
        "relative_to",
        "run",
        "scaffold_base_structure",
        "str",
        "strip",
        "write_file"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [
        "project_name",
        "goal",
        "cognitive_service",
        "file_handler",
        "initialize_git"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.469101+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "5fb2c86f3ad46cdd6b53a4626a7895e3347187aa3106e17203a74aa83eb10fa7"
    },
    "src/system/admin/agent.py::agent_scaffold": {
      "key": "src/system/admin/agent.py::agent_scaffold",
      "name": "agent_scaffold",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Uses an LLM agent to autonomously scaffold a new application.",
      "docstring": "Uses an LLM agent to autonomously scaffold a new application.",
      "calls": [
        "Argument",
        "CognitiveService",
        "Exit",
        "FileHandler",
        "Option",
        "command",
        "error",
        "info",
        "scaffold_new_application",
        "secho",
        "str"
      ],
      "line_number": 121,
      "is_async": false,
      "parameters": [
        "name",
        "goal",
        "git_init"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.470018+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "9475dbcbe9a902eac2feb951808e668d1626b53299e955d800560135377094ba"
    },
    "src/system/admin/agent.py::register": {
      "key": "src/system/admin/agent.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register the 'agent' command group with the main CLI app.",
      "docstring": "Register the 'agent' command group with the main CLI app.",
      "calls": [
        "add_typer"
      ],
      "line_number": 154,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.470300+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "d9a7c7ee28a75a2b9721ff7189b6b965ce303d170ae7e819b7f5a8b90a15aac8"
    },
    "src/system/admin/chat.py::chat": {
      "key": "src/system/admin/chat.py::chat",
      "name": "chat",
      "type": "FunctionDef",
      "file": "src/system/admin/chat.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "conversational_interface",
      "intent": "Assesses your natural language goal and provides a clear, actionable command.",
      "docstring": "Assesses your natural language goal and provides a clear, actionable command.",
      "calls": [
        "Argument",
        "CognitiveService",
        "Exit",
        "PromptPipeline",
        "echo",
        "error",
        "exists",
        "format",
        "get",
        "get_client_for_role",
        "info",
        "loads",
        "make_request",
        "process",
        "read_text",
        "secho"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "user_input"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.472963+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "70bae4089ff3e5b05484310b23fd3daa9394af8802aa45a6bfb42c538a4e0b4a"
    },
    "src/system/admin/chat.py::register": {
      "key": "src/system/admin/chat.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/chat.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register the 'chat' command with the main CLI app.",
      "docstring": "Register the 'chat' command with the main CLI app.",
      "calls": [
        "command"
      ],
      "line_number": 80,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.473252+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "37dedeec3177198a679755792c6b5c0dfc0b54ab2b1bc2622594ecd83073c5c6"
    },
    "src/system/admin/migrator.py::register": {
      "key": "src/system/admin/migrator.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/migrator.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register migration commands (manifest-migrator) under the admin CLI.",
      "docstring": "Register migration commands (manifest-migrator) under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.473863+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "667c57036c5fc37bcacc7f6b4161ad97b25fead5a7c4977feaaf26f79ac8ce80"
    },
    "src/system/admin/utils.py::should_fail": {
      "key": "src/system/admin/utils.py::should_fail",
      "name": "should_fail",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.should_fail",
      "intent": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "docstring": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "calls": [
        "bool",
        "get"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "report",
        "fail_on"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.476030+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "9767b4a0c760a32f4f662e9937d6e33fe6702e4fc83938c0d619ac34d4f69c21"
    },
    "src/system/admin/utils.py::load_yaml_file": {
      "key": "src/system/admin/utils.py::load_yaml_file",
      "name": "load_yaml_file",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.load_yaml",
      "intent": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "docstring": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "calls": [
        "read_text",
        "safe_load"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [
        "path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.476367+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "34e0563657c26aee56999d24ca09546552f1148a30acea9f948532397e211128"
    },
    "src/system/admin/utils.py::save_yaml_file": {
      "key": "src/system/admin/utils.py::save_yaml_file",
      "name": "save_yaml_file",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.save_yaml",
      "intent": "Intent: Persist YAML with stable ordering to ensure consistent hashes.",
      "docstring": "Intent: Persist YAML with stable ordering to ensure consistent hashes.",
      "calls": [
        "dump",
        "write_text"
      ],
      "line_number": 45,
      "is_async": false,
      "parameters": [
        "path",
        "data"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.476691+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "b505599bbf36dda45d4e433c3caf1db5296ba6bcc6ce1f2ab9a37f726d6e649c"
    },
    "src/system/admin/utils.py::_get_canonical_payload": {
      "key": "src/system/admin/utils.py::_get_canonical_payload",
      "name": "_get_canonical_payload",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Creates a stable, sorted JSON string of the proposal's core intent,",
      "docstring": "Creates a stable, sorted JSON string of the proposal's core intent,\nignoring all other metadata like signatures. This is the single source\nof truth for what gets signed.",
      "calls": [
        "dumps",
        "get"
      ],
      "line_number": 51,
      "is_async": false,
      "parameters": [
        "proposal"
      ],
      "last_updated": "2025-08-31T08:12:11.477158+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "4586ff99b4f1365725abb5e3f49fd551c1fff770e2425ad3cd76eb1424f72f87"
    },
    "src/system/admin/utils.py::generate_approval_token": {
      "key": "src/system/admin/utils.py::generate_approval_token",
      "name": "generate_approval_token",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.generate_token",
      "intent": "Intent: Produce a deterministic token based on a canonical representation",
      "docstring": "Intent: Produce a deterministic token based on a canonical representation\nof the proposal's intent.",
      "calls": [
        "Hash",
        "SHA256",
        "_get_canonical_payload",
        "encode",
        "finalize",
        "hex",
        "update"
      ],
      "line_number": 69,
      "is_async": false,
      "parameters": [
        "proposal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.477590+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "1c630b6f83b78c5814358612f26574c641fdd7bf5c88227e49d10dc4098b9649"
    },
    "src/system/admin/utils.py::load_private_key": {
      "key": "src/system/admin/utils.py::load_private_key",
      "name": "load_private_key",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.load_key",
      "intent": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "docstring": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "calls": [
        "SystemExit",
        "error",
        "exists",
        "load_pem_private_key",
        "read_bytes"
      ],
      "line_number": 83,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.478034+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "214d24af01a57072f0d4734067006676beba3187c5f11f55eaa1ce52291fa7bc"
    },
    "src/system/admin/utils.py::archive_rollback_plan": {
      "key": "src/system/admin/utils.py::archive_rollback_plan",
      "name": "archive_rollback_plan",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "governance.cli.archive_plan",
      "intent": "Intent: Persist a rollback plan snapshot for approved proposals.",
      "docstring": "Intent: Persist a rollback plan snapshot for approved proposals.",
      "calls": [
        "dumps",
        "get",
        "info",
        "mkdir",
        "strftime",
        "utcnow",
        "write_text"
      ],
      "line_number": 97,
      "is_async": false,
      "parameters": [
        "proposal_name",
        "proposal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.478723+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "14621f1c851bb9890c92aec13cc1c4380bd6b960cf09994a802a141643f029ef"
    },
    "src/system/admin/system.py::check": {
      "key": "src/system/admin/system.py::check",
      "name": "check",
      "type": "FunctionDef",
      "file": "src/system/admin/system.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Run all checks: linting, tests, and a full constitutional audit.",
      "docstring": "Run all checks: linting, tests, and a full constitutional audit.\nThis is the canonical command for ensuring system integrity.",
      "calls": [
        "Exit",
        "command",
        "error",
        "run",
        "secho",
        "which"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.480409+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "47a543ea235d49da15d072b8c7be8dc94137fc1b7cac14b931bc9a0b66fb52e7"
    },
    "src/system/admin/system.py::register": {
      "key": "src/system/admin/system.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/system.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register the 'system' command group with the main CLI app.",
      "docstring": "Register the 'system' command group with the main CLI app.",
      "calls": [
        "add_typer"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.480695+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "21288011b22ed5f8fb365f7f3c270bbaa336ef169383298a94797d5acc42b601"
    },
    "src/system/admin/reviewer.py::_get_bundle_content": {
      "key": "src/system/admin/reviewer.py::_get_bundle_content",
      "name": "_get_bundle_content",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Generic function to bundle the content of a list of files.",
      "docstring": "Generic function to bundle the content of a list of files.",
      "calls": [
        "append",
        "exists",
        "is_file",
        "join",
        "list",
        "read_text",
        "relative_to",
        "resolve",
        "sorted",
        "warning"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "files_to_bundle",
        "root_dir"
      ],
      "last_updated": "2025-08-31T08:12:11.485312+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "cd7f0ff23b1cd2a34e28832d11838d9e8bd28a911cc4471768365d7201769f08"
    },
    "src/system/admin/reviewer.py::_get_constitutional_files": {
      "key": "src/system/admin/reviewer.py::_get_constitutional_files",
      "name": "_get_constitutional_files",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Discovers all constitutional files by scanning the .intent directory and",
      "docstring": "Discovers all constitutional files by scanning the .intent directory and\napplying a deny-list, rather than relying on meta.yaml.",
      "calls": [
        "any",
        "append",
        "is_file",
        "rglob",
        "str"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.485823+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "a2d726ce7280ab6089b41aa545863c3f27b3a98fd15852fca776d49ec8480bb8"
    },
    "src/system/admin/reviewer.py::_get_docs_files": {
      "key": "src/system/admin/reviewer.py::_get_docs_files",
      "name": "_get_docs_files",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Discovers and returns a list of all human-readable documentation files.",
      "docstring": "Discovers and returns a list of all human-readable documentation files.",
      "calls": [
        "add",
        "any",
        "exists",
        "is_dir",
        "list",
        "rglob"
      ],
      "line_number": 76,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.486376+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d7555cf7c42d7f7b66fa39b299df07d082e9fa312794417b9fd2066831ff5c37"
    },
    "src/system/admin/reviewer.py::_orchestrate_review": {
      "key": "src/system/admin/reviewer.py::_orchestrate_review",
      "name": "_orchestrate_review",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Generic orchestrator for all review commands.",
      "docstring": "Generic orchestrator for all review commands.",
      "calls": [
        "CognitiveService",
        "Exit",
        "Path",
        "_get_bundle_content",
        "echo",
        "error",
        "exists",
        "file_gatherer_fn",
        "get_client_for_role",
        "info",
        "len",
        "make_request",
        "mkdir",
        "read_text",
        "replace",
        "secho",
        "title",
        "write_text"
      ],
      "line_number": 96,
      "is_async": false,
      "parameters": [
        "bundle_name",
        "prompt_filename",
        "file_gatherer_fn",
        "output_path",
        "no_send"
      ],
      "last_updated": "2025-08-31T08:12:11.487888+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "fdaa8e7c8c61eb90293cea879581d098bc687abd7f45e1d68e174912e34a0844"
    },
    "src/system/admin/reviewer.py::peer_review": {
      "key": "src/system/admin/reviewer.py::peer_review",
      "name": "peer_review",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "constitutional_peer_review",
      "intent": "Audits the machine-readable constitution (.intent files) for clarity and consistency.",
      "docstring": "Audits the machine-readable constitution (.intent files) for clarity and consistency.",
      "calls": [
        "Option",
        "Path",
        "_orchestrate_review"
      ],
      "line_number": 148,
      "is_async": false,
      "parameters": [
        "output",
        "no_send"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.488259+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "002df47b2c825270c80c30da364a63910331248f3c5e2dd1268bdfc9ff92c2e5"
    },
    "src/system/admin/reviewer.py::docs_clarity_audit": {
      "key": "src/system/admin/reviewer.py::docs_clarity_audit",
      "name": "docs_clarity_audit",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "docs.clarity_audit",
      "intent": "Audits the human-readable documentation (.md files) for conceptual clarity.",
      "docstring": "Audits the human-readable documentation (.md files) for conceptual clarity.",
      "calls": [
        "Option",
        "Path",
        "_orchestrate_review"
      ],
      "line_number": 165,
      "is_async": false,
      "parameters": [
        "output",
        "no_send"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.488630+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "9fb8480aeda576eb2ca3447e12df508ac0ebb7c07018d7069faefb561ed29062"
    },
    "src/system/admin/reviewer.py::code_review": {
      "key": "src/system/admin/reviewer.py::code_review",
      "name": "code_review",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "code.peer_review",
      "intent": "Submits a source file to an AI expert for a peer review and improvement suggestions.",
      "docstring": "Submits a source file to an AI expert for a peer review and improvement suggestions.",
      "calls": [
        "Argument",
        "CognitiveService",
        "Console",
        "Exit",
        "Markdown",
        "Panel",
        "error",
        "get_client_for_role",
        "info",
        "make_request",
        "print",
        "read_text",
        "relative_to",
        "status"
      ],
      "line_number": 182,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.489638+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "a7a4f8e7adb6c8d44e9b2a80c1447c4b8143188c83841313f6b8990451202bfd"
    },
    "src/system/admin/reviewer.py::register": {
      "key": "src/system/admin/reviewer.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Registers the 'review' command group and its subcommands.",
      "docstring": "Registers the 'review' command group and its subcommands.",
      "calls": [
        "Path",
        "Typer",
        "_orchestrate_review",
        "add_typer",
        "command"
      ],
      "line_number": 228,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.490185+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "c442a80797138d8e9dd21da891d62ad1dde157086ee05a588ba4f73737a64361"
    },
    "src/system/admin/byor.py::initialize_repository": {
      "key": "src/system/admin/byor.py::initialize_repository",
      "name": "initialize_repository",
      "type": "FunctionDef",
      "file": "src/system/admin/byor.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "docstring": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "calls": [
        "Argument",
        "Exit",
        "KnowledgeGraphBuilder",
        "Option",
        "build",
        "dump",
        "echo",
        "error",
        "get",
        "info",
        "isinstance",
        "items",
        "len",
        "list",
        "mkdir",
        "read_text",
        "secho",
        "set",
        "sorted",
        "values",
        "write_text"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "path",
        "dry_run"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.493997+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "2ed9a9391c9b184f23695adff3abd96c8e091ab7cbc3977971cddbf7f2753aa2"
    },
    "src/system/admin/byor.py::register": {
      "key": "src/system/admin/byor.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/byor.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "docstring": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 144,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.494298+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "37889ba776c8b1e5810ab08093ff940de2bd4f5f9491b6dea37abf484e5c5094"
    },
    "src/system/admin/proposals.py::proposals_list": {
      "key": "src/system/admin/proposals.py::proposals_list",
      "name": "proposals_list",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "List pending constitutional proposals and display their status.",
      "docstring": "List pending constitutional proposals and display their status.",
      "calls": [
        "any",
        "command",
        "endswith",
        "get",
        "glob",
        "info",
        "len",
        "list",
        "load_yaml_file",
        "mkdir",
        "sorted",
        "strip"
      ],
      "line_number": 37,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.499800+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "67fbdeb0849cbd780abc36dda748d4146d03cb0db4b5d0390a63140a663d18fc"
    },
    "src/system/admin/proposals.py::proposals_sign": {
      "key": "src/system/admin/proposals.py::proposals_sign",
      "name": "proposals_sign",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Sign a proposal with the operator's private key.",
      "docstring": "Sign a proposal with the operator's private key.",
      "calls": [
        "Argument",
        "Exit",
        "append",
        "b64encode",
        "command",
        "decode",
        "encode",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "isoformat",
        "load_private_key",
        "load_yaml_file",
        "prompt",
        "save_yaml_file",
        "setdefault",
        "sign",
        "utcnow"
      ],
      "line_number": 76,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.500744+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "d7ec177551e2d31b152a1efc879e4cecd530d6e23961de2b8be8f33bd530703e"
    },
    "src/system/admin/proposals.py::proposals_approve": {
      "key": "src/system/admin/proposals.py::proposals_approve",
      "name": "proposals_approve",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Verify signatures, run a canary audit, and apply a valid proposal.",
      "docstring": "Verify signatures, run a canary audit, and apply a valid proposal.",
      "calls": [
        "Argument",
        "ConstitutionalAuditor",
        "Exit",
        "Path",
        "TemporaryDirectory",
        "any",
        "archive_rollback_plan",
        "b64decode",
        "command",
        "copy",
        "copytree",
        "encode",
        "endswith",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "ignore_patterns",
        "info",
        "load_pem_public_key",
        "load_yaml_file",
        "mkdir",
        "run_full_audit",
        "str",
        "unlink",
        "verify",
        "warning",
        "write_text"
      ],
      "line_number": 114,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.503196+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "23d4ccad6caa4c75321557907488941a147d2a75ee72b9d5fd86ba7d3ea307bf"
    },
    "src/system/admin/proposals.py::register": {
      "key": "src/system/admin/proposals.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Registers the 'proposals' command group with the main admin CLI application.",
      "docstring": "Registers the 'proposals' command group with the main admin CLI application.\n\nArgs:\n    app: The main Typer application to which the command group will be added.",
      "calls": [
        "add_typer"
      ],
      "line_number": 216,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.503496+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "4e981b065842a9bbda306d29929a38c5b9321b03f56015911ecedde7dad55d72"
    },
    "src/system/admin/guard.py::_find_manifest_path": {
      "key": "src/system/admin/guard.py::_find_manifest_path",
      "name": "_find_manifest_path",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Locate and return the path to the project manifest file, or None.",
      "docstring": "Locate and return the path to the project manifest file, or None.",
      "calls": [
        "exists"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "last_updated": "2025-08-31T08:12:11.508184+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "69e7f93699eecef7fc966e97417ace1a3874c39b05603f363acaa246f0c4ece2"
    },
    "src/system/admin/guard.py::_load_raw_manifest": {
      "key": "src/system/admin/guard.py::_load_raw_manifest",
      "name": "_load_raw_manifest",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads and parses a YAML manifest file, returning an empty dict if not found.",
      "docstring": "Loads and parses a YAML manifest file, returning an empty dict if not found.",
      "calls": [
        "_find_manifest_path",
        "read_text",
        "safe_load"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "last_updated": "2025-08-31T08:12:11.508614+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "fb00ff1f2bbb9977da9f991eeb02c578e906d57a1b6f56662eb5416fbe679697"
    },
    "src/system/admin/guard.py::_ux_defaults": {
      "key": "src/system/admin/guard.py::_ux_defaults",
      "name": "_ux_defaults",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Extracts and returns UX-related default values from the manifest.",
      "docstring": "Extracts and returns UX-related default values from the manifest.",
      "calls": [
        "_load_raw_manifest",
        "bool",
        "get"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "root",
        "explicit"
      ],
      "last_updated": "2025-08-31T08:12:11.509269+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7bc61c37f60bb47bb702c8dfc87b321365346b05bd2754833d9231140098c017"
    },
    "src/system/admin/guard.py::_is_clean": {
      "key": "src/system/admin/guard.py::_is_clean",
      "name": "_is_clean",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Determines if a report is clean.",
      "docstring": "Determines if a report is clean.",
      "calls": [
        "get"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "report"
      ],
      "last_updated": "2025-08-31T08:12:11.509594+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "bc20c657ea56c4b0beefcbd941fee60df78a0b24b14ec99a06d1985091e89b8d"
    },
    "src/system/admin/guard.py::_print_table": {
      "key": "src/system/admin/guard.py::_print_table",
      "name": "_print_table",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Prints a formatted table of the drift report.",
      "docstring": "Prints a formatted table of the drift report.",
      "calls": [
        "Table",
        "_is_clean",
        "add_column",
        "add_row",
        "fit",
        "get",
        "join",
        "row",
        "rprint"
      ],
      "line_number": 79,
      "is_async": false,
      "parameters": [
        "report_dict",
        "labels"
      ],
      "last_updated": "2025-08-31T08:12:11.510858+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d30cfe9a991117208f3b6c630a1e0ce9d302c9d5dcd0776438a56958fb3c385c"
    },
    "src/system/admin/guard.py::_print_pretty": {
      "key": "src/system/admin/guard.py::_print_pretty",
      "name": "_print_pretty",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Prints a user-friendly summary of the drift report.",
      "docstring": "Prints a user-friendly summary of the drift report.",
      "calls": [
        "_print_table"
      ],
      "line_number": 118,
      "is_async": false,
      "parameters": [
        "report_dict",
        "labels"
      ],
      "last_updated": "2025-08-31T08:12:11.511165+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e53dc41a4ae5f19d9bfb1445de70ed0f0b94c17a9afb3483d98a12f1c5bcb3e0"
    },
    "src/system/admin/guard.py::register": {
      "key": "src/system/admin/guard.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Registers the 'guard' command group with the CLI.",
      "docstring": "Registers the 'guard' command group with the CLI.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "StringIO",
        "Typer",
        "_print_pretty",
        "_ux_defaults",
        "add_typer",
        "collect_code_capabilities",
        "command",
        "detect_capability_drift",
        "dumps",
        "echo",
        "items",
        "len",
        "load_manifest_capabilities",
        "lower",
        "mkdir",
        "redirect_stdout",
        "rprint",
        "secho",
        "should_fail",
        "sorted",
        "to_dict",
        "write_report",
        "write_text"
      ],
      "line_number": 123,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.513186+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "bd7bb694be1444b6907d43a126ffdd893608830f70c1c377d5ee27f5c61c41e9"
    },
    "src/system/admin/keys.py::register": {
      "key": "src/system/admin/keys.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/keys.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register key management commands under the admin CLI.",
      "docstring": "Intent: Register key management commands under the admin CLI.",
      "calls": [
        "Argument",
        "NoEncryption",
        "chmod",
        "command",
        "confirm",
        "decode",
        "dump",
        "exists",
        "generate",
        "info",
        "isoformat",
        "mkdir",
        "now",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "write_bytes"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.515193+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "b38b3da06836dbf839dc5f9f6c9f8b60ea5ea8daf73a06a288645c62b9e85556"
    },
    "src/system/admin/fixer_complexity.py::_get_capabilities_from_code": {
      "key": "src/system/admin/fixer_complexity.py::_get_capabilities_from_code",
      "name": "_get_capabilities_from_code",
      "type": "FunctionDef",
      "file": "src/system/admin/fixer_complexity.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "A simple parser to extract # CAPABILITY tags from a string of code.",
      "docstring": "A simple parser to extract # CAPABILITY tags from a string of code.",
      "calls": [
        "findall"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-31T08:12:11.518439+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "4604b3742aa7ba6407f039f8650db41f6df9abc25af9868fd6c9fc89ae4b6507"
    },
    "src/system/admin/fixer_complexity.py::_propose_constitutional_amendment": {
      "key": "src/system/admin/fixer_complexity.py::_propose_constitutional_amendment",
      "name": "_propose_constitutional_amendment",
      "type": "FunctionDef",
      "file": "src/system/admin/fixer_complexity.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Creates a formal proposal file for a constitutional amendment.",
      "docstring": "Creates a formal proposal file for a constitutional amendment.",
      "calls": [
        "Path",
        "dump",
        "info",
        "mkdir",
        "relative_to",
        "str",
        "uuid4",
        "write_text"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "proposal_plan"
      ],
      "last_updated": "2025-08-31T08:12:11.519204+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7b9bd84006e4ebb16c648ac9d8a82cde98ea8f5d1418f90d1730cf37eca1ffdb"
    },
    "src/system/admin/fixer_complexity.py::_run_capability_reconciliation": {
      "key": "src/system/admin/fixer_complexity.py::_run_capability_reconciliation",
      "name": "_run_capability_reconciliation",
      "type": "FunctionDef",
      "file": "src/system/admin/fixer_complexity.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Asks an AI Constitutionalist to analyze the refactoring, re-tag capabilities,",
      "docstring": "Asks an AI Constitutionalist to analyze the refactoring, re-tag capabilities,\nand propose manifest changes.",
      "calls": [
        "ValueError",
        "dumps",
        "error",
        "extract_json_from_response",
        "get_client_for_role",
        "info",
        "make_request"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [
        "cognitive_service",
        "original_code",
        "original_capabilities",
        "refactoring_plan"
      ],
      "last_updated": "2025-08-31T08:12:11.520099+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5d50a9a6e3ca693f51a9bd33b37d14ddc3b8633db5d466874b8a24bf23696442"
    },
    "src/system/admin/fixer_complexity.py::complexity_outliers": {
      "key": "src/system/admin/fixer_complexity.py::complexity_outliers",
      "name": "complexity_outliers",
      "type": "FunctionDef",
      "file": "src/system/admin/fixer_complexity.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "refactor.complexity_outlier",
      "intent": "Identifies and refactors complexity outliers to improve separation of concerns.",
      "docstring": "Identifies and refactors complexity outliers to improve separation of concerns.",
      "calls": [
        "Argument",
        "CognitiveService",
        "Exception",
        "Option",
        "Panel",
        "_get_capabilities_from_code",
        "_propose_constitutional_amendment",
        "_run_capability_reconciliation",
        "error",
        "get",
        "get_client_for_role",
        "group",
        "info",
        "items",
        "loads",
        "make_request",
        "print",
        "read_text",
        "relative_to",
        "replace",
        "search",
        "str",
        "validate_code",
        "warning",
        "write_text"
      ],
      "line_number": 124,
      "is_async": false,
      "parameters": [
        "file_path",
        "dry_run"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.521839+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "4c2bbef3d9d7d74ead99fb1730afa4fe885d1eb8a9c2cc632ccf57d65545d2b0"
    },
    "src/system/admin/develop.py::develop": {
      "key": "src/system/admin/develop.py::develop",
      "name": "develop",
      "type": "FunctionDef",
      "file": "src/system/admin/develop.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "autonomous_development",
      "intent": "Orchestrates the autonomous development process from a high-level goal.",
      "docstring": "Orchestrates the autonomous development process from a high-level goal.",
      "calls": [
        "Argument",
        "Exit",
        "error",
        "info",
        "load_dotenv",
        "run",
        "run_development_cycle",
        "secho"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "goal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.523318+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "16d79c49b373d4d9c8b92f1e5efbef45e0dbc46c9d2b9e80094eb0a704d00b51"
    },
    "src/system/admin/develop.py::register": {
      "key": "src/system/admin/develop.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/develop.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register the 'develop' command with the main CLI app.",
      "docstring": "Register the 'develop' command with the main CLI app.",
      "calls": [
        "command"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-31T08:12:11.523586+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "1f258de02aa7fbdde7cb11c48c6e9446b9531be38860861ebd821ee068b00171"
    },
    "src/system/tools/change_log_updater.py::load_existing_log": {
      "key": "src/system/tools/change_log_updater.py::load_existing_log",
      "name": "load_existing_log",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads the existing change log from disk or returns a new structure.",
      "docstring": "Loads the existing change log from disk or returns a new structure.",
      "calls": [
        "load_config"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.524747+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e510d4deee3f04e8e9033fb4fc9a2d89c49ec6f4ff7ba788d39e7d911350caca"
    },
    "src/system/tools/change_log_updater.py::append_change_entry": {
      "key": "src/system/tools/change_log_updater.py::append_change_entry",
      "name": "append_change_entry",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Appends a new, structured entry to the metacode change log.",
      "docstring": "Appends a new, structured entry to the metacode change log.",
      "calls": [
        "append",
        "dumps",
        "info",
        "isoformat",
        "load_existing_log",
        "mkdir",
        "utcnow",
        "write_text"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "task",
        "step",
        "modified_files",
        "score",
        "violations"
      ],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-31T08:12:11.525324+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d18786ee3c2b2148ba1f636bb20cfca5aa91d427634d588677c744c66b9ad288"
    },
    "src/system/tools/codegraph_builder.py::ProjectStructureError": {
      "key": "src/system/tools/codegraph_builder.py::ProjectStructureError",
      "name": "ProjectStructureError",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Custom exception for when the project's root cannot be determined.",
      "docstring": "Custom exception for when the project's root cannot be determined.",
      "calls": [],
      "line_number": 27,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.527540+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "c4685e93a116f8e7e49123f615813e8e40fe1acd044a4e1e2ab59bd377d74c49"
    },
    "src/system/tools/codegraph_builder.py::find_project_root": {
      "key": "src/system/tools/codegraph_builder.py::find_project_root",
      "name": "find_project_root",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Traverse upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "docstring": "Traverse upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "calls": [
        "ProjectStructureError",
        "exists",
        "resolve"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "last_updated": "2025-08-31T08:12:11.527941+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "aff1c8022ab4a7ff4d6f7f1f2c3edcfcbeea6054c27652da7265c54436283a8d"
    },
    "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder": {
      "key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "name": "KnowledgeGraphBuilder",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "manifest_updating",
      "intent": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "docstring": "Builds a comprehensive JSON representation of the project's code structure and relationships.\n\nThis is the main orchestrator that coordinates file scanning, AST analysis, domain mapping,\nand pattern matching to generate a complete knowledge graph of the codebase.",
      "calls": [
        "ASTAnalyzer",
        "DomainMapper",
        "FileScanner",
        "PatternMatcher",
        "_build_empty_output",
        "_build_output",
        "analyze_files",
        "apply_patterns",
        "asdict",
        "find_python_files",
        "from_project",
        "info",
        "isoformat",
        "items",
        "len",
        "list",
        "now",
        "resolve",
        "sorted",
        "values",
        "warning"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.529279+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "d462e8b8d886ec40cbaedd7d6c531fbcb58f71100e16065aec18d61d63e9ed24"
    },
    "src/system/tools/codegraph_builder.py::__init__": {
      "key": "src/system/tools/codegraph_builder.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the builder with configuration and component dependencies.",
      "docstring": "Initialize the builder with configuration and component dependencies.",
      "calls": [
        "ASTAnalyzer",
        "DomainMapper",
        "FileScanner",
        "PatternMatcher",
        "from_project",
        "resolve"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "self",
        "root_path",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.529749+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "d912d9afc9294401e90cb79475e577ebf1f3d44ef1142bb2369cc01ea3549279"
    },
    "src/system/tools/codegraph_builder.py::build": {
      "key": "src/system/tools/codegraph_builder.py::build",
      "name": "build",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Orchestrate the full knowledge graph generation process.",
      "docstring": "Orchestrate the full knowledge graph generation process.\n\nReturns:\n    Dict containing the complete knowledge graph with metadata and symbols.",
      "calls": [
        "_build_empty_output",
        "_build_output",
        "analyze_files",
        "apply_patterns",
        "find_python_files",
        "info",
        "warning"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.530292+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "5b00643f578d663acd020ad1d2241856603b484001332c37693c397b520dfe1f"
    },
    "src/system/tools/codegraph_builder.py::_build_output": {
      "key": "src/system/tools/codegraph_builder.py::_build_output",
      "name": "_build_output",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Build the final JSON output structure.",
      "docstring": "Build the final JSON output structure.",
      "calls": [
        "asdict",
        "isoformat",
        "items",
        "len",
        "list",
        "now",
        "sorted",
        "values"
      ],
      "line_number": 88,
      "is_async": false,
      "parameters": [
        "self",
        "symbols"
      ],
      "last_updated": "2025-08-31T08:12:11.530893+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "91b6559c7232bc504671be76350c8178bfc380a2a6e5dcbd13a785c052a58748"
    },
    "src/system/tools/codegraph_builder.py::_build_empty_output": {
      "key": "src/system/tools/codegraph_builder.py::_build_empty_output",
      "name": "_build_empty_output",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Build output structure when no files are found.",
      "docstring": "Build output structure when no files are found.",
      "calls": [
        "isoformat",
        "now"
      ],
      "line_number": 112,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.531233+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "structural_hash": "094f0c28ccf6cd2c6552f0f88e0263b8525f26439b17d7c9cea8af5387777e95"
    },
    "src/system/tools/codegraph_builder.py::main": {
      "key": "src/system/tools/codegraph_builder.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "CLI entry point to run the knowledge graph builder and save the output.",
      "docstring": "CLI entry point to run the knowledge graph builder and save the output.",
      "calls": [
        "FileLock",
        "KnowledgeGraphBuilder",
        "build",
        "cwd",
        "dumps",
        "error",
        "find_project_root",
        "info",
        "load_dotenv",
        "mkdir",
        "str",
        "write_text"
      ],
      "line_number": 125,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-31T08:12:11.531965+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "9154ba083259e0bf5b895a894e33e01e2a1d755135e8de52515ea28850b77d36"
    },
    "src/system/tools/scaffolder.py::Scaffolder": {
      "key": "src/system/tools/scaffolder.py::Scaffolder",
      "name": "Scaffolder",
      "type": "ClassDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A reusable service for creating new, constitutionally-governed projects.",
      "docstring": "A reusable service for creating new, constitutionally-governed projects.",
      "calls": [
        "FileExistsError",
        "FileNotFoundError",
        "copy",
        "dump",
        "exists",
        "format",
        "get",
        "glob",
        "info",
        "is_dir",
        "load_config",
        "mkdir",
        "read_text",
        "replace",
        "safe_load",
        "write_text"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.536387+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "6fb360ec20ea5afebb3da77894e1342992854c86d588804f121f08b19a7cd5fe"
    },
    "src/system/tools/scaffolder.py::__init__": {
      "key": "src/system/tools/scaffolder.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the Scaffolder with project name, profile, and workspace directory.",
      "docstring": "Initializes the Scaffolder with project name, profile, and workspace directory.",
      "calls": [
        "FileNotFoundError",
        "get",
        "is_dir",
        "load_config"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self",
        "project_name",
        "profile",
        "workspace_dir"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.537016+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/scaffolder.py::Scaffolder",
      "structural_hash": "c46a7238424cd13e126da3190058389c045a4a403fd8f318d1e432d08116cb15"
    },
    "src/system/tools/scaffolder.py::scaffold_base_structure": {
      "key": "src/system/tools/scaffolder.py::scaffold_base_structure",
      "name": "scaffold_base_structure",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Creates the base project structure, including tests and CI directories.",
      "docstring": "Creates the base project structure, including tests and CI directories.",
      "calls": [
        "FileExistsError",
        "copy",
        "dump",
        "exists",
        "format",
        "glob",
        "info",
        "mkdir",
        "read_text",
        "replace",
        "safe_load",
        "write_text"
      ],
      "line_number": 51,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.538248+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/scaffolder.py::Scaffolder",
      "structural_hash": "cdbada1910adcfeb4f4111b933b9cafbaf10f3efc29436c39ac9a78b13e80291"
    },
    "src/system/tools/scaffolder.py::write_file": {
      "key": "src/system/tools/scaffolder.py::write_file",
      "name": "write_file",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Writes content to a file within the new project's directory, creating parent directories as needed.",
      "docstring": "Writes content to a file within the new project's directory, creating parent directories as needed.",
      "calls": [
        "info",
        "mkdir",
        "write_text"
      ],
      "line_number": 111,
      "is_async": false,
      "parameters": [
        "self",
        "relative_path",
        "content"
      ],
      "last_updated": "2025-08-31T08:12:11.538650+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/scaffolder.py::Scaffolder",
      "structural_hash": "9171d3a466bdb5a2ff76684489edf0c6696956e0f55bea979dd8f732c21bd635"
    },
    "src/system/tools/scaffolder.py::new_project": {
      "key": "src/system/tools/scaffolder.py::new_project",
      "name": "new_project",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Scaffolds a new CORE-governed application with the given name, profile, and dry-run option, including base structure and README generation.",
      "docstring": "Scaffolds a new CORE-governed application with the given name, profile, and dry-run option, including base structure and README generation.",
      "calls": [
        "Argument",
        "Exit",
        "Option",
        "Scaffolder",
        "echo",
        "error",
        "exists",
        "format",
        "info",
        "read_text",
        "relative_to",
        "scaffold_base_structure",
        "secho",
        "write_file"
      ],
      "line_number": 119,
      "is_async": false,
      "parameters": [
        "name",
        "profile",
        "dry_run"
      ],
      "last_updated": "2025-08-31T08:12:11.539941+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "367bc1c8cef28907ebd9374cb752c2ebd35a5ae3023c718ac42c931c8e0625cb"
    },
    "src/system/tools/header_tools.py::ParsedHeader": {
      "key": "src/system/tools/header_tools.py::ParsedHeader",
      "name": "ParsedHeader",
      "type": "ClassDef",
      "file": "src/system/tools/header_tools.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A structured representation of the decorators in a file's header.",
      "docstring": "A structured representation of the decorators in a file's header.",
      "calls": [],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.541763+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "44c9b89bcc0ef4e9aab44e0db54bb9fc213bd7dc28748d7f740c37528cec0ee4"
    },
    "src/system/tools/header_tools.py::HeaderTools": {
      "key": "src/system/tools/header_tools.py::HeaderTools",
      "name": "HeaderTools",
      "type": "ClassDef",
      "file": "src/system/tools/header_tools.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A collection of atomic tools for managing file header decorators.",
      "docstring": "A collection of atomic tools for managing file header decorators.",
      "calls": [
        "ParsedHeader",
        "any",
        "append",
        "enumerate",
        "extend",
        "get_docstring",
        "isinstance",
        "join",
        "len",
        "parse",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.543180+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "6a40d76ba676e6f9ffef1232cd9382a262c7455d617bcf2d091ac3c5444568ea"
    },
    "src/system/tools/header_tools.py::parse": {
      "key": "src/system/tools/header_tools.py::parse",
      "name": "parse",
      "type": "FunctionDef",
      "file": "src/system/tools/header_tools.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parses a file's content into its distinct decorator components.",
      "docstring": "Parses a file's content into its distinct decorator components.",
      "calls": [
        "ParsedHeader",
        "any",
        "enumerate",
        "get_docstring",
        "isinstance",
        "join",
        "len",
        "parse",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "file_content"
      ],
      "last_updated": "2025-08-31T08:12:11.544138+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/header_tools.py::HeaderTools",
      "structural_hash": "9eed78848fa98111ab3ecc36e20efeb81f06bb34a3c79ca7025e6263be639a03"
    },
    "src/system/tools/header_tools.py::reconstruct": {
      "key": "src/system/tools/header_tools.py::reconstruct",
      "name": "reconstruct",
      "type": "FunctionDef",
      "file": "src/system/tools/header_tools.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Reconstructs a file's content from its decorator components.",
      "docstring": "Reconstructs a file's content from its decorator components.",
      "calls": [
        "append",
        "extend",
        "join",
        "strip"
      ],
      "line_number": 72,
      "is_async": false,
      "parameters": [
        "header"
      ],
      "last_updated": "2025-08-31T08:12:11.544796+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/header_tools.py::HeaderTools",
      "structural_hash": "438c0d83326174bfe60f5be12851afca3c2c0923b4cffb1842703bd95b917828"
    },
    "src/system/tools/file_scanner.py::FileScanner": {
      "key": "src/system/tools/file_scanner.py::FileScanner",
      "name": "FileScanner",
      "type": "ClassDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Handles file discovery and filtering.",
      "docstring": "Handles file discovery and filtering.",
      "calls": [
        "any",
        "info",
        "is_dir",
        "len",
        "rglob",
        "should_exclude_path",
        "warning"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.546213+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "e05f7a838a327928bfbc16eeca55d52d85608a8ce5623eb46ce8a1b3a5b555ab"
    },
    "src/system/tools/file_scanner.py::__init__": {
      "key": "src/system/tools/file_scanner.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the FileScanner with the builder configuration.",
      "docstring": "Initializes the FileScanner with the builder configuration.",
      "calls": [],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "self",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.546471+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/file_scanner.py::FileScanner",
      "structural_hash": "e055252d37562db0ba817a12eef5cbe375fe6eb16855a251a4ec17cc5dc38907"
    },
    "src/system/tools/file_scanner.py::find_python_files": {
      "key": "src/system/tools/file_scanner.py::find_python_files",
      "name": "find_python_files",
      "type": "FunctionDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Find all Python files in src/ that should be analyzed.",
      "docstring": "Find all Python files in src/ that should be analyzed.",
      "calls": [
        "info",
        "is_dir",
        "len",
        "rglob",
        "should_exclude_path",
        "warning"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.547059+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/file_scanner.py::FileScanner",
      "structural_hash": "88d4f0f95826bdae6ec9429a61444e40d6d90296585225f187e2dcae117221ef"
    },
    "src/system/tools/file_scanner.py::should_exclude_path": {
      "key": "src/system/tools/file_scanner.py::should_exclude_path",
      "name": "should_exclude_path",
      "type": "FunctionDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determine if a given path should be excluded from scanning.",
      "docstring": "Determine if a given path should be excluded from scanning.",
      "calls": [
        "any"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "last_updated": "2025-08-31T08:12:11.547352+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/file_scanner.py::FileScanner",
      "structural_hash": "a5f4208b347159e0fd93ee67ab0c3c71d0291d472bbf01e58307f8c95a5943e2"
    },
    "src/system/tools/manifest_migrator.py::migrate_manifest": {
      "key": "src/system/tools/manifest_migrator.py::migrate_manifest",
      "name": "migrate_manifest",
      "type": "FunctionDef",
      "file": "src/system/tools/manifest_migrator.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Reads the monolithic manifest and splits it into per-domain manifests.",
      "docstring": "Reads the monolithic manifest and splits it into per-domain manifests.",
      "calls": [
        "Exit",
        "Option",
        "all",
        "append",
        "dump",
        "echo",
        "enumerate",
        "error",
        "exists",
        "get",
        "info",
        "items",
        "load_config",
        "mkdir",
        "next",
        "secho",
        "values",
        "warning",
        "write_text"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "dry_run"
      ],
      "last_updated": "2025-08-31T08:12:11.550998+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b1823e991a9d50489e5bca8b0d3854105a8f8bcda647bb677c79bbabdbd8ce7a"
    },
    "src/system/tools/entry_point_detector.py::EntryPointDetector": {
      "key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "name": "EntryPointDetector",
      "type": "ClassDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Detects various types of entry points (CLI, FastAPI, etc.).",
      "docstring": "Detects various types of entry points (CLI, FastAPI, etc.).",
      "calls": [
        "FunctionCallVisitor",
        "copy",
        "isinstance",
        "set",
        "update",
        "visit",
        "walk"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.553764+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "4e1375555580669ea694514d8162b1b1c0f9ee4c0d7755f04d6e28b7da9a1e37"
    },
    "src/system/tools/entry_point_detector.py::__init__": {
      "key": "src/system/tools/entry_point_detector.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the EntryPointDetector with the builder configuration.",
      "docstring": "Initializes the EntryPointDetector with the builder configuration.",
      "calls": [
        "copy"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "self",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.554079+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "structural_hash": "8318ad1bf99b9cc4eab92add930dc4c6c4752f38d1ebca85d4ffee85c9ee1dd2"
    },
    "src/system/tools/entry_point_detector.py::detect_fastapi_app_name": {
      "key": "src/system/tools/entry_point_detector.py::detect_fastapi_app_name",
      "name": "detect_fastapi_app_name",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Scan AST tree to find FastAPI app instance name.",
      "docstring": "Scan AST tree to find FastAPI app instance name.",
      "calls": [
        "isinstance",
        "walk"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self",
        "tree"
      ],
      "last_updated": "2025-08-31T08:12:11.554536+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "structural_hash": "097330ec2abd106ba582c9588fdef6b57496949967a9e330a749529a5f5739fc"
    },
    "src/system/tools/entry_point_detector.py::detect_main_block_calls": {
      "key": "src/system/tools/entry_point_detector.py::detect_main_block_calls",
      "name": "detect_main_block_calls",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Find function calls in if __name__ == '__main__' blocks.",
      "docstring": "Find function calls in if __name__ == '__main__' blocks.",
      "calls": [
        "FunctionCallVisitor",
        "isinstance",
        "set",
        "update",
        "visit",
        "walk"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "self",
        "tree"
      ],
      "last_updated": "2025-08-31T08:12:11.555122+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "structural_hash": "c3c84c865ade6b5e3716054c0a956ff5c94eb6179e69e3c2c3d6855c8183414c"
    },
    "src/system/tools/entry_point_detector.py::update_cli_entry_points": {
      "key": "src/system/tools/entry_point_detector.py::update_cli_entry_points",
      "name": "update_cli_entry_points",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Add newly discovered CLI entry points.",
      "docstring": "Add newly discovered CLI entry points.",
      "calls": [
        "update"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "self",
        "additional_points"
      ],
      "last_updated": "2025-08-31T08:12:11.555393+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "structural_hash": "4697a60d1bfa31349436d90c9b7b79ac342d2d5f8faa95c19e46382b246ca987"
    },
    "src/system/tools/entry_point_detector.py::get_entry_point_type": {
      "key": "src/system/tools/entry_point_detector.py::get_entry_point_type",
      "name": "get_entry_point_type",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Identify decorator or CLI-based entry points for a function.",
      "docstring": "Identify decorator or CLI-based entry points for a function.",
      "calls": [
        "isinstance"
      ],
      "line_number": 60,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.556023+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "structural_hash": "3b5ffad86e50d404ac4f43a570afedf4d9107e7ec44e5799d6480ed5c0449cf6"
    },
    "src/system/tools/domain_mapper.py::DomainMapper": {
      "key": "src/system/tools/domain_mapper.py::DomainMapper",
      "name": "DomainMapper",
      "type": "ClassDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Handles domain determination for files and symbols.",
      "docstring": "Handles domain determination for files and symbols.",
      "calls": [
        "any",
        "as_posix",
        "get",
        "lower",
        "max",
        "startswith",
        "str"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.557444+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "74ee0249adc040321158a7e34e29b3bbf1b50c964d99ca8bc913d3c09310162c"
    },
    "src/system/tools/domain_mapper.py::__init__": {
      "key": "src/system/tools/domain_mapper.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the DomainMapper with the builder configuration.",
      "docstring": "Initializes the DomainMapper with the builder configuration.",
      "calls": [],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.557736+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/domain_mapper.py::DomainMapper",
      "structural_hash": "800de12557ca15897b3cc4ed4f6cf8aa61467ee81e6ed92df73c318e306c745a"
    },
    "src/system/tools/domain_mapper.py::get_domain_for_file": {
      "key": "src/system/tools/domain_mapper.py::get_domain_for_file",
      "name": "get_domain_for_file",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determine the logical domain for a file path based on longest matching prefix.",
      "docstring": "Determine the logical domain for a file path based on longest matching prefix.",
      "calls": [
        "as_posix",
        "get",
        "max",
        "startswith"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-31T08:12:11.558112+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/domain_mapper.py::DomainMapper",
      "structural_hash": "2d967f47728b7f0a7a3a6b6c886e00a8a41c4f85a8d4e15eec7fe14141c6ecee"
    },
    "src/system/tools/domain_mapper.py::infer_agent_from_path": {
      "key": "src/system/tools/domain_mapper.py::infer_agent_from_path",
      "name": "infer_agent_from_path",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Infer the most likely responsible agent based on keywords in the file path.",
      "docstring": "Infer the most likely responsible agent based on keywords in the file path.",
      "calls": [
        "any",
        "lower",
        "str"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "self",
        "relative_path"
      ],
      "last_updated": "2025-08-31T08:12:11.558581+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/domain_mapper.py::DomainMapper",
      "structural_hash": "9003e98e476e746b83a6b6094cf0abfa8d5b2fdf34835cdc48249da60cb07568"
    },
    "src/system/tools/ast_visitor.py::FunctionCallVisitor": {
      "key": "src/system/tools/ast_visitor.py::FunctionCallVisitor",
      "name": "FunctionCallVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "An AST visitor that collects the names of all functions being called within a node.",
      "docstring": "An AST visitor that collects the names of all functions being called within a node.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance",
        "set"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.560159+00:00",
      "is_class": true,
      "base_classes": [
        ""
      ],
      "structural_hash": "7db2137fc3ca2187212738ace83f8240de5e7356050ff3575c785a4ba3e1e8e3"
    },
    "src/system/tools/ast_visitor.py::__init__": {
      "key": "src/system/tools/ast_visitor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the instance with the given builder, filepath, source lines, and an empty context stack.",
      "docstring": "Initialize the instance with the given builder, filepath, source lines, and an empty context stack.",
      "calls": [],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "self",
        "builder",
        "filepath",
        "source_lines"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.562129+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "9a84c40efa43122ee6507e04ccf3442b22dddb5963e3dc734fb9ad4634b8110d"
    },
    "src/system/tools/ast_visitor.py::visit_Call": {
      "key": "src/system/tools/ast_visitor.py::visit_Call",
      "name": "visit_Call",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "docstring": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.560831+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_visitor.py::FunctionCallVisitor",
      "structural_hash": "a48f5f70d4904ccc7524a0bd1228f8bf0139a0377208f1d696ff8a8a981dd9c4"
    },
    "src/system/tools/ast_visitor.py::ContextAwareVisitor": {
      "key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "name": "ContextAwareVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A stateful AST visitor that understands nested class and function contexts.",
      "docstring": "A stateful AST visitor that understands nested class and function contexts.",
      "calls": [
        "_process_and_visit",
        "_process_symbol_node",
        "append",
        "generic_visit",
        "pop"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.561784+00:00",
      "is_class": true,
      "base_classes": [
        ""
      ],
      "structural_hash": "68b1d0c37acd0162f0cb8b10eb2194a90f1a2509a12fe8f446595e73bddda431"
    },
    "src/system/tools/ast_visitor.py::_process_and_visit": {
      "key": "src/system/tools/ast_visitor.py::_process_and_visit",
      "name": "_process_and_visit",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Helper to process a symbol and manage the context stack.",
      "docstring": "Helper to process a symbol and manage the context stack.",
      "calls": [
        "_process_symbol_node",
        "append",
        "generic_visit",
        "pop"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "node_type"
      ],
      "last_updated": "2025-08-31T08:12:11.562656+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "003c163867b1d7689fe8abb565da7ac662b97ef2c0c010c893752536d6133c72"
    },
    "src/system/tools/ast_visitor.py::visit_ClassDef": {
      "key": "src/system/tools/ast_visitor.py::visit_ClassDef",
      "name": "visit_ClassDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a class definition node, and visits its children.",
      "docstring": "Processes a class definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 58,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.562989+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "f1e606d160216ba9b2b7c920b6b227be2c5b93f02d6e2945722b490f5e7c3371"
    },
    "src/system/tools/ast_visitor.py::visit_FunctionDef": {
      "key": "src/system/tools/ast_visitor.py::visit_FunctionDef",
      "name": "visit_FunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a function definition node, and visits its children.",
      "docstring": "Processes a function definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 62,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.563268+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "fb782ce714d459b5d0af19fd43cfc05a79cdf41e9a1bd7f4f1cc63d93048d337"
    },
    "src/system/tools/ast_visitor.py::visit_AsyncFunctionDef": {
      "key": "src/system/tools/ast_visitor.py::visit_AsyncFunctionDef",
      "name": "visit_AsyncFunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes an async function definition node, and visits its children.",
      "docstring": "Processes an async function definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.563527+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "structural_hash": "2472a22960d0eba74848ae862c665cd44c586c650fb2bf67791fdc3edc7e9370"
    },
    "src/system/tools/pattern_matcher.py::PatternMatcher": {
      "key": "src/system/tools/pattern_matcher.py::PatternMatcher",
      "name": "PatternMatcher",
      "type": "ClassDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Applies declarative patterns to a list of symbols to identify entry points.",
      "docstring": "Applies declarative patterns to a list of symbols to identify entry points.",
      "calls": [
        "_is_match",
        "debug",
        "error",
        "exists",
        "get",
        "len",
        "match",
        "read_text",
        "set",
        "splitlines",
        "startswith",
        "strip",
        "update",
        "values"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.567511+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "efaa7856222b871d2b1dbfde4d5f1edf2a63a4c789caa40b745d3f0cf6cda649"
    },
    "src/system/tools/pattern_matcher.py::__init__": {
      "key": "src/system/tools/pattern_matcher.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the PatternMatcher with a set of rules.",
      "docstring": "Initialize the PatternMatcher with a set of rules.\n\nArgs:\n    patterns: A list of pattern dictionaries from entry_point_patterns.yaml.\n    root_path: The absolute path to the repository root.",
      "calls": [],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "self",
        "patterns",
        "root_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.567903+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/pattern_matcher.py::PatternMatcher",
      "structural_hash": "7ae52dd92e0983b04f2967d156ec0f310d20353e87bd5aa2334a1b75344a3ccf"
    },
    "src/system/tools/pattern_matcher.py::apply_patterns": {
      "key": "src/system/tools/pattern_matcher.py::apply_patterns",
      "name": "apply_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Apply configured patterns to identify entry points in function symbols.",
      "docstring": "Apply configured patterns to identify entry points in function symbols.\n\nArgs:\n    functions: A dictionary of FunctionInfo objects from the KnowledgeGraphBuilder.",
      "calls": [
        "_is_match",
        "debug",
        "get",
        "values"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "self",
        "functions"
      ],
      "last_updated": "2025-08-31T08:12:11.568544+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/pattern_matcher.py::PatternMatcher",
      "structural_hash": "eaec3afe5a8be1ae10057bc6822eef6a205439ceab38ffa5652228e355c9fa8b"
    },
    "src/system/tools/pattern_matcher.py::_is_match": {
      "key": "src/system/tools/pattern_matcher.py::_is_match",
      "name": "_is_match",
      "type": "FunctionDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Check if a single symbol matches a set of declarative rules.",
      "docstring": "Check if a single symbol matches a set of declarative rules.",
      "calls": [
        "error",
        "exists",
        "get",
        "len",
        "match",
        "read_text",
        "set",
        "splitlines",
        "startswith",
        "strip",
        "update"
      ],
      "line_number": 58,
      "is_async": false,
      "parameters": [
        "self",
        "info",
        "rules",
        "all_base_classes",
        "functions"
      ],
      "last_updated": "2025-08-31T08:12:11.570054+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/pattern_matcher.py::PatternMatcher",
      "structural_hash": "25d634bd422b6af1b63a196987d89cb7aaf62e95804f71e9696cfac18b54494c"
    },
    "src/system/tools/ast_utils.py::strip_docstrings": {
      "key": "src/system/tools/ast_utils.py::strip_docstrings",
      "name": "strip_docstrings",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Recursively remove docstring nodes from an AST tree for structural hashing.",
      "docstring": "Recursively remove docstring nodes from an AST tree for structural hashing.",
      "calls": [
        "isinstance",
        "iter_child_nodes",
        "strip_docstrings"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.572083+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "03cd0ddd7bd7162f94efad201335ca2c99df9dd22cf0739fa31303f68c4d947a"
    },
    "src/system/tools/ast_utils.py::detect_docstring": {
      "key": "src/system/tools/ast_utils.py::detect_docstring",
      "name": "detect_docstring",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Detect both standard and non-standard docstrings for a node.",
      "docstring": "Detect both standard and non-standard docstrings for a node.",
      "calls": [
        "get_docstring",
        "hasattr",
        "isinstance"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.572641+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5a94507f703cb2f7e64d9f973b842ef1bd23e0bd04155c723b98c34e8ab5786e"
    },
    "src/system/tools/ast_utils.py::calculate_structural_hash": {
      "key": "src/system/tools/ast_utils.py::calculate_structural_hash",
      "name": "calculate_structural_hash",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Calculate a hash for structural comparison of AST nodes.",
      "docstring": "Calculate a hash for structural comparison of AST nodes.",
      "calls": [
        "encode",
        "hexdigest",
        "parse",
        "replace",
        "sha256",
        "strip_docstrings",
        "unparse"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.573060+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "720e270f5efb971449ce5e50bec42c8486f60eb3321e65ad70bd1eb9c6449635"
    },
    "src/system/tools/ast_utils.py::parse_metadata_comment": {
      "key": "src/system/tools/ast_utils.py::parse_metadata_comment",
      "name": "parse_metadata_comment",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parse the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "docstring": "Parse the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "calls": [
        "group",
        "search",
        "startswith",
        "strip"
      ],
      "line_number": 60,
      "is_async": false,
      "parameters": [
        "node",
        "source_lines"
      ],
      "last_updated": "2025-08-31T08:12:11.573530+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e86f8ca9cba06dd0dd6f93374f7c50f9e5870864e76805afe4c598d42169cab8"
    },
    "src/system/tools/ast_utils.py::extract_base_classes": {
      "key": "src/system/tools/ast_utils.py::extract_base_classes",
      "name": "extract_base_classes",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Extract base class names from a class definition.",
      "docstring": "Extract base class names from a class definition.",
      "calls": [
        "append",
        "isinstance"
      ],
      "line_number": 71,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.573953+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "ed235df485d249034c830523e4b104cb826f81aa3ffa1dd0f6a546052e6ee30e"
    },
    "src/system/tools/ast_utils.py::extract_function_parameters": {
      "key": "src/system/tools/ast_utils.py::extract_function_parameters",
      "name": "extract_function_parameters",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Extract parameter names from a function definition.",
      "docstring": "Extract parameter names from a function definition.",
      "calls": [
        "hasattr"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.574315+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d7a7d7a7d7ea9c1f7bd7029c1d337cf25c2fcc9b598ed829d5739563cd4ac8bc"
    },
    "src/system/tools/models.py::FunctionInfo": {
      "key": "src/system/tools/models.py::FunctionInfo",
      "name": "FunctionInfo",
      "type": "ClassDef",
      "file": "src/system/tools/models.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A data structure holding all analyzed information about a single symbol (function, method, or class).",
      "docstring": "A data structure holding all analyzed information about a single symbol (function, method, or class).",
      "calls": [
        "field"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.575445+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "02164c8894a6e563684e39299564ef03c940cf0b74a7abca0161aa09c60b54fc"
    },
    "src/system/tools/symbol_processor.py::ProcessingContext": {
      "key": "src/system/tools/symbol_processor.py::ProcessingContext",
      "name": "ProcessingContext",
      "type": "ClassDef",
      "file": "src/system/tools/symbol_processor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Context information needed for processing AST nodes.",
      "docstring": "Context information needed for processing AST nodes.",
      "calls": [],
      "line_number": 29,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.577047+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "c3c0a891eab9c2df3b5b3db2c325677b1e87fce1d5060cce91d02e308f6df754"
    },
    "src/system/tools/symbol_processor.py::SymbolProcessor": {
      "key": "src/system/tools/symbol_processor.py::SymbolProcessor",
      "name": "SymbolProcessor",
      "type": "ClassDef",
      "file": "src/system/tools/symbol_processor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes individual AST nodes into FunctionInfo objects.",
      "docstring": "Processes individual AST nodes into FunctionInfo objects.",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "_generate_intent",
        "as_posix",
        "calculate_structural_hash",
        "extract_base_classes",
        "extract_docstring",
        "extract_parameters",
        "get",
        "get_domain_for_file",
        "get_entry_point_type",
        "infer_agent_from_path",
        "isinstance",
        "isoformat",
        "now",
        "parse_metadata_comment",
        "relative_to",
        "split",
        "strip",
        "visit"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.578196+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "8eedb4a204aeb758bad43a287eb7e37ef4257a6920e8a526e4d2240a8ea08ef1"
    },
    "src/system/tools/symbol_processor.py::process_node": {
      "key": "src/system/tools/symbol_processor.py::process_node",
      "name": "process_node",
      "type": "FunctionDef",
      "file": "src/system/tools/symbol_processor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Process a single AST node into a FunctionInfo object.",
      "docstring": "Process a single AST node into a FunctionInfo object.",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "_generate_intent",
        "as_posix",
        "calculate_structural_hash",
        "extract_base_classes",
        "extract_docstring",
        "extract_parameters",
        "get",
        "get_domain_for_file",
        "get_entry_point_type",
        "infer_agent_from_path",
        "isinstance",
        "isoformat",
        "now",
        "parse_metadata_comment",
        "relative_to",
        "visit"
      ],
      "line_number": 43,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "context"
      ],
      "last_updated": "2025-08-31T08:12:11.579140+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/symbol_processor.py::SymbolProcessor",
      "structural_hash": "4d58cfcb9f7db7c5c41804a4364b263d00ce7b49195eeb3ba94d43eda7a657ee"
    },
    "src/system/tools/symbol_processor.py::_generate_intent": {
      "key": "src/system/tools/symbol_processor.py::_generate_intent",
      "name": "_generate_intent",
      "type": "FunctionDef",
      "file": "src/system/tools/symbol_processor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Generate an intent description from docstring or domain.",
      "docstring": "Generate an intent description from docstring or domain.",
      "calls": [
        "split",
        "strip"
      ],
      "line_number": 115,
      "is_async": false,
      "parameters": [
        "self",
        "docstring",
        "domain"
      ],
      "last_updated": "2025-08-31T08:12:11.579500+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/symbol_processor.py::SymbolProcessor",
      "structural_hash": "54a86a8a2eb68a906c46b632fe8a508ead3b8d6a31b2b0857879421b97a8a5aa"
    },
    "src/system/tools/ast_analyzer.py::ASTAnalyzer": {
      "key": "src/system/tools/ast_analyzer.py::ASTAnalyzer",
      "name": "ASTAnalyzer",
      "type": "ClassDef",
      "file": "src/system/tools/ast_analyzer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Handles AST parsing and symbol extraction from Python files.",
      "docstring": "Handles AST parsing and symbol extraction from Python files.",
      "calls": [
        "EntryPointDetector",
        "ProcessingContext",
        "SymbolProcessor",
        "_process_class_methods",
        "analyze_file",
        "detect_fastapi_app_name",
        "detect_main_block_calls",
        "error",
        "info",
        "isinstance",
        "parse",
        "process_node",
        "read_text",
        "splitlines",
        "str",
        "update",
        "update_cli_entry_points"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.582794+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "87210a19fe8ad0747376d3cb70026e3bc3e853cdc88a66c58be2b337d0a50d5b"
    },
    "src/system/tools/ast_analyzer.py::__init__": {
      "key": "src/system/tools/ast_analyzer.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_analyzer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the ASTAnalyzer with the builder configuration.",
      "docstring": "Initializes the ASTAnalyzer with the builder configuration.",
      "calls": [
        "EntryPointDetector",
        "SymbolProcessor"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.583136+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/tools/ast_analyzer.py::ASTAnalyzer",
      "structural_hash": "3c89c7eacf8dc32a3e775974c9a653d12348564682d47973e8d57b077a9d5a06"
    },
    "src/system/tools/ast_analyzer.py::analyze_files": {
      "key": "src/system/tools/ast_analyzer.py::analyze_files",
      "name": "analyze_files",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_analyzer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Analyze multiple files and return all discovered symbols.",
      "docstring": "Analyze multiple files and return all discovered symbols.",
      "calls": [
        "analyze_file",
        "info",
        "update"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "self",
        "files",
        "domain_mapper"
      ],
      "last_updated": "2025-08-31T08:12:11.583573+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_analyzer.py::ASTAnalyzer",
      "structural_hash": "1b342a62058df6c29cac90e6c26872704703b1ea9c8c6a3ca014ea2a1a63ae3e"
    },
    "src/system/tools/ast_analyzer.py::analyze_file": {
      "key": "src/system/tools/ast_analyzer.py::analyze_file",
      "name": "analyze_file",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_analyzer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Analyze a single Python file and extract all symbols.",
      "docstring": "Analyze a single Python file and extract all symbols.",
      "calls": [
        "ProcessingContext",
        "_process_class_methods",
        "detect_fastapi_app_name",
        "detect_main_block_calls",
        "error",
        "isinstance",
        "parse",
        "process_node",
        "read_text",
        "splitlines",
        "str",
        "update",
        "update_cli_entry_points"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [
        "self",
        "filepath",
        "domain_mapper"
      ],
      "last_updated": "2025-08-31T08:12:11.584496+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_analyzer.py::ASTAnalyzer",
      "structural_hash": "80ba58caf0e10dc319940ed383f4aec5b27b070b0e4c6ac3e8c161f98604096b"
    },
    "src/system/tools/ast_analyzer.py::_process_class_methods": {
      "key": "src/system/tools/ast_analyzer.py::_process_class_methods",
      "name": "_process_class_methods",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_analyzer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Process all methods within a class.",
      "docstring": "Process all methods within a class.",
      "calls": [
        "ProcessingContext",
        "isinstance",
        "process_node"
      ],
      "line_number": 99,
      "is_async": false,
      "parameters": [
        "self",
        "class_node",
        "context",
        "parent_key"
      ],
      "last_updated": "2025-08-31T08:12:11.584985+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/ast_analyzer.py::ASTAnalyzer",
      "structural_hash": "18716b4042861eb323790798545a1154949834c28806cc80a08cd56f321a8213"
    },
    "src/system/guard/discovery/from_source_scan.py::_parse_inline_meta": {
      "key": "src/system/guard/discovery/from_source_scan.py::_parse_inline_meta",
      "name": "_parse_inline_meta",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Parse inline [key=value] metadata from trailing text.",
      "docstring": "Parse inline [key=value] metadata from trailing text.",
      "calls": [
        "findall",
        "group",
        "search"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "trailing"
      ],
      "last_updated": "2025-08-31T08:12:11.586541+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6aeb416d4a7a1ce665d3f5745fb0f4a6bc34e65db506ebad9b0d70510e109be9"
    },
    "src/system/guard/discovery/from_source_scan.py::_iter_source_files": {
      "key": "src/system/guard/discovery/from_source_scan.py::_iter_source_files",
      "name": "_iter_source_files",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Yields repository files to be scanned.",
      "docstring": "Yields repository files to be scanned.",
      "calls": [
        "any",
        "is_file",
        "match",
        "rglob",
        "wanted"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs"
      ],
      "last_updated": "2025-08-31T08:12:11.587144+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3750c581cfb247b39af566f8eba6929b1e1bf7b84e4d6efc592fa956d2b512f3"
    },
    "src/system/guard/discovery/from_source_scan.py::collect_from_source_scan": {
      "key": "src/system/guard/discovery/from_source_scan.py::collect_from_source_scan",
      "name": "collect_from_source_scan",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Scans for '# CAPABILITY:' tags with optional inline metadata.",
      "docstring": "Scans for '# CAPABILITY:' tags with optional inline metadata.",
      "calls": [
        "CapabilityMeta",
        "_iter_source_files",
        "_parse_inline_meta",
        "get",
        "group",
        "match",
        "read_text",
        "splitlines",
        "strip"
      ],
      "line_number": 46,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs"
      ],
      "last_updated": "2025-08-31T08:12:11.587788+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3b18643a886175f6a39859fdf00568ee335dabff88d822f1d67b2197c39d6512"
    },
    "src/system/guard/discovery/from_manifest.py::load_manifest_capabilities": {
      "key": "src/system/guard/discovery/from_manifest.py::load_manifest_capabilities",
      "name": "load_manifest_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_manifest.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads, parses, and normalizes capabilities by aggregating all domain-specific manifests.",
      "docstring": "Loads, parses, and normalizes capabilities by aggregating all domain-specific manifests.",
      "calls": [
        "CapabilityMeta",
        "FileNotFoundError",
        "exists",
        "get",
        "list",
        "open",
        "read_text",
        "safe_load",
        "set",
        "sorted",
        "update"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "root",
        "explicit_path"
      ],
      "last_updated": "2025-08-31T08:12:11.589546+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "cac29cd0e1c764935700d5125feb8d38938dcaeac74070fd5cca31c7aa4c2755"
    },
    "src/system/guard/discovery/from_kgb.py::_try_import_kgb": {
      "key": "src/system/guard/discovery/from_kgb.py::_try_import_kgb",
      "name": "_try_import_kgb",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Attempts to access KnowledgeGraphBuilder without a static cross-domain import.",
      "docstring": "Attempts to access KnowledgeGraphBuilder without a static cross-domain import.",
      "calls": [
        "getattr",
        "import_module"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.590757+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "16b502ea1cdaeafd71fea160ac449808856b92dda0bbd282da47a4627d875ecf"
    },
    "src/system/guard/discovery/from_kgb.py::_extract_cap_meta_from_node": {
      "key": "src/system/guard/discovery/from_kgb.py::_extract_cap_meta_from_node",
      "name": "_extract_cap_meta_from_node",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Extracts capability metadata from a Knowledge Graph node.",
      "docstring": "Extracts capability metadata from a Knowledge Graph node.",
      "calls": [
        "CapabilityMeta",
        "get",
        "str"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-31T08:12:11.591268+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "804a8c376ccb182307486bc36a54ce95f02680a2526b1b6916f9581ddd16b1c3"
    },
    "src/system/guard/discovery/from_kgb.py::collect_from_kgb": {
      "key": "src/system/guard/discovery/from_kgb.py::collect_from_kgb",
      "name": "collect_from_kgb",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Uses KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "docstring": "Uses KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "calls": [
        "KGB",
        "_extract_cap_meta_from_node",
        "_try_import_kgb",
        "build",
        "get",
        "isinstance",
        "values"
      ],
      "line_number": 37,
      "is_async": false,
      "parameters": [
        "root"
      ],
      "last_updated": "2025-08-31T08:12:11.591856+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5fd911632790a032b74d9ec9cb75c82eb3488d50613380a74d2c3b4b26c2e135"
    },
    "src/system/governance/checks/quality_checks.py::QualityChecks": {
      "key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "name": "QualityChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for code quality constitutional checks.",
      "docstring": "Container for code quality constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.594278+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "e869e5e20ab17b30b7cb667338518c63e8d7ee17375fbfe0ada3a55dfc1e7b30"
    },
    "src/system/governance/checks/quality_checks.py::__init__": {
      "key": "src/system/governance/checks/quality_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.594544+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "b99718974cdc5158e97528c604734bb3e4a185b7261616ea4b5985e2768aa264"
    },
    "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents": {
      "key": "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents",
      "name": "check_docstrings_and_intents",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.docstrings",
      "intent": "Finds symbols missing docstrings or having generic intents.",
      "docstring": "Finds symbols missing docstrings or having generic intents.",
      "calls": [
        "AuditFinding",
        "append",
        "get"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.595366+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "3793badbf76457a1bf0c889da1797396258c7518aa1341211a3fa93aa6f0c3d1"
    },
    "src/system/governance/checks/quality_checks.py::check_for_dead_code": {
      "key": "src/system/governance/checks/quality_checks.py::check_for_dead_code",
      "name": "check_for_dead_code",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.dead_code",
      "intent": "Detects unreferenced public symbols.",
      "docstring": "Detects unreferenced public symbols.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 54,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.596122+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "structural_hash": "d55728cdcf6dcdbb6e4f98d85c9e9e25fd474c9bdec3ad5bbc6b03859e659f87"
    },
    "src/system/governance/checks/proposal_loader.py::ProposalLoader": {
      "key": "src/system/governance/checks/proposal_loader.py::ProposalLoader",
      "name": "ProposalLoader",
      "type": "ClassDef",
      "file": "src/system/governance/checks/proposal_loader.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Handles loading and discovery of proposal files.",
      "docstring": "Handles loading and discovery of proposal files.",
      "calls": [
        "ValueError",
        "exists",
        "glob",
        "list",
        "loads",
        "lower",
        "read_text",
        "safe_load",
        "sorted"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.597548+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "9073cee1047515b3e65d00b5fb29dc4040fa34359758a34ea849fc630fffad2d"
    },
    "src/system/governance/checks/proposal_loader.py::__init__": {
      "key": "src/system/governance/checks/proposal_loader.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_loader.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initialize the instance with paths to the proposals directory and repository root.",
      "docstring": "Initialize the instance with paths to the proposals directory and repository root.",
      "calls": [],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "self",
        "proposals_dir",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.597870+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/proposal_loader.py::ProposalLoader",
      "structural_hash": "1dcb6c7f9694adb4debdaa279550ede6c94db4019314e64c80b0cb6d4de95c9b"
    },
    "src/system/governance/checks/proposal_loader.py::_proposal_paths": {
      "key": "src/system/governance/checks/proposal_loader.py::_proposal_paths",
      "name": "_proposal_paths",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_loader.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Return all cr-* proposals (both YAML and JSON).",
      "docstring": "Return all cr-* proposals (both YAML and JSON).",
      "calls": [
        "exists",
        "glob",
        "list",
        "sorted"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.598280+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_loader.py::ProposalLoader",
      "structural_hash": "dc20f29d7dd68a6595820175a53af22db3461265fb6e98c5b31a3a5a6879179a"
    },
    "src/system/governance/checks/proposal_loader.py::_load_proposal": {
      "key": "src/system/governance/checks/proposal_loader.py::_load_proposal",
      "name": "_load_proposal",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_loader.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Load proposal preserving its format.",
      "docstring": "Load proposal preserving its format.",
      "calls": [
        "ValueError",
        "loads",
        "lower",
        "read_text",
        "safe_load"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "last_updated": "2025-08-31T08:12:11.598753+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_loader.py::ProposalLoader",
      "structural_hash": "c6f9d72b2bf6171f5fcd48f8c39aa1495b728433385546d25a36bcdc0826940d"
    },
    "src/system/governance/checks/style_checks.py::StyleChecks": {
      "key": "src/system/governance/checks/style_checks.py::StyleChecks",
      "name": "StyleChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/style_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for code style and convention constitutional checks.",
      "docstring": "Container for code style and convention constitutional checks.",
      "calls": [
        "AuditFinding",
        "any",
        "append",
        "endswith",
        "get",
        "isinstance",
        "list",
        "load_config",
        "parse",
        "read_text",
        "sorted",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.601799+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "ea584e6a20719025e6e04bffa47bdac2dd1c69139e8d305124a3e4276337d5bd"
    },
    "src/system/governance/checks/style_checks.py::__init__": {
      "key": "src/system/governance/checks/style_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/style_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [
        "load_config"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.602143+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/style_checks.py::StyleChecks",
      "structural_hash": "45da044585834df26e566ecbe1c3c333a996564b4dc14824c919b14cb66c2ff1"
    },
    "src/system/governance/checks/style_checks.py::check_module_conventions": {
      "key": "src/system/governance/checks/style_checks.py::check_module_conventions",
      "name": "check_module_conventions",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/style_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.code_style",
      "intent": "Verifies that Python modules adhere to documented style conventions.",
      "docstring": "Verifies that Python modules adhere to documented style conventions.",
      "calls": [
        "AuditFinding",
        "any",
        "append",
        "endswith",
        "get",
        "isinstance",
        "list",
        "parse",
        "read_text",
        "sorted",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.603603+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/style_checks.py::StyleChecks",
      "structural_hash": "7c4a80d0e8250da0b4a004b237f0f609e2ea7960f59c9516ee4b4f5fe097df85"
    },
    "src/system/governance/checks/security_checks.py::SecurityChecks": {
      "key": "src/system/governance/checks/security_checks.py::SecurityChecks",
      "name": "SecurityChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/security_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for security-related constitutional checks.",
      "docstring": "Container for security-related constitutional checks.",
      "calls": [
        "AuditFinding",
        "Path",
        "any",
        "append",
        "compile",
        "enumerate",
        "get",
        "load_config",
        "match",
        "next",
        "read_text",
        "search",
        "set",
        "splitlines",
        "str"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.605984+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "32e5628534d18fd2b6432bb74318f468361836f3cbddac4a1262ddf317774858"
    },
    "src/system/governance/checks/security_checks.py::__init__": {
      "key": "src/system/governance/checks/security_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/security_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [
        "load_config"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.606318+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/security_checks.py::SecurityChecks",
      "structural_hash": "241743329a4c401b2fedb111a8de7595990c6c65e05f189982ebcdd0c7ee5148"
    },
    "src/system/governance/checks/security_checks.py::check_for_hardcoded_secrets": {
      "key": "src/system/governance/checks/security_checks.py::check_for_hardcoded_secrets",
      "name": "check_for_hardcoded_secrets",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/security_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.secrets",
      "intent": "Scans source code for patterns that look like hardcoded secrets.",
      "docstring": "Scans source code for patterns that look like hardcoded secrets.",
      "calls": [
        "AuditFinding",
        "Path",
        "any",
        "append",
        "compile",
        "enumerate",
        "get",
        "match",
        "next",
        "read_text",
        "search",
        "set",
        "splitlines",
        "str"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.607470+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/security_checks.py::SecurityChecks",
      "structural_hash": "b79b972a07c16e9a2810de91322b71eab8bc39da7eb804b8caed3dee71999f59"
    },
    "src/system/governance/checks/proposal_summarizer.py::ProposalSummarizer": {
      "key": "src/system/governance/checks/proposal_summarizer.py::ProposalSummarizer",
      "name": "ProposalSummarizer",
      "type": "ClassDef",
      "file": "src/system/governance/checks/proposal_summarizer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Provides a summary of pending proposals.",
      "docstring": "Provides a summary of pending proposals.",
      "calls": [
        "AuditFinding",
        "_proposal_paths",
        "append",
        "exists",
        "relative_to",
        "str"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.608685+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "01d8a7df6aaacf821256c5662697f587ad22cb2fc8b4fb35949ed7a01e2c5e81"
    },
    "src/system/governance/checks/proposal_summarizer.py::__init__": {
      "key": "src/system/governance/checks/proposal_summarizer.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_summarizer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the summarizer with necessary path information.",
      "docstring": "Initializes the summarizer with necessary path information.",
      "calls": [],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "self",
        "proposals_dir",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.609055+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/proposal_summarizer.py::ProposalSummarizer",
      "structural_hash": "1a6885361311197aa2e2c123e6e1bd700d534057ceeeb638deba6d010fdefaac"
    },
    "src/system/governance/checks/proposal_summarizer.py::list_pending_proposals": {
      "key": "src/system/governance/checks/proposal_summarizer.py::list_pending_proposals",
      "name": "list_pending_proposals",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_summarizer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Emit a friendly summary of pending proposals.",
      "docstring": "Emit a friendly summary of pending proposals.",
      "calls": [
        "AuditFinding",
        "_proposal_paths",
        "append",
        "exists",
        "relative_to",
        "str"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "self",
        "loader"
      ],
      "last_updated": "2025-08-31T08:12:11.609592+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_summarizer.py::ProposalSummarizer",
      "structural_hash": "85bedbfba0ef7369be423393eb8279fd698550dda8847604aea9946691964afd"
    },
    "src/system/governance/checks/file_checks.py::FileChecks": {
      "key": "src/system/governance/checks/file_checks.py::FileChecks",
      "name": "FileChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for file-based constitutional checks.",
      "docstring": "Container for file-based constitutional checks.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "add",
        "any",
        "append",
        "exists",
        "extend",
        "get",
        "get_all_constitutional_paths",
        "is_file",
        "len",
        "load_config",
        "read_text",
        "relative_to",
        "replace",
        "rglob",
        "set",
        "sorted",
        "str",
        "union",
        "validate_code"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.614215+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "92f51df6733d3478263fa3adb8df8523311fc38e4c24810e3cb8b90db6a13a8f"
    },
    "src/system/governance/checks/file_checks.py::__init__": {
      "key": "src/system/governance/checks/file_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initialize with a shared auditor context.",
      "docstring": "Initialize with a shared auditor context.",
      "calls": [
        "load_config"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.614585+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "c1244e253eec2464c9458a4eaa88f3e2d26ffda0b22fdecd30a116ad5255fed0"
    },
    "src/system/governance/checks/file_checks.py::check_required_files": {
      "key": "src/system/governance/checks/file_checks.py::check_required_files",
      "name": "check_required_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.required_files",
      "intent": "Verify that all files declared in meta.yaml exist on disk.",
      "docstring": "Verify that all files declared in meta.yaml exist on disk.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "append",
        "exists",
        "len",
        "sorted"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.615355+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "a317f5c1a04753caf72cdc67716bba4f426c04a2e4768c31b0832ae733d556a4"
    },
    "src/system/governance/checks/file_checks.py::check_syntax": {
      "key": "src/system/governance/checks/file_checks.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.syntax",
      "intent": "Validate syntax of all .intent YAML/JSON files (including proposals).",
      "docstring": "Validate syntax of all .intent YAML/JSON files (including proposals).",
      "calls": [
        "AuditFinding",
        "append",
        "extend",
        "is_file",
        "len",
        "read_text",
        "relative_to",
        "rglob",
        "str",
        "validate_code"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.616350+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "a15a04188ee126cab12589064ad6c09cb4ec11db22ee1e657bb1f790a67b0603"
    },
    "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files": {
      "key": "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files",
      "name": "check_for_orphaned_intent_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.orphaned_intent_files",
      "intent": "Find .intent files not referenced in meta.yaml.",
      "docstring": "Find .intent files not referenced in meta.yaml.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "any",
        "append",
        "get",
        "is_file",
        "relative_to",
        "replace",
        "rglob",
        "set",
        "sorted",
        "str",
        "union"
      ],
      "line_number": 119,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.617206+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "2b10ac75c0b6bf1f43726aafe63f5afc9864fb1b301d7bb8a9aaeeb42afdf24f"
    },
    "src/system/governance/checks/file_checks.py::_get_known_files_from_meta": {
      "key": "src/system/governance/checks/file_checks.py::_get_known_files_from_meta",
      "name": "_get_known_files_from_meta",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Build a set of known intent files by delegating to the shared constitutional parser.",
      "docstring": "Build a set of known intent files by delegating to the shared constitutional parser.",
      "calls": [
        "add",
        "get_all_constitutional_paths"
      ],
      "line_number": 163,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-31T08:12:11.617519+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/file_checks.py::FileChecks",
      "structural_hash": "396dcbd1a71fd2cb1c3f1b5a1054cff6af5d17f2d551d5c42ae278c417109b9f"
    },
    "src/system/governance/checks/proposal_validator.py::ProposalValidator": {
      "key": "src/system/governance/checks/proposal_validator.py::ProposalValidator",
      "name": "ProposalValidator",
      "type": "ClassDef",
      "file": "src/system/governance/checks/proposal_validator.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Handles schema validation of proposal files.",
      "docstring": "Handles schema validation of proposal files.",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "exists",
        "iter_errors",
        "join",
        "list",
        "load_schema",
        "relative_to",
        "str"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.619664+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "223dcd22e0a1c1f659ca257693daab85bb951de7b7d6acfbc877c159d826fe18"
    },
    "src/system/governance/checks/proposal_validator.py::__init__": {
      "key": "src/system/governance/checks/proposal_validator.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_validator.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initializes the instance with the provided repository root path.",
      "docstring": "Initializes the instance with the provided repository root path.",
      "calls": [],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.619995+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/proposal_validator.py::ProposalValidator",
      "structural_hash": "c5dffafca75adfc57c1d42b8d3eece3d96aaad35e028933d91848b4cab465452"
    },
    "src/system/governance/checks/proposal_validator.py::validate_proposals_schema": {
      "key": "src/system/governance/checks/proposal_validator.py::validate_proposals_schema",
      "name": "validate_proposals_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_validator.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "docstring": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "exists",
        "iter_errors",
        "join",
        "list",
        "load_schema",
        "relative_to",
        "str"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self",
        "loader"
      ],
      "last_updated": "2025-08-31T08:12:11.621014+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_validator.py::ProposalValidator",
      "structural_hash": "7feff397f89a1e6f4ec7614882f943bb571c16d21e735fb0243c6da49503968b"
    },
    "src/system/governance/checks/proposal_checks.py::ProposalChecks": {
      "key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "name": "ProposalChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for proposal-related constitutional checks.",
      "docstring": "Container for proposal-related constitutional checks.",
      "calls": [
        "check_signatures_match_content",
        "list_pending_proposals",
        "validate_proposals_schema"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.622095+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "d2c82e0d7bdcc2f47300ad8a4ba3cc13422ba735283ad808351fe9a874da53c4"
    },
    "src/system/governance/checks/proposal_checks.py::__init__": {
      "key": "src/system/governance/checks/proposal_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with shared, injected dependencies.",
      "docstring": "Initializes the check with shared, injected dependencies.",
      "calls": [],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self",
        "loader",
        "validator",
        "signature_checker",
        "summarizer"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.622416+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "cfdf7ece76c75b51b9bfd3aac32ece2dd6b4b6148e3d696357cb60568ae06cf7"
    },
    "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema": {
      "key": "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema",
      "name": "check_proposal_files_match_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_schema",
      "intent": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "docstring": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "calls": [
        "validate_proposals_schema"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.622688+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "cea18b35778662509f7ced833b2ae072ba7395aaca4b2f92f0e93078f6fa3614"
    },
    "src/system/governance/checks/proposal_checks.py::check_signatures_match_content": {
      "key": "src/system/governance/checks/proposal_checks.py::check_signatures_match_content",
      "name": "check_signatures_match_content",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_drift",
      "intent": "Detect content/signature drift:",
      "docstring": "Detect content/signature drift:\n- warn if a proposal has no signatures\n- warn if any signature token does not match the current content",
      "calls": [
        "check_signatures_match_content"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.623009+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "d508b3a34825e43cc8647335b2834243e620f105068853c1c05a5bbede2d8495"
    },
    "src/system/governance/checks/proposal_checks.py::list_pending_proposals": {
      "key": "src/system/governance/checks/proposal_checks.py::list_pending_proposals",
      "name": "list_pending_proposals",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_list",
      "intent": "Emit a friendly summary of pending proposals.",
      "docstring": "Emit a friendly summary of pending proposals.",
      "calls": [
        "list_pending_proposals"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.623275+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "structural_hash": "dfab85025bb665a24374ba60daee641a5088298a3c89d9d54d8e58f7f13e4ddd"
    },
    "src/system/governance/checks/architecture_checks.py::ArchitectureChecks": {
      "key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "name": "ArchitectureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for architectural integrity checks.",
      "docstring": "Container for architectural integrity checks.",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.624879+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "7a039d054f7918a051b7ca93fb914ec03bdce9b35078a5098a4724d41d0781fc"
    },
    "src/system/governance/checks/architecture_checks.py::__init__": {
      "key": "src/system/governance/checks/architecture_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.625147+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "structural_hash": "b99718974cdc5158e97528c604734bb3e4a185b7261616ea4b5985e2768aa264"
    },
    "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication": {
      "key": "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication",
      "name": "check_for_structural_duplication",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.duplication",
      "intent": "Finds symbols with identical structural hashes, violating `dry_by_design`, using content-addressed knowledge graph for accurate duplication detection.",
      "docstring": "Finds symbols with identical structural hashes, violating `dry_by_design`, using content-addressed knowledge graph for accurate duplication detection.",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.625962+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "structural_hash": "e4a596f4b8ba83263257c5a5c4412510c4a4b5e323e75599d389acc4eb0f81ea"
    },
    "src/system/governance/checks/dev_fastpath_check.py::run_check": {
      "key": "src/system/governance/checks/dev_fastpath_check.py::run_check",
      "name": "run_check",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/dev_fastpath_check.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "This check is currently disabled. It performs no actions.",
      "docstring": "This check is currently disabled. It performs no actions.",
      "calls": [],
      "line_number": 12,
      "is_async": false,
      "parameters": [
        "repo_root"
      ],
      "last_updated": "2025-08-31T08:12:11.626401+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "80551271137a4bec46979b7c982a49267e30c8417b579516b7c22456582bafa7"
    },
    "src/system/governance/checks/proposal_signature_checker.py::ProposalSignatureChecker": {
      "key": "src/system/governance/checks/proposal_signature_checker.py::ProposalSignatureChecker",
      "name": "ProposalSignatureChecker",
      "type": "ClassDef",
      "file": "src/system/governance/checks/proposal_signature_checker.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Handles signature validation and content drift detection for proposals.",
      "docstring": "Handles signature validation and content drift detection for proposals.",
      "calls": [
        "AuditFinding",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "generate_approval_token",
        "get",
        "join",
        "len",
        "relative_to",
        "str"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.628388+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "c4032ab2c65294bbe3e5d776e796c9c2df7e79838b71098d939847168aaaea97"
    },
    "src/system/governance/checks/proposal_signature_checker.py::check_signatures_match_content": {
      "key": "src/system/governance/checks/proposal_signature_checker.py::check_signatures_match_content",
      "name": "check_signatures_match_content",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_signature_checker.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Detect content/signature drift:",
      "docstring": "Detect content/signature drift:\n- warn if a proposal has no signatures\n- warn if any signature token does not match the current content",
      "calls": [
        "AuditFinding",
        "_load_proposal",
        "_proposal_paths",
        "append",
        "generate_approval_token",
        "get",
        "join",
        "len",
        "relative_to",
        "str"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "self",
        "loader"
      ],
      "last_updated": "2025-08-31T08:12:11.629502+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/proposal_signature_checker.py::ProposalSignatureChecker",
      "structural_hash": "4f1a728851037d9d7f686d67d79e49c43f74c650ab55271a7cda8a058261ab95"
    },
    "src/system/governance/checks/structure_checks.py::StructureChecks": {
      "key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "name": "StructureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for structural constitutional checks.",
      "docstring": "Container for structural constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "items",
        "joinpath",
        "len",
        "list",
        "load_config",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "sorted",
        "split",
        "startswith",
        "validate_manifest_entry",
        "with_suffix"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.635205+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "e0cc7e5d9d5b74a23f142f6d5deb1bb9354756238fb606b5af8d25402e39c1ae"
    },
    "src/system/governance/checks/structure_checks.py::__init__": {
      "key": "src/system/governance/checks/structure_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.635474+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "b99718974cdc5158e97528c604734bb3e4a185b7261616ea4b5985e2768aa264"
    },
    "src/system/governance/checks/structure_checks.py::check_project_manifest": {
      "key": "src/system/governance/checks/structure_checks.py::check_project_manifest",
      "name": "check_project_manifest",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.project_manifest",
      "intent": "Validates the integrity of project_manifest.yaml.",
      "docstring": "Validates the integrity of project_manifest.yaml.",
      "calls": [
        "AuditFinding",
        "append"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.636074+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "11973daa0e29c53c7010702deeff86eb9b36f5a85d0fc7275d2b7c4b5f7d36c1"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_coverage": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_coverage",
      "name": "check_capability_coverage",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_coverage",
      "intent": "Ensures all required capabilities are implemented.",
      "docstring": "Ensures all required capabilities are implemented.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "set",
        "sorted"
      ],
      "line_number": 48,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.636663+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "c518a6c02b288601b99cf8f0e0016c47873e5c8e506f98b2c6d2f43660eb669b"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_definitions": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_definitions",
      "name": "check_capability_definitions",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_definitions",
      "intent": "Ensures all implemented capabilities are valid.",
      "docstring": "Ensures all implemented capabilities are valid.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "load_config",
        "sorted"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.637421+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "723802e1a121b86c23cb4c680aa09396758df1ffd09060dda6058ba0bbc12652"
    },
    "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema": {
      "key": "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema",
      "name": "check_knowledge_graph_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.knowledge_graph_schema",
      "intent": "Validates all knowledge graph symbols against the schema.",
      "docstring": "Validates all knowledge graph symbols against the schema.",
      "calls": [
        "AuditFinding",
        "append",
        "items",
        "len",
        "validate_manifest_entry"
      ],
      "line_number": 119,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.638076+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "2dfc15656abb56a332b2aedc78271c8717252e9d476ba8ddfe32d41e553954e9"
    },
    "src/system/governance/checks/structure_checks.py::check_domain_integrity": {
      "key": "src/system/governance/checks/structure_checks.py::check_domain_integrity",
      "name": "check_domain_integrity",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.domain_integrity",
      "intent": "Checks for domain mismatches and illegal imports.",
      "docstring": "Checks for domain mismatches and illegal imports.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "joinpath",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "split",
        "startswith",
        "with_suffix"
      ],
      "line_number": 149,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.639423+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "structural_hash": "56abaa27dfea2d9c575118e53dc13a75ca990fca36269a6c13b22baad591061f"
    },
    "src/system/governance/checks/health_checks.py::HealthChecks": {
      "key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "name": "HealthChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for codebase health constitutional checks.",
      "docstring": "Container for codebase health constitutional checks.",
      "calls": [
        "AuditFinding",
        "_get_logical_lines_of_code",
        "append",
        "endswith",
        "enumerate",
        "extend",
        "from_ast",
        "get",
        "items",
        "len",
        "list",
        "load_config",
        "mean",
        "parse",
        "read_text",
        "relative_to",
        "splitlines",
        "startswith",
        "stdev",
        "str",
        "strip",
        "values"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.643566+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "aaac5fc765bf224afe950961e7a2a62b4d2286295aab75df99d4490445b938d5"
    },
    "src/system/governance/checks/health_checks.py::__init__": {
      "key": "src/system/governance/checks/health_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [
        "load_config"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.643925+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "structural_hash": "e4e4fb21592546bdddd708346ba60c9160f19f11354d5877391be4d37c384279"
    },
    "src/system/governance/checks/health_checks.py::_get_logical_lines_of_code": {
      "key": "src/system/governance/checks/health_checks.py::_get_logical_lines_of_code",
      "name": "_get_logical_lines_of_code",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates the Logical Lines of Code (LLOC), ignoring comments and blank lines.",
      "docstring": "Calculates the Logical Lines of Code (LLOC), ignoring comments and blank lines.",
      "calls": [
        "len",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self",
        "source_code"
      ],
      "last_updated": "2025-08-31T08:12:11.644286+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "structural_hash": "e95c8baee958a1555f46f186d0bbdf90ce28dc7da8a71cfe7b9da2627fd9c9f0"
    },
    "src/system/governance/checks/health_checks.py::check_codebase_health": {
      "key": "src/system/governance/checks/health_checks.py::check_codebase_health",
      "name": "check_codebase_health",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.codebase_health",
      "intent": "Measures code complexity and atomicity against defined policies.",
      "docstring": "Measures code complexity and atomicity against defined policies.",
      "calls": [
        "AuditFinding",
        "_get_logical_lines_of_code",
        "append",
        "endswith",
        "enumerate",
        "extend",
        "from_ast",
        "get",
        "items",
        "len",
        "list",
        "mean",
        "parse",
        "read_text",
        "relative_to",
        "splitlines",
        "stdev",
        "str",
        "values"
      ],
      "line_number": 37,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.646106+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "structural_hash": "d70979029aea0f739d9ffeadd475b59f2a6036f6ff6dadf5fe0c24eb728da5bf"
    },
    "src/system/governance/checks/environment_checks.py::EnvironmentChecks": {
      "key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "name": "EnvironmentChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for environment and runtime configuration checks.",
      "docstring": "Container for environment and runtime configuration checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "items",
        "load_config"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.647872+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "10833d70ff48a53d5a93ddc522f7b40b32a0c388c77486821600fa60df70e3cc"
    },
    "src/system/governance/checks/environment_checks.py::__init__": {
      "key": "src/system/governance/checks/environment_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-31T08:12:11.648141+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "parent_class_key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "structural_hash": "b99718974cdc5158e97528c604734bb3e4a185b7261616ea4b5985e2768aa264"
    },
    "src/system/governance/checks/environment_checks.py::check_runtime_environment": {
      "key": "src/system/governance/checks/environment_checks.py::check_runtime_environment",
      "name": "check_runtime_environment",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.environment",
      "intent": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "docstring": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "items",
        "load_config"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.649042+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "parent_class_key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "structural_hash": "1d2a8c8ff3b056542c2a38a438e42b9300e327359b1bcd7a1b655e247b3d23da"
    },
    "src/system/tools/config/builder_config.py::BuilderConfig": {
      "key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "name": "BuilderConfig",
      "type": "ClassDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Centralized configuration for the knowledge graph builder.",
      "docstring": "Centralized configuration for the knowledge graph builder.",
      "calls": [
        "Path",
        "_infer_domains_from_directory_structure",
        "_load_cli_entry_points",
        "_load_domain_map",
        "_load_exclude_patterns",
        "_load_patterns",
        "as_posix",
        "cls",
        "error",
        "exists",
        "findall",
        "get",
        "group",
        "info",
        "is_dir",
        "iterdir",
        "len",
        "load_config",
        "read_text",
        "resolve",
        "search",
        "set",
        "startswith",
        "warning"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.652528+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "5a2405d55c1aff04e6a9752923a7bf94d04ef741a00ff509e5044971bfad3ba3"
    },
    "src/system/tools/config/builder_config.py::from_project": {
      "key": "src/system/tools/config/builder_config.py::from_project",
      "name": "from_project",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Factory method to load configuration from project files.",
      "docstring": "Factory method to load configuration from project files.",
      "calls": [
        "_load_cli_entry_points",
        "_load_domain_map",
        "_load_exclude_patterns",
        "_load_patterns",
        "cls",
        "resolve"
      ],
      "line_number": 31,
      "is_async": false,
      "parameters": [
        "cls",
        "root_path"
      ],
      "last_updated": "2025-08-31T08:12:11.652962+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "6247470a352761a7620265aba6c3005b5f8e07d6e752949d7ac4f2d3bb1d084b"
    },
    "src/system/tools/config/builder_config.py::_load_exclude_patterns": {
      "key": "src/system/tools/config/builder_config.py::_load_exclude_patterns",
      "name": "_load_exclude_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Load default exclude patterns.",
      "docstring": "Load default exclude patterns.",
      "calls": [],
      "line_number": 46,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-31T08:12:11.653249+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "046c004f9169f3f57c6172dba2f0dfdac2e4168072e9041ae8ddffdd90ff0016"
    },
    "src/system/tools/config/builder_config.py::_load_patterns": {
      "key": "src/system/tools/config/builder_config.py::_load_patterns",
      "name": "_load_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Load entry point detection patterns from configuration.",
      "docstring": "Load entry point detection patterns from configuration.",
      "calls": [
        "exists",
        "get",
        "load_config",
        "warning"
      ],
      "line_number": 51,
      "is_async": false,
      "parameters": [
        "root_path"
      ],
      "last_updated": "2025-08-31T08:12:11.653622+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "5073b57e6529cd36405693a7401969a778a31be4d5e9ba7378ba029381d06335"
    },
    "src/system/tools/config/builder_config.py::_load_cli_entry_points": {
      "key": "src/system/tools/config/builder_config.py::_load_cli_entry_points",
      "name": "_load_cli_entry_points",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parse pyproject.toml to find declared command-line entry points.",
      "docstring": "Parse pyproject.toml to find declared command-line entry points.",
      "calls": [
        "error",
        "exists",
        "findall",
        "group",
        "read_text",
        "search",
        "set"
      ],
      "line_number": 60,
      "is_async": false,
      "parameters": [
        "root_path"
      ],
      "last_updated": "2025-08-31T08:12:11.654170+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "2d92d9c165cfeebf0da7b0a7f6f5ec6b1ca4e3d174797c2bcee44cff29921206"
    },
    "src/system/tools/config/builder_config.py::_load_domain_map": {
      "key": "src/system/tools/config/builder_config.py::_load_domain_map",
      "name": "_load_domain_map",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Load domain-to-path mapping from configuration.",
      "docstring": "Load domain-to-path mapping from configuration.",
      "calls": [
        "Path",
        "_infer_domains_from_directory_structure",
        "as_posix",
        "get",
        "load_config"
      ],
      "line_number": 77,
      "is_async": false,
      "parameters": [
        "root_path",
        "src_root"
      ],
      "last_updated": "2025-08-31T08:12:11.654649+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "4c4fbc28c18409bc89f4fd18527ee53ddcab768161eea834c9cb9ab8d054f738"
    },
    "src/system/tools/config/builder_config.py::_infer_domains_from_directory_structure": {
      "key": "src/system/tools/config/builder_config.py::_infer_domains_from_directory_structure",
      "name": "_infer_domains_from_directory_structure",
      "type": "FunctionDef",
      "file": "src/system/tools/config/builder_config.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Heuristic to guess domains from directory structure.",
      "docstring": "Heuristic to guess domains from directory structure.",
      "calls": [
        "Path",
        "as_posix",
        "info",
        "is_dir",
        "iterdir",
        "len",
        "startswith",
        "warning"
      ],
      "line_number": 93,
      "is_async": false,
      "parameters": [
        "src_root"
      ],
      "last_updated": "2025-08-31T08:12:11.655283+00:00",
      "is_class": false,
      "base_classes": [],
      "parent_class_key": "src/system/tools/config/builder_config.py::BuilderConfig",
      "structural_hash": "08680c3bca273ac9dfa224e9bc55d84c84e69c1eaae345b7615f37894beb7944"
    },
    "src/core/cli/risk_gates.py::ReviewContext": {
      "key": "src/core/cli/risk_gates.py::ReviewContext",
      "name": "ReviewContext",
      "type": "ClassDef",
      "file": "src/core/cli/risk_gates.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "A data structure holding the context for a governance review.",
      "docstring": "A data structure holding the context for a governance review.",
      "calls": [],
      "line_number": 31,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-31T08:12:11.658865+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "faac0e0a9d6389ea68f44d0ab85a8ad946302445765c7fd33ee611d10a7bd890"
    },
    "src/core/cli/risk_gates.py::_safe_eval": {
      "key": "src/core/cli/risk_gates.py::_safe_eval",
      "name": "_safe_eval",
      "type": "FunctionDef",
      "file": "src/core/cli/risk_gates.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Safely evaluates a simple boolean expression from a string, allowing only a small subset of Python's AST nodes.",
      "docstring": "Safely evaluates a simple boolean expression from a string, allowing only a small subset of Python's AST nodes.",
      "calls": [
        "ValueError",
        "bool",
        "compile",
        "eval",
        "isinstance",
        "parse",
        "replace",
        "type",
        "walk"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [
        "expr",
        "ctx"
      ],
      "last_updated": "2025-08-31T08:12:11.659523+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "1db7d0bdc799e9d8bf4b57ec2557d619746167d2f46d055a354c99024cdba288"
    },
    "src/core/cli/risk_gates.py::_load_yaml": {
      "key": "src/core/cli/risk_gates.py::_load_yaml",
      "name": "_load_yaml",
      "type": "FunctionDef",
      "file": "src/core/cli/risk_gates.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load YAML content from a file using the shared utility function.",
      "docstring": "Load YAML content from a file using the shared utility function.",
      "calls": [
        "load_yaml_file"
      ],
      "line_number": 76,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-31T08:12:11.659828+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d96293768f635f6bd08dc2cbce719b3f3e5aeca34337ebea4126e3036d610f0c"
    },
    "src/core/cli/risk_gates.py::_merge": {
      "key": "src/core/cli/risk_gates.py::_merge",
      "name": "_merge",
      "type": "FunctionDef",
      "file": "src/core/cli/risk_gates.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Merges two ReviewContext objects, preferring non-default values from `b` when available.",
      "docstring": "Merges two ReviewContext objects, preferring non-default values from `b` when available.",
      "calls": [
        "ReviewContext"
      ],
      "line_number": 81,
      "is_async": false,
      "parameters": [
        "a",
        "b"
      ],
      "last_updated": "2025-08-31T08:12:11.660250+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b3851aa68574c57854cea28bb9b09b1dfef97d045d6026ca623e37d8cfba5651"
    },
    "src/core/cli/risk_gates.py::check": {
      "key": "src/core/cli/risk_gates.py::check",
      "name": "check",
      "type": "FunctionDef",
      "file": "src/core/cli/risk_gates.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Enforce the gates defined in evaluation/score_policy.yaml using the given context.",
      "docstring": "Enforce the gates defined in evaluation/score_policy.yaml using the given context.\nFails (exit 1) if any requirement is not satisfied.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "ReviewContext",
        "_load_yaml",
        "_merge",
        "_safe_eval",
        "add",
        "append",
        "bool",
        "command",
        "echo",
        "exists",
        "float",
        "get",
        "getattr",
        "isinstance",
        "lower",
        "require_if",
        "set",
        "sorted",
        "str"
      ],
      "line_number": 95,
      "is_async": false,
      "parameters": [
        "mind_path",
        "context",
        "risk_tier",
        "score",
        "touches_critical_paths",
        "checkpoint",
        "canary",
        "approver_quorum"
      ],
      "entry_point_type": "fastapi_route_command",
      "last_updated": "2025-08-31T08:12:11.662522+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5b0dc45f1df907878f324d432f8715670aa410b87f7ef90ec50c771d18a0640b"
    },
    "src/core/cli/intent_validate.py::_load_yaml": {
      "key": "src/core/cli/intent_validate.py::_load_yaml",
      "name": "_load_yaml",
      "type": "FunctionDef",
      "file": "src/core/cli/intent_validate.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load YAML content from a file.",
      "docstring": "Load YAML content from a file.\n\nArgs:\n    file_path: Path to the YAML file\n\nReturns:\n    Parsed YAML content as dictionary\n\nRaises:\n    FileNotFoundError: If the file doesn't exist\n    yaml.YAMLError: If the YAML is invalid",
      "calls": [
        "load_yaml_file"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-31T08:12:11.664149+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b1257191c9cb7e49eb18c760e819bdcbe1a2db4796d85c36e5f7a319b2860b22"
    },
    "src/core/cli/intent_validate.py::_load_json": {
      "key": "src/core/cli/intent_validate.py::_load_json",
      "name": "_load_json",
      "type": "FunctionDef",
      "file": "src/core/cli/intent_validate.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and returns a JSON dictionary from the specified file path.",
      "docstring": "Loads and returns a JSON dictionary from the specified file path.",
      "calls": [
        "load",
        "open"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "path"
      ],
      "last_updated": "2025-08-31T08:12:11.664449+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "90796564001fd5104ac380bb7ad1fc0656e8bbf1820ce367a2700f6f73c2a2b5"
    },
    "src/core/cli/intent_validate.py::_check": {
      "key": "src/core/cli/intent_validate.py::_check",
      "name": "_check",
      "type": "FunctionDef",
      "file": "src/core/cli/intent_validate.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Validates a YAML file against a JSON Schema, returning an error message if validation fails or files are missing, or None if successful.",
      "docstring": "Validates a YAML file against a JSON Schema, returning an error message if validation fails or files are missing, or None if successful.",
      "calls": [
        "_load_json",
        "_load_yaml",
        "echo",
        "exists",
        "join",
        "map",
        "validate"
      ],
      "line_number": 48,
      "is_async": false,
      "parameters": [
        "pair"
      ],
      "last_updated": "2025-08-31T08:12:11.665185+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b5c2c9f02efb8533231b34f7e1581de94092f60a4b51eb5a55f0d759e65d9b55"
    },
    "src/core/cli/intent_validate.py::run": {
      "key": "src/core/cli/intent_validate.py::run",
      "name": "run",
      "type": "FunctionDef",
      "file": "src/core/cli/intent_validate.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Validate policy YAMLs under .intent using JSON Schemas.",
      "docstring": "Validate policy YAMLs under .intent using JSON Schemas.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "_check",
        "command",
        "echo",
        "filter",
        "join",
        "list"
      ],
      "line_number": 67,
      "is_async": false,
      "parameters": [
        "mind_path"
      ],
      "entry_point_type": "fastapi_route_command",
      "last_updated": "2025-08-31T08:12:11.665881+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "ce634d35c36c059f942a5a305a87f5ce65f64620525efc44f5aaabd54001c473"
    },
    "src/shared/schemas/manifest_validator.py::load_schema": {
      "key": "src/shared/schemas/manifest_validator.py::load_schema",
      "name": "load_schema",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load a JSON schema from the .intent/schemas/ directory.",
      "docstring": "Load a JSON schema from the .intent/schemas/ directory.\n\nArgs:\n    schema_name (str): The filename of the schema (e.g., 'knowledge_graph_entry.schema.json').\n\nReturns:\n    Dict[str, Any]: The loaded JSON schema.\n\nRaises:\n    FileNotFoundError: If the schema file is not found.\n    json.JSONDecodeError: If the schema file is not valid JSON.",
      "calls": [
        "FileNotFoundError",
        "JSONDecodeError",
        "exists",
        "load",
        "open"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "schema_name"
      ],
      "last_updated": "2025-08-31T08:12:11.667372+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e5bb7a37793e6149b3426be18ec6be3092f5e4fc37d5f1cec9cd91572e999050"
    },
    "src/shared/schemas/manifest_validator.py::validate_manifest_entry": {
      "key": "src/shared/schemas/manifest_validator.py::validate_manifest_entry",
      "name": "validate_manifest_entry",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Validate a single manifest entry against a schema.",
      "docstring": "Validate a single manifest entry against a schema.\n\nArgs:\n    entry: The dictionary representing a single function/class entry.\n    schema_name: The filename of the schema to validate against.\n\nReturns:\n    A tuple of (is_valid: bool, list_of_error_messages: List[str]).",
      "calls": [
        "Draft7Validator",
        "append",
        "iter_errors",
        "join",
        "load_schema",
        "str"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "entry",
        "schema_name"
      ],
      "last_updated": "2025-08-31T08:12:11.668094+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "dd06b27b525aa5d0b5e696f14d7701ac2c82a02a05400274159d6a512b1022b2"
    },
    "src/shared/utils/manifest_aggregator.py::aggregate_manifests": {
      "key": "src/shared/utils/manifest_aggregator.py::aggregate_manifests",
      "name": "aggregate_manifests",
      "type": "FunctionDef",
      "file": "src/shared/utils/manifest_aggregator.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds all domain-specific manifest.yaml files and merges them.",
      "docstring": "Finds all domain-specific manifest.yaml files and merges them.\n\nThis function is the heart of the modular manifest system. It reads the\nsource structure to find all domains, then searches for a manifest in each\ndomain's directory, aggregating their contents.\n\nArgs:\n    repo_root (Path): The absolute path to the repository root.\n\nReturns:\n    A dictionary representing the aggregated manifest, primarily focused\n    on compiling a unified list of 'required_capabilities'.",
      "calls": [
        "debug",
        "error",
        "exists",
        "extend",
        "get",
        "info",
        "list",
        "read_text",
        "safe_load",
        "set",
        "sorted"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "repo_root"
      ],
      "last_updated": "2025-08-31T08:12:11.670194+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d45431df9d93fd2edff258c77c5be14707158aa02a69e35678e80bfe948c4f07"
    },
    "src/shared/utils/constitutional_parser.py::get_all_constitutional_paths": {
      "key": "src/shared/utils/constitutional_parser.py::get_all_constitutional_paths",
      "name": "get_all_constitutional_paths",
      "type": "FunctionDef",
      "file": "src/shared/utils/constitutional_parser.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Reads meta.yaml and recursively discovers all declared constitutional file paths.",
      "docstring": "Reads meta.yaml and recursively discovers all declared constitutional file paths.\nReturns a set of repo-relative paths (e.g., '.intent/policies/safety.yaml').",
      "calls": [
        "Path",
        "_recursive_find",
        "add",
        "exists",
        "isinstance",
        "read_text",
        "replace",
        "safe_load",
        "set",
        "str",
        "values"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "intent_dir"
      ],
      "last_updated": "2025-08-31T08:12:11.671620+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "4b648f06c2af377c12f7efe4a8567b818d447f51f074e39b48f4f422858991bc"
    },
    "src/shared/utils/import_scanner.py::scan_imports_for_file": {
      "key": "src/shared/utils/import_scanner.py::scan_imports_for_file",
      "name": "scan_imports_for_file",
      "type": "FunctionDef",
      "file": "src/shared/utils/import_scanner.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Parse a Python file and extract all imported module paths.",
      "docstring": "Parse a Python file and extract all imported module paths.\n\nArgs:\n    file_path (Path): Path to the file.\n\nReturns:\n    List[str]: List of imported module paths.",
      "calls": [
        "append",
        "isinstance",
        "parse",
        "read_text",
        "walk",
        "warning"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-31T08:12:11.672783+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "36db50255a3c9554f62633c6031d1b986ecfe96eaa67fab6a457d3af81e909e7"
    },
    "src/shared/utils/yaml_loader.py::load_yaml": {
      "key": "src/shared/utils/yaml_loader.py::load_yaml",
      "name": "load_yaml",
      "type": "FunctionDef",
      "file": "src/shared/utils/yaml_loader.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "yaml_loading",
      "intent": "Load and parse a YAML file from the given path.",
      "docstring": "Load and parse a YAML file from the given path.\n\nArgs:\n    file_path: Path to the YAML file to load\n\nReturns:\n    Parsed YAML content as a dictionary\n\nRaises:\n    FileNotFoundError: If the specified file doesn't exist\n    yaml.YAMLError: If the YAML content is malformed",
      "calls": [
        "FileNotFoundError",
        "YAMLError",
        "exists",
        "open",
        "safe_load"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-31T08:12:11.673758+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "36916fcdd9797261a5e894073180f2ba5b4266578030de4f078b63fe8d40a54e"
    },
    "src/shared/utils/parsing.py::extract_json_from_response": {
      "key": "src/shared/utils/parsing.py::extract_json_from_response",
      "name": "extract_json_from_response",
      "type": "FunctionDef",
      "file": "src/shared/utils/parsing.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Extracts a JSON object or array from a raw text response.",
      "docstring": "Extracts a JSON object or array from a raw text response.\nHandles markdown code blocks (```json) and raw JSON.\nReturns None if no valid JSON is found.",
      "calls": [
        "JSONDecoder",
        "find",
        "group",
        "loads",
        "raw_decode",
        "search"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "text"
      ],
      "last_updated": "2025-08-31T08:12:11.675206+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "21954045292adc370511bc47c3eaa0c4b7172daffed6f1f203f205408d0c955f"
    },
    "src/shared/utils/parsing.py::parse_write_blocks": {
      "key": "src/shared/utils/parsing.py::parse_write_blocks",
      "name": "parse_write_blocks",
      "type": "FunctionDef",
      "file": "src/shared/utils/parsing.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Parses a string for one or more [[write:file_path]]...[[/write]] blocks.",
      "docstring": "Parses a string for one or more [[write:file_path]]...[[/write]] blocks.\n\nArgs:\n    text: The raw string output from an LLM.\n\nReturns:\n    A dictionary where keys are file paths and values are the code blocks.",
      "calls": [
        "compile",
        "findall",
        "strip"
      ],
      "line_number": 43,
      "is_async": false,
      "parameters": [
        "text"
      ],
      "last_updated": "2025-08-31T08:12:11.675601+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "17605cd835eb1884f00caac99d3957164c0e918c14bf9520e5d10df12a1aca59"
    }
  }
}