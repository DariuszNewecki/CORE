{
  "schema_version": "2.0.0",
  "metadata": {
    "files_scanned": 72,
    "total_symbols": 280,
    "timestamp_utc": "2025-08-17T19:00:37.308289+00:00"
  },
  "symbols": {
    "src/core/clients.py::BaseLLMClient": {
      "key": "src/core/clients.py::BaseLLMClient",
      "name": "BaseLLMClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Base class for LLM clients, handling common request logic for Chat APIs.",
      "docstring": "Base class for LLM clients, handling common request logic for Chat APIs.\nProvides shared initialization and error handling for all LLM clients.",
      "calls": [
        "AsyncClient",
        "ValueError",
        "debug",
        "endswith",
        "error",
        "json",
        "post",
        "raise_for_status",
        "rstrip"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "base_class",
      "last_updated": "2025-08-17T19:00:36.577693+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "framework_base_class",
      "structural_hash": "0f66592a18c2280b2c2aef06c304204bbb7b0fb4ae9fea9bb45530e4aa7073e8"
    },
    "src/core/clients.py::__init__": {
      "key": "src/core/clients.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize the LLM client with API URL, key, and model name, setting up headers and async client.",
      "docstring": "Initialize the LLM client with API URL, key, and model name, setting up headers and async client.",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "line_number": 150,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.592918+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "b403a0adf5809d21d773a4460434cb99a9302d32c855cccb6cd5cf64e2da6ed1"
    },
    "src/core/clients.py::make_request": {
      "key": "src/core/clients.py::make_request",
      "name": "make_request",
      "type": "FunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt to the configured Chat Completions API. (Synchronous)",
      "docstring": "Sends a prompt to the configured Chat Completions API. (Synchronous)",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "last_updated": "2025-08-17T19:00:36.589344+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f86839876ec208ce0f0efec9a1ee80bba0eccb140e30ccaa94c499b45e182a73"
    },
    "src/core/clients.py::make_request_async": {
      "key": "src/core/clients.py::make_request_async",
      "name": "make_request_async",
      "type": "AsyncFunctionDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Sends a prompt asynchronously to the configured Chat Completions API.",
      "docstring": "Sends a prompt asynchronously to the configured Chat Completions API.",
      "calls": [
        "debug",
        "error",
        "json",
        "post",
        "raise_for_status"
      ],
      "line_number": 89,
      "is_async": true,
      "parameters": [
        "self",
        "prompt",
        "user_id"
      ],
      "last_updated": "2025-08-17T19:00:36.591519+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "000933e12c6751ddaee82d36d6bc4e62a447f2cd6c3fa59c68c0ad1064d3c8b6"
    },
    "src/core/clients.py::OrchestratorClient": {
      "key": "src/core/clients.py::OrchestratorClient",
      "name": "OrchestratorClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Client for the Orchestrator LLM (e.g., GPT-4, Claude 3).",
      "docstring": "Client for the Orchestrator LLM (e.g., GPT-4, Claude 3).\nResponsible for high-level planning and intent interpretation.",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "line_number": 129,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.583866+00:00",
      "is_class": true,
      "base_classes": [
        "BaseLLMClient"
      ],
      "structural_hash": "a9a57b0c8143719c4fdc119649f1c145ab237e70c343b272671aa2cea24d2299"
    },
    "src/core/clients.py::GeneratorClient": {
      "key": "src/core/clients.py::GeneratorClient",
      "name": "GeneratorClient",
      "type": "ClassDef",
      "file": "src/core/clients.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Client for the Generator LLM (e.g., a specialized coding model).",
      "docstring": "Client for the Generator LLM (e.g., a specialized coding model).\nResponsible for code generation and detailed implementation.",
      "calls": [
        "__init__",
        "info",
        "super"
      ],
      "line_number": 144,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.585330+00:00",
      "is_class": true,
      "base_classes": [
        "BaseLLMClient"
      ],
      "structural_hash": "4595b0780cd78486b917e5401a7827f3fe1b1ee5ec9fa7dfd131fe42ab6e1df6"
    },
    "src/core/validation_pipeline.py::_load_safety_policies": {
      "key": "src/core/validation_pipeline.py::_load_safety_policies",
      "name": "_load_safety_policies",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and caches the safety policies from the .intent directory.",
      "docstring": "Loads and caches the safety policies from the .intent directory.",
      "calls": [
        "get",
        "get_repo_root",
        "load_config"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.597586+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "cab90bc1e8a1e8e5ffececda4a227e4b8a931edb4fe02be9ce5a23bfae8d222f"
    },
    "src/core/validation_pipeline.py::_get_full_attribute_name": {
      "key": "src/core/validation_pipeline.py::_get_full_attribute_name",
      "name": "_get_full_attribute_name",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "docstring": "Recursively builds the full name of an attribute call (e.g., 'os.path.join').",
      "calls": [
        "insert",
        "isinstance",
        "join"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-17T19:00:36.598505+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "72bf270f183300199553865489182c447b5a4ccdc1ea03a3d5b94d95b162322e"
    },
    "src/core/validation_pipeline.py::_find_dangerous_patterns": {
      "key": "src/core/validation_pipeline.py::_find_dangerous_patterns",
      "name": "_find_dangerous_patterns",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans the AST for calls and imports forbidden by safety policies.",
      "docstring": "Scans the AST for calls and imports forbidden by safety policies.",
      "calls": [
        "Path",
        "_get_full_attribute_name",
        "_load_safety_policies",
        "any",
        "append",
        "get",
        "isinstance",
        "match",
        "replace",
        "set",
        "split",
        "update",
        "walk"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "tree",
        "file_path"
      ],
      "last_updated": "2025-08-17T19:00:36.602122+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "812f91809662354e6852673feef4c0faf04a6c475d9b084ed329ce08d1100463"
    },
    "src/core/validation_pipeline.py::_check_for_todo_comments": {
      "key": "src/core/validation_pipeline.py::_check_for_todo_comments",
      "name": "_check_for_todo_comments",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Scans source code for TODO/FIXME comments and returns them as violations.",
      "docstring": "Scans source code for TODO/FIXME comments and returns them as violations.",
      "calls": [
        "append",
        "enumerate",
        "split",
        "splitlines",
        "strip"
      ],
      "line_number": 129,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-17T19:00:36.603424+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c5b46c2eff257ea4efe9df4b282875ab698168db224abe219bf9f3ef4276594d"
    },
    "src/core/validation_pipeline.py::_check_semantics": {
      "key": "src/core/validation_pipeline.py::_check_semantics",
      "name": "_check_semantics",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "semantic_validation",
      "intent": "Runs all policy-aware semantic checks on a string of Python code.",
      "docstring": "Runs all policy-aware semantic checks on a string of Python code.",
      "calls": [
        "_find_dangerous_patterns",
        "parse"
      ],
      "line_number": 148,
      "is_async": false,
      "parameters": [
        "code",
        "file_path"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.604073+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "68336360a8c01eee656ceab907a3d3dcb6b61fef29f42c2c891428148a818f3a"
    },
    "src/core/validation_pipeline.py::_validate_python_code": {
      "key": "src/core/validation_pipeline.py::_validate_python_code",
      "name": "_validate_python_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Internal pipeline for Python code validation.",
      "docstring": "Internal pipeline for Python code validation.\nReturns the final code and a list of all found violations.",
      "calls": [
        "_check_for_todo_comments",
        "_check_semantics",
        "any",
        "append",
        "check_syntax",
        "extend",
        "fix_and_lint_code_with_ruff",
        "format_code_with_black",
        "str"
      ],
      "line_number": 158,
      "is_async": false,
      "parameters": [
        "path_hint",
        "code"
      ],
      "last_updated": "2025-08-17T19:00:36.605618+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e96751308fac71051ef307581c6143cebf0852d2a595604b122d0c380c8f37fc"
    },
    "src/core/validation_pipeline.py::_validate_yaml": {
      "key": "src/core/validation_pipeline.py::_validate_yaml",
      "name": "_validate_yaml",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Internal pipeline for YAML validation.",
      "docstring": "Internal pipeline for YAML validation.",
      "calls": [
        "append",
        "safe_load"
      ],
      "line_number": 199,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-17T19:00:36.606610+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c1cc9b3495cf7da110b274799aa0d90947cbb9d1605a43719d7aa6ecfb877cef"
    },
    "src/core/validation_pipeline.py::_get_file_classification": {
      "key": "src/core/validation_pipeline.py::_get_file_classification",
      "name": "_get_file_classification",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Determines the file type based on its extension.",
      "docstring": "Determines the file type based on its extension.",
      "calls": [
        "Path",
        "lower"
      ],
      "line_number": 216,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-17T19:00:36.607570+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5389b48f5dc1b1c94a0a73168977c056aad4c0d85a4843163538780ff9c3cb91"
    },
    "src/core/validation_pipeline.py::validate_code": {
      "key": "src/core/validation_pipeline.py::validate_code",
      "name": "validate_code",
      "type": "FunctionDef",
      "file": "src/core/validation_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "code_quality_analysis",
      "intent": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type, returning a standardized dictionary with status, violations, and processed code.",
      "docstring": "Validate a file's code by routing it to the appropriate validation pipeline based on its file type, returning a standardized dictionary with status, violations, and processed code.",
      "calls": [
        "_get_file_classification",
        "_validate_python_code",
        "_validate_yaml",
        "any",
        "debug",
        "get"
      ],
      "line_number": 229,
      "is_async": false,
      "parameters": [
        "file_path",
        "code",
        "quiet"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.609088+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "89de86f90da79d40f54b96d243b439f94dda7e1e0fe83ad3867e582947830cb0"
    },
    "src/core/git_service.py::GitService": {
      "key": "src/core/git_service.py::GitService",
      "name": "GitService",
      "type": "ClassDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Encapsulates Git operations for the CORE system.",
      "docstring": "Encapsulates Git operations for the CORE system.\nEnsures all file changes are committed with traceable messages.",
      "calls": [
        "Path",
        "RuntimeError",
        "ValueError",
        "_run_command",
        "debug",
        "error",
        "info",
        "is_dir",
        "is_git_repo",
        "join",
        "lower",
        "resolve",
        "run",
        "str",
        "strip",
        "warning"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.615226+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "ccc7b74514266784da6391edb69daa742b4ccb839f991520bf4bcd5f53f8bee9"
    },
    "src/core/git_service.py::__init__": {
      "key": "src/core/git_service.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize GitService with the resolved absolute path to the Git repository; raises ValueError if path is not a valid Git repo.",
      "docstring": "Initialize GitService with the resolved absolute path to the Git repository; raises ValueError if path is not a valid Git repo.",
      "calls": [
        "Path",
        "ValueError",
        "info",
        "is_git_repo",
        "resolve"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.622055+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "2ee6f0bbab7a85e07997d95684c60764cdff44ca12bd88dd923c9ba41636ac16"
    },
    "src/core/git_service.py::_run_command": {
      "key": "src/core/git_service.py::_run_command",
      "name": "_run_command",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "change_safety_enforcement",
      "intent": "Run a Git command and return stdout.",
      "docstring": "Run a Git command and return stdout.\n\nArgs:\n    command (list): Git command as a list (e.g., ['git', 'status']).\n\nReturns:\n    str: Command output, or raises RuntimeError on failure.",
      "calls": [
        "RuntimeError",
        "debug",
        "error",
        "join",
        "run",
        "strip"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "self",
        "command"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.623233+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "244f6b0c9edc75d143c4779dec692c478d7a6308ed924c4e1eb77a9c6f1f8185"
    },
    "src/core/git_service.py::add": {
      "key": "src/core/git_service.py::add",
      "name": "add",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stage a file or directory for commit.",
      "docstring": "Stage a file or directory for commit.\n\nArgs:\n    file_path (str): Path to stage. Defaults to '.' (all changes).",
      "calls": [
        "ValueError",
        "_run_command",
        "resolve"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-17T19:00:36.624169+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "bf69c45ada0dfc032626720fafc60b9784d1b6f7671472abf04bbef419e3d3b2"
    },
    "src/core/git_service.py::commit": {
      "key": "src/core/git_service.py::commit",
      "name": "commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Commit staged changes with a message.",
      "docstring": "Commit staged changes with a message.\nIf there are no changes to commit, this operation is a no-op and will not raise an error.\n\nArgs:\n    message (str): Commit message explaining the change.",
      "calls": [
        "_run_command",
        "info",
        "lower",
        "str"
      ],
      "line_number": 68,
      "is_async": false,
      "parameters": [
        "self",
        "message"
      ],
      "last_updated": "2025-08-17T19:00:36.625284+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "28aacd32f8f933e003487892fc29991fec80707c4431f9d84ee198f07158791b"
    },
    "src/core/git_service.py::is_git_repo": {
      "key": "src/core/git_service.py::is_git_repo",
      "name": "is_git_repo",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Check if the configured path is a valid Git repository.",
      "docstring": "Check if the configured path is a valid Git repository.\n\nReturns:\n    bool: True if it's a Git repo, False otherwise.",
      "calls": [
        "is_dir"
      ],
      "line_number": 96,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.625871+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "44bf21e77508b2285243dbd4a291ad962face3886f645477a69fb5b1af1f182e"
    },
    "src/core/git_service.py::get_current_commit": {
      "key": "src/core/git_service.py::get_current_commit",
      "name": "get_current_commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Gets the full SHA hash of the current commit (HEAD).",
      "docstring": "Gets the full SHA hash of the current commit (HEAD).",
      "calls": [
        "_run_command"
      ],
      "line_number": 106,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.626408+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "9591cea61e11db1150d7179ac28a550cc2eba183bfc3d60f297b6a304022122a"
    },
    "src/core/git_service.py::reset_to_commit": {
      "key": "src/core/git_service.py::reset_to_commit",
      "name": "reset_to_commit",
      "type": "FunctionDef",
      "file": "src/core/git_service.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Performs a hard reset to a specific commit hash.",
      "docstring": "Performs a hard reset to a specific commit hash.\nThis will discard all current changes.",
      "calls": [
        "_run_command",
        "info",
        "warning"
      ],
      "line_number": 112,
      "is_async": false,
      "parameters": [
        "self",
        "commit_hash"
      ],
      "last_updated": "2025-08-17T19:00:36.627222+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "949dc4328418bf308315afed23d47b25af2965af4c69af006041795f2264b0da"
    },
    "src/core/syntax_checker.py::check_syntax": {
      "key": "src/core/syntax_checker.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/core/syntax_checker.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "syntax_validation",
      "intent": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "docstring": "Checks the given Python code for syntax errors and returns a list of violations, if any.",
      "calls": [
        "endswith",
        "parse",
        "strip"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "file_path",
        "code"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.629323+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "1364f88841c69497e8e60da5590e605cb9abe2023ed6c7914d4834889565c54c"
    },
    "src/core/black_formatter.py::format_code_with_black": {
      "key": "src/core/black_formatter.py::format_code_with_black",
      "name": "format_code_with_black",
      "type": "FunctionDef",
      "file": "src/core/black_formatter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "docstring": "Formats the given Python code using Black, raising `black.InvalidInput` for syntax errors or `Exception` for other formatting issues.",
      "calls": [
        "Exception",
        "FileMode",
        "InvalidInput",
        "format_str"
      ],
      "line_number": 10,
      "is_async": false,
      "parameters": [
        "code"
      ],
      "last_updated": "2025-08-17T19:00:36.630732+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "67aa7b50532f6c25f84285da5bbf9430a54f3b594a386a3299c19b82faa15fbf"
    },
    "src/core/test_runner.py::run_tests": {
      "key": "src/core/test_runner.py::run_tests",
      "name": "run_tests",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "test_execution",
      "intent": "Executes pytest on the tests/ directory and returns a structured result.",
      "docstring": "Executes pytest on the tests/ directory and returns a structured result.",
      "calls": [
        "Path",
        "_log_test_result",
        "_store_failure_if_any",
        "_summarize",
        "error",
        "getenv",
        "info",
        "int",
        "isoformat",
        "resolve",
        "run",
        "str",
        "strip",
        "utcnow",
        "warning"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "silent"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.635953+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "e7898d73b9abc7a58013e08dcee037d619fa78f60f80f33bb74770bd9e7e7717"
    },
    "src/core/test_runner.py::_summarize": {
      "key": "src/core/test_runner.py::_summarize",
      "name": "_summarize",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Parses pytest output to find the final summary line.",
      "docstring": "Parses pytest output to find the final summary line.",
      "calls": [
        "reversed",
        "splitlines",
        "strip"
      ],
      "line_number": 80,
      "is_async": false,
      "parameters": [
        "output"
      ],
      "last_updated": "2025-08-17T19:00:36.636758+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "ecb56e37049e5532d9a6ce3afe63d1fd652cb164fc98e76a46565820fd320bf7"
    },
    "src/core/test_runner.py::_log_test_result": {
      "key": "src/core/test_runner.py::_log_test_result",
      "name": "_log_test_result",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Appends a JSON record of a test run to the persistent log file.",
      "docstring": "Appends a JSON record of a test run to the persistent log file.",
      "calls": [
        "Path",
        "dumps",
        "mkdir",
        "open",
        "warning",
        "write"
      ],
      "line_number": 89,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "last_updated": "2025-08-17T19:00:36.637781+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "13f83ee9bd80ac8766838342478341ecac3f76e1a251506d3a68a02723b420d3"
    },
    "src/core/test_runner.py::_store_failure_if_any": {
      "key": "src/core/test_runner.py::_store_failure_if_any",
      "name": "_store_failure_if_any",
      "type": "FunctionDef",
      "file": "src/core/test_runner.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Saves the details of a failed test run to a dedicated file for easy access.",
      "docstring": "Saves the details of a failed test run to a dedicated file for easy access.",
      "calls": [
        "Path",
        "dumps",
        "exists",
        "get",
        "mkdir",
        "unlink",
        "warning",
        "write_text"
      ],
      "line_number": 100,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "last_updated": "2025-08-17T19:00:36.639074+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "af76b1754db8cbc6ae124a21f9916aaa8bfc52fa38d68bc69f86fd7e70aed49e"
    },
    "src/core/main.py::lifespan": {
      "key": "src/core/main.py::lifespan",
      "name": "lifespan",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "docstring": "FastAPI lifespan handler \u2014 runs startup and shutdown logic.",
      "calls": [
        "FileHandler",
        "GeneratorClient",
        "GitService",
        "IntentGuard",
        "OrchestratorClient",
        "Path",
        "PromptPipeline",
        "info",
        "introspection",
        "str",
        "warning"
      ],
      "line_number": 41,
      "is_async": true,
      "parameters": [
        "app"
      ],
      "entry_point_type": "context_manager",
      "last_updated": "2025-08-17T19:00:36.642865+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "1f40bbdf4c514b47e2764ec5938f0a202609b8f816dee6a8b3dbe2f1dc80484e"
    },
    "src/core/main.py::GoalRequest": {
      "key": "src/core/main.py::GoalRequest",
      "name": "GoalRequest",
      "type": "ClassDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Defines the request body for the /execute_goal endpoint.",
      "docstring": "Defines the request body for the /execute_goal endpoint.",
      "calls": [
        "Field"
      ],
      "line_number": 76,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-17T19:00:36.643353+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "512b92faa274c914fe8a0ce4c72ffb43c618c7e303b87ab6bbc9d70d29517eee"
    },
    "src/core/main.py::AlignmentRequest": {
      "key": "src/core/main.py::AlignmentRequest",
      "name": "AlignmentRequest",
      "type": "ClassDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Request schema for /guard/align.",
      "docstring": "Request schema for /guard/align.",
      "calls": [
        "Field"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-17T19:00:36.643985+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "81eb1abaa32af8db17ff9adbd3a2f9a5c877a900b7629347896266edb551ddd5"
    },
    "src/core/main.py::guard_align": {
      "key": "src/core/main.py::guard_align",
      "name": "guard_align",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Evaluate a goal against the NorthStar and optional blocklist.",
      "docstring": "Evaluate a goal against the NorthStar and optional blocklist.",
      "calls": [
        "JSONResponse",
        "Path",
        "append",
        "check_goal_alignment",
        "get",
        "post"
      ],
      "line_number": 90,
      "is_async": true,
      "parameters": [
        "payload"
      ],
      "entry_point_type": "fastapi_route_post",
      "last_updated": "2025-08-17T19:00:36.645189+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "202a6fe24c3a8647bb696b6e100fe53f4f38c1e9f869be4742b5850b1e063628"
    },
    "src/core/main.py::execute_goal": {
      "key": "src/core/main.py::execute_goal",
      "name": "execute_goal",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Execute a high-level goal by planning and generating code.",
      "docstring": "Execute a high-level goal by planning and generating code.",
      "calls": [
        "ExecutionAgent",
        "HTTPException",
        "JSONResponse",
        "PlanExecutor",
        "PlannerAgent",
        "create_execution_plan",
        "error",
        "exception",
        "execute_plan",
        "info",
        "post",
        "str"
      ],
      "line_number": 106,
      "is_async": true,
      "parameters": [
        "request_data",
        "request"
      ],
      "entry_point_type": "fastapi_route_post",
      "last_updated": "2025-08-17T19:00:36.646885+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "42b4430778f928fe01ece455a066daf39c9e197f037e7c88a521f51e934efcff"
    },
    "src/core/main.py::root": {
      "key": "src/core/main.py::root",
      "name": "root",
      "type": "AsyncFunctionDef",
      "file": "src/core/main.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Root endpoint \u2014 returns system status.",
      "docstring": "Root endpoint \u2014 returns system status.",
      "calls": [
        "get"
      ],
      "line_number": 150,
      "is_async": true,
      "parameters": [],
      "entry_point_type": "fastapi_route_get",
      "last_updated": "2025-08-17T19:00:36.647411+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0f4ab9b7486b424e3726a154118bc8d237af730580bf891e8f58b65ba9fd8713"
    },
    "src/core/prompt_pipeline.py::PromptPipeline": {
      "key": "src/core/prompt_pipeline.py::PromptPipeline",
      "name": "PromptPipeline",
      "type": "ClassDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].",
      "docstring": "Processes and enriches user prompts by resolving directives like [[include:...]] and [[analysis:...]].\nEnsures the LLM receives full context before generating code.",
      "calls": [
        "Path",
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest",
        "compile",
        "dump",
        "exists",
        "get",
        "group",
        "is_file",
        "isinstance",
        "read_text",
        "resolve",
        "safe_load",
        "split",
        "stat",
        "str",
        "strip",
        "sub"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.655896+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "643ffeca004f05935522cc4d1c1b568539b9a36dd0ab361acf09bb0e399dec65"
    },
    "src/core/prompt_pipeline.py::__init__": {
      "key": "src/core/prompt_pipeline.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize PromptPipeline with repository root.",
      "docstring": "Initialize PromptPipeline with repository root.\n\nArgs:\n    repo_path (Path): Root path of the repository.",
      "calls": [
        "Path",
        "compile",
        "resolve"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.666152+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "bda8f0237a381f0ea54c8b1c95a94d352f76364cb12916f96b97e8481887259a"
    },
    "src/core/prompt_pipeline.py::_replace_context_match": {
      "key": "src/core/prompt_pipeline.py::_replace_context_match",
      "name": "_replace_context_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "docstring": "Dynamically replaces a [[context:...]] regex match with file content or an error message if the file is missing, unreadable, or exceeds size limits.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "line_number": 45,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-17T19:00:36.667727+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "69c3e72e7b03b25521273e77c42e156d65772c262f59ee1b25bcce6d70863bff"
    },
    "src/core/prompt_pipeline.py::_inject_context": {
      "key": "src/core/prompt_pipeline.py::_inject_context",
      "name": "_inject_context",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[context:file.py]] directives with actual file content.",
      "docstring": "Replaces [[context:file.py]] directives with actual file content.",
      "calls": [
        "sub"
      ],
      "line_number": 60,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-17T19:00:36.668243+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "11fb0fa702d480e49fbad9fe7eaede86611b3cfb9b8944f520892ae15dffc7b0"
    },
    "src/core/prompt_pipeline.py::_replace_include_match": {
      "key": "src/core/prompt_pipeline.py::_replace_include_match",
      "name": "_replace_include_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "docstring": "Dynamically replaces an [[include:...]] regex match with file content or an error message.",
      "calls": [
        "exists",
        "group",
        "is_file",
        "read_text",
        "stat",
        "str",
        "strip"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-17T19:00:36.669751+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3df3436cee404f0d98540037203c0e84c11e0f56cb31540ca3fe85350eeacdd8"
    },
    "src/core/prompt_pipeline.py::_inject_includes": {
      "key": "src/core/prompt_pipeline.py::_inject_includes",
      "name": "_inject_includes",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[include:file.py]] directives with file content.",
      "docstring": "Replaces [[include:file.py]] directives with file content.",
      "calls": [
        "sub"
      ],
      "line_number": 80,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-17T19:00:36.670264+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6f77e4347ebd4b2deab3eace2798b591c4243c4cc43686cd319c0a1f5ff0c2ca"
    },
    "src/core/prompt_pipeline.py::_replace_analysis_match": {
      "key": "src/core/prompt_pipeline.py::_replace_analysis_match",
      "name": "_replace_analysis_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "docstring": "Dynamically replaces an [[analysis:...]] regex match with a placeholder analysis message for the given file path.",
      "calls": [
        "group",
        "strip"
      ],
      "line_number": 84,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-17T19:00:36.671082+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "34274a0f7415695348ba0437bb6be2b7c6a211608372ea21fcf87b7bb7057f58"
    },
    "src/core/prompt_pipeline.py::_inject_analysis": {
      "key": "src/core/prompt_pipeline.py::_inject_analysis",
      "name": "_inject_analysis",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[analysis:file.py]] directives with code analysis.",
      "docstring": "Replaces [[analysis:file.py]] directives with code analysis.",
      "calls": [
        "sub"
      ],
      "line_number": 91,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-17T19:00:36.671649+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c503ae0368651ed52d0af07a2028044a4635852b4262fbe0b292a6de1fef9a74"
    },
    "src/core/prompt_pipeline.py::_replace_manifest_match": {
      "key": "src/core/prompt_pipeline.py::_replace_manifest_match",
      "name": "_replace_manifest_match",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "docstring": "Dynamically replaces a [[manifest:...]] regex match with manifest data or an error.",
      "calls": [
        "dump",
        "exists",
        "get",
        "group",
        "isinstance",
        "read_text",
        "safe_load",
        "split",
        "str",
        "strip"
      ],
      "line_number": 95,
      "is_async": false,
      "parameters": [
        "self",
        "match"
      ],
      "last_updated": "2025-08-17T19:00:36.673575+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "4937c71be594f5ada7675be42dc716678817daa722e49398deafa963ac35acad"
    },
    "src/core/prompt_pipeline.py::_inject_manifest": {
      "key": "src/core/prompt_pipeline.py::_inject_manifest",
      "name": "_inject_manifest",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "docstring": "Replaces [[manifest:field]] directives with data from project_manifest.yaml.",
      "calls": [
        "sub"
      ],
      "line_number": 125,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "last_updated": "2025-08-17T19:00:36.674092+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "77f28434e5ad8ebaf00e1d6081b399fd2a9d7c90dac7829bbde092e51da55a4f"
    },
    "src/core/prompt_pipeline.py::process": {
      "key": "src/core/prompt_pipeline.py::process",
      "name": "process",
      "type": "FunctionDef",
      "file": "src/core/prompt_pipeline.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "prompt_interpretation",
      "intent": "Processes the full prompt by sequentially resolving all directives.",
      "docstring": "Processes the full prompt by sequentially resolving all directives.\nThis is the main entry point for prompt enrichment.",
      "calls": [
        "_inject_analysis",
        "_inject_context",
        "_inject_includes",
        "_inject_manifest"
      ],
      "line_number": 130,
      "is_async": false,
      "parameters": [
        "self",
        "prompt"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.674811+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "7beac5b33fa702f09356b6bd12d514990e13c314587f87580dee342387278a1a"
    },
    "src/core/intent_alignment.py::_read_text_first": {
      "key": "src/core/intent_alignment.py::_read_text_first",
      "name": "_read_text_first",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Finds and reads the first existing file from a list of candidate paths.",
      "docstring": "Finds and reads the first existing file from a list of candidate paths.",
      "calls": [
        "debug",
        "exists",
        "read_text"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "paths"
      ],
      "last_updated": "2025-08-17T19:00:36.677272+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5c690a7094496e5795d7c4bde5518e0460231aceb1b54d26fa5870b9d65f2976"
    },
    "src/core/intent_alignment.py::_read_blocklist": {
      "key": "src/core/intent_alignment.py::_read_blocklist",
      "name": "_read_blocklist",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Reads the blocklist file, returning a list of lowercased, stripped terms.",
      "docstring": "Reads the blocklist file, returning a list of lowercased, stripped terms.",
      "calls": [
        "debug",
        "exists",
        "lower",
        "read_text",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.678335+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "645bcc9a39ef41488c5ea7a2940f13fc4b26c8c1bc436d53f993d814c77c15b3"
    },
    "src/core/intent_alignment.py::_tokenize": {
      "key": "src/core/intent_alignment.py::_tokenize",
      "name": "_tokenize",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Converts a string into a list of lowercase alphanumeric tokens.",
      "docstring": "Converts a string into a list of lowercase alphanumeric tokens.",
      "calls": [
        "findall",
        "lower"
      ],
      "line_number": 55,
      "is_async": false,
      "parameters": [
        "text"
      ],
      "last_updated": "2025-08-17T19:00:36.678899+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8b7e436b369f8a59e6ca968520fc9d02eec3f9d1e48258193e87e177d62d8e82"
    },
    "src/core/intent_alignment.py::check_goal_alignment": {
      "key": "src/core/intent_alignment.py::check_goal_alignment",
      "name": "check_goal_alignment",
      "type": "FunctionDef",
      "file": "src/core/intent_alignment.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Returns (ok, details). details = { 'coverage': float|None, 'violations': [codes...] }",
      "docstring": "Returns (ok, details). details = { 'coverage': float|None, 'violations': [codes...] }\nViolations codes: 'blocked_topic', 'low_mission_overlap'",
      "calls": [
        "Path",
        "_read_blocklist",
        "_read_text_first",
        "_tokenize",
        "any",
        "append",
        "len",
        "lower",
        "max",
        "round",
        "set"
      ],
      "line_number": 60,
      "is_async": false,
      "parameters": [
        "goal",
        "project_root"
      ],
      "last_updated": "2025-08-17T19:00:36.680561+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0c7e02644a288a463670cc1472faa6701002593ecefcd8b3078631666b684468"
    },
    "src/core/capabilities.py::introspection": {
      "key": "src/core/capabilities.py::introspection",
      "name": "introspection",
      "type": "FunctionDef",
      "file": "src/core/capabilities.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "introspection",
      "intent": "Runs a full self-analysis cycle to inspect system structure and health.",
      "docstring": "Runs a full self-analysis cycle to inspect system structure and health.\nThis orchestrates the execution of the system's own introspection tools\nas separate, governed processes.",
      "calls": [
        "Path",
        "error",
        "info",
        "print",
        "resolve",
        "run",
        "warning"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-17T19:00:36.684113+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "65c205885812932a8159baa16c02658ee3be9c35f7e536cee2a1799fa9a682b7"
    },
    "src/core/ruff_linter.py::fix_and_lint_code_with_ruff": {
      "key": "src/core/ruff_linter.py::fix_and_lint_code_with_ruff",
      "name": "fix_and_lint_code_with_ruff",
      "type": "FunctionDef",
      "file": "src/core/ruff_linter.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Fix and lint the provided Python code using Ruff's JSON output format.",
      "docstring": "Fix and lint the provided Python code using Ruff's JSON output format.\n\nArgs:\n    code (str): Source code to fix and lint.\n    display_filename (str): Optional display name for readable error messages.\n\nReturns:\n    A tuple containing:\n    - The potentially fixed code as a string.\n    - A list of structured violation dictionaries for any remaining issues.",
      "calls": [
        "NamedTemporaryFile",
        "append",
        "error",
        "exists",
        "get",
        "loads",
        "open",
        "read",
        "remove",
        "run",
        "write"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "code",
        "display_filename"
      ],
      "last_updated": "2025-08-17T19:00:36.687788+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "43ca55ae34afc29c10e967766b01252dae62b0efe0b5e8f024d0d5f07d1cc287"
    },
    "src/core/file_handler.py::FileHandler": {
      "key": "src/core/file_handler.py::FileHandler",
      "name": "FileHandler",
      "type": "ClassDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Central class for safe, auditable file operations in CORE.",
      "docstring": "Central class for safe, auditable file operations in CORE.\nAll writes are staged first and require confirmation. Validation is handled\nby the calling agent via the validation_pipeline.",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "as_posix",
        "dumps",
        "exists",
        "info",
        "is_dir",
        "is_relative_to",
        "isoformat",
        "mkdir",
        "now",
        "pop",
        "resolve",
        "str",
        "unlink",
        "uuid4",
        "write_text"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.693597+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "cf22b57d0019b89065c46a812e22e93b4b7115c5a8708f14c806b9a1d98a402f"
    },
    "src/core/file_handler.py::__init__": {
      "key": "src/core/file_handler.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize FileHandler with repository root.",
      "docstring": "Initialize FileHandler with repository root.",
      "calls": [
        "Lock",
        "Path",
        "ValueError",
        "is_dir",
        "mkdir",
        "resolve"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.699578+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "a391bbf69fe28cb6f7dd819585d77edd303092eba98bfedd2829d91a0675d620"
    },
    "src/core/file_handler.py::add_pending_write": {
      "key": "src/core/file_handler.py::add_pending_write",
      "name": "add_pending_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Stages a pending write operation for later confirmation.",
      "docstring": "Stages a pending write operation for later confirmation.",
      "calls": [
        "Path",
        "as_posix",
        "dumps",
        "isoformat",
        "now",
        "str",
        "uuid4",
        "write_text"
      ],
      "line_number": 51,
      "is_async": false,
      "parameters": [
        "self",
        "prompt",
        "suggested_path",
        "code"
      ],
      "last_updated": "2025-08-17T19:00:36.700769+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "97f53770943022e923da2c61ba40c8b032523785a1466c467746c7cf52a50e8f"
    },
    "src/core/file_handler.py::confirm_write": {
      "key": "src/core/file_handler.py::confirm_write",
      "name": "confirm_write",
      "type": "FunctionDef",
      "file": "src/core/file_handler.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "docstring": "Confirms and applies a pending write to disk. Assumes content has been validated.",
      "calls": [
        "ValueError",
        "dumps",
        "exists",
        "info",
        "is_relative_to",
        "mkdir",
        "pop",
        "resolve",
        "str",
        "unlink",
        "write_text"
      ],
      "line_number": 72,
      "is_async": false,
      "parameters": [
        "self",
        "pending_id"
      ],
      "last_updated": "2025-08-17T19:00:36.703091+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "541b4ae3111b2b97acd6b799bddb038018fc5ddaf06d45bd53757acdbbe26688"
    },
    "src/core/intent_model.py::IntentModel": {
      "key": "src/core/intent_model.py::IntentModel",
      "name": "IntentModel",
      "type": "ClassDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Loads and provides an queryable interface to the source code structure",
      "docstring": "Loads and provides an queryable interface to the source code structure\ndefined in .intent/knowledge/source_structure.yaml.",
      "calls": [
        "FileNotFoundError",
        "Path",
        "ValueError",
        "_load_structure",
        "exists",
        "get",
        "isinstance",
        "items",
        "len",
        "read_text",
        "resolve",
        "safe_load",
        "sorted"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.707471+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "ead52768c57f82f1780c8048368cab32f42cf88daf78acfe2535d08b2a8e4e0e"
    },
    "src/core/intent_model.py::__init__": {
      "key": "src/core/intent_model.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initializes the model by loading the source structure definition from the repository, inferring the root if not provided.",
      "docstring": "Initializes the model by loading the source structure definition from the repository, inferring the root if not provided.",
      "calls": [
        "Path",
        "_load_structure",
        "resolve"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.712417+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "b6a00bdb4d20cab52b39f280147b910b87f17475e126165f66b105aeaf41d245"
    },
    "src/core/intent_model.py::_load_structure": {
      "key": "src/core/intent_model.py::_load_structure",
      "name": "_load_structure",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load the domain structure from .intent/knowledge/source_structure.yaml.",
      "docstring": "Load the domain structure from .intent/knowledge/source_structure.yaml.\n\nReturns:\n    Dict[str, dict]: Mapping of domain names to metadata (path, permissions, etc.).",
      "calls": [
        "FileNotFoundError",
        "ValueError",
        "exists",
        "isinstance",
        "read_text",
        "safe_load"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.713650+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b824e94138bb02de0af5745ab5f6a071ce7b11cbfb5530c8f99e55a1bbccc06e"
    },
    "src/core/intent_model.py::resolve_domain_for_path": {
      "key": "src/core/intent_model.py::resolve_domain_for_path",
      "name": "resolve_domain_for_path",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Given an absolute or relative path, determine which domain it belongs to.",
      "docstring": "Given an absolute or relative path, determine which domain it belongs to.\nPrefers deeper (more specific) paths over shorter ones.",
      "calls": [
        "items",
        "len",
        "resolve",
        "sorted"
      ],
      "line_number": 61,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-17T19:00:36.714837+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7233e373175714977e544959c79a24ce93db7915c6a103e729b62d514d42216c"
    },
    "src/core/intent_model.py::get_domain_permissions": {
      "key": "src/core/intent_model.py::get_domain_permissions",
      "name": "get_domain_permissions",
      "type": "FunctionDef",
      "file": "src/core/intent_model.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Return a list of allowed domains that the given domain can import from.",
      "docstring": "Return a list of allowed domains that the given domain can import from.\n\nArgs:\n    domain (str): The domain to query.\n\nReturns:\n    List[str]: List of allowed domain names, or empty list if not defined.",
      "calls": [
        "get",
        "isinstance"
      ],
      "line_number": 82,
      "is_async": false,
      "parameters": [
        "self",
        "domain"
      ],
      "last_updated": "2025-08-17T19:00:36.715615+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "16a9b7ddeb463171579a3fbc9d32982a49bdb7faefbe080378a345cbbfda5698"
    },
    "src/core/errors.py::register_exception_handlers": {
      "key": "src/core/errors.py::register_exception_handlers",
      "name": "register_exception_handlers",
      "type": "FunctionDef",
      "file": "src/core/errors.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Registers custom exception handlers with the FastAPI application.",
      "docstring": "Registers custom exception handlers with the FastAPI application.",
      "calls": [
        "JSONResponse",
        "exception",
        "exception_handler",
        "info",
        "warning"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "last_updated": "2025-08-17T19:00:36.718017+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b4391706ebcc3340825a8843452e9937dff660eae23258170b9a39025af234cd"
    },
    "src/core/errors.py::http_exception_handler": {
      "key": "src/core/errors.py::http_exception_handler",
      "name": "http_exception_handler",
      "type": "AsyncFunctionDef",
      "file": "src/core/errors.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Handles FastAPI's built-in HTTP exceptions to ensure consistent",
      "docstring": "Handles FastAPI's built-in HTTP exceptions to ensure consistent\nJSON error responses.",
      "calls": [
        "JSONResponse",
        "exception_handler",
        "warning"
      ],
      "line_number": 21,
      "is_async": true,
      "parameters": [
        "request",
        "exc"
      ],
      "entry_point_type": "fastapi_route_exception_handler",
      "last_updated": "2025-08-17T19:00:36.719007+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "844a786fe8a0ce4cd5981900846e4e73cecae20bed3e51aaa59a30f251c850aa"
    },
    "src/core/errors.py::unhandled_exception_handler": {
      "key": "src/core/errors.py::unhandled_exception_handler",
      "name": "unhandled_exception_handler",
      "type": "AsyncFunctionDef",
      "file": "src/core/errors.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Catches any unhandled exception, logs the full traceback internally,",
      "docstring": "Catches any unhandled exception, logs the full traceback internally,\nand returns a generic 500 Internal Server Error to the client.\nThis is a critical security measure to prevent leaking stack traces.",
      "calls": [
        "JSONResponse",
        "exception",
        "exception_handler"
      ],
      "line_number": 35,
      "is_async": true,
      "parameters": [
        "request",
        "exc"
      ],
      "entry_point_type": "fastapi_route_exception_handler",
      "last_updated": "2025-08-17T19:00:36.719872+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8fe5bb14073169e242922d7e0ec83028c9f5651f22f304eee50f7f1e66a093af"
    },
    "src/core/intent_guard.py::IntentGuard": {
      "key": "src/core/intent_guard.py::IntentGuard",
      "name": "IntentGuard",
      "type": "ClassDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "intent_guarding",
      "intent": "Central enforcement engine for CORE's safety and governance policies.",
      "docstring": "Central enforcement engine for CORE's safety and governance policies.\nEnsures all proposed file changes comply with declared rules and classifications.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "append",
        "exists",
        "extend",
        "get",
        "glob",
        "info",
        "is_dir",
        "isinstance",
        "len",
        "list",
        "load_config",
        "loads",
        "read_text",
        "resolve",
        "sorted",
        "values"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.724547+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "3309152ca64bbda67c94f9a5af5a51607261c757cce7a1d4bed6225bf443bf69"
    },
    "src/core/intent_guard.py::__init__": {
      "key": "src/core/intent_guard.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Initialize IntentGuard with repository path and load all policies.",
      "docstring": "Initialize IntentGuard with repository path and load all policies.",
      "calls": [
        "Path",
        "_load_policies",
        "_load_source_manifest",
        "info",
        "len",
        "resolve"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "self",
        "repo_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.730183+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "1237769acc55b0d16734a3cc7c8a35a433527896ea598b163d555399fc1577fc"
    },
    "src/core/intent_guard.py::_load_policies": {
      "key": "src/core/intent_guard.py::_load_policies",
      "name": "_load_policies",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "docstring": "Load rules from all YAML files in the `.intent/policies/` directory.",
      "calls": [
        "extend",
        "glob",
        "is_dir",
        "isinstance",
        "load_config"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.731121+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "58ca81c87b60fa11ae873bbb67dd836b4bd82e1f065b14967d0a6b10c724ff1a"
    },
    "src/core/intent_guard.py::_load_source_manifest": {
      "key": "src/core/intent_guard.py::_load_source_manifest",
      "name": "_load_source_manifest",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Load the list of all known source files from the knowledge graph.",
      "docstring": "Load the list of all known source files from the knowledge graph.",
      "calls": [
        "exists",
        "get",
        "list",
        "loads",
        "read_text",
        "sorted",
        "values"
      ],
      "line_number": 53,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.732275+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "192c2a51474b035387b5dd1d0b9b0c1ea56903c550b8ec5f2ca40f40b69679cb"
    },
    "src/core/intent_guard.py::check_transaction": {
      "key": "src/core/intent_guard.py::check_transaction",
      "name": "check_transaction",
      "type": "FunctionDef",
      "file": "src/core/intent_guard.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "unassigned",
      "intent": "Check if a proposed set of file changes complies with all active rules.",
      "docstring": "Check if a proposed set of file changes complies with all active rules.\nThis is the primary enforcement point for constitutional integrity.",
      "calls": [
        "append",
        "resolve"
      ],
      "line_number": 73,
      "is_async": false,
      "parameters": [
        "self",
        "proposed_paths"
      ],
      "last_updated": "2025-08-17T19:00:36.733655+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "92924a1f132945e81b93a5ca688d1a218e3da14b4441bdea14f3888550cc533d"
    },
    "src/core/self_correction_engine.py::attempt_correction": {
      "key": "src/core/self_correction_engine.py::attempt_correction",
      "name": "attempt_correction",
      "type": "FunctionDef",
      "file": "src/core/self_correction_engine.py",
      "domain": "core",
      "agent": "core_agent",
      "capability": "self_correction",
      "intent": "Attempts to fix a failed validation or test result by generating corrected code via an LLM prompt based on the provided failure context.",
      "docstring": "Attempts to fix a failed validation or test result by generating corrected code via an LLM prompt based on the provided failure context.",
      "calls": [
        "GeneratorClient",
        "add_pending_write",
        "dumps",
        "get",
        "items",
        "list",
        "make_request",
        "parse_write_blocks",
        "process",
        "strip",
        "validate_code"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "failure_context"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.737152+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "62b6c78116a25ee0860c615c72e2ad1e04c559c73432641d14917b0dffba0b64"
    },
    "src/agents/plan_executor.py::PlanExecutionError": {
      "key": "src/agents/plan_executor.py::PlanExecutionError",
      "name": "PlanExecutionError",
      "type": "ClassDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Custom exception for failures during plan execution.",
      "docstring": "Custom exception for failures during plan execution.",
      "calls": [
        "__init__",
        "super"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.740701+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "3c61acd4cb84afb806dec357db8093d8aef20d4eb1c8c25ffc6463f6f880e4de"
    },
    "src/agents/plan_executor.py::__init__": {
      "key": "src/agents/plan_executor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the executor with necessary dependencies.",
      "docstring": "Initializes the executor with necessary dependencies.",
      "calls": [
        "CodeEditor",
        "SymbolLocator",
        "get_event_loop"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "self",
        "file_handler",
        "git_service",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.760452+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "0b30bc730c4ba6a3a1b8b392d6c763435afbc3a0bf2a124d3c408c05148d2456"
    },
    "src/agents/plan_executor.py::PlanExecutor": {
      "key": "src/agents/plan_executor.py::PlanExecutor",
      "name": "PlanExecutor",
      "type": "ClassDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "A service that takes a list of ExecutionTasks and executes them sequentially.",
      "docstring": "A service that takes a list of ExecutionTasks and executes them sequentially.",
      "calls": [
        "CodeEditor",
        "FileExistsError",
        "FileNotFoundError",
        "PlanExecutionError",
        "SymbolLocator",
        "_execute_task",
        "_execute_task_with_timeout",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "enumerate",
        "exists",
        "get_event_loop",
        "info",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "read_text",
        "replace_symbol_in_code",
        "splitlines",
        "validate_code",
        "wait_for",
        "warning"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.748994+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "17735db12ab7b0a74cdffea83961886204476d970edac95c771a3ad3a5274554"
    },
    "src/agents/plan_executor.py::execute_plan": {
      "key": "src/agents/plan_executor.py::execute_plan",
      "name": "execute_plan",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the entire plan, one task at a time.",
      "docstring": "Executes the entire plan, one task at a time.",
      "calls": [
        "_execute_task_with_timeout",
        "enumerate",
        "info",
        "len"
      ],
      "line_number": 44,
      "is_async": true,
      "parameters": [
        "self",
        "plan"
      ],
      "last_updated": "2025-08-17T19:00:36.761332+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8ab199f27dd1071d219d6c48bea8bd7a3d2fdf4eedef7cfc8b84368e2888ac41"
    },
    "src/agents/plan_executor.py::_execute_task_with_timeout": {
      "key": "src/agents/plan_executor.py::_execute_task_with_timeout",
      "name": "_execute_task_with_timeout",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Execute task with timeout protection.",
      "docstring": "Execute task with timeout protection.",
      "calls": [
        "PlanExecutionError",
        "_execute_task",
        "wait_for"
      ],
      "line_number": 50,
      "is_async": true,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-17T19:00:36.762182+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "2b19751daf33b16818e0df3ee50ab15cb04a6b011160ffe645b7763f6a2b17d1"
    },
    "src/agents/plan_executor.py::_execute_task": {
      "key": "src/agents/plan_executor.py::_execute_task",
      "name": "_execute_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Dispatcher that executes a single task from a plan based on its action type.",
      "docstring": "Dispatcher that executes a single task from a plan based on its action type.",
      "calls": [
        "warning"
      ],
      "line_number": 58,
      "is_async": true,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-17T19:00:36.763081+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "142e7b01a2be8c7c8b602cc730558908a88986ef92ded59e5898efb9d3f2d4ce"
    },
    "src/agents/plan_executor.py::_execute_add_tag": {
      "key": "src/agents/plan_executor.py::_execute_add_tag",
      "name": "_execute_add_tag",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the surgical 'add_capability_tag' action.",
      "docstring": "Executes the surgical 'add_capability_tag' action.",
      "calls": [
        "PlanExecutionError",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "insert",
        "is_git_repo",
        "join",
        "len",
        "lstrip",
        "read_text",
        "splitlines",
        "validate_code"
      ],
      "line_number": 70,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-17T19:00:36.765707+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "92d0f7ab18897042061d91682aa174be9b4838e02c9cd239fd3531296aac57a7"
    },
    "src/agents/plan_executor.py::_execute_create_file": {
      "key": "src/agents/plan_executor.py::_execute_create_file",
      "name": "_execute_create_file",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'create_file' action.",
      "docstring": "Executes the 'create_file' action.",
      "calls": [
        "FileExistsError",
        "PlanExecutionError",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "validate_code"
      ],
      "line_number": 117,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-17T19:00:36.767308+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "4bb5563cf1361275428d4d0b4fec8e2fb191b87359137ff4a4827a076b7515f6"
    },
    "src/agents/plan_executor.py::_execute_edit_function": {
      "key": "src/agents/plan_executor.py::_execute_edit_function",
      "name": "_execute_edit_function",
      "type": "AsyncFunctionDef",
      "file": "src/agents/plan_executor.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Executes the 'edit_function' action using the CodeEditor.",
      "docstring": "Executes the 'edit_function' action using the CodeEditor.",
      "calls": [
        "FileNotFoundError",
        "PlanExecutionError",
        "_executor",
        "add",
        "add_pending_write",
        "commit",
        "confirm_write",
        "exists",
        "is_git_repo",
        "replace_symbol_in_code",
        "validate_code"
      ],
      "line_number": 144,
      "is_async": true,
      "parameters": [
        "self",
        "params"
      ],
      "last_updated": "2025-08-17T19:00:36.769469+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "cd92f69e3aa453220e21b7be41d28f3af1dcd95af46dc15c7e67902679562f94"
    },
    "src/agents/utils.py::CodeEditor": {
      "key": "src/agents/utils.py::CodeEditor",
      "name": "CodeEditor",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Provides capabilities to surgically edit code files.",
      "docstring": "Provides capabilities to surgically edit code files.",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "hasattr",
        "isinstance",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip",
        "walk"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.774408+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "1e325dcf304aa0ce36a35ad3940b9f6a12c98bc07ba1b0b7b5833c6a60521568"
    },
    "src/agents/utils.py::_get_symbol_start_end_lines": {
      "key": "src/agents/utils.py::_get_symbol_start_end_lines",
      "name": "_get_symbol_start_end_lines",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the 1-based start and end line numbers of a symbol.",
      "docstring": "Finds the 1-based start and end line numbers of a symbol.",
      "calls": [
        "hasattr",
        "isinstance",
        "walk"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "self",
        "tree",
        "symbol_name"
      ],
      "last_updated": "2025-08-17T19:00:36.784629+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e1f209cb8a4ecc20429ae00376a97016fce78fac28e7722e1c75c53a474bc3d2"
    },
    "src/agents/utils.py::replace_symbol_in_code": {
      "key": "src/agents/utils.py::replace_symbol_in_code",
      "name": "replace_symbol_in_code",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Replaces a function/method in code with a new version using a line-based strategy.",
      "docstring": "Replaces a function/method in code with a new version using a line-based strategy.",
      "calls": [
        "ValueError",
        "_get_symbol_start_end_lines",
        "dedent",
        "join",
        "len",
        "lstrip",
        "parse",
        "splitlines",
        "strip"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self",
        "original_code",
        "symbol_name",
        "new_code_str"
      ],
      "last_updated": "2025-08-17T19:00:36.786471+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "cfb5faaf154f4f3a26a528a27d7d5bf3528f3fe6ae33480719e6c6d770fe0ee8"
    },
    "src/agents/utils.py::SymbolLocator": {
      "key": "src/agents/utils.py::SymbolLocator",
      "name": "SymbolLocator",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Dedicated class for finding symbols in code files.",
      "docstring": "Dedicated class for finding symbols in code files.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.778692+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "aa60ea7ae3b22f0acf89dcbc52608035efb94cdaf001b399ce61573f0275ff0b"
    },
    "src/agents/utils.py::find_symbol_line": {
      "key": "src/agents/utils.py::find_symbol_line",
      "name": "find_symbol_line",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds the line number of a function or class definition in a file.",
      "docstring": "Finds the line number of a function or class definition in a file.",
      "calls": [
        "FileNotFoundError",
        "RuntimeError",
        "exists",
        "isinstance",
        "parse",
        "read_text",
        "walk"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "file_path",
        "symbol_name"
      ],
      "last_updated": "2025-08-17T19:00:36.787815+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8ddfab18561b557e08e78df5c6ee99ff25b0c38d0088f3ed18ec16efbb047dd9"
    },
    "src/agents/utils.py::PlanExecutionContext": {
      "key": "src/agents/utils.py::PlanExecutionContext",
      "name": "PlanExecutionContext",
      "type": "ClassDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Context manager for safe plan execution with rollback.",
      "docstring": "Context manager for safe plan execution with rollback.",
      "calls": [
        "error",
        "get_current_commit",
        "is_git_repo",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 89,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.781505+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "213b39d472ca44a51dfa93ce0b7490709391d835c23d06710e87d1958bd23ef1"
    },
    "src/agents/utils.py::__init__": {
      "key": "src/agents/utils.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the context with a reference to the ExecutionAgent.",
      "docstring": "Initializes the context with a reference to the ExecutionAgent.",
      "calls": [],
      "line_number": 92,
      "is_async": false,
      "parameters": [
        "self",
        "execution_agent"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.788324+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "1f2d86f30080adf76889beeee8d4229c5e0684bf09739919b44a50b5eff665bb"
    },
    "src/agents/utils.py::__enter__": {
      "key": "src/agents/utils.py::__enter__",
      "name": "__enter__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Sets up the execution context, capturing the initial git commit hash.",
      "docstring": "Sets up the execution context, capturing the initial git commit hash.",
      "calls": [
        "get_current_commit",
        "is_git_repo",
        "warning"
      ],
      "line_number": 98,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.789093+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "c528d97d55a4908365965b4eca1f71a75f6ec4fd94e032f4baa8bb974eb0b20b"
    },
    "src/agents/utils.py::__exit__": {
      "key": "src/agents/utils.py::__exit__",
      "name": "__exit__",
      "type": "FunctionDef",
      "file": "src/agents/utils.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Cleans up and handles rollback on failure.",
      "docstring": "Cleans up and handles rollback on failure.",
      "calls": [
        "error",
        "reset_to_commit",
        "warning"
      ],
      "line_number": 108,
      "is_async": false,
      "parameters": [
        "self",
        "exc_type",
        "exc_val",
        "exc_tb"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.789940+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "1d2e9ae89957a860461b1b34b6c169fd68bbb991b1230a816c05c336c57a3205"
    },
    "src/agents/planner_agent.py::PlannerAgent": {
      "key": "src/agents/planner_agent.py::PlannerAgent",
      "name": "PlannerAgent",
      "type": "ClassDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Decomposes goals into plans but does not execute them.",
      "docstring": "Decomposes goals into plans but does not execute them.",
      "calls": [
        "ExecutionTask",
        "JSONDecoder",
        "PlanExecutionError",
        "PlannerConfig",
        "ValueError",
        "_extract_json_from_response",
        "_log_plan_summary",
        "_setup_logging_context",
        "_validate_task_params",
        "all",
        "dedent",
        "enumerate",
        "error",
        "find",
        "format",
        "getattr",
        "group",
        "info",
        "isinstance",
        "isoformat",
        "len",
        "loads",
        "make_request",
        "now",
        "process",
        "range",
        "raw_decode",
        "search",
        "set",
        "strftime",
        "strip",
        "warning"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.797549+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "438ca1d2144b2e8fe0a22f68ed40617570ad8dc2086beb19f2c4ed449ee9bc98"
    },
    "src/agents/planner_agent.py::__init__": {
      "key": "src/agents/planner_agent.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Initializes the PlannerAgent with its dependencies.",
      "docstring": "Initializes the PlannerAgent with its dependencies.",
      "calls": [
        "PlannerConfig"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "self",
        "orchestrator_client",
        "prompt_pipeline",
        "config"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.805418+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "f178ab747ef36e5bf1201cc4aafac640a70777b353028ccc2e9a4089e0902fcf"
    },
    "src/agents/planner_agent.py::_setup_logging_context": {
      "key": "src/agents/planner_agent.py::_setup_logging_context",
      "name": "_setup_logging_context",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Sets up a structured logging context for a planning cycle.",
      "docstring": "Sets up a structured logging context for a planning cycle.",
      "calls": [
        "isoformat",
        "now",
        "set"
      ],
      "line_number": 38,
      "is_async": false,
      "parameters": [
        "self",
        "goal",
        "plan_id"
      ],
      "last_updated": "2025-08-17T19:00:36.806040+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "59a96cbfb2dca8f5653d7a9a4255ea9f20aae428732c8e7605bda8e6fb129170"
    },
    "src/agents/planner_agent.py::_extract_json_from_response": {
      "key": "src/agents/planner_agent.py::_extract_json_from_response",
      "name": "_extract_json_from_response",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Extracts a JSON object or array from a raw text response, handling markdown blocks.",
      "docstring": "Extracts a JSON object or array from a raw text response, handling markdown blocks.",
      "calls": [
        "JSONDecoder",
        "error",
        "find",
        "group",
        "loads",
        "raw_decode",
        "search",
        "warning"
      ],
      "line_number": 48,
      "is_async": false,
      "parameters": [
        "self",
        "text"
      ],
      "last_updated": "2025-08-17T19:00:36.807477+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "df6ba42dbade92e0423aa963b29741c7a7ca23bacd32fc9f8ea9b06713b5fa02"
    },
    "src/agents/planner_agent.py::_log_plan_summary": {
      "key": "src/agents/planner_agent.py::_log_plan_summary",
      "name": "_log_plan_summary",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Logs a human-readable summary of the generated execution plan.",
      "docstring": "Logs a human-readable summary of the generated execution plan.",
      "calls": [
        "enumerate",
        "info",
        "len"
      ],
      "line_number": 74,
      "is_async": false,
      "parameters": [
        "self",
        "plan"
      ],
      "last_updated": "2025-08-17T19:00:36.808472+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8dc5acc38cbf9becc59b88c68b3d4ae8eb6e605e3cdde45f0f4eb329070f3000"
    },
    "src/agents/planner_agent.py::_validate_task_params": {
      "key": "src/agents/planner_agent.py::_validate_task_params",
      "name": "_validate_task_params",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "unassigned",
      "intent": "Validates that a task has all required parameters for its specified action.",
      "docstring": "Validates that a task has all required parameters for its specified action.",
      "calls": [
        "PlanExecutionError",
        "all",
        "getattr"
      ],
      "line_number": 80,
      "is_async": false,
      "parameters": [
        "self",
        "task"
      ],
      "last_updated": "2025-08-17T19:00:36.809684+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "42ef310195a95119c6987788500180309637c4d4989bac83da214f72aa637488"
    },
    "src/agents/planner_agent.py::create_execution_plan": {
      "key": "src/agents/planner_agent.py::create_execution_plan",
      "name": "create_execution_plan",
      "type": "FunctionDef",
      "file": "src/agents/planner_agent.py",
      "domain": "agents",
      "agent": "planner_agent",
      "capability": "llm_orchestration",
      "intent": "Decomposes a high-level goal into a structured, code-free execution plan using an LLM.",
      "docstring": "Decomposes a high-level goal into a structured, code-free execution plan using an LLM.",
      "calls": [
        "ExecutionTask",
        "PlanExecutionError",
        "ValueError",
        "_extract_json_from_response",
        "_log_plan_summary",
        "_setup_logging_context",
        "_validate_task_params",
        "dedent",
        "format",
        "info",
        "isinstance",
        "make_request",
        "now",
        "process",
        "range",
        "strftime",
        "strip",
        "warning"
      ],
      "line_number": 96,
      "is_async": false,
      "parameters": [
        "self",
        "high_level_goal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.811766+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "324e353e24435ecfe89dd8c3f0e2764228551ab278f247d4349304dcb8159fc3"
    },
    "src/agents/execution_agent.py::ExecutionAgent": {
      "key": "src/agents/execution_agent.py::ExecutionAgent",
      "name": "ExecutionAgent",
      "type": "ClassDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Orchestrates the execution of a plan, including code generation and validation.",
      "docstring": "Orchestrates the execution of a plan, including code generation and validation.",
      "calls": [
        "PlanExecutionContext",
        "_generate_code_for_task",
        "dedent",
        "error",
        "execute_plan",
        "format",
        "get",
        "info",
        "make_request",
        "process",
        "str",
        "strip"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.817041+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "fb3eab1025ec12c2ffbb39faf0701b166484f43e2f998ed265e11237705fbf96"
    },
    "src/agents/execution_agent.py::__init__": {
      "key": "src/agents/execution_agent.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the ExecutionAgent with its required tools.",
      "docstring": "Initializes the ExecutionAgent with its required tools.",
      "calls": [],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "self",
        "generator_client",
        "prompt_pipeline",
        "plan_executor"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.821793+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "0aefa8dbdccef87c728ed35972726bcbad83f38f93444e0e7af22e26bff52660"
    },
    "src/agents/execution_agent.py::_generate_code_for_task": {
      "key": "src/agents/execution_agent.py::_generate_code_for_task",
      "name": "_generate_code_for_task",
      "type": "AsyncFunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "code_generation",
      "intent": "Generates the code content for a single task using a generator LLM.",
      "docstring": "Generates the code content for a single task using a generator LLM.",
      "calls": [
        "dedent",
        "format",
        "info",
        "make_request",
        "process",
        "strip"
      ],
      "line_number": 35,
      "is_async": true,
      "parameters": [
        "self",
        "task",
        "goal"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.822985+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "7d1006c46f46bc6b68dd6111e3de42debe47e7c6aeac6c21bf2a1cc18cdbd219"
    },
    "src/agents/execution_agent.py::execute_plan": {
      "key": "src/agents/execution_agent.py::execute_plan",
      "name": "execute_plan",
      "type": "AsyncFunctionDef",
      "file": "src/agents/execution_agent.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Takes a plan, generates code for each step, and then executes the",
      "docstring": "Takes a plan, generates code for each step, and then executes the\nfully-populated plan.",
      "calls": [
        "PlanExecutionContext",
        "_generate_code_for_task",
        "error",
        "execute_plan",
        "get",
        "info",
        "str"
      ],
      "line_number": 63,
      "is_async": true,
      "parameters": [
        "self",
        "high_level_goal",
        "plan"
      ],
      "last_updated": "2025-08-17T19:00:36.825296+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7132bb041816821e22af4abcb7d00a531000ad3d8feadd17c7cabb4c2a07dcb6"
    },
    "src/agents/models.py::TaskStatus": {
      "key": "src/agents/models.py::TaskStatus",
      "name": "TaskStatus",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Enumeration of possible states for an ExecutionTask.",
      "docstring": "Enumeration of possible states for an ExecutionTask.",
      "calls": [],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-17T19:00:36.826791+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition",
      "structural_hash": "d8ad3bccb3971670ad07d88d486e0340daa4f998de5ee01d303682e6a57c29be"
    },
    "src/agents/models.py::ExecutionProgress": {
      "key": "src/agents/models.py::ExecutionProgress",
      "name": "ExecutionProgress",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents the progress of a plan's execution.",
      "docstring": "Represents the progress of a plan's execution.",
      "calls": [],
      "line_number": 23,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-17T19:00:36.827676+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "a44fc776b69d95d57f15bdc224984da00807cb6bdfe0849ad23d40964fc6d9a8"
    },
    "src/agents/models.py::completion_percentage": {
      "key": "src/agents/models.py::completion_percentage",
      "name": "completion_percentage",
      "type": "FunctionDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates the completion percentage of the plan as a float,",
      "docstring": "Calculates the completion percentage of the plan as a float,\nreturning 0 if there are no tasks.",
      "calls": [],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.830752+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "d101ab8c655802b187262c9f5903e00ac183fdeb8301e2ae136d4f279d4b027a"
    },
    "src/agents/models.py::PlannerConfig": {
      "key": "src/agents/models.py::PlannerConfig",
      "name": "PlannerConfig",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Configuration settings for the PlannerAgent's behavior.",
      "docstring": "Configuration settings for the PlannerAgent's behavior.",
      "calls": [],
      "line_number": 46,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-17T19:00:36.828895+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "1b2dddc2040c6b9e91ef612bf7c9b521900fc8b84be4017844e987d806fad45e"
    },
    "src/agents/models.py::TaskParams": {
      "key": "src/agents/models.py::TaskParams",
      "name": "TaskParams",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for the parameters of a single task in an execution plan.",
      "docstring": "Data model for the parameters of a single task in an execution plan.",
      "calls": [],
      "line_number": 57,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-17T19:00:36.829506+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "1c8868970c18e1b5772d7685996e7441deb79454a884f2769ac55a9f19f35f98"
    },
    "src/agents/models.py::ExecutionTask": {
      "key": "src/agents/models.py::ExecutionTask",
      "name": "ExecutionTask",
      "type": "ClassDef",
      "file": "src/agents/models.py",
      "domain": "agents",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Data model for a single, executable step in a plan.",
      "docstring": "Data model for a single, executable step in a plan.",
      "calls": [],
      "line_number": 66,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-17T19:00:36.830070+00:00",
      "is_class": true,
      "base_classes": [
        "BaseModel"
      ],
      "entry_point_justification": "pydantic_model",
      "structural_hash": "b0c8bd81c4be39c825ade5c681d80f88680c30b65c0dd7b7a03271ac2788b825"
    },
    "src/shared/path_utils.py::get_repo_root": {
      "key": "src/shared/path_utils.py::get_repo_root",
      "name": "get_repo_root",
      "type": "FunctionDef",
      "file": "src/shared/path_utils.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "docstring": "Find and return the repository root by locating the .git directory, starting from the current directory or provided path.",
      "calls": [
        "Path",
        "RuntimeError",
        "cwd",
        "exists",
        "resolve"
      ],
      "line_number": 7,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "last_updated": "2025-08-17T19:00:36.832145+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "edc71d0c31594afdd9eea55c11cfb962e028462f15c08972f1a1d9cf1796ed79"
    },
    "src/shared/config_loader.py::load_config": {
      "key": "src/shared/config_loader.py::load_config",
      "name": "load_config",
      "type": "FunctionDef",
      "file": "src/shared/config_loader.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Loads a JSON or YAML file into a dictionary, handling missing files, invalid formats, and parsing errors by returning an empty dict.",
      "docstring": "Loads a JSON or YAML file into a dictionary, handling missing files, invalid formats, and parsing errors by returning an empty dict.",
      "calls": [
        "Path",
        "error",
        "exists",
        "isinstance",
        "load",
        "lower",
        "open",
        "safe_load",
        "warning"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "file_path",
        "file_type"
      ],
      "last_updated": "2025-08-17T19:00:36.834990+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7124b13af5cffa8a06961f6fb04e4cad8794f6e029db463269b09ae500e68353"
    },
    "src/shared/config.py::Settings": {
      "key": "src/shared/config.py::Settings",
      "name": "Settings",
      "type": "ClassDef",
      "file": "src/shared/config.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "A Pydantic settings model that loads configuration from the environment.",
      "docstring": "A Pydantic settings model that loads configuration from the environment.\nIt provides a typed, validated access to all system settings.",
      "calls": [
        "Path",
        "home"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.836845+00:00",
      "is_class": true,
      "base_classes": [
        "BaseSettings"
      ],
      "structural_hash": "2f0c80a64350d663391a5314873646e5f9254f1db868c89c80f978ec6dcad06a"
    },
    "src/shared/config.py::Config": {
      "key": "src/shared/config.py::Config",
      "name": "Config",
      "type": "ClassDef",
      "file": "src/shared/config.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Defines Pydantic's behavior for the Settings model.",
      "docstring": "Defines Pydantic's behavior for the Settings model.",
      "calls": [],
      "line_number": 46,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.837308+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "4edb43f88e586a01a9525a5743a19d0589ccef2f5d257ae1e9a4bf75af91e8ba"
    },
    "src/shared/logger.py::getLogger": {
      "key": "src/shared/logger.py::getLogger",
      "name": "getLogger",
      "type": "FunctionDef",
      "file": "src/shared/logger.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "system_logging",
      "intent": "Returns a pre-configured logger instance with the given name.",
      "docstring": "Returns a pre-configured logger instance with the given name.",
      "calls": [
        "getLogger"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "name"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.838447+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "5c6f3d9067a28ed8b1274e2bc25fac32142f9ebce99fa57aea4a8ce44bf2edd9"
    },
    "src/system/guard/capability_discovery.py::collect_code_capabilities": {
      "key": "src/system/guard/capability_discovery.py::collect_code_capabilities",
      "name": "collect_code_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/capability_discovery.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Unified discovery entrypoint that tries the live KnowledgeGraphBuilder first,",
      "docstring": "Unified discovery entrypoint that tries the live KnowledgeGraphBuilder first,\nthen falls back to a direct source scan.",
      "calls": [
        "RuntimeError",
        "collect_from_kgb",
        "collect_from_source_scan"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs",
        "require_kgb"
      ],
      "last_updated": "2025-08-17T19:00:36.840059+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e48f7c87ea6b26ad0a7235a1de21d5d681fb9d602b84bc197e8e488ee74f9d56"
    },
    "src/system/guard/capability_discovery.py::load_manifest_capabilities": {
      "key": "src/system/guard/capability_discovery.py::load_manifest_capabilities",
      "name": "load_manifest_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/capability_discovery.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "docstring": "Loads, parses, and normalizes capabilities from the project's manifest.",
      "calls": [
        "load_manifest_capabilities"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [
        "root",
        "explicit_path"
      ],
      "last_updated": "2025-08-17T19:00:36.840693+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7424757e7242faf2787f618be65139b5771145e1148c99ca1bd7844759895507"
    },
    "src/system/guard/drift_detector.py::detect_capability_drift": {
      "key": "src/system/guard/drift_detector.py::detect_capability_drift",
      "name": "detect_capability_drift",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Computes missing, undeclared, and mismatched capabilities between manifest and code.",
      "docstring": "Computes missing, undeclared, and mismatched capabilities between manifest and code.",
      "calls": [
        "DriftReport",
        "append",
        "keys",
        "list",
        "set",
        "sorted"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "manifest_caps",
        "code_caps"
      ],
      "last_updated": "2025-08-17T19:00:36.843083+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "a8ad3d7d1c170a012cf984cfff280dd0e10ecd70d76fc464325010157af1fc06"
    },
    "src/system/guard/drift_detector.py::write_report": {
      "key": "src/system/guard/drift_detector.py::write_report",
      "name": "write_report",
      "type": "FunctionDef",
      "file": "src/system/guard/drift_detector.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Persists the drift report to disk for evidence and CI.",
      "docstring": "Persists the drift report to disk for evidence and CI.",
      "calls": [
        "dumps",
        "mkdir",
        "to_dict",
        "write_text"
      ],
      "line_number": 43,
      "is_async": false,
      "parameters": [
        "report_path",
        "report"
      ],
      "last_updated": "2025-08-17T19:00:36.843873+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f470e15b680e9bda6d15592a0bcb69254df8aef37a8400043fda5abc2a84ec49"
    },
    "src/system/guard/models.py::CapabilityMeta": {
      "key": "src/system/guard/models.py::CapabilityMeta",
      "name": "CapabilityMeta",
      "type": "ClassDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "A minimal, shared data container for capability metadata.",
      "docstring": "A minimal, shared data container for capability metadata.",
      "calls": [
        "dataclass"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-17T19:00:36.845117+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "16c4f81415492ed8331c9a206c1f55a0e7ac37b46f777a803d4ae45901b86124"
    },
    "src/system/guard/models.py::DriftReport": {
      "key": "src/system/guard/models.py::DriftReport",
      "name": "DriftReport",
      "type": "ClassDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Structured result for capability drift suitable for JSON emission and CI gating.",
      "docstring": "Structured result for capability drift suitable for JSON emission and CI gating.",
      "calls": [
        "sorted"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-17T19:00:36.846042+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "7921fd074f563aace637ec680097dd26facb5aa61c3fd8ca7ce69782c1a818a8"
    },
    "src/system/guard/models.py::to_dict": {
      "key": "src/system/guard/models.py::to_dict",
      "name": "to_dict",
      "type": "FunctionDef",
      "file": "src/system/guard/models.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Converts the drift report into a stable JSON-serializable dict.",
      "docstring": "Converts the drift report into a stable JSON-serializable dict.",
      "calls": [
        "sorted"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.847296+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "485033d9fffb5828ea2f692bf9505bb59c7f33d9d7cec1bd11506141277667e2"
    },
    "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor": {
      "key": "src/system/governance/constitutional_auditor.py::ConstitutionalAuditor",
      "name": "ConstitutionalAuditor",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "alignment_checking",
      "intent": "Orchestrates the discovery and execution of constitutional checks.",
      "docstring": "Orchestrates the discovery and execution of constitutional checks.",
      "calls": [
        "AuditFinding",
        "AuditorContext",
        "Console",
        "IntentModel",
        "Panel",
        "Path",
        "_LoggingBridge",
        "_discover_checks",
        "_report_final_status",
        "aggregate_manifests",
        "any",
        "append",
        "check_fn",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "exists",
        "extend",
        "get",
        "get_repo_root",
        "getmembers",
        "glob",
        "import_module",
        "info",
        "len",
        "list",
        "load_config",
        "load_dotenv",
        "print",
        "sort",
        "split",
        "startswith",
        "strip",
        "sum",
        "values",
        "warning"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.858187+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "276d65072a44d39e837b067caadf20adae2e3751ceb8a2a638a93832a2afbee3"
    },
    "src/system/governance/constitutional_auditor.py::__init__": {
      "key": "src/system/governance/constitutional_auditor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Initialize context with repository paths and configurations.",
      "docstring": "Initialize context with repository paths and configurations.",
      "calls": [
        "IntentModel",
        "aggregate_manifests",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "line_number": 66,
      "is_async": false,
      "parameters": [
        "self",
        "repo_root"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.880272+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "b453ef345b77a84fe4ada63f4ab873aef53f6f582679ed75aa18acc8a11871d4"
    },
    "src/system/governance/constitutional_auditor.py::_discover_checks": {
      "key": "src/system/governance/constitutional_auditor.py::_discover_checks",
      "name": "_discover_checks",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Discover check methods from modules in the 'checks' directory.",
      "docstring": "Discover check methods from modules in the 'checks' directory.",
      "calls": [
        "Path",
        "append",
        "class_obj",
        "debug",
        "endswith",
        "error",
        "get",
        "getmembers",
        "glob",
        "import_module",
        "len",
        "sort",
        "split",
        "startswith",
        "warning"
      ],
      "line_number": 80,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.874946+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e0c78bae4bd9ebac3e0af66fb766ac489691f007c6a9ca33313b5c69189f6fab"
    },
    "src/system/governance/constitutional_auditor.py::run_full_audit": {
      "key": "src/system/governance/constitutional_auditor.py::run_full_audit",
      "name": "run_full_audit",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Run all discovered validation checks and return overall status.",
      "docstring": "Run all discovered validation checks and return overall status.",
      "calls": [
        "AuditFinding",
        "Panel",
        "_report_final_status",
        "any",
        "append",
        "check_fn",
        "error",
        "extend",
        "info",
        "print",
        "split",
        "warning"
      ],
      "line_number": 124,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.877121+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0e5a342921730b79160f6b87b9173dfa7dbf260c69799dd33923b277d38d661f"
    },
    "src/system/governance/constitutional_auditor.py::_report_final_status": {
      "key": "src/system/governance/constitutional_auditor.py::_report_final_status",
      "name": "_report_final_status",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Print final audit summary to the console.",
      "docstring": "Print final audit summary to the console.",
      "calls": [
        "Panel",
        "print",
        "sum"
      ],
      "line_number": 165,
      "is_async": false,
      "parameters": [
        "self",
        "passed"
      ],
      "last_updated": "2025-08-17T19:00:36.878548+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "24f3456c07f2542af03ec4f96aab424a76aa133c1bfbab1b7b85fdcae32cd7ea"
    },
    "src/system/governance/constitutional_auditor.py::main": {
      "key": "src/system/governance/constitutional_auditor.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "CLI entry point for the Constitutional Auditor.",
      "docstring": "CLI entry point for the Constitutional Auditor.",
      "calls": [
        "ConstitutionalAuditor",
        "error",
        "exit",
        "load_dotenv",
        "run_full_audit"
      ],
      "line_number": 180,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-17T19:00:36.867165+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f6fdbaa6bfe1e6124c035255bac2283c42602332b190a0302133de3a8620c2b6"
    },
    "src/system/governance/constitutional_auditor.py::_LoggingBridge": {
      "key": "src/system/governance/constitutional_auditor.py::_LoggingBridge",
      "name": "_LoggingBridge",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Redirects console output to the logger.",
      "docstring": "Redirects console output to the logger.",
      "calls": [
        "info",
        "strip"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.867874+00:00",
      "is_class": true,
      "base_classes": [
        "StringIO"
      ],
      "structural_hash": "accbf7162a4d8000d9e089db10a6b222a78133e2eb9926efcb837c89fe869927"
    },
    "src/system/governance/constitutional_auditor.py::write": {
      "key": "src/system/governance/constitutional_auditor.py::write",
      "name": "write",
      "type": "FunctionDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Redirects writes to the logger info stream.",
      "docstring": "Redirects writes to the logger info stream.",
      "calls": [
        "info",
        "strip"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "self",
        "s"
      ],
      "last_updated": "2025-08-17T19:00:36.879161+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "32a110e0afaf2a1e54639b543cfc4509a1c00712e7244004cba4900925c2f79c"
    },
    "src/system/governance/constitutional_auditor.py::AuditorContext": {
      "key": "src/system/governance/constitutional_auditor.py::AuditorContext",
      "name": "AuditorContext",
      "type": "ClassDef",
      "file": "src/system/governance/constitutional_auditor.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Shared state container for audit checks.",
      "docstring": "Shared state container for audit checks.",
      "calls": [
        "IntentModel",
        "aggregate_manifests",
        "get",
        "list",
        "load_config",
        "values"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.871073+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "cdfb4eb71dd5acccbbd35233cc44232c7cc839cda3cd11df6058ea4dba5b1dd2"
    },
    "src/system/governance/models.py::AuditSeverity": {
      "key": "src/system/governance/models.py::AuditSeverity",
      "name": "AuditSeverity",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Severity levels for audit findings.",
      "docstring": "Severity levels for audit findings.",
      "calls": [],
      "line_number": 10,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "enum",
      "last_updated": "2025-08-17T19:00:36.882121+00:00",
      "is_class": true,
      "base_classes": [
        "Enum"
      ],
      "entry_point_justification": "enum_definition",
      "structural_hash": "28f79c27c1ebb4978fd62cdbbe31ddb7e431f470ef3a59a801b0f7b146fdab17"
    },
    "src/system/governance/models.py::AuditFinding": {
      "key": "src/system/governance/models.py::AuditFinding",
      "name": "AuditFinding",
      "type": "ClassDef",
      "file": "src/system/governance/models.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Represents a single audit finding.",
      "docstring": "Represents a single audit finding.",
      "calls": [],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-17T19:00:36.882688+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "a77333291b4a5559fadebab11ad48cd08bc5847c3142d31af4b41d0a2b4ef394"
    },
    "src/system/admin/new.py::register": {
      "key": "src/system/admin/new.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/new.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register the 'new' command with the main CLI app.",
      "docstring": "Register the 'new' command with the main CLI app.",
      "calls": [
        "command"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.883479+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "358ca9667b776207e550b217e6f9933316ae2f21c94becefe3425c018fd562b8"
    },
    "src/system/admin/fixer.py::register": {
      "key": "src/system/admin/fixer.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/fixer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register fixer commands under the admin CLI.",
      "docstring": "Intent: Register fixer commands under the admin CLI.",
      "calls": [
        "Typer",
        "add_typer",
        "command"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.884426+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "d0ae582702a2b2c6909b50733bb0512725c7da502b0c14afe4d908c46d4e2ef4"
    },
    "src/system/admin/agent.py::_extract_json_from_response": {
      "key": "src/system/admin/agent.py::_extract_json_from_response",
      "name": "_extract_json_from_response",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Helper to extract JSON from LLM responses for scaffolding.",
      "docstring": "Helper to extract JSON from LLM responses for scaffolding.",
      "calls": [
        "group",
        "loads",
        "search"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "text"
      ],
      "last_updated": "2025-08-17T19:00:36.886912+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "10f0c5d7a50aa56e299e0a3866b80236d02458d27d59d3ed38f71d42e00ec4d5"
    },
    "src/system/admin/agent.py::scaffold_new_application": {
      "key": "src/system/admin/agent.py::scaffold_new_application",
      "name": "scaffold_new_application",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "scaffold_project",
      "intent": "Uses an LLM to plan and generate a new, multi-file application.",
      "docstring": "Uses an LLM to plan and generate a new, multi-file application.",
      "calls": [
        "GitService",
        "Scaffolder",
        "ValueError",
        "_extract_json_from_response",
        "add",
        "commit",
        "dedent",
        "error",
        "exists",
        "format",
        "info",
        "isinstance",
        "items",
        "len",
        "make_request",
        "read_text",
        "relative_to",
        "run",
        "scaffold_base_structure",
        "str",
        "strip",
        "write_file"
      ],
      "line_number": 35,
      "is_async": false,
      "parameters": [
        "project_name",
        "goal",
        "orchestrator",
        "file_handler",
        "initialize_git"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:36.890049+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "c68b819d4debb70542f53704a6463df6036131ec1985c4ae95670e3eba7d06c9"
    },
    "src/system/admin/agent.py::agent_scaffold": {
      "key": "src/system/admin/agent.py::agent_scaffold",
      "name": "agent_scaffold",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Uses an LLM agent to autonomously scaffold a new application.",
      "docstring": "Uses an LLM agent to autonomously scaffold a new application.",
      "calls": [
        "Argument",
        "Exit",
        "FileHandler",
        "Option",
        "OrchestratorClient",
        "command",
        "error",
        "info",
        "scaffold_new_application",
        "secho",
        "str"
      ],
      "line_number": 119,
      "is_async": false,
      "parameters": [
        "name",
        "goal",
        "git_init"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.891985+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "bd0266c9c7195750be517e021607f789b66b7cd01a370b2fe6b848c428f55728"
    },
    "src/system/admin/agent.py::register": {
      "key": "src/system/admin/agent.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/agent.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register the 'agent' command group with the main CLI app.",
      "docstring": "Register the 'agent' command group with the main CLI app.",
      "calls": [
        "add_typer"
      ],
      "line_number": 151,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.892545+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "07d267b258290654459382e668c672b5d5f218f486a0a69db1a829079247f439"
    },
    "src/system/admin/migrator.py::register": {
      "key": "src/system/admin/migrator.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/migrator.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register migration commands (manifest-migrator) under the admin CLI.",
      "docstring": "Register migration commands (manifest-migrator) under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.894034+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "b5aa9163afdf378f45afb8a26ceecb71fe3dc7e8949a7907aee98b0c2eb40a7f"
    },
    "src/system/admin/utils.py::should_fail": {
      "key": "src/system/admin/utils.py::should_fail",
      "name": "should_fail",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "docstring": "Determines if the CLI should exit with an error code based on the drift report and the specified fail condition (missing, undeclared, or any drift).",
      "calls": [
        "bool",
        "get"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "report",
        "fail_on"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.896188+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "4d0fc9b76df312e54be34f47cf05c8fc7f3704ee9a5081f9305e5c1b95aa9365"
    },
    "src/system/admin/utils.py::load_yaml_file": {
      "key": "src/system/admin/utils.py::load_yaml_file",
      "name": "load_yaml_file",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "docstring": "Intent: Load YAML for governance operations. Returns {} for empty documents.",
      "calls": [
        "read_text",
        "safe_load"
      ],
      "line_number": 37,
      "is_async": false,
      "parameters": [
        "path"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.896863+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "2ce3e9f321eb08e41cb6220dcbcc1598d37029ebcf200d493aba3bdd7c765ba5"
    },
    "src/system/admin/utils.py::save_yaml_file": {
      "key": "src/system/admin/utils.py::save_yaml_file",
      "name": "save_yaml_file",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Persist YAML with stable ordering disabled to preserve human readability.",
      "docstring": "Intent: Persist YAML with stable ordering disabled to preserve human readability.",
      "calls": [
        "safe_dump",
        "write_text"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "path",
        "data"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.897626+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "ccaf07602c00f1121e12286d587578113fff47ffa979777f3f56fc72b7b50d43"
    },
    "src/system/admin/utils.py::generate_approval_token": {
      "key": "src/system/admin/utils.py::generate_approval_token",
      "name": "generate_approval_token",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Produce a deterministic token for approvals bound to the *full proposal intent*,",
      "docstring": "Intent: Produce a deterministic token for approvals bound to the *full proposal intent*,\nnot just raw content. This prevents replay against a different target.",
      "calls": [
        "Hash",
        "SHA256",
        "dumps",
        "encode",
        "finalize",
        "get",
        "hex",
        "update"
      ],
      "line_number": 47,
      "is_async": false,
      "parameters": [
        "proposal"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.898723+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "4b1270fce4c6fc0e4ecb637d6a67950144796164a95f9a8e9b8bc39a9a10e4fa"
    },
    "src/system/admin/utils.py::load_private_key": {
      "key": "src/system/admin/utils.py::load_private_key",
      "name": "load_private_key",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "docstring": "Intent: Load the operator's Ed25519 private key from the protected key store.",
      "calls": [
        "SystemExit",
        "error",
        "exists",
        "load_pem_private_key",
        "read_bytes"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.899527+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "79de185a59c6d906ef87f05fdd2fdee38825b2c4d620dfe5c78e8344704e612c"
    },
    "src/system/admin/utils.py::archive_rollback_plan": {
      "key": "src/system/admin/utils.py::archive_rollback_plan",
      "name": "archive_rollback_plan",
      "type": "FunctionDef",
      "file": "src/system/admin/utils.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Persist a rollback plan snapshot for approved proposals under .intent/constitution/rollbacks/.",
      "docstring": "Intent: Persist a rollback plan snapshot for approved proposals under .intent/constitution/rollbacks/.",
      "calls": [
        "dumps",
        "get",
        "info",
        "mkdir",
        "strftime",
        "utcnow",
        "write_text"
      ],
      "line_number": 74,
      "is_async": false,
      "parameters": [
        "proposal_name",
        "proposal"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.900959+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "3fee477cc6e1a83e51d223a8844378614d3e379c846ae8b2b008ac59063dd680"
    },
    "src/system/admin/reviewer.py::_is_ignored": {
      "key": "src/system/admin/reviewer.py::_is_ignored",
      "name": "_is_ignored",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Checks if a given file path should be ignored based on IGNORE_PATTERNS.",
      "docstring": "Checks if a given file path should be ignored based on IGNORE_PATTERNS.",
      "calls": [
        "any"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "path_str"
      ],
      "last_updated": "2025-08-17T19:00:36.903868+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b0dcdbc5bcd3fad88dd29308c2d078febb3f76f3ca1abda9f84b84759ba7568d"
    },
    "src/system/admin/reviewer.py::_get_bundle_content": {
      "key": "src/system/admin/reviewer.py::_get_bundle_content",
      "name": "_get_bundle_content",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Gathers and bundles the content of all constitutional files.",
      "docstring": "Gathers and bundles the content of all constitutional files.",
      "calls": [
        "Exit",
        "_is_ignored",
        "append",
        "error",
        "exists",
        "extend",
        "find_paths_in_meta",
        "info",
        "is_file",
        "isinstance",
        "join",
        "len",
        "list",
        "read_text",
        "safe_load",
        "set",
        "sorted",
        "values"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.906481+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "47a9e252ee6d00c1d63bb7b8ea1322c3335c77c9b3e9c9ddc0f381c0210bfecd"
    },
    "src/system/admin/reviewer.py::export_constitution": {
      "key": "src/system/admin/reviewer.py::export_constitution",
      "name": "export_constitution",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Packages the full .intent/ directory into a single bundle for external analysis.",
      "docstring": "Packages the full .intent/ directory into a single bundle for external analysis.\nThis command reads the meta.yaml file to discover all constitutional files\nand concatenates them into a single, LLM-friendly text file.",
      "calls": [
        "Option",
        "Path",
        "_get_bundle_content",
        "info",
        "mkdir",
        "write_text"
      ],
      "line_number": 78,
      "is_async": false,
      "parameters": [
        "output"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.907485+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "686b1c150edec5ed4602dd73ddb2fec5bc73ac70ac18d987f29b95650830b3a1"
    },
    "src/system/admin/reviewer.py::peer_review": {
      "key": "src/system/admin/reviewer.py::peer_review",
      "name": "peer_review",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Orchestrates sending the constitutional bundle to an external LLM for critique.",
      "docstring": "Orchestrates sending the constitutional bundle to an external LLM for critique.",
      "calls": [
        "Exit",
        "Option",
        "OrchestratorClient",
        "Panel",
        "Path",
        "_get_bundle_content",
        "echo",
        "error",
        "exists",
        "info",
        "make_request",
        "mkdir",
        "read_text",
        "rprint",
        "secho",
        "write_text"
      ],
      "line_number": 98,
      "is_async": false,
      "parameters": [
        "output",
        "dry_run"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.909709+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "e445adc3c84f9b1e3365bd52d7ed43fa24cc1d62fcdb5218b0581ea2eb86bb8a"
    },
    "src/system/admin/reviewer.py::register": {
      "key": "src/system/admin/reviewer.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Registers the 'review' command group and its subcommands.",
      "docstring": "Registers the 'review' command group and its subcommands.",
      "calls": [
        "Typer",
        "add_typer",
        "command"
      ],
      "line_number": 167,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.910481+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "50564ec3cb9525beb4d7a7142754651f6778e34d74f9c147b4d99fb3d7f73464"
    },
    "src/system/admin/reviewer.py::find_paths_in_meta": {
      "key": "src/system/admin/reviewer.py::find_paths_in_meta",
      "name": "find_paths_in_meta",
      "type": "FunctionDef",
      "file": "src/system/admin/reviewer.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Recursively extracts all strings containing '/' from nested dictionaries, lists, or strings in `data`.",
      "docstring": "Recursively extracts all strings containing '/' from nested dictionaries, lists, or strings in `data`.",
      "calls": [
        "append",
        "extend",
        "find_paths_in_meta",
        "isinstance",
        "values"
      ],
      "line_number": 44,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.911535+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "255da73b20e290e0b58012f6bfab50667316e3e22fa34c15e51acf93d0752e60"
    },
    "src/system/admin/byor.py::initialize_repository": {
      "key": "src/system/admin/byor.py::initialize_repository",
      "name": "initialize_repository",
      "type": "FunctionDef",
      "file": "src/system/admin/byor.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "docstring": "Analyzes an external repository and scaffolds a minimal `.intent/` constitution.",
      "calls": [
        "Argument",
        "Exit",
        "KnowledgeGraphBuilder",
        "Option",
        "build",
        "dump",
        "echo",
        "error",
        "get",
        "info",
        "isinstance",
        "items",
        "len",
        "list",
        "mkdir",
        "read_text",
        "secho",
        "set",
        "sorted",
        "values",
        "write_text"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "path",
        "dry_run"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.917880+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "685e77beb1854c44e1d3adc89f529387ef92de25b3e864bb2a747777752208e6"
    },
    "src/system/admin/byor.py::register": {
      "key": "src/system/admin/byor.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/byor.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "docstring": "Register BYOR commands (e.g., `byor-init`) under the admin CLI.",
      "calls": [
        "command"
      ],
      "line_number": 146,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.918482+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "9b62691ef90f3390c625b2239aa9e80250dc156e4deba0ed1740245705a1dbf6"
    },
    "src/system/admin/proposals.py::proposals_list": {
      "key": "src/system/admin/proposals.py::proposals_list",
      "name": "proposals_list",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "List pending constitutional proposals and display their justification, target path, and signature/quorum status.",
      "docstring": "List pending constitutional proposals and display their justification, target path, and signature/quorum status.",
      "calls": [
        "any",
        "command",
        "endswith",
        "get",
        "glob",
        "info",
        "len",
        "load_yaml_file",
        "mkdir",
        "sorted",
        "strip"
      ],
      "line_number": 40,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.924817+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "3319d8858166139b9c523a3694781c7fe8e23ff252d7a4c04b72eca5fca2a3d3"
    },
    "src/system/admin/proposals.py::proposals_sign": {
      "key": "src/system/admin/proposals.py::proposals_sign",
      "name": "proposals_sign",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Sign a proposal with the operator's private key (content-bound token).",
      "docstring": "Sign a proposal with the operator's private key (content-bound token).",
      "calls": [
        "Argument",
        "Exit",
        "append",
        "b64encode",
        "command",
        "decode",
        "encode",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "isoformat",
        "load_private_key",
        "load_yaml_file",
        "prompt",
        "save_yaml_file",
        "setdefault",
        "sign",
        "utcnow"
      ],
      "line_number": 73,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.926877+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "bde248a51a26e815c05964f60e1a85aadcfbe334e6ede8b995077fd523c2bb6b"
    },
    "src/system/admin/proposals.py::proposals_approve": {
      "key": "src/system/admin/proposals.py::proposals_approve",
      "name": "proposals_approve",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Verify signatures/quorum, run a canary constitutional audit, then apply the proposal if valid.",
      "docstring": "Verify signatures/quorum, run a canary constitutional audit, then apply the proposal if valid.",
      "calls": [
        "Argument",
        "ConstitutionalAuditor",
        "Exit",
        "Path",
        "TemporaryDirectory",
        "any",
        "archive_rollback_plan",
        "b64decode",
        "command",
        "copy",
        "decode",
        "encode",
        "endswith",
        "error",
        "exists",
        "generate_approval_token",
        "get",
        "info",
        "isinstance",
        "load_pem_public_key",
        "load_yaml_file",
        "mkdir",
        "run",
        "run_full_audit",
        "str",
        "unlink",
        "verify",
        "warning",
        "write_text"
      ],
      "line_number": 114,
      "is_async": false,
      "parameters": [
        "proposal_name"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.933270+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "c6ec0fe476daca2272ae9468633046c7cec412f55dcc0affea05a705d4b64f82"
    },
    "src/system/admin/proposals.py::register": {
      "key": "src/system/admin/proposals.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/proposals.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Register proposal lifecycle commands under the admin CLI.",
      "docstring": "Register proposal lifecycle commands under the admin CLI.",
      "calls": [
        "add_typer"
      ],
      "line_number": 242,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.933874+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "bed38ebf9ccf2e6383df444f57442b0563d41c4119e91f228822b5e95b6638ac"
    },
    "src/system/admin/guard.py::_load_ux_defaults": {
      "key": "src/system/admin/guard.py::_load_ux_defaults",
      "name": "_load_ux_defaults",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Extracts and returns UX-related default values from meta.yaml.",
      "docstring": "Extracts and returns UX-related default values from meta.yaml.",
      "calls": [
        "exists",
        "get",
        "read_text",
        "safe_load"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "root"
      ],
      "last_updated": "2025-08-17T19:00:36.939342+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "43626173a46d0a5f508019039627edb2df02970a1eae78904e1223fcf8cda96a"
    },
    "src/system/admin/guard.py::_is_clean": {
      "key": "src/system/admin/guard.py::_is_clean",
      "name": "_is_clean",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Determines if a report is clean.",
      "docstring": "Determines if a report is clean.",
      "calls": [
        "get"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [
        "report"
      ],
      "last_updated": "2025-08-17T19:00:36.940015+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "37959f8d821c2b4ca6b6146c0399c2561fc8e567a07025b5ba8ddaf66176f4d5"
    },
    "src/system/admin/guard.py::_print_table": {
      "key": "src/system/admin/guard.py::_print_table",
      "name": "_print_table",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Prints a formatted table of the drift report.",
      "docstring": "Prints a formatted table of the drift report.",
      "calls": [
        "Table",
        "_is_clean",
        "add_column",
        "add_row",
        "fit",
        "get",
        "join",
        "row",
        "rprint"
      ],
      "line_number": 72,
      "is_async": false,
      "parameters": [
        "report_dict",
        "labels"
      ],
      "last_updated": "2025-08-17T19:00:36.942589+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5170f964d4cf471b2958f0acffb6e8297ed70467fbdcd6096f5596bf58cb7975"
    },
    "src/system/admin/guard.py::_print_pretty": {
      "key": "src/system/admin/guard.py::_print_pretty",
      "name": "_print_pretty",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Prints a user-friendly summary of the drift report.",
      "docstring": "Prints a user-friendly summary of the drift report.",
      "calls": [
        "_print_table"
      ],
      "line_number": 110,
      "is_async": false,
      "parameters": [
        "report_dict",
        "labels"
      ],
      "last_updated": "2025-08-17T19:00:36.943154+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "76f6ca2a3c5b52f7a6e59c006de9011d04cee89af176fc0e53f1feb7d5a739b6"
    },
    "src/system/admin/guard.py::register": {
      "key": "src/system/admin/guard.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Registers the 'guard' command group with the CLI.",
      "docstring": "Registers the 'guard' command group with the CLI.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "Typer",
        "_load_ux_defaults",
        "_print_pretty",
        "add_typer",
        "collect_code_capabilities",
        "command",
        "detect_capability_drift",
        "dumps",
        "echo",
        "items",
        "len",
        "load_manifest_capabilities",
        "lower",
        "mkdir",
        "rprint",
        "should_fail",
        "sorted",
        "to_dict",
        "write_report",
        "write_text"
      ],
      "line_number": 115,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.947117+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "1ceb9c3a1f21cf371249c7c3dd526d889064c5dde820eb61338e303eb0a40b6f"
    },
    "src/system/admin/guard.py::row": {
      "key": "src/system/admin/guard.py::row",
      "name": "row",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Adds a row to a table with a title and formatted list of items, showing '[none]' if items is empty.",
      "docstring": "Adds a row to a table with a title and formatted list of items, showing '[none]' if items is empty.",
      "calls": [
        "add_row",
        "join"
      ],
      "line_number": 78,
      "is_async": false,
      "parameters": [
        "title",
        "items"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.948276+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "0f0bbd1a164a4bfedef8a54c3546d7f01a6d33d1ea0f467f56740d2493226b56"
    },
    "src/system/admin/guard.py::drift": {
      "key": "src/system/admin/guard.py::drift",
      "name": "drift",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Compares manifest vs code to detect capability drift.",
      "docstring": "Compares manifest vs code to detect capability drift.",
      "calls": [
        "Exit",
        "Option",
        "Path",
        "_load_ux_defaults",
        "_print_pretty",
        "collect_code_capabilities",
        "command",
        "detect_capability_drift",
        "dumps",
        "echo",
        "load_manifest_capabilities",
        "lower",
        "should_fail",
        "to_dict",
        "write_report"
      ],
      "line_number": 121,
      "is_async": false,
      "parameters": [
        "root",
        "output",
        "format",
        "fail_on",
        "strict_intent",
        "include",
        "exclude"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.950496+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "ca426149afd621764e5b17b39f695d2f4bac660dcbd6c38549eae8a609991bb2"
    },
    "src/system/admin/guard.py::kg_export": {
      "key": "src/system/admin/guard.py::kg_export",
      "name": "kg_export",
      "type": "FunctionDef",
      "file": "src/system/admin/guard.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Emits a minimal knowledge-graph artifact with capability nodes.",
      "docstring": "Emits a minimal knowledge-graph artifact with capability nodes.",
      "calls": [
        "Option",
        "Path",
        "collect_code_capabilities",
        "command",
        "dumps",
        "items",
        "len",
        "lower",
        "mkdir",
        "rprint",
        "sorted",
        "write_text"
      ],
      "line_number": 156,
      "is_async": false,
      "parameters": [
        "root",
        "output",
        "include",
        "exclude",
        "prefer"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.952493+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "6784a8deaa9674649a335d5811f2bd758e3457fe8165dc58e48d5f08235f1d1e"
    },
    "src/system/admin/keys.py::register": {
      "key": "src/system/admin/keys.py::register",
      "name": "register",
      "type": "FunctionDef",
      "file": "src/system/admin/keys.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Register key management commands under the admin CLI.",
      "docstring": "Intent: Register key management commands under the admin CLI.",
      "calls": [
        "Argument",
        "NoEncryption",
        "chmod",
        "command",
        "confirm",
        "decode",
        "dump",
        "exists",
        "generate",
        "info",
        "mkdir",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "write_bytes"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "app"
      ],
      "entry_point_type": "cli_command",
      "last_updated": "2025-08-17T19:00:36.956128+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "typer_cli_command",
      "structural_hash": "c339a1d72ef8deb18d44a4acc776d4540fc2b0bda8e197e7f50ec64d9f4292b1"
    },
    "src/system/admin/keys.py::keygen": {
      "key": "src/system/admin/keys.py::keygen",
      "name": "keygen",
      "type": "FunctionDef",
      "file": "src/system/admin/keys.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Intent: Generate a new Ed25519 key pair and print an approver YAML block.",
      "docstring": "Intent: Generate a new Ed25519 key pair and print an approver YAML block.",
      "calls": [
        "Argument",
        "NoEncryption",
        "chmod",
        "command",
        "confirm",
        "decode",
        "dump",
        "exists",
        "generate",
        "info",
        "mkdir",
        "print",
        "private_bytes",
        "public_bytes",
        "public_key",
        "write_bytes"
      ],
      "line_number": 26,
      "is_async": false,
      "parameters": [
        "identity"
      ],
      "entry_point_type": "fastapi_route_command",
      "last_updated": "2025-08-17T19:00:36.958017+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5edbabd97e85a046b570023d6ec7330b5b9ce1e29657ade7ab78cf207ddb7f26"
    },
    "src/system/tools/change_log_updater.py::load_existing_log": {
      "key": "src/system/tools/change_log_updater.py::load_existing_log",
      "name": "load_existing_log",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads the existing change log from disk or returns a new structure.",
      "docstring": "Loads the existing change log from disk or returns a new structure.",
      "calls": [
        "load_config"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.959690+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "617e44205e9e392dcf047c13cf3fd9d88d9568ae09b5c487f92733eaf6167426"
    },
    "src/system/tools/change_log_updater.py::append_change_entry": {
      "key": "src/system/tools/change_log_updater.py::append_change_entry",
      "name": "append_change_entry",
      "type": "FunctionDef",
      "file": "src/system/tools/change_log_updater.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Appends a new, structured entry to the metacode change log.",
      "docstring": "Appends a new, structured entry to the metacode change log.",
      "calls": [
        "append",
        "dumps",
        "info",
        "isoformat",
        "load_existing_log",
        "mkdir",
        "utcnow",
        "write_text"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "task",
        "step",
        "modified_files",
        "score",
        "violations"
      ],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-17T19:00:36.960964+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "810699914d469cb08496ca059f28f88fc261f95546655275a5821abcca68cdce"
    },
    "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder": {
      "key": "src/system/tools/codegraph_builder.py::KnowledgeGraphBuilder",
      "name": "KnowledgeGraphBuilder",
      "type": "ClassDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "docstring": "Builds a comprehensive JSON representation of the project's code structure and relationships.",
      "calls": [
        "DomainMapper",
        "EntryPointDetector",
        "FileScanner",
        "PatternMatcher",
        "_load_patterns",
        "apply_patterns",
        "build_graph_data",
        "exists",
        "get",
        "get_cli_entry_points",
        "get_python_files",
        "info",
        "len",
        "load_config",
        "resolve",
        "scan_file",
        "warning"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.965184+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "b246d912c35499ad9a6f10c2a493ef55b4c83586e3902da606c5d43efbf254c3"
    },
    "src/system/tools/codegraph_builder.py::__init__": {
      "key": "src/system/tools/codegraph_builder.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the builder, loading patterns and project configuration.",
      "docstring": "Initializes the builder, loading patterns and project configuration.",
      "calls": [
        "DomainMapper",
        "EntryPointDetector",
        "FileScanner",
        "PatternMatcher",
        "_load_patterns",
        "get_cli_entry_points",
        "resolve"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self",
        "root_path",
        "exclude_patterns"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.971076+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "7d369f2cc373f6c02ecc31917ec58ce35e2099422e8b983c79c199e52bbbfb57"
    },
    "src/system/tools/codegraph_builder.py::_load_patterns": {
      "key": "src/system/tools/codegraph_builder.py::_load_patterns",
      "name": "_load_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads entry point detection patterns from the intent file.",
      "docstring": "Loads entry point detection patterns from the intent file.",
      "calls": [
        "exists",
        "get",
        "load_config",
        "warning"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.971947+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "466ea43bdd1390ce477bcb475a9f1107c736fc9d7337069c4c26e7cd7fb652f2"
    },
    "src/system/tools/codegraph_builder.py::build": {
      "key": "src/system/tools/codegraph_builder.py::build",
      "name": "build",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Orchestrates the full knowledge graph generation process.",
      "docstring": "Orchestrates the full knowledge graph generation process.",
      "calls": [
        "apply_patterns",
        "build_graph_data",
        "get_python_files",
        "info",
        "len",
        "scan_file"
      ],
      "line_number": 61,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.973351+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "fa613bca8cedc5ec516a2b879e463e275d5396a0e972c966ee38db997d650162"
    },
    "src/system/tools/codegraph_builder.py::main": {
      "key": "src/system/tools/codegraph_builder.py::main",
      "name": "main",
      "type": "FunctionDef",
      "file": "src/system/tools/codegraph_builder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "CLI entry point to run the knowledge graph builder and save the output.",
      "docstring": "CLI entry point to run the knowledge graph builder and save the output.",
      "calls": [
        "KnowledgeGraphBuilder",
        "build",
        "cwd",
        "error",
        "find_project_root",
        "load_dotenv",
        "save_to_file",
        "warning"
      ],
      "line_number": 89,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "cli_entry_point",
      "last_updated": "2025-08-17T19:00:36.969814+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "efbba822b1676d18e03265cdca26d5fcac7c79777abcb553f79ed046b7e42b05"
    },
    "src/system/tools/scaffolder.py::Scaffolder": {
      "key": "src/system/tools/scaffolder.py::Scaffolder",
      "name": "Scaffolder",
      "type": "ClassDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A reusable service for creating new, constitutionally-governed projects.",
      "docstring": "A reusable service for creating new, constitutionally-governed projects.",
      "calls": [
        "FileExistsError",
        "FileNotFoundError",
        "copy",
        "dump",
        "exists",
        "format",
        "get",
        "glob",
        "info",
        "is_dir",
        "load_config",
        "mkdir",
        "read_text",
        "replace",
        "safe_load",
        "write_text"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.980193+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "460ac66b683039ecff54b93539963fd91bde8fa64de032d0724f5ececaf715fc"
    },
    "src/system/tools/scaffolder.py::__init__": {
      "key": "src/system/tools/scaffolder.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the Scaffolder with project name, profile, and workspace directory.",
      "docstring": "Initializes the Scaffolder with project name, profile, and workspace directory.",
      "calls": [
        "FileNotFoundError",
        "get",
        "is_dir",
        "load_config"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [
        "self",
        "project_name",
        "profile",
        "workspace_dir"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:36.989428+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "ed3a0ec7574340799159ef0d9da86c387d677484b786ba3cffb6724733c43d1c"
    },
    "src/system/tools/scaffolder.py::scaffold_base_structure": {
      "key": "src/system/tools/scaffolder.py::scaffold_base_structure",
      "name": "scaffold_base_structure",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Creates the base project structure, including tests and CI directories.",
      "docstring": "Creates the base project structure, including tests and CI directories.",
      "calls": [
        "FileExistsError",
        "copy",
        "dump",
        "exists",
        "format",
        "glob",
        "info",
        "mkdir",
        "read_text",
        "replace",
        "safe_load",
        "write_text"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:36.992230+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c166cf9f5388008b3572799f587d0bbded4fdfca2f8677086d28f09dd8cbecf2"
    },
    "src/system/tools/scaffolder.py::write_file": {
      "key": "src/system/tools/scaffolder.py::write_file",
      "name": "write_file",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Writes content to a file within the new project's directory, creating parent directories as needed.",
      "docstring": "Writes content to a file within the new project's directory, creating parent directories as needed.",
      "calls": [
        "info",
        "mkdir",
        "write_text"
      ],
      "line_number": 110,
      "is_async": false,
      "parameters": [
        "self",
        "relative_path",
        "content"
      ],
      "last_updated": "2025-08-17T19:00:36.993095+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "133c8713ca7a9a324d48304f82fee2c2543196bcabba5e031e4f39758bfac180"
    },
    "src/system/tools/scaffolder.py::new_project": {
      "key": "src/system/tools/scaffolder.py::new_project",
      "name": "new_project",
      "type": "FunctionDef",
      "file": "src/system/tools/scaffolder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Scaffolds a new CORE-governed application with the given name, profile, and dry-run option, including base structure and README generation.",
      "docstring": "Scaffolds a new CORE-governed application with the given name, profile, and dry-run option, including base structure and README generation.",
      "calls": [
        "Argument",
        "Exit",
        "Option",
        "Scaffolder",
        "echo",
        "error",
        "exists",
        "format",
        "info",
        "read_text",
        "relative_to",
        "scaffold_base_structure",
        "secho",
        "write_file"
      ],
      "line_number": 118,
      "is_async": false,
      "parameters": [
        "name",
        "profile",
        "dry_run"
      ],
      "last_updated": "2025-08-17T19:00:36.988054+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0a4c9f0c2c40bb1dc27ac90be0c4f251ccc563fc2479428fcf7fd513f1e9ef42"
    },
    "src/system/tools/file_scanner.py::FileScanner": {
      "key": "src/system/tools/file_scanner.py::FileScanner",
      "name": "FileScanner",
      "type": "ClassDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Scans Python files and extracts symbol information.",
      "docstring": "Scans Python files and extracts symbol information.",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "as_posix",
        "calculate_structural_hash",
        "detect_docstring",
        "detect_in_tree",
        "determine_domain",
        "error",
        "extract_base_classes",
        "get",
        "get_entry_point_type",
        "hasattr",
        "infer_agent_from_path",
        "isinstance",
        "isoformat",
        "now",
        "parse",
        "parse_metadata_comment",
        "process_symbol_node",
        "read_text",
        "relative_to",
        "split",
        "splitlines",
        "str",
        "strip",
        "update",
        "visit",
        "walk"
      ],
      "line_number": 25,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:36.999743+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "35b4c26a185985c1b90f7fcbbbf7dae248c77d6dbc1c0d1e5aaf35c88bdffba2"
    },
    "src/system/tools/file_scanner.py::__init__": {
      "key": "src/system/tools/file_scanner.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initializes the scanner with its required helper components.",
      "docstring": "Initializes the scanner with its required helper components.",
      "calls": [],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "self",
        "domain_mapper",
        "entry_point_detector"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:37.005489+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "a82109787ae93f804b85ff7f0ecff19c7dcd6a2ad0d40f2732d5c656bb547c36"
    },
    "src/system/tools/file_scanner.py::scan_file": {
      "key": "src/system/tools/file_scanner.py::scan_file",
      "name": "scan_file",
      "type": "FunctionDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Scans a single Python file, parsing its AST to extract all symbols.",
      "docstring": "Scans a single Python file, parsing its AST to extract all symbols.",
      "calls": [
        "detect_in_tree",
        "error",
        "isinstance",
        "parse",
        "process_symbol_node",
        "read_text",
        "splitlines",
        "str",
        "update",
        "walk"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "self",
        "filepath"
      ],
      "last_updated": "2025-08-17T19:00:37.007009+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "bf9837da78b1262972e4462d7b5ef27aefebd01b1c4971a59b99e002ea91abe8"
    },
    "src/system/tools/file_scanner.py::process_symbol_node": {
      "key": "src/system/tools/file_scanner.py::process_symbol_node",
      "name": "process_symbol_node",
      "type": "FunctionDef",
      "file": "src/system/tools/file_scanner.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Extracts and stores metadata from a single function or class AST node.",
      "docstring": "Extracts and stores metadata from a single function or class AST node.",
      "calls": [
        "FunctionCallVisitor",
        "FunctionInfo",
        "as_posix",
        "calculate_structural_hash",
        "detect_docstring",
        "determine_domain",
        "extract_base_classes",
        "get",
        "get_entry_point_type",
        "hasattr",
        "infer_agent_from_path",
        "isinstance",
        "isoformat",
        "now",
        "parse_metadata_comment",
        "process_symbol_node",
        "relative_to",
        "split",
        "strip",
        "visit"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "filepath",
        "source_lines",
        "parent_key"
      ],
      "last_updated": "2025-08-17T19:00:37.009760+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "edece6d9f56fb6f4676be7cc8dec25f675e28d61c9ebbe6c125aaa995aeef2c9"
    },
    "src/system/tools/manifest_migrator.py::migrate_manifest": {
      "key": "src/system/tools/manifest_migrator.py::migrate_manifest",
      "name": "migrate_manifest",
      "type": "FunctionDef",
      "file": "src/system/tools/manifest_migrator.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "manifest_updating",
      "intent": "Reads the monolithic manifest and splits it into per-domain manifests.",
      "docstring": "Reads the monolithic manifest and splits it into per-domain manifests.",
      "calls": [
        "Exit",
        "Option",
        "all",
        "append",
        "dump",
        "echo",
        "enumerate",
        "error",
        "exists",
        "get",
        "info",
        "items",
        "loads",
        "mkdir",
        "next",
        "read_text",
        "safe_load",
        "secho",
        "values",
        "warning",
        "write_text"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "dry_run"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.016079+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "ec4fdbcf778a03ddf923e5e7cd854d8665eeb680179b86c267b67848374f3291"
    },
    "src/system/tools/entry_point_detector.py::EntryPointDetector": {
      "key": "src/system/tools/entry_point_detector.py::EntryPointDetector",
      "name": "EntryPointDetector",
      "type": "ClassDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Detects various types of entry points in Python code.",
      "docstring": "Detects various types of entry points in Python code.",
      "calls": [
        "FunctionCallVisitor",
        "_is_fastapi_route_decorator",
        "_load_patterns",
        "exists",
        "get",
        "is_fastapi_assignment",
        "is_main_block",
        "isinstance",
        "load_config",
        "set",
        "update",
        "visit",
        "walk",
        "warning"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.020701+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "3f4b6803d48d01d1485f5e53d2907317a60c4e2cba54ab27f91aa882dd138e59"
    },
    "src/system/tools/entry_point_detector.py::__init__": {
      "key": "src/system/tools/entry_point_detector.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the instance with root path, CLI entry points, and load patterns.",
      "docstring": "Initialize the instance with root path, CLI entry points, and load patterns.",
      "calls": [
        "_load_patterns"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "self",
        "root_path",
        "cli_entry_points"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:37.026055+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "d730ae4468ea71120cf99ca761e4c5bf4f5802a735c665b816ad154f51d046c8"
    },
    "src/system/tools/entry_point_detector.py::_load_patterns": {
      "key": "src/system/tools/entry_point_detector.py::_load_patterns",
      "name": "_load_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads entry point detection patterns from the intent file.",
      "docstring": "Loads entry point detection patterns from the intent file.",
      "calls": [
        "exists",
        "get",
        "load_config",
        "warning"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:37.026970+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c17bede7a040dbd9e19d5ebbe55cbdddcb651d6ff36fd77b20826d2db0f62044"
    },
    "src/system/tools/entry_point_detector.py::detect_in_tree": {
      "key": "src/system/tools/entry_point_detector.py::detect_in_tree",
      "name": "detect_in_tree",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Detect entry points in an AST tree and update internal state.",
      "docstring": "Detect entry points in an AST tree and update internal state.",
      "calls": [
        "FunctionCallVisitor",
        "is_fastapi_assignment",
        "is_main_block",
        "set",
        "update",
        "visit",
        "walk"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "self",
        "tree"
      ],
      "last_updated": "2025-08-17T19:00:37.027977+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "633ba0172b6b1525bb0c11c4b1a0a44e81fc24e3135443aba4d701e809ae50fb"
    },
    "src/system/tools/entry_point_detector.py::_is_fastapi_route_decorator": {
      "key": "src/system/tools/entry_point_detector.py::_is_fastapi_route_decorator",
      "name": "_is_fastapi_route_decorator",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Check if decorator is a FastAPI route decorator.",
      "docstring": "Check if decorator is a FastAPI route decorator.",
      "calls": [
        "isinstance"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "self",
        "decorator"
      ],
      "last_updated": "2025-08-17T19:00:37.028792+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0baa596d3a2aec7ccaba8e6924d38fa0c576bace3c40669bb13de8f04d97cdf6"
    },
    "src/system/tools/entry_point_detector.py::get_entry_point_type": {
      "key": "src/system/tools/entry_point_detector.py::get_entry_point_type",
      "name": "get_entry_point_type",
      "type": "FunctionDef",
      "file": "src/system/tools/entry_point_detector.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Identifies decorator or CLI-based entry points for a function.",
      "docstring": "Identifies decorator or CLI-based entry points for a function.",
      "calls": [
        "_is_fastapi_route_decorator",
        "isinstance"
      ],
      "line_number": 59,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.029966+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6556fc7a82812ea33dd452d67ab173f09bab3a076fe3f02cb4688d836ebabd3c"
    },
    "src/system/tools/domain_mapper.py::DomainMapper": {
      "key": "src/system/tools/domain_mapper.py::DomainMapper",
      "name": "DomainMapper",
      "type": "ClassDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Maps file paths to logical domains based on project structure.",
      "docstring": "Maps file paths to logical domains based on project structure.",
      "calls": [
        "Path",
        "_infer_domains_from_directory_structure",
        "_load_domain_map",
        "any",
        "as_posix",
        "get",
        "info",
        "is_dir",
        "items",
        "iterdir",
        "len",
        "load_config",
        "lower",
        "relative_to",
        "startswith",
        "str",
        "warning"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.035063+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "a54446d22bf9f8c9fbe415b9a09b4bb7be85e558af7571cfb069b3b886a9d93f"
    },
    "src/system/tools/domain_mapper.py::__init__": {
      "key": "src/system/tools/domain_mapper.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the instance with root_path, setting src_root and loading domain_map.",
      "docstring": "Initialize the instance with root_path, setting src_root and loading domain_map.",
      "calls": [
        "_load_domain_map"
      ],
      "line_number": 17,
      "is_async": false,
      "parameters": [
        "self",
        "root_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:37.041182+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "ff41028d16f8f3aa2eb4654b596d8daa60e2232080791d1a7cf7172ad9441bb0"
    },
    "src/system/tools/domain_mapper.py::_load_domain_map": {
      "key": "src/system/tools/domain_mapper.py::_load_domain_map",
      "name": "_load_domain_map",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Loads the domain-to-path mapping from the constitution.",
      "docstring": "Loads the domain-to-path mapping from the constitution.",
      "calls": [
        "Path",
        "_infer_domains_from_directory_structure",
        "as_posix",
        "get",
        "load_config"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:37.042346+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "67a5f7a203651d4e01ceba0c8e2eaf495bf1ccbf6c99cae8a34da187294706be"
    },
    "src/system/tools/domain_mapper.py::_infer_domains_from_directory_structure": {
      "key": "src/system/tools/domain_mapper.py::_infer_domains_from_directory_structure",
      "name": "_infer_domains_from_directory_structure",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A heuristic to guess domains if source_structure.yaml is missing.",
      "docstring": "A heuristic to guess domains if source_structure.yaml is missing.",
      "calls": [
        "as_posix",
        "info",
        "is_dir",
        "iterdir",
        "len",
        "relative_to",
        "startswith",
        "warning"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:37.043803+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "fa5e69752485e5b89396ad9675b9746a685d06462217ea27ae0e69cf4f8c8756"
    },
    "src/system/tools/domain_mapper.py::determine_domain": {
      "key": "src/system/tools/domain_mapper.py::determine_domain",
      "name": "determine_domain",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determines the logical domain for a file path based on the longest matching prefix.",
      "docstring": "Determines the logical domain for a file path based on the longest matching prefix.",
      "calls": [
        "as_posix",
        "get",
        "len",
        "startswith"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [
        "self",
        "file_path"
      ],
      "last_updated": "2025-08-17T19:00:37.044717+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "9262b19a3c58243966e6ff888ed322a238cc83d691aa3b7f866b9981d93be761"
    },
    "src/system/tools/domain_mapper.py::infer_agent_from_path": {
      "key": "src/system/tools/domain_mapper.py::infer_agent_from_path",
      "name": "infer_agent_from_path",
      "type": "FunctionDef",
      "file": "src/system/tools/domain_mapper.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Infers the most likely responsible agent based on keywords in the file path.",
      "docstring": "Infers the most likely responsible agent based on keywords in the file path.",
      "calls": [
        "any",
        "items",
        "lower",
        "str"
      ],
      "line_number": 77,
      "is_async": false,
      "parameters": [
        "self",
        "relative_path"
      ],
      "last_updated": "2025-08-17T19:00:37.045787+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c8e455f64f297ca1fe33d7ee15ebe0dc0f2463eddbc143c12c8cfc80c0c93bce"
    },
    "src/system/tools/ast_visitor.py::FunctionCallVisitor": {
      "key": "src/system/tools/ast_visitor.py::FunctionCallVisitor",
      "name": "FunctionCallVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "An AST visitor that collects the names of all functions being called within a node.",
      "docstring": "An AST visitor that collects the names of all functions being called within a node.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance",
        "set"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.048221+00:00",
      "is_class": true,
      "base_classes": [
        "NodeVisitor"
      ],
      "structural_hash": "1d7392083a2be98b2d882157167d40075ee0a30a3b4cabc691ebb598e26250c9"
    },
    "src/system/tools/ast_visitor.py::__init__": {
      "key": "src/system/tools/ast_visitor.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the instance with the given builder, filepath, source lines, and an empty context stack.",
      "docstring": "Initialize the instance with the given builder, filepath, source lines, and an empty context stack.",
      "calls": [],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self",
        "builder",
        "filepath",
        "source_lines"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:37.057243+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "e5203c6e20bf02e7644590a063ce5e5db0ab69b9ef4dfca433a71816b361bc47"
    },
    "src/system/tools/ast_visitor.py::visit_Call": {
      "key": "src/system/tools/ast_visitor.py::visit_Call",
      "name": "visit_Call",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "docstring": "Records function or method calls in `self.calls` and recursively visits child nodes.",
      "calls": [
        "add",
        "generic_visit",
        "isinstance"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.056561+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6bd1e8e30a8e89ac8a9e78b12c02e5d78b2cf0b9187ff32da75aeedd1c8161af"
    },
    "src/system/tools/ast_visitor.py::ContextAwareVisitor": {
      "key": "src/system/tools/ast_visitor.py::ContextAwareVisitor",
      "name": "ContextAwareVisitor",
      "type": "ClassDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A stateful AST visitor that understands nested class and function contexts.",
      "docstring": "A stateful AST visitor that understands nested class and function contexts.",
      "calls": [
        "_process_and_visit",
        "_process_symbol_node",
        "append",
        "generic_visit",
        "pop"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.051763+00:00",
      "is_class": true,
      "base_classes": [
        "NodeVisitor"
      ],
      "structural_hash": "b28d049bdc95acaee71cbe5ad02878514d81fd1e88ffc7a23724204684c5c3ef"
    },
    "src/system/tools/ast_visitor.py::_process_and_visit": {
      "key": "src/system/tools/ast_visitor.py::_process_and_visit",
      "name": "_process_and_visit",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Helper to process a symbol and manage the context stack.",
      "docstring": "Helper to process a symbol and manage the context stack.",
      "calls": [
        "_process_symbol_node",
        "append",
        "generic_visit",
        "pop"
      ],
      "line_number": 37,
      "is_async": false,
      "parameters": [
        "self",
        "node",
        "node_type"
      ],
      "last_updated": "2025-08-17T19:00:37.058453+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "72ed2d2e224dfe5a9879f157b463bde0bf9109eb7ccef5316baac6b310ae6c96"
    },
    "src/system/tools/ast_visitor.py::visit_ClassDef": {
      "key": "src/system/tools/ast_visitor.py::visit_ClassDef",
      "name": "visit_ClassDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a class definition node, and visits its children.",
      "docstring": "Processes a class definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 57,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.058981+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5fc309bc3b69e72b37ff19e6a7a79f9a377eae0dc1ec0f9e826863e744406929"
    },
    "src/system/tools/ast_visitor.py::visit_FunctionDef": {
      "key": "src/system/tools/ast_visitor.py::visit_FunctionDef",
      "name": "visit_FunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a function definition node, and visits its children.",
      "docstring": "Processes a function definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 61,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.059551+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3f2d3b5171306dce35ba70a697fe9bc954cd498e4d514ee7488742bb2cf1905c"
    },
    "src/system/tools/ast_visitor.py::visit_AsyncFunctionDef": {
      "key": "src/system/tools/ast_visitor.py::visit_AsyncFunctionDef",
      "name": "visit_AsyncFunctionDef",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_visitor.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes an async function definition node, and visits its children.",
      "docstring": "Processes an async function definition node, and visits its children.",
      "calls": [
        "_process_and_visit"
      ],
      "line_number": 65,
      "is_async": false,
      "parameters": [
        "self",
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.060088+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "ce568d79cf5bf2713454e3eb1f44137b0c2105b15ee76686ba9f48fcda3e23e2"
    },
    "src/system/tools/pattern_matcher.py::PatternMatcher": {
      "key": "src/system/tools/pattern_matcher.py::PatternMatcher",
      "name": "PatternMatcher",
      "type": "ClassDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Applies declarative patterns to a list of symbols to identify entry points.",
      "docstring": "Applies declarative patterns to a list of symbols to identify entry points.",
      "calls": [
        "_is_match",
        "debug",
        "error",
        "exists",
        "get",
        "len",
        "match",
        "read_text",
        "set",
        "splitlines",
        "startswith",
        "strip",
        "update",
        "values"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.066670+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "dc1145748ce3e43439a314ff11f622ec61b5523d505af431d22cc7273b2339c0"
    },
    "src/system/tools/pattern_matcher.py::__init__": {
      "key": "src/system/tools/pattern_matcher.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Initialize the PatternMatcher with a set of rules.",
      "docstring": "Initialize the PatternMatcher with a set of rules.\n\nArgs:\n    patterns: A list of pattern dictionaries from entry_point_patterns.yaml.\n    root_path: The absolute path to the repository root.",
      "calls": [],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "self",
        "patterns",
        "root_path"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:37.072807+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "445c74dd2573cc56d17b2745b1d9aa89decf1be39fe2ae622da57bbb6d47c96b"
    },
    "src/system/tools/pattern_matcher.py::apply_patterns": {
      "key": "src/system/tools/pattern_matcher.py::apply_patterns",
      "name": "apply_patterns",
      "type": "FunctionDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Apply configured patterns to identify entry points in function symbols.",
      "docstring": "Apply configured patterns to identify entry points in function symbols.\n\nArgs:\n    functions: A dictionary of FunctionInfo objects from the KnowledgeGraphBuilder.",
      "calls": [
        "_is_match",
        "debug",
        "get",
        "values"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "self",
        "functions"
      ],
      "last_updated": "2025-08-17T19:00:37.074257+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b56de77c134df1e7f4904dc8f21951df2565ebab3055dccfe9b65aaa9f21c97a"
    },
    "src/system/tools/pattern_matcher.py::_is_match": {
      "key": "src/system/tools/pattern_matcher.py::_is_match",
      "name": "_is_match",
      "type": "FunctionDef",
      "file": "src/system/tools/pattern_matcher.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Check if a single symbol matches a set of declarative rules.",
      "docstring": "Check if a single symbol matches a set of declarative rules.",
      "calls": [
        "error",
        "exists",
        "get",
        "len",
        "match",
        "read_text",
        "set",
        "splitlines",
        "startswith",
        "strip",
        "update"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "self",
        "info",
        "rules",
        "all_base_classes",
        "functions"
      ],
      "last_updated": "2025-08-17T19:00:37.077641+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "71a2b9c5bb6e02e6ac1c396728d0f0f41fc40b8bd4b5dda5395bc8522ef39502"
    },
    "src/system/tools/graph_serializer.py::GraphSerializer": {
      "key": "src/system/tools/graph_serializer.py::GraphSerializer",
      "name": "GraphSerializer",
      "type": "ClassDef",
      "file": "src/system/tools/graph_serializer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Handles serialization of knowledge graph data.",
      "docstring": "Handles serialization of knowledge graph data.",
      "calls": [
        "FileLock",
        "asdict",
        "dumps",
        "info",
        "isoformat",
        "items",
        "len",
        "list",
        "mkdir",
        "now",
        "serialize_functions",
        "sorted",
        "str",
        "values",
        "write_text"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.081596+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "1a4f84474c83f18c42d39a152c35c6c610e365faa18bb1bd6bf341d03848fb28"
    },
    "src/system/tools/graph_serializer.py::serialize_functions": {
      "key": "src/system/tools/graph_serializer.py::serialize_functions",
      "name": "serialize_functions",
      "type": "FunctionDef",
      "file": "src/system/tools/graph_serializer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Convert FunctionInfo objects to serializable dictionaries.",
      "docstring": "Convert FunctionInfo objects to serializable dictionaries.",
      "calls": [
        "asdict",
        "items",
        "list",
        "sorted",
        "values"
      ],
      "line_number": 23,
      "is_async": false,
      "parameters": [
        "functions"
      ],
      "last_updated": "2025-08-17T19:00:37.086012+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "fb3e1081c1da8cee1cad99389b6926fb51e4477765ee8d241ae132ee9585ddb8"
    },
    "src/system/tools/graph_serializer.py::build_graph_data": {
      "key": "src/system/tools/graph_serializer.py::build_graph_data",
      "name": "build_graph_data",
      "type": "FunctionDef",
      "file": "src/system/tools/graph_serializer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Build the complete knowledge graph data structure.",
      "docstring": "Build the complete knowledge graph data structure.",
      "calls": [
        "isoformat",
        "len",
        "now",
        "serialize_functions"
      ],
      "line_number": 39,
      "is_async": false,
      "parameters": [
        "functions",
        "files_scanned"
      ],
      "last_updated": "2025-08-17T19:00:37.086886+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8ec4ad74e865ef0686589880d5b8d751f12804aa620d86e51c0105498bf136b9"
    },
    "src/system/tools/graph_serializer.py::save_to_file": {
      "key": "src/system/tools/graph_serializer.py::save_to_file",
      "name": "save_to_file",
      "type": "FunctionDef",
      "file": "src/system/tools/graph_serializer.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Save the knowledge graph to a JSON file with file locking.",
      "docstring": "Save the knowledge graph to a JSON file with file locking.",
      "calls": [
        "FileLock",
        "dumps",
        "info",
        "mkdir",
        "str",
        "write_text"
      ],
      "line_number": 56,
      "is_async": false,
      "parameters": [
        "graph_data",
        "output_path"
      ],
      "last_updated": "2025-08-17T19:00:37.088131+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "04f11c853873d73a33f15630a38cc20d31a92b52e793cce87e54172fcd50079d"
    },
    "src/system/tools/ast_utils.py::strip_docstrings": {
      "key": "src/system/tools/ast_utils.py::strip_docstrings",
      "name": "strip_docstrings",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Recursively remove docstring nodes from an AST tree for structural hashing.",
      "docstring": "Recursively remove docstring nodes from an AST tree for structural hashing.",
      "calls": [
        "isinstance",
        "iter_child_nodes",
        "strip_docstrings"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.090937+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "520ff4dd6bf1ff781d0552b7e3c3d3667e4ea9aa97e12f094ef01c9d120e6d5f"
    },
    "src/system/tools/ast_utils.py::calculate_structural_hash": {
      "key": "src/system/tools/ast_utils.py::calculate_structural_hash",
      "name": "calculate_structural_hash",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Calculate a hash of the node's structure without docstrings.",
      "docstring": "Calculate a hash of the node's structure without docstrings.",
      "calls": [
        "encode",
        "hexdigest",
        "parse",
        "replace",
        "sha256",
        "strip_docstrings",
        "unparse"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.091769+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "014a91cdb2aaf134603f4fe4415d0c4fd2ba3a530c44b9a2adedaf7fa21a6804"
    },
    "src/system/tools/ast_utils.py::detect_docstring": {
      "key": "src/system/tools/ast_utils.py::detect_docstring",
      "name": "detect_docstring",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Detects both standard and non-standard docstrings for a node.",
      "docstring": "Detects both standard and non-standard docstrings for a node.",
      "calls": [
        "get_docstring",
        "isinstance"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.092829+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "361fcc6dddb36505bb1486f5f466435c20b3cf521499397941d909a870d6f163"
    },
    "src/system/tools/ast_utils.py::extract_base_classes": {
      "key": "src/system/tools/ast_utils.py::extract_base_classes",
      "name": "extract_base_classes",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Extract base class names from a class definition.",
      "docstring": "Extract base class names from a class definition.",
      "calls": [
        "append",
        "isinstance"
      ],
      "line_number": 52,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.093666+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "95dceab5bad0d24dd6e43a90d656b349b61f5529de711ec65c59a037bcff9af3"
    },
    "src/system/tools/ast_utils.py::parse_metadata_comment": {
      "key": "src/system/tools/ast_utils.py::parse_metadata_comment",
      "name": "parse_metadata_comment",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parses the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "docstring": "Parses the line immediately preceding a symbol definition for a '# CAPABILITY:' tag.",
      "calls": [
        "group",
        "len",
        "search",
        "startswith",
        "strip"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [
        "node",
        "source_lines"
      ],
      "last_updated": "2025-08-17T19:00:37.094804+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "580591c7d6fd7706edbb62b9dde1f347482f19c2d739bbbc519ce428f2caf391"
    },
    "src/system/tools/ast_utils.py::is_fastapi_assignment": {
      "key": "src/system/tools/ast_utils.py::is_fastapi_assignment",
      "name": "is_fastapi_assignment",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Check if node is a FastAPI app assignment.",
      "docstring": "Check if node is a FastAPI app assignment.",
      "calls": [
        "isinstance"
      ],
      "line_number": 74,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.095658+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "95692faf75510223cabe67d2830526fc20aea29ce646a59a804d1c7f9d55cabb"
    },
    "src/system/tools/ast_utils.py::is_main_block": {
      "key": "src/system/tools/ast_utils.py::is_main_block",
      "name": "is_main_block",
      "type": "FunctionDef",
      "file": "src/system/tools/ast_utils.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Check if node is an if __name__ == '__main__' block.",
      "docstring": "Check if node is an if __name__ == '__main__' block.",
      "calls": [
        "isinstance"
      ],
      "line_number": 85,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.096598+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "ac818678d6bd6faf5ef7b7ac9bf0746a1a2915489dccc361c3c40b2716877ed8"
    },
    "src/system/tools/docstring_adder.py::add_docstring_to_function_line_based": {
      "key": "src/system/tools/docstring_adder.py::add_docstring_to_function_line_based",
      "name": "add_docstring_to_function_line_based",
      "type": "FunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Surgically inserts a docstring into source code using a line-based method.",
      "docstring": "Surgically inserts a docstring into source code using a line-based method.",
      "calls": [
        "error",
        "insert",
        "join",
        "len",
        "lstrip",
        "replace",
        "splitlines",
        "strip",
        "warning"
      ],
      "line_number": 28,
      "is_async": false,
      "parameters": [
        "source_code",
        "line_number",
        "docstring"
      ],
      "last_updated": "2025-08-17T19:00:37.101932+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "056c0063bbadc526ef803cbfecba77ca674c291b23cd5807f84ffabde2894624"
    },
    "src/system/tools/docstring_adder.py::generate_and_apply_docstring": {
      "key": "src/system/tools/docstring_adder.py::generate_and_apply_docstring",
      "name": "generate_and_apply_docstring",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Generates, validates, and applies a docstring for a single symbol.",
      "docstring": "Generates, validates, and applies a docstring for a single symbol.",
      "calls": [
        "add_docstring_to_function_line_based",
        "error",
        "exists",
        "get",
        "get_docstring",
        "info",
        "isinstance",
        "make_request_async",
        "next",
        "parse",
        "read_text",
        "secho",
        "str",
        "strip",
        "unparse",
        "validate_code",
        "walk",
        "warning",
        "write_text"
      ],
      "line_number": 58,
      "is_async": true,
      "parameters": [
        "target",
        "generator",
        "dry_run"
      ],
      "last_updated": "2025-08-17T19:00:37.106655+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0e21817ea91aa2576fa37c72aa077d4748e0dad52fd5906d287641c4585f3494"
    },
    "src/system/tools/docstring_adder.py::_async_main": {
      "key": "src/system/tools/docstring_adder.py::_async_main",
      "name": "_async_main",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "The core asynchronous logic for finding and fixing docstrings.",
      "docstring": "The core asynchronous logic for finding and fixing docstrings.",
      "calls": [
        "GeneratorClient",
        "KnowledgeGraphBuilder",
        "Semaphore",
        "as_completed",
        "build",
        "dumps",
        "error",
        "generate_and_apply_docstring",
        "get",
        "info",
        "len",
        "track",
        "values",
        "worker",
        "write_text"
      ],
      "line_number": 151,
      "is_async": true,
      "parameters": [
        "dry_run"
      ],
      "last_updated": "2025-08-17T19:00:37.109029+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "1fd9ea967327de7f483a03c98bd7cb6d88d9d5b0e56e642a37a703c387ca0cbd"
    },
    "src/system/tools/docstring_adder.py::fix_missing_docstrings": {
      "key": "src/system/tools/docstring_adder.py::fix_missing_docstrings",
      "name": "fix_missing_docstrings",
      "type": "FunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "add_missing_docstrings",
      "intent": "Finds all symbols with missing docstrings and uses an LLM to generate and apply them, with validation.",
      "docstring": "Finds all symbols with missing docstrings and uses an LLM to generate and apply them, with validation.",
      "calls": [
        "KnowledgeGraphBuilder",
        "Option",
        "_async_main",
        "build",
        "dumps",
        "error",
        "info",
        "run",
        "write_text"
      ],
      "line_number": 204,
      "is_async": false,
      "parameters": [
        "dry_run"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.110317+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "f91473198c85429e52389f565707d6ea841f56ce73c4b305b8848044c8b98cad"
    },
    "src/system/tools/docstring_adder.py::worker": {
      "key": "src/system/tools/docstring_adder.py::worker",
      "name": "worker",
      "type": "AsyncFunctionDef",
      "file": "src/system/tools/docstring_adder.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Processes a target by generating and applying a docstring while respecting a semaphore limit.",
      "docstring": "Processes a target by generating and applying a docstring while respecting a semaphore limit.",
      "calls": [
        "generate_and_apply_docstring"
      ],
      "line_number": 187,
      "is_async": true,
      "parameters": [
        "target"
      ],
      "last_updated": "2025-08-17T19:00:37.111011+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "bf227975be6db77562124c68865894e9d5ac82e03cb2cacf17189d59183d48df"
    },
    "src/system/tools/models.py::FunctionInfo": {
      "key": "src/system/tools/models.py::FunctionInfo",
      "name": "FunctionInfo",
      "type": "ClassDef",
      "file": "src/system/tools/models.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "A data structure holding all analyzed information about a single symbol (function, method, or class).",
      "docstring": "A data structure holding all analyzed information about a single symbol (function, method, or class).",
      "calls": [
        "field"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "data_model",
      "last_updated": "2025-08-17T19:00:37.113702+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "dataclass_definition",
      "structural_hash": "d8c3fbd14dd6721420770299c61be330eb98b0989c0250317c2f6e0f9b656974"
    },
    "src/system/tools/project_structure.py::ProjectStructureError": {
      "key": "src/system/tools/project_structure.py::ProjectStructureError",
      "name": "ProjectStructureError",
      "type": "ClassDef",
      "file": "src/system/tools/project_structure.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Custom exception for when the project's root cannot be determined.",
      "docstring": "Custom exception for when the project's root cannot be determined.",
      "calls": [],
      "line_number": 14,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.115008+00:00",
      "is_class": true,
      "base_classes": [
        "Exception"
      ],
      "structural_hash": "2f13e6e5a0eb3f0c4f02e9a457c18dba96ed08cc8c805bed8008ebab96d432b6"
    },
    "src/system/tools/project_structure.py::find_project_root": {
      "key": "src/system/tools/project_structure.py::find_project_root",
      "name": "find_project_root",
      "type": "FunctionDef",
      "file": "src/system/tools/project_structure.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Traverses upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "docstring": "Traverses upward from a starting path to find the project root, marked by 'pyproject.toml'.",
      "calls": [
        "ProjectStructureError",
        "exists",
        "resolve"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "start_path"
      ],
      "last_updated": "2025-08-17T19:00:37.115774+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "84c7db2ca5b8eda499b953a6bf3038470a575bed5d399c1af17a821e9181137b"
    },
    "src/system/tools/project_structure.py::get_cli_entry_points": {
      "key": "src/system/tools/project_structure.py::get_cli_entry_points",
      "name": "get_cli_entry_points",
      "type": "FunctionDef",
      "file": "src/system/tools/project_structure.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Parses pyproject.toml to find declared command-line entry points.",
      "docstring": "Parses pyproject.toml to find declared command-line entry points.",
      "calls": [
        "exists",
        "findall",
        "group",
        "read_text",
        "search",
        "set",
        "warning"
      ],
      "line_number": 30,
      "is_async": false,
      "parameters": [
        "root_path"
      ],
      "last_updated": "2025-08-17T19:00:37.116966+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "9e7e319527850d809e354ece4f140ab49f81f76411c7c2be86f9d7356a7871d9"
    },
    "src/system/tools/project_structure.py::should_exclude_path": {
      "key": "src/system/tools/project_structure.py::should_exclude_path",
      "name": "should_exclude_path",
      "type": "FunctionDef",
      "file": "src/system/tools/project_structure.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Determines if a given path should be excluded from scanning.",
      "docstring": "Determines if a given path should be excluded from scanning.",
      "calls": [
        "any"
      ],
      "line_number": 45,
      "is_async": false,
      "parameters": [
        "path",
        "exclude_patterns"
      ],
      "last_updated": "2025-08-17T19:00:37.117614+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "7e43ba6fe776c51c6ed484b0bc17e16f113b4034b79840a7f38c898f9819d116"
    },
    "src/system/tools/project_structure.py::get_python_files": {
      "key": "src/system/tools/project_structure.py::get_python_files",
      "name": "get_python_files",
      "type": "FunctionDef",
      "file": "src/system/tools/project_structure.py",
      "domain": "tooling",
      "agent": "tooling_agent",
      "capability": "unassigned",
      "intent": "Get all Python files in the source directory, excluding specified patterns.",
      "docstring": "Get all Python files in the source directory, excluding specified patterns.",
      "calls": [
        "rglob",
        "should_exclude_path"
      ],
      "line_number": 50,
      "is_async": false,
      "parameters": [
        "src_root",
        "exclude_patterns"
      ],
      "last_updated": "2025-08-17T19:00:37.118352+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "a092f5bade97c8d55e3b6d341ba3584d6acbec502e9d5fa855efd12434f36b7f"
    },
    "src/system/guard/discovery/from_source_scan.py::_parse_inline_meta": {
      "key": "src/system/guard/discovery/from_source_scan.py::_parse_inline_meta",
      "name": "_parse_inline_meta",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Parse inline [key=value] metadata from trailing text.",
      "docstring": "Parse inline [key=value] metadata from trailing text.",
      "calls": [
        "findall",
        "group",
        "search"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "trailing"
      ],
      "last_updated": "2025-08-17T19:00:37.120402+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "04e919d1580e0efe6c93a7e34d7b4adfd2afb95339c5246dd0ec1006bf3bca54"
    },
    "src/system/guard/discovery/from_source_scan.py::_iter_source_files": {
      "key": "src/system/guard/discovery/from_source_scan.py::_iter_source_files",
      "name": "_iter_source_files",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Yields repository files to be scanned.",
      "docstring": "Yields repository files to be scanned.",
      "calls": [
        "any",
        "is_file",
        "match",
        "rglob",
        "wanted"
      ],
      "line_number": 27,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs"
      ],
      "last_updated": "2025-08-17T19:00:37.121711+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b5b675110e61cfb12eaf9fd7630d3b5493e662dd45521e6a570d58b4362ade36"
    },
    "src/system/guard/discovery/from_source_scan.py::collect_from_source_scan": {
      "key": "src/system/guard/discovery/from_source_scan.py::collect_from_source_scan",
      "name": "collect_from_source_scan",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Scans for '# CAPABILITY:' tags with optional inline metadata.",
      "docstring": "Scans for '# CAPABILITY:' tags with optional inline metadata.",
      "calls": [
        "CapabilityMeta",
        "_iter_source_files",
        "_parse_inline_meta",
        "get",
        "group",
        "match",
        "read_text",
        "splitlines",
        "strip"
      ],
      "line_number": 45,
      "is_async": false,
      "parameters": [
        "root",
        "include_globs",
        "exclude_globs"
      ],
      "last_updated": "2025-08-17T19:00:37.123133+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "f68a4883d0b1d8129540c80e3007b4123c6fc828fe6240a8c5d087c8268fb313"
    },
    "src/system/guard/discovery/from_source_scan.py::wanted": {
      "key": "src/system/guard/discovery/from_source_scan.py::wanted",
      "name": "wanted",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_source_scan.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Return True if the path matches include_globs (if any) or has a .py suffix, and does not match exclude_globs.",
      "docstring": "Return True if the path matches include_globs (if any) or has a .py suffix, and does not match exclude_globs.",
      "calls": [
        "any",
        "match"
      ],
      "line_number": 32,
      "is_async": false,
      "parameters": [
        "p"
      ],
      "last_updated": "2025-08-17T19:00:37.124025+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5345aca39bfbb4edb9ef0d4011c61efa4c1c44757af84f97b1221aedc6165256"
    },
    "src/system/guard/discovery/from_manifest.py::_normalize_cap_list": {
      "key": "src/system/guard/discovery/from_manifest.py::_normalize_cap_list",
      "name": "_normalize_cap_list",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_manifest.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Normalizes various list/dict shapes into a standard {cap: Meta} dictionary.",
      "docstring": "Normalizes various list/dict shapes into a standard {cap: Meta} dictionary.",
      "calls": [
        "CapabilityMeta",
        "isinstance"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "items"
      ],
      "last_updated": "2025-08-17T19:00:37.126120+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "2661bca830c843baba443291eaf1d76e8e05d4f82423889256244d948004f58f"
    },
    "src/system/guard/discovery/from_manifest.py::_find_all_manifests": {
      "key": "src/system/guard/discovery/from_manifest.py::_find_all_manifests",
      "name": "_find_all_manifests",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_manifest.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Locates all manifest.yaml files within the src directory.",
      "docstring": "Locates all manifest.yaml files within the src directory.",
      "calls": [
        "glob",
        "is_dir",
        "list",
        "sorted"
      ],
      "line_number": 29,
      "is_async": false,
      "parameters": [
        "start"
      ],
      "last_updated": "2025-08-17T19:00:37.126895+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b15fdc1cbe22c819a11fc867a80252cc518242c8edf62867d0f4189e2b5dfbf9"
    },
    "src/system/guard/discovery/from_manifest.py::load_manifest_capabilities": {
      "key": "src/system/guard/discovery/from_manifest.py::load_manifest_capabilities",
      "name": "load_manifest_capabilities",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_manifest.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Loads, parses, and aggregates capabilities from all domain-specific manifests.",
      "docstring": "Loads, parses, and aggregates capabilities from all domain-specific manifests.",
      "calls": [
        "CapabilityMeta",
        "RuntimeError",
        "_find_all_manifests",
        "_normalize_cap_list",
        "get",
        "items",
        "open",
        "safe_load"
      ],
      "line_number": 37,
      "is_async": false,
      "parameters": [
        "root",
        "explicit_path"
      ],
      "last_updated": "2025-08-17T19:00:37.128451+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e02b757e859bbf4068fd051e2370bbffeaaca6265f3a1264a07b7d0dcecd4b96"
    },
    "src/system/guard/discovery/from_kgb.py::_try_import_kgb": {
      "key": "src/system/guard/discovery/from_kgb.py::_try_import_kgb",
      "name": "_try_import_kgb",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Attempts to access KnowledgeGraphBuilder without a static cross-domain import.",
      "docstring": "Attempts to access KnowledgeGraphBuilder without a static cross-domain import.",
      "calls": [
        "getattr",
        "import_module"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.130112+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "c5ede0ba8cbfe280f6be73af3858ad2da1470b31ac0bbec0a2bab297a805a134"
    },
    "src/system/guard/discovery/from_kgb.py::_extract_cap_meta_from_node": {
      "key": "src/system/guard/discovery/from_kgb.py::_extract_cap_meta_from_node",
      "name": "_extract_cap_meta_from_node",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Extracts capability metadata from a Knowledge Graph node.",
      "docstring": "Extracts capability metadata from a Knowledge Graph node.",
      "calls": [
        "CapabilityMeta",
        "get",
        "str"
      ],
      "line_number": 24,
      "is_async": false,
      "parameters": [
        "node"
      ],
      "last_updated": "2025-08-17T19:00:37.131180+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "b385da546dbc6c856c4048d18354072a90fb09870ff89f366757e4db9aaf9dee"
    },
    "src/system/guard/discovery/from_kgb.py::collect_from_kgb": {
      "key": "src/system/guard/discovery/from_kgb.py::collect_from_kgb",
      "name": "collect_from_kgb",
      "type": "FunctionDef",
      "file": "src/system/guard/discovery/from_kgb.py",
      "domain": "system",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Uses KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "docstring": "Uses KnowledgeGraphBuilder (if present) to discover capabilities from the repo.",
      "calls": [
        "KGB",
        "_extract_cap_meta_from_node",
        "_try_import_kgb",
        "build",
        "get",
        "isinstance",
        "values"
      ],
      "line_number": 36,
      "is_async": false,
      "parameters": [
        "root"
      ],
      "last_updated": "2025-08-17T19:00:37.132598+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5240a9678f95db483d886d2ceb5a9f288efd705684e7496b06c7ea94b3fce821"
    },
    "src/system/governance/checks/quality_checks.py::QualityChecks": {
      "key": "src/system/governance/checks/quality_checks.py::QualityChecks",
      "name": "QualityChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for code quality constitutional checks.",
      "docstring": "Container for code quality constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 8,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.136676+00:00",
      "is_class": true,
      "base_classes": [
        "BaseAuditCheck"
      ],
      "structural_hash": "99265c7cac1b73b8c2e49a43c98111ef345301b253d286c6674d60e3702af0d4"
    },
    "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents": {
      "key": "src/system/governance/checks/quality_checks.py::check_docstrings_and_intents",
      "name": "check_docstrings_and_intents",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.docstrings",
      "intent": "Finds symbols missing docstrings or having generic intents.",
      "docstring": "Finds symbols missing docstrings or having generic intents.",
      "calls": [
        "AuditFinding",
        "append",
        "get"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.141801+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "26909ce55bf9e823775eff9afee451d43f85a43e46039c61dee69cf39825702d"
    },
    "src/system/governance/checks/quality_checks.py::check_for_dead_code": {
      "key": "src/system/governance/checks/quality_checks.py::check_for_dead_code",
      "name": "check_for_dead_code",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/quality_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.dead_code",
      "intent": "Detects unreferenced public symbols.",
      "docstring": "Detects unreferenced public symbols.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "set",
        "startswith",
        "update"
      ],
      "line_number": 49,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.143367+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "bb685c54a606e923f512ea3413c9a9567d6dbc9451b9d1cf0d3ce949e6836ad4"
    },
    "src/system/governance/checks/security_checks.py::SecurityChecks": {
      "key": "src/system/governance/checks/security_checks.py::SecurityChecks",
      "name": "SecurityChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/security_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for security-related constitutional checks.",
      "docstring": "Container for security-related constitutional checks.",
      "calls": [
        "AuditFinding",
        "Path",
        "any",
        "append",
        "compile",
        "enumerate",
        "get",
        "load_config",
        "match",
        "next",
        "read_text",
        "search",
        "set",
        "splitlines",
        "str"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.147768+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "c8d6f6266ecefbb1ed159a5937a9aa4ca6d2ba5e1978ee62c5ae0ac5f7e0c2f1"
    },
    "src/system/governance/checks/security_checks.py::__init__": {
      "key": "src/system/governance/checks/security_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/security_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [
        "load_config"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:37.151805+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "d609ebf2f5063400021d85393ed766550d4d97d15988fc0c6bcd9493ab9cbfbe"
    },
    "src/system/governance/checks/security_checks.py::check_for_hardcoded_secrets": {
      "key": "src/system/governance/checks/security_checks.py::check_for_hardcoded_secrets",
      "name": "check_for_hardcoded_secrets",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/security_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.secrets",
      "intent": "Scans source code for patterns that look like hardcoded secrets.",
      "docstring": "Scans source code for patterns that look like hardcoded secrets.",
      "calls": [
        "AuditFinding",
        "Path",
        "any",
        "append",
        "compile",
        "enumerate",
        "get",
        "match",
        "next",
        "read_text",
        "search",
        "set",
        "splitlines",
        "str"
      ],
      "line_number": 20,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.154463+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "ae0ccd04ba9271130c812a8ff6a27648856e7de792ada274fc5001573e1d1564"
    },
    "src/system/governance/checks/base.py::BaseAuditCheck": {
      "key": "src/system/governance/checks/base.py::BaseAuditCheck",
      "name": "BaseAuditCheck",
      "type": "ClassDef",
      "file": "src/system/governance/checks/base.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Base class for a collection of auditor checks.",
      "docstring": "Base class for a collection of auditor checks.",
      "calls": [],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "entry_point_type": "base_class",
      "last_updated": "2025-08-17T19:00:37.155642+00:00",
      "is_class": true,
      "base_classes": [],
      "entry_point_justification": "framework_base_class",
      "structural_hash": "96b7ea29c2e61948bc07ced5e413c47e756fe244dbd7115fec4556da9a596f9d"
    },
    "src/system/governance/checks/base.py::__init__": {
      "key": "src/system/governance/checks/base.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/base.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [],
      "line_number": 12,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:37.156698+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "474c67c3ad417e92e0a5cfe962deb537f55c550a1fd8b27eca415afbdf6a6986"
    },
    "src/system/governance/checks/file_checks.py::FileChecks": {
      "key": "src/system/governance/checks/file_checks.py::FileChecks",
      "name": "FileChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for file-based constitutional checks.",
      "docstring": "Container for file-based constitutional checks.",
      "calls": [
        "AuditFinding",
        "Path",
        "_get_known_files_from_meta",
        "_recursive_find_paths",
        "add",
        "any",
        "append",
        "copy",
        "exists",
        "extend",
        "get",
        "glob",
        "is_file",
        "isinstance",
        "len",
        "load_config",
        "read_text",
        "relative_to",
        "replace",
        "rglob",
        "set",
        "sorted",
        "str",
        "validate_code",
        "values"
      ],
      "line_number": 11,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.166116+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "451b029338435682415bdbde0023d13d1673dde0436a74c04354b74ae466b063"
    },
    "src/system/governance/checks/file_checks.py::__init__": {
      "key": "src/system/governance/checks/file_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initialize with a shared auditor context.",
      "docstring": "Initialize with a shared auditor context.",
      "calls": [],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:37.175675+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "b6ae2e2a72f0cbc823f1b1d48c7f7bd2baf4951e23a7ce717cef727fad61f62f"
    },
    "src/system/governance/checks/file_checks.py::check_required_files": {
      "key": "src/system/governance/checks/file_checks.py::check_required_files",
      "name": "check_required_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.required_files",
      "intent": "Verify that all files declared in meta.yaml exist on disk.",
      "docstring": "Verify that all files declared in meta.yaml exist on disk.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "append",
        "exists",
        "len",
        "sorted"
      ],
      "line_number": 21,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.177263+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "fdae6956729ff51a7d86d64d26ed9b47addb932b1245bb77ee3105a4eb15d3ea"
    },
    "src/system/governance/checks/file_checks.py::check_syntax": {
      "key": "src/system/governance/checks/file_checks.py::check_syntax",
      "name": "check_syntax",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.syntax",
      "intent": "Validate syntax of all .intent YAML/JSON files (including proposals).",
      "docstring": "Validate syntax of all .intent YAML/JSON files (including proposals).",
      "calls": [
        "AuditFinding",
        "append",
        "extend",
        "is_file",
        "len",
        "read_text",
        "relative_to",
        "rglob",
        "str",
        "validate_code"
      ],
      "line_number": 63,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.179483+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "d87bd10847da7311d1bfd947eb9bdf5ee37fe24b91210911282750f2f5b666ac"
    },
    "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files": {
      "key": "src/system/governance/checks/file_checks.py::check_for_orphaned_intent_files",
      "name": "check_for_orphaned_intent_files",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.orphaned_intent_files",
      "intent": "Find .intent files not referenced in meta.yaml.",
      "docstring": "Find .intent files not referenced in meta.yaml.",
      "calls": [
        "AuditFinding",
        "_get_known_files_from_meta",
        "any",
        "append",
        "is_file",
        "relative_to",
        "replace",
        "rglob",
        "sorted",
        "str"
      ],
      "line_number": 112,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.181217+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "552a2c32abf61e300ae6ccf8bcf3f3a2fdd7d592fbd902eaa3413a8bf98f1509"
    },
    "src/system/governance/checks/file_checks.py::_get_known_files_from_meta": {
      "key": "src/system/governance/checks/file_checks.py::_get_known_files_from_meta",
      "name": "_get_known_files_from_meta",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Build a set of known intent files from .intent/meta.yaml.",
      "docstring": "Build a set of known intent files from .intent/meta.yaml.",
      "calls": [
        "Path",
        "_recursive_find_paths",
        "add",
        "copy",
        "exists",
        "get",
        "glob",
        "isinstance",
        "load_config",
        "relative_to",
        "replace",
        "set",
        "str",
        "values"
      ],
      "line_number": 149,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:37.183882+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "fb4b9b60e3edba9e2631c5a37bacc3cee5534b8e5643c1ceaf856760d1fa081d"
    },
    "src/system/governance/checks/file_checks.py::_recursive_find_paths": {
      "key": "src/system/governance/checks/file_checks.py::_recursive_find_paths",
      "name": "_recursive_find_paths",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/file_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Recursively find all file paths in meta configuration.",
      "docstring": "Recursively find all file paths in meta configuration.",
      "calls": [
        "Path",
        "_recursive_find_paths",
        "add",
        "copy",
        "isinstance",
        "replace",
        "str",
        "values"
      ],
      "line_number": 172,
      "is_async": false,
      "parameters": [
        "data"
      ],
      "last_updated": "2025-08-17T19:00:37.185304+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "0f44eacef430913ebbf5e52ad0100c5dc8af35eebc944cb6fe63bc0f0ad883b2"
    },
    "src/system/governance/checks/proposal_checks.py::ProposalChecks": {
      "key": "src/system/governance/checks/proposal_checks.py::ProposalChecks",
      "name": "ProposalChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for proposal-related constitutional checks.",
      "docstring": "Container for proposal-related constitutional checks.",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "ValueError",
        "__init__",
        "_expected_token_for_proposal",
        "_get_proposal_paths",
        "_load_proposal",
        "_validate_single_proposal_schema",
        "_validate_single_proposal_signatures",
        "append",
        "dumps",
        "encode",
        "exists",
        "extend",
        "finalize",
        "get",
        "glob",
        "hex",
        "iter_errors",
        "join",
        "len",
        "list",
        "load_schema",
        "loads",
        "lower",
        "read_text",
        "relative_to",
        "safe_load",
        "sha256",
        "sorted",
        "str",
        "super",
        "update"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.195957+00:00",
      "is_class": true,
      "base_classes": [
        "BaseAuditCheck"
      ],
      "structural_hash": "92110c3e01f58e19f04a5b331f2f25214c53c80e0b0f45e4e5a2c6098e913d53"
    },
    "src/system/governance/checks/proposal_checks.py::__init__": {
      "key": "src/system/governance/checks/proposal_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [
        "__init__",
        "load_schema",
        "super"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:37.207614+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "0aaf9db3d8c6050ad3a818600df299578a6ec4cdec2ca28b62f1cf645e6ff69a"
    },
    "src/system/governance/checks/proposal_checks.py::_get_proposal_paths": {
      "key": "src/system/governance/checks/proposal_checks.py::_get_proposal_paths",
      "name": "_get_proposal_paths",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Return all cr-* proposals (both YAML and JSON).",
      "docstring": "Return all cr-* proposals (both YAML and JSON).",
      "calls": [
        "exists",
        "glob",
        "list",
        "sorted"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "last_updated": "2025-08-17T19:00:37.208506+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "93925293886a6b028b04e4101097b098b6f9ab96498983cd1683b95169ea87b9"
    },
    "src/system/governance/checks/proposal_checks.py::_load_proposal": {
      "key": "src/system/governance/checks/proposal_checks.py::_load_proposal",
      "name": "_load_proposal",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Load proposal preserving its format, raising ValueError on failure.",
      "docstring": "Load proposal preserving its format, raising ValueError on failure.",
      "calls": [
        "ValueError",
        "loads",
        "lower",
        "read_text",
        "safe_load"
      ],
      "line_number": 43,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "last_updated": "2025-08-17T19:00:37.209650+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "5c4a272b51f2ef2f388a2c0840c6e0fea194cf5ec94855341d4dc470197a96c2"
    },
    "src/system/governance/checks/proposal_checks.py::_expected_token_for_proposal": {
      "key": "src/system/governance/checks/proposal_checks.py::_expected_token_for_proposal",
      "name": "_expected_token_for_proposal",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Produce a deterministic token for approvals bound to the full proposal intent.",
      "docstring": "Produce a deterministic token for approvals bound to the full proposal intent.\nThis logic MUST mirror the token generation in `src/system/admin/utils.py`.",
      "calls": [
        "dumps",
        "encode",
        "finalize",
        "get",
        "hex",
        "sha256",
        "update"
      ],
      "line_number": 55,
      "is_async": false,
      "parameters": [
        "proposal"
      ],
      "last_updated": "2025-08-17T19:00:37.210730+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "e9730bde0ad108925405e24d0d6c741fbab5e5a202d5a128759b21d15f57f595"
    },
    "src/system/governance/checks/proposal_checks.py::_validate_single_proposal_schema": {
      "key": "src/system/governance/checks/proposal_checks.py::_validate_single_proposal_schema",
      "name": "_validate_single_proposal_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Validates a single proposal file against the JSON schema.",
      "docstring": "Validates a single proposal file against the JSON schema.",
      "calls": [
        "AuditFinding",
        "_load_proposal",
        "append",
        "iter_errors",
        "join",
        "list",
        "relative_to",
        "str"
      ],
      "line_number": 70,
      "is_async": false,
      "parameters": [
        "self",
        "path",
        "validator"
      ],
      "last_updated": "2025-08-17T19:00:37.212527+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "4052feee339d4f1ff48fbfb205a7627100e825092cd4d07ce15b4c00d7bec013"
    },
    "src/system/governance/checks/proposal_checks.py::_validate_single_proposal_signatures": {
      "key": "src/system/governance/checks/proposal_checks.py::_validate_single_proposal_signatures",
      "name": "_validate_single_proposal_signatures",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Validates the signatures of a single proposal file for drift.",
      "docstring": "Validates the signatures of a single proposal file for drift.",
      "calls": [
        "AuditFinding",
        "_expected_token_for_proposal",
        "_load_proposal",
        "append",
        "get",
        "join",
        "len",
        "relative_to",
        "str"
      ],
      "line_number": 110,
      "is_async": false,
      "parameters": [
        "self",
        "path"
      ],
      "last_updated": "2025-08-17T19:00:37.214684+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "8b8f857f364c47985aae8697c739ecb34944518be83e61701b10eeaf538a35a2"
    },
    "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema": {
      "key": "src/system/governance/checks/proposal_checks.py::check_proposal_files_match_schema",
      "name": "check_proposal_files_match_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_schema",
      "intent": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "docstring": "Validate each cr-*.yaml/json proposal against proposal.schema.json.",
      "calls": [
        "AuditFinding",
        "Draft7Validator",
        "_get_proposal_paths",
        "_validate_single_proposal_schema",
        "extend"
      ],
      "line_number": 168,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.215760+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "a6367d374a00f893749b1098d11305385d024f16142b3cf30fb3a5c735ea1d81"
    },
    "src/system/governance/checks/proposal_checks.py::check_signatures_match_content": {
      "key": "src/system/governance/checks/proposal_checks.py::check_signatures_match_content",
      "name": "check_signatures_match_content",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_drift",
      "intent": "Detect content/signature drift for all pending proposals.",
      "docstring": "Detect content/signature drift for all pending proposals.",
      "calls": [
        "_get_proposal_paths",
        "_validate_single_proposal_signatures",
        "extend"
      ],
      "line_number": 196,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.216569+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "2b0de8239cfc8f160f8f98596e1574e491e7fafc4b122d7a6a70e22708e59b7a"
    },
    "src/system/governance/checks/proposal_checks.py::list_pending_proposals": {
      "key": "src/system/governance/checks/proposal_checks.py::list_pending_proposals",
      "name": "list_pending_proposals",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/proposal_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.proposals_list",
      "intent": "Emit a friendly summary of pending proposals.",
      "docstring": "Emit a friendly summary of pending proposals.",
      "calls": [
        "AuditFinding",
        "_get_proposal_paths",
        "exists",
        "relative_to",
        "str"
      ],
      "line_number": 208,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.217623+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "375e8aa9acdd0d990a54d115492e29729fadc2d688de14d3223919bef9ba010c"
    },
    "src/system/governance/checks/architecture_checks.py::ArchitectureChecks": {
      "key": "src/system/governance/checks/architecture_checks.py::ArchitectureChecks",
      "name": "ArchitectureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for architectural integrity checks.",
      "docstring": "Container for architectural integrity checks.",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.220943+00:00",
      "is_class": true,
      "base_classes": [
        "BaseAuditCheck"
      ],
      "structural_hash": "340ce208f119aee50a4c8a3b0d0b1eb9ccf8cc976379b0c18f84dce4f74ed743"
    },
    "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication": {
      "key": "src/system/governance/checks/architecture_checks.py::check_for_structural_duplication",
      "name": "check_for_structural_duplication",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/architecture_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.duplication",
      "intent": "Finds symbols with identical structural hashes, violating `dry_by_design`.",
      "docstring": "Finds symbols with identical structural hashes, violating `dry_by_design`.\nThis check uses the content-addressed nature of the knowledge graph to\ndetect code duplication with perfect accuracy.",
      "calls": [
        "AuditFinding",
        "append",
        "defaultdict",
        "get",
        "items",
        "join",
        "len"
      ],
      "line_number": 18,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.224524+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "b8c6e17f8c3e0a114ed1eebcd284fe35d8229b9f8d6d985f9ab226f2b59929f2"
    },
    "src/system/governance/checks/structure_checks.py::StructureChecks": {
      "key": "src/system/governance/checks/structure_checks.py::StructureChecks",
      "name": "StructureChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for structural constitutional checks.",
      "docstring": "Container for structural constitutional checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "items",
        "joinpath",
        "len",
        "list",
        "load_config",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "sorted",
        "split",
        "startswith",
        "validate_manifest_entry",
        "with_suffix"
      ],
      "line_number": 10,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.233629+00:00",
      "is_class": true,
      "base_classes": [
        "BaseAuditCheck"
      ],
      "structural_hash": "80bd1a0a2fa2ff0d7dead7fc98056f0b4333abeb2b1485bdbf8fbbca4398701b"
    },
    "src/system/governance/checks/structure_checks.py::check_project_manifest": {
      "key": "src/system/governance/checks/structure_checks.py::check_project_manifest",
      "name": "check_project_manifest",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.project_manifest",
      "intent": "Validates the integrity of project_manifest.yaml.",
      "docstring": "Validates the integrity of project_manifest.yaml.",
      "calls": [
        "AuditFinding",
        "append"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.243473+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "330055588e86adabc8ecefef8531dd2c828b106982869750b6d678b8e2808a90"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_coverage": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_coverage",
      "name": "check_capability_coverage",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_coverage",
      "intent": "Ensures all required capabilities are implemented.",
      "docstring": "Ensures all required capabilities are implemented.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "set",
        "sorted"
      ],
      "line_number": 41,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.244816+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "0f0007f98aa1b951bcb9625f47e29c38d7eb241b8b3a27044adfc71cdfc9b872"
    },
    "src/system/governance/checks/structure_checks.py::check_capability_definitions": {
      "key": "src/system/governance/checks/structure_checks.py::check_capability_definitions",
      "name": "check_capability_definitions",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.capability_definitions",
      "intent": "Ensures all implemented capabilities are valid.",
      "docstring": "Ensures all implemented capabilities are valid.",
      "calls": [
        "AuditFinding",
        "append",
        "get",
        "list",
        "load_config",
        "sorted"
      ],
      "line_number": 75,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.246374+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "1cb7e76f476b8cc87382eee14d06ffda9869b54aca27a18c92f50722f4942f81"
    },
    "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema": {
      "key": "src/system/governance/checks/structure_checks.py::check_knowledge_graph_schema",
      "name": "check_knowledge_graph_schema",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.knowledge_graph_schema",
      "intent": "Validates all knowledge graph symbols against the schema.",
      "docstring": "Validates all knowledge graph symbols against the schema.",
      "calls": [
        "AuditFinding",
        "append",
        "items",
        "len",
        "validate_manifest_entry"
      ],
      "line_number": 112,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.247818+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "1595abdcfc3a59ec7c1bde58699f35224b13cfbee0cf24df81b4d80e0a435d79"
    },
    "src/system/governance/checks/structure_checks.py::check_domain_integrity": {
      "key": "src/system/governance/checks/structure_checks.py::check_domain_integrity",
      "name": "check_domain_integrity",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/structure_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.domain_integrity",
      "intent": "Checks for domain mismatches and illegal imports.",
      "docstring": "Checks for domain mismatches and illegal imports.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "get_domain_permissions",
        "joinpath",
        "relative_to",
        "resolve_domain_for_path",
        "scan_imports_for_file",
        "set",
        "split",
        "startswith",
        "with_suffix"
      ],
      "line_number": 144,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.250854+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "158a997003c23c750115175d143367e3c9539ea143365e34f1d9f4a0ce02f9a3"
    },
    "src/system/governance/checks/health_checks.py::HealthChecks": {
      "key": "src/system/governance/checks/health_checks.py::HealthChecks",
      "name": "HealthChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for codebase health constitutional checks.",
      "docstring": "Container for codebase health constitutional checks.",
      "calls": [
        "AuditFinding",
        "_get_logical_lines_of_code",
        "append",
        "endswith",
        "extend",
        "from_ast",
        "get",
        "items",
        "len",
        "list",
        "load_config",
        "mean",
        "parse",
        "read_text",
        "relative_to",
        "splitlines",
        "startswith",
        "stdev",
        "strip",
        "values"
      ],
      "line_number": 12,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.257039+00:00",
      "is_class": true,
      "base_classes": [],
      "structural_hash": "dc4094cf311674d8302d4193243abbfeeba30d61ddd34811b39f849d9e55a7bb"
    },
    "src/system/governance/checks/health_checks.py::__init__": {
      "key": "src/system/governance/checks/health_checks.py::__init__",
      "name": "__init__",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Initializes the check with a shared auditor context.",
      "docstring": "Initializes the check with a shared auditor context.",
      "calls": [
        "load_config"
      ],
      "line_number": 15,
      "is_async": false,
      "parameters": [
        "self",
        "context"
      ],
      "entry_point_type": "magic_method",
      "last_updated": "2025-08-17T19:00:37.262340+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "python_magic_method",
      "structural_hash": "72e35c9130203912e2a03a46408bf68a845d509cf8563766821f36549693aebb"
    },
    "src/system/governance/checks/health_checks.py::_get_logical_lines_of_code": {
      "key": "src/system/governance/checks/health_checks.py::_get_logical_lines_of_code",
      "name": "_get_logical_lines_of_code",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Calculates the Logical Lines of Code (LLOC), ignoring comments and blank lines.",
      "docstring": "Calculates the Logical Lines of Code (LLOC), ignoring comments and blank lines.",
      "calls": [
        "len",
        "splitlines",
        "startswith",
        "strip"
      ],
      "line_number": 22,
      "is_async": false,
      "parameters": [
        "self",
        "source_code"
      ],
      "last_updated": "2025-08-17T19:00:37.263102+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "a790caa3a6ae6c7e8af0b040561f7c4f4dbaf3ac73c80023c67311b7e9f89d70"
    },
    "src/system/governance/checks/health_checks.py::check_codebase_health": {
      "key": "src/system/governance/checks/health_checks.py::check_codebase_health",
      "name": "check_codebase_health",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/health_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.codebase_health",
      "intent": "Measures code complexity and atomicity against defined policies.",
      "docstring": "Measures code complexity and atomicity against defined policies.",
      "calls": [
        "AuditFinding",
        "_get_logical_lines_of_code",
        "append",
        "endswith",
        "extend",
        "from_ast",
        "get",
        "items",
        "len",
        "list",
        "mean",
        "parse",
        "read_text",
        "relative_to",
        "stdev",
        "values"
      ],
      "line_number": 33,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.266464+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "1b9f38a97bb5dcc7c011930e6868997d140bb0389eb802f332e58c829e06867d"
    },
    "src/system/governance/checks/environment_checks.py::EnvironmentChecks": {
      "key": "src/system/governance/checks/environment_checks.py::EnvironmentChecks",
      "name": "EnvironmentChecks",
      "type": "ClassDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Container for environment and runtime configuration checks.",
      "docstring": "Container for environment and runtime configuration checks.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "load_config"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [],
      "last_updated": "2025-08-17T19:00:37.269436+00:00",
      "is_class": true,
      "base_classes": [
        "BaseAuditCheck"
      ],
      "structural_hash": "c777f3cb2eb7c7db7c2884402f544b316d8c48a61cf9ab72063905979a99c32f"
    },
    "src/system/governance/checks/environment_checks.py::check_runtime_environment": {
      "key": "src/system/governance/checks/environment_checks.py::check_runtime_environment",
      "name": "check_runtime_environment",
      "type": "FunctionDef",
      "file": "src/system/governance/checks/environment_checks.py",
      "domain": "system",
      "agent": "generic_agent",
      "capability": "audit.check.environment",
      "intent": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "docstring": "Verifies that required environment variables specified in runtime_requirements.yaml are set, returning a list of audit findings for missing variables or configuration issues.",
      "calls": [
        "AuditFinding",
        "append",
        "exists",
        "get",
        "getenv",
        "load_config"
      ],
      "line_number": 13,
      "is_async": false,
      "parameters": [
        "self"
      ],
      "entry_point_type": "capability",
      "last_updated": "2025-08-17T19:00:37.273225+00:00",
      "is_class": false,
      "base_classes": [],
      "entry_point_justification": "capability_implementation",
      "structural_hash": "69c78373d6d784751125b189d281ed33c291f8220e1143451a3040940525543f"
    },
    "src/shared/schemas/manifest_validator.py::load_schema": {
      "key": "src/shared/schemas/manifest_validator.py::load_schema",
      "name": "load_schema",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Load a JSON schema from the .intent/schemas/ directory.",
      "docstring": "Load a JSON schema from the .intent/schemas/ directory.\n\nArgs:\n    schema_name (str): The filename of the schema (e.g., 'knowledge_graph_entry.schema.json').\n\nReturns:\n    Dict[str, Any]: The loaded JSON schema.\n\nRaises:\n    FileNotFoundError: If the schema file is not found.\n    json.JSONDecodeError: If the schema file is not valid JSON.",
      "calls": [
        "FileNotFoundError",
        "JSONDecodeError",
        "exists",
        "load",
        "open"
      ],
      "line_number": 14,
      "is_async": false,
      "parameters": [
        "schema_name"
      ],
      "last_updated": "2025-08-17T19:00:37.275315+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "6e3b8465838bb871ec1cd9f626c92298765c571cba61170572d50151c662f9be"
    },
    "src/shared/schemas/manifest_validator.py::validate_manifest_entry": {
      "key": "src/shared/schemas/manifest_validator.py::validate_manifest_entry",
      "name": "validate_manifest_entry",
      "type": "FunctionDef",
      "file": "src/shared/schemas/manifest_validator.py",
      "domain": "shared",
      "agent": "validator_agent",
      "capability": "unassigned",
      "intent": "Validate a single manifest entry against a schema.",
      "docstring": "Validate a single manifest entry against a schema.\n\nArgs:\n    entry: The dictionary representing a single function/class entry.\n    schema_name: The filename of the schema to validate against.\n\nReturns:\n    A tuple of (is_valid: bool, list_of_error_messages: List[str]).",
      "calls": [
        "Draft7Validator",
        "append",
        "iter_errors",
        "join",
        "load_schema",
        "str"
      ],
      "line_number": 42,
      "is_async": false,
      "parameters": [
        "entry",
        "schema_name"
      ],
      "last_updated": "2025-08-17T19:00:37.276848+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "df3df9d690f9e5aebdbffadea221df68a0ebfd500aaafa86a2205e3e452dedd2"
    },
    "src/shared/utils/manifest_aggregator.py::aggregate_manifests": {
      "key": "src/shared/utils/manifest_aggregator.py::aggregate_manifests",
      "name": "aggregate_manifests",
      "type": "FunctionDef",
      "file": "src/shared/utils/manifest_aggregator.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Finds all domain-specific manifest.yaml files and merges them.",
      "docstring": "Finds all domain-specific manifest.yaml files and merges them.\n\nThis function is the heart of the modular manifest system. It reads the\nsource structure to find all domains, then searches for a manifest in each\ndomain's directory, aggregating their contents.\n\nArgs:\n    repo_root (Path): The absolute path to the repository root.\n\nReturns:\n    A dictionary representing the aggregated manifest, primarily focused\n    on compiling a unified list of 'required_capabilities'.",
      "calls": [
        "debug",
        "error",
        "exists",
        "extend",
        "get",
        "info",
        "list",
        "read_text",
        "safe_load",
        "set",
        "sorted"
      ],
      "line_number": 16,
      "is_async": false,
      "parameters": [
        "repo_root"
      ],
      "last_updated": "2025-08-17T19:00:37.280435+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "3424b54f3633ba0a128f765512d3694b531ca5dc1d7218058d3dfedb8b9e5880"
    },
    "src/shared/utils/import_scanner.py::scan_imports_for_file": {
      "key": "src/shared/utils/import_scanner.py::scan_imports_for_file",
      "name": "scan_imports_for_file",
      "type": "FunctionDef",
      "file": "src/shared/utils/import_scanner.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Parse a Python file and extract all imported module paths.",
      "docstring": "Parse a Python file and extract all imported module paths.\n\nArgs:\n    file_path (Path): Path to the file.\n\nReturns:\n    List[str]: List of imported module paths.",
      "calls": [
        "append",
        "isinstance",
        "parse",
        "read_text",
        "walk",
        "warning"
      ],
      "line_number": 19,
      "is_async": false,
      "parameters": [
        "file_path"
      ],
      "last_updated": "2025-08-17T19:00:37.282529+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "42bb5532dfbc0b03134979db387ac69dab213de0539724e125ec4cdb88080722"
    },
    "src/shared/utils/parsing.py::parse_write_blocks": {
      "key": "src/shared/utils/parsing.py::parse_write_blocks",
      "name": "parse_write_blocks",
      "type": "FunctionDef",
      "file": "src/shared/utils/parsing.py",
      "domain": "shared",
      "agent": "generic_agent",
      "capability": "unassigned",
      "intent": "Extracts all [[write:...]] blocks from LLM output.",
      "docstring": "Extracts all [[write:...]] blocks from LLM output.\n\nThis function is robust and handles both [[end]] and [[/write]] as valid terminators\nto accommodate different LLM habits.\n\nArgs:\n    llm_output (str): The raw text output from a language model.\n\nReturns:\n    A dictionary mapping file paths to their corresponding code content.",
      "calls": [
        "findall",
        "strip"
      ],
      "line_number": 9,
      "is_async": false,
      "parameters": [
        "llm_output"
      ],
      "last_updated": "2025-08-17T19:00:37.283747+00:00",
      "is_class": false,
      "base_classes": [],
      "structural_hash": "37291692a6c893a9df4f553fd55414349bd2ec0142680181140f7d6990e94a74"
    }
  }
}