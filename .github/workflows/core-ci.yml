name: CORE CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build_and_test:
    name: Build & Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install deps
        run: poetry install --no-interaction --no-root

      - name: Lint (Ruff)
        run: poetry run ruff check .

      - name: Format check (Black)
        run: poetry run black --check .

      - name: Self-audit (KnowledgeGraph + Auditor)
        run: poetry run python -m src.core.capabilities

      - name: Tests (with coverage)
        run: poetry run pytest -q --cov=src --cov-report=xml --cov-fail-under=80

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: error
        
  governance:
    name: Governance & Drift Check
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python & Poetry
        uses: actions/setup-python@v5
        with:
          python-version: "3.12" # Use the latest supported Python for governance checks
      - run: pipx install poetry

      - name: Install deps
        run: poetry install --no-interaction --no-root

      - name: Generate Knowledge Graph Artifact
        run: poetry run core-admin guard kg-export

      - name: Detect Capability Drift (strict)
        run: |
          set -e
          poetry run core-admin guard drift --strict-intent --fail-on any --format json
