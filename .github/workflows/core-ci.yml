# .github/workflows/core-ci.yml
name: CORE CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write # Add permission to write comments on PRs

jobs:
  build_and_test:
    name: Build & Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install deps
        run: poetry install --no-interaction --no-root

      - name: Lint (Ruff)
        run: poetry run ruff check .

      - name: Format check (Black)
        run: poetry run black --check .

      - name: Tests (with coverage)
        run: poetry run pytest -q --cov=src --cov-report=xml --cov-fail-under=80

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: error

  governance:
    name: Governance & Drift Check
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python & Poetry
        uses: actions/setup-python@v5
        with:
          python-version: "3.12" # Use the latest supported Python for governance checks
      - run: pipx install poetry

      - name: Install deps
        run: poetry install --no-interaction --no-root

      # --- THIS IS THE NEW JOB ---
      - name: Check for Unassigned Capabilities
        id: capability_check
        run: |
          # 1. Generate the knowledge graph
          poetry run python -m src.system.tools.codegraph_builder
          # 2. Check for "unassigned" and fail if found
          if grep -q '"capability": "unassigned"' .intent/knowledge/knowledge_graph.json; then
            echo "::error::Found symbols with 'unassigned' capability. All capabilities must be explicitly declared."
            # Extract the relevant lines for a helpful PR comment
            grep -B 8 '"capability": "unassigned"' .intent/knowledge/knowledge_graph.json > unassigned_symbols.txt
            echo "report<<EOF" >> $GITHUB_OUTPUT
            cat unassigned_symbols.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Post PR comment on unassigned capabilities
        if: failure() && steps.capability_check.outputs.report && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const report = `${{ steps.capability_check.outputs.report }}`;
            const output = `
            #### üèõÔ∏è Unassigned Capability Detected
            This change introduces code with unassigned capabilities, violating the \`no_orphaned_logic\` principle.

            Please add a \`# CAPABILITY: your.capability.name\` comment above the symbol definition and declare it in the appropriate domain \`manifest.yaml\`.

            **Detected Unassigned Symbols:**
            \`\`\`json
            ${report}
            \`\`\`
            `;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });
      # --- END OF NEW JOB ---

      - name: Detect Capability Drift
        id: drift_check
        run: |
          set +e
          poetry run core-admin guard drift --strict-intent --fail-on any --format json > drift_report.json
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          # Make the report available for the next step
          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat drift_report.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Fail job on drift
        if: steps.drift_check.outputs.exit_code != '0'
        run: |
          echo "::error::Capability drift detected. See the report for details."
          exit 1
          
      - name: Post PR comment on drift (for PR run)
        if: failure() && steps.drift_check.outputs.exit_code != '0' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const report = JSON.parse('${{ steps.drift_check.outputs.report }}');
            const undeclared = report.undeclared_in_manifest.map(c => `- \`${c}\``).join('\n');
            const missing = report.missing_in_code.map(c => `- \`${c}\``).join('\n');
            
            const output = `
            #### üèõÔ∏è Constitutional Drift Detected
            This change introduces a mismatch between the declared constitution (\`.intent/\`) and the implemented code (\`src/\`).

            **Undeclared in Manifest:** (Found in code but not in a \`manifest.yaml\`)
            ${undeclared || "_None_"}

            **Missing in Code:** (Declared in a \`manifest.yaml\` but not found in code)
            ${missing || "_None_"}

            **To Fix:** Please add or remove the relevant \`# CAPABILITY:\` tags in the source code or update the corresponding domain's \`manifest.yaml\` file.
            `;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });

  pr_linter:
    name: PR Linter
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check PR Body for Intent & Justification
        id: check_body
        run: |
          # The PR body is available in the GITHUB_CONTEXT
          # We check if the "Intent & Justification" section still contains the placeholder comment.
          # If it does, the user likely hasn't filled it out.
          PR_BODY="${{ github.event.pull_request.body }}"
          if [[ "$PR_BODY" == *"<!--"* && "$PR_BODY" == *"REQUIRED"* ]]; then
            echo "missing_justification=true" >> $GITHUB_OUTPUT
          else
            echo "missing_justification=false" >> $GITHUB_OUTPUT
          fi

      - name: Post Nudge Comment
        if: steps.check_body.outputs.missing_justification == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### üìù Intent Required
            Thank you for the contribution!

            Please update the pull request description to include the **Intent & Justification** for this change. This is a constitutional requirement to ensure every change is traceable to a purpose.
            `;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });