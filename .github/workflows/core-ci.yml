name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # --- Install Poetry and ensure it's on PATH ---
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipx
          python -m pipx ensurepath
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          pipx install poetry
      - name: Poetry version
        run: poetry --version

      # (Optional but handy) Put the venv inside the repo so we can cache it
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      # Cache the virtualenv based on poetry.lock
      - name: Cache .venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Static checks
        run: |
          poetry run ruff check .
          poetry run black --check .

      - name: Run tests
        run: poetry run pytest -q --cov=src --cov-report=xml

      - name: Export knowledge graph
        run: |
          mkdir -p reports
          poetry run core-admin guard kg-export

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: core-reports
          path: |
            coverage.xml
            reports/knowledge_graph.json
